/***************************************************
Fraktions-IDs:
0 = Zivilist
1. Los Santos Police Derpartment
2. Federal Bureau of Investigation
3. San Andreas Medical Department
4. San Andreas News Reporter
5. San Andreas Ordnungsamt
6. Grove Street
7. Ballas
8. Fahrschule
9. Staat
10. Yakuza
11. V.L. Aztecas
12. La Cosa Nostra
13. Los Santos Vagos
14. Hitman Agency
15. NineDemons
16. Las Venturas Police Department
17. Wheelman Agency
18. United States Army
19. Terroristen
20. La Cosa Nostra
21. Triaden
22. Zollamt

Definition der Kassen:
Staat
Sana
Samd
Oamt
Fahrschule
Ballas
Grove
Yakuza
Aztecas
LCN
Vagos
Hitman
BBikerZ
Wheelmenk
TerrorK
OutlawzK
ndgradethaK

Job-IDs:
0 = Arbeitslos
1. Bauer
2. Busfahrer
3. Trucker
4. Pilot
5. KFZ-Mechatroniker
6. Anwalt
7. Straßenreiniger
8. Müllmann
9. Gärtner
10. Bauarbeiter
11. Schiffs-Fahrer
12. Geld-Transportfahrer
13. Eisverkäufer
14. Detektiv
15. Pizzalieferant
16. Taxifahrer
17. Drogendealer
18. Waffendealer
19. Taschendieb
20. Prostutierte
21. Wanted Hacker
22. Autodieb
//23. Zugfahrer
23. HotDog Verkäufer

Admin-Ränge:
0 = Normaler User | 1 = Supporter | 2 = Event-Supporter | 3 = Moderator | 4 = Administrator | 5 = Server-Manager | 6 = Projektleiter | 7 = Entwickler | 8 = Projektverwalter
/////////////////////////////
Spice begrenzung entfernen
CheckPlayerSpice
*****************************************************/
//#define WINTER_EVENT //weihnachtszeit ab 29 November rein machen
//#define OPENMP// Einkalmmern wen OpenMP genutzt wird
//#define _RUN_HAUPTTIMER_TEST_
#define GANG_FIGHT_PLAYERS 2//2 gangfight member
#define GANGFIGHT_DURATION 30 //40 Minutes gangfight zeit
#define PREIS_SCHEIDUNG 100000
#define SOUND_ALHAMBRA "http://sounds.lyd-roleplay.de/sounds/club.mp3"
#if defined WINTER_EVENT
    #define URL_LOGINMUSIC "http://sounds.lyd-roleplay.de/sounds/loginwinter.mp3"
#else
	#define URL_LOGINMUSIC "http://sounds.lyd-roleplay.de/sounds/login.mp3"
#endif
#define SOUND_HOSPITAL "http://sounds.lyd-roleplay.de/sounds/hospital.mp3"
#define URL_HOHO "http://sounds.lyd-roleplay.de/sounds/hoho.mp3"
#define SOUND_PURGE "http://server.lyd-roleplay.de/sounds/purge.mp3"
#define STREAMER_MAX_OBJECTS 900

#define HAUSTIER_OFFSET 1.5
#define USE_NPCS
#define VW_ALL -1
#define VW_MAIN 0
#define VW_PAINTBALLLOBBY 39
#define VW_ALHAMBRAINTERIOR 41
#define VW_CASINOINTERIOR 58
#define VW_PAINTBALLGYMLS 10000
#define VW_DUST2 93
#define VW_DERBYMAP1 100
#define VW_DERBYMAP2 101

#define TS_SERVER_GROUP_MITGLIED 10
enum
{
	VW_EVIDENCEROOMINTERIOR = 2000,
	VW_ADMINPRISON,
	VW_LSPD,
	VW_SAMDINTERIOR, // Lobby
	VW_SAMDINTERIOR2, // First Floor
	VW_CITYHALLINTERIOR,
	VW_REGISTRATIONOFFICE,
	VW_POOINTERIOR,
	VW_LSPDINTERIOR,
	VW_FBIINTERIOR,
	VW_YAKUZAINTERIOR,
	VW_LCNINTERIOR,
    VW_GSFINTERIOR,
	VW_GOVERNMENTINTERIOR,
	VW_BANKINTERIORLS,
	VW_BANKINTERIORLS2,
	VW_CLUBINTERIORLS,
	VW_BANKINTERIORLV,
    VW_TRIADSINTERIOR,
    VW_PAINTBALLBASEMENT,
    VW_PARCOUR,
    VW_NINEDEMONSINTERIOR,
    VW_CASINOROB
}

#define INFO_STRING "* Benutze: {00CC00}"

stock _g_str[145];
#define SCMFormatted(%0,%1,%2,%3); \
    format(_g_str, sizeof(_g_str), %2, %3) && \
    SendClientMessage(%0, %1, _g_str);

new GasMax[] = {
45, //"Landstalker",
40,//"Bravura",
50,//"Buffalo",
110,//"Linerunner",
40,//"Pereniel",
45,//"Sentinel",
200,//"Dumper",
80,//"Firetruck",
75,//"Trashmaster",
60,//"Stretch",
40,//"Manana",
60,//"Infernus",
50,//"Voodoo",
90,//"Pony",
90,//"Mule",
55,//"Cheetah",
70,//"Ambulance",
60,//"Leviathan",
60,//"Moonbeam",
50,//"Esperanto",
45,//"Taxi",
40,//"Washington",
45,//"Bobcat",
64,//"Mr Whoopee",
60,//"BF Injection",
250,//"Hunter",
45,//"Premier",
80,//"Enforcer",
70,//"Securicar",
55,//"Banshee",
50,//"Predator",
80,//"Bus",
100,//"Rhino",
50,//"Barracks",
55,//"Hotknife",
100,//"Trailer",
58,//"Previon",
95,//"Coach",
48,//"Cabbie",
45,//"Stallion",
70,//"Rumpo",
100,//"RC Bandit",
50,//"Romero",
130,//"Packer",
120,//"Monster Truck",
40,//"Admiral",
50,//"Squalo",
150,//"Seasparrow",
15,//"Pizzaboy",
100,//"Tram",
100,//"Trailer",
60,//"Turismo",
55,//"Speeder",
60,//"Reefer",
60,//"Tropic",
160,//"Flatbed",
80,//"Yankee",
20,//"Caddy",
48,//"Solair",
75,//"Berkley's RC Van",
100,//"Skimmer",
30,//"PCJ-600",
15,//"Faggio",
30,//"Freeway",
100,//"RC Baron",
100,//"RC Raider",
60,//"Glendale",
55,//"Oceanic",
45,//"Sanchez",
80,//"Sparrow",
95,//"Patriot",
35,//"Quad",
50,//"Coastguard",
50,//"Dinghy",
50,//"Hermes",
55,//"Sabre",
90,//"Rustler",
60,//"ZR-350",
60,//"Walton",
58,//"Regina",
55,//"Comet",
0,//"BMX",
50,//"Burrito",
100,//"Camper",
60,//"Marquis",
35,//"Baggage",
150,//"Dozer",
300,//"Maverick",
100,//"News Chopper",
80,//"Rancher",
80,//"FBI Rancher",
50,//"Virgo",
50,//"Greenwood",
100,//"Jetmax",
70,//"Hotring",
80,//"Sandking",
50,//"Blista Compact",
80,//"Police Maverick",
80,//"Boxville",
58,//"Benson",
80,//"Mesa",
100,//"RC Goblin",
75,//"Hotring Racer",
75,//"Hotring Racer",
75,//"Bloodring Banger",
75,//"Rancher",
60,//"Super GT",
45,//"Elegant",
110,//"Journey",
0,//"Bike",
0,//"Mountain Bike",
50,//"Beagle",
50,//"Cropdust",
50,//"Stunt",
140,//"Tanker",
100,//"RoadTrain",
50,//"Nebula",
50,//"Majestic",
48,//"Buccaneer",
500,//"Shamal",
175,//"Hydra",
30,//"FCR-900",
30,//"NRG-500",
48,//"HPV1000",
135,//"Cement Truck",
75,//"Tow Truck",
60,//"Fortune",
60,//"Cadrona",
65,//"FBI Truck",
55,//"Willard",
30,//"Forklift",
35,//"Traktor",
60,//"Combine",
50,//"Feltzer",
50,//"Remington",
55,//"Slamvan",
55,//"Blade",
100,//"Freight",
100,//"Streak",
100,//"Vortex",
45,//"Vincent",
60,//"Bullet",
58,//"Clover",
60,//"Sadler",
90,//"Firetruck",
60,//"Hustler",
50,//"Intruder",
40,//"Primo",
130,//"Cargobob",
60,//"Tampa",
60,//"Sunrise",
60,//"Merit",
100,//"Utility",
50,//"Nevada",
80,//"Yosemite",
50,//"Windsor",
100,//"Monster Truck",
100,//"Monster Truck",
55,//"Uranus",
55,//"Jester",
60,//"Sultan",
60,//"Stratum",
45,//"Elegy",
150,//"Raindance",
100,//"RC Tiger",
50,//"Flash",
50,//"Tahoma",
55,//"Savanna",
60,//"Bandito",
100,//"Freight",
100,//"Trailer",
20,//"Kart",
20,//"Mower",
200,//"Duneride",
35,//"Sweeper",
50,//"Broadway",
50,//"Tornado",
200,//"AT-400",
200,//"DFT-30",
65,//"Huntley",
60,//"Stafford",
30,//"BF-400",
70,//"Newsvan",
30,//"Tug",
100,//"Trailer",
50,//"Emperor",
30,//"Wayfarer",
60,//"Euros",
90,//"Hotdog",
60,//"Club",
100,//"Trailer",
100,//"Trailer",
200,//"Andromada",
100,//"Dodo",
100,//"RC Cam",
50,//"Launch",
60,//"Streifenwagen",
60,//"Streifenwagen",
60,//"Streifenwagen",
75,//"Polizei Ranger",
50,//"Picador",
75,//"S.W.A.T. Van",
55,//"Alpha",
55,//"Phoenix",
50,//"Glendale",
50,//"Sadler",
100,//"Luggage Trailer",
100,//"Luggage Trailer",
100,//"Stair Trailer",
52,//"Boxville",
100,//"Farm Plow",
100//"Utility Trailer"
};

//============================================================================//
#define ERROR_ADMIN					"{AA3333}Du besitzt nicht die benötigten Rechte."
#define ERROR_FRAKTION              "{F81414}Du hast dafür keine Berechtigung!"
#define ERROR_OFFLINE				"{AFAFAF}Dieser Spieler ist momentan nicht online."
#define ERROR_LOGGED                "{AFAFAF}Du bist nicht eingeloggt!"
//============================================================================//
//============================================================================//
#define	MAX_FRACS           23
#define RANG_LEADER			6
//============================================================================//
//============================================================================//
#define MAX_GATES       			100
new SERVER_GATE[MAX_GATES];
//============================================================================//
//=============================================================================//
enum e_RangData
{
	fsID,
	fRangName0[32],
	fRangName1[32],
	fRangName2[32],
	fRangName3[32],
	fRangName4[32],
	fRangName5[32],
	fRangName6[32],
};
new fRang[MAX_FRACS][e_RangData];
//=============================================================================//

new DialogString[4096];
new gSQL;
new gWebSQL;
new MySQLConnected = 0;
new tMySQL;
new savewetterid;

// Global vars
new JAIL_TIMEOUT = 120;


enum {
    WEEKDAY_SATURDAY,
    WEEKDAY_SUNDAY,
    WEEKDAY_MONDAY,
    WEEKDAY_TUESDAY,
    WEEKDAY_WEDNESDAY,
    WEEKDAY_THURSDAY,
    WEEKDAY_FRIDAY
}

enum {
    WEAPON_DEPOT_OWN,
    WEAPON_DEPOT_OTHER,
    WEAPON_DEPOT_CLOSED,
    WEAPON_DEPOT_NONE
}

enum {
    ADMIN_RANK_NONE,
    ADMIN_RANK_SUP,
    ADMIN_RANK_SUP_EVENT,
    ADMIN_RANK_MOD,
    ADMIN_RANK_ADMIN,
    ADMIN_RANK_MANAGER,
    ADMIN_RANK_CHIEF,
    ADMIN_RANK_DEVELOPER,
    ADMIN_RANK_PROJEKTVERWALTER
}

//Badwords für Badwordsystem
new word[27][]= {
	{"Hurensohn"},
	{"Bastard"},
	{"Ficker"},
	{"Hurentochter"},
	{"Wichser"},
	{"Wixxer"},
	{"acab"},
	{"Missgeburt"},
	{"Schwuchtel"},
	{"Schlampe"},
	{"Arschgeburt"},
    {"Nigga"},
    {"Niga"},
    {"Nutte"},
    {"Fotze"},
    {"Adolf"},
    {"Hitler"},
    {"Bastart"},
    {"Jude"},
    {"Opfer"},
    {"lauch"},
    {"cuxxl"},
    {"schwein"},
    {"arsch"},
    {"idiot"},
    {"fick"},
    {"hund"}
};

new const g_armoredVehicleModels[] = {407, 411, 427, 451, 433, 490, 497, 596, 528, 597, 598, 599, 601, 541, 560};

enum E_SHISHA_PIPE {
    SHISHA_PIPE_NAME[30],
    SHISHA_PIPE_COST,
    SHISHA_PIPE_HEX_COLOR[9]
}

new const g_shishaPipes[][E_SHISHA_PIPE] = {
    {"Doppelapfel",     200,    "{228B22}"},
    {"Erdbeere",        300,    "{FB1C3B}"},
    {"Wassermelone",    400,    "{91A120}"},
    {"Cherry",          400,    "{932F3B}"},
    {"Cold Lime",       500,    "{D8F868}"},
    {"Traube-Minze",    600,    "{C3D038}"},
    {"Exotic Lemon",    700,    "{F8D83B}"},
    {"Minze",           800,    "{67A524}"},
    {"Granatapfel",     1000,   "{B22A44}"},
    {"Drachenfrucht",   1100,   "{E770AE}"},
    {"Blue NRG",        1200,   "{2BFFC4}"}
};

enum E_EXECUTIVE_NAME {
    EXECUTIVE_NAME[20],
    EXECUTIVE_FACTION
}


#define MAX_DEATH_NOTICE 50

enum e_DeathNotice {
    DN_iPickup,
    DN_hashOwner,
    //Text:DN_tdText,
    Text3D:DN_t3dLabel,
    DN_tTimer
}

new g_iDeathNotice = -1, g_DeathNotice[MAX_DEATH_NOTICE][e_DeathNotice];

new const g_executiveNames[][E_EXECUTIVE_NAME] = {
    {"LS-Polizeibeamter", 1},
    {"FBI-Agent", 2},
    {"LV-Polizeibeamter", 16},
    {"Soldat", 18},
    {"Zollbeamter", 22}
};

new const g_ChatNames[][20] = {
    "Global-Chat",
    "Fraktions-Chat",
    "Job-Chat",
    "Clubmitglied-Chat",
    "Join/Leave-Chat",
    "Serverinfo-Chat",
    "Beamten-Chat"
};

enum E_NEON {
    NEON_NAME[5],
    NEON_OBJECT_ID,
    NEON_HEX_COLOR[9]
}

new const g_NeonLights[][E_NEON] = {
    {"Rot",  18647, "{FF0000}"},
    {"Blau", 18648, "{1018EF}"},
    {"Grün", 18649, "{14FC0D}"},
    {"Gelb", 18650, "{F6FF3F}"},
    {"Pink", 18651, "{F230FD}"},
    {"Weiß", 18652, "{FFFFFF}"}
};

enum E_EVENT_REWARD {
    EVENT_REWARD_POINTS,
    EVENT_REWARD_NAME[40]
}

new const g_EventRewards[][E_EVENT_REWARD] = {
    {25, "+5 Respektpunkte"},
    {50, "+1 Level-Up"},
    {75, "$800.000 Cash"},
    {100, "Ein Fahrzeug aus dem Motorradhandel"},
    {175, "Ein Fahrzeug aus dem Flugzeughandel"},
    {215, "Ein Fahrzeug aus dem Luxus-Autohaus"},
    {250, "+1 Skill-Up nach Wahl"},
    {300, "Bronze Premium (1 Monat)"},
    {350, "Wunschfahrzeug"},
    {400, "+1 Carkey"},
    {475, "Namechange"},
    {500, "Neon Premium (Permanent)"},
    {700, "Silber Premium (3 Monate)"}
};

enum {
    SAFEBOX_DRUGS,
    SAFEBOX_MATS,
    SAFEBOX_WCODES,
    SAFEBOX_SPICE,
    //SAFEBOX_KRAUTER,
    SAFEBOX_GANGSAMEN
}

enum {
    SAFEBOX_ACTION_TAKE,
    SAFEBOX_ACTION_STORE
}

new const g_SafeboxItems[][] = {
    "Drogen",
    "Waffenteile",
    "Wantedcodes",
    "Spice",
    //"Kräuter",
    "Drogensamen"
};

enum E_SELL_GUNS {
    SELL_GUN_NAME[20],
    SELL_GUN_ID,
    SELL_GUN_MATS,
    SELL_GUN_AMMO,
    SELL_GUN_INDEF_ARTICLE[6]
}

new const g_sellGuns[][E_SELL_GUNS] = {
    {"Schlagring",         1,  80,   1, "einen"},
    {"Baseballschläger",   5, 100,   1, "einen"},
    {"Desert Eagle",      24, 210, 200, "eine"},
    {"MP5",               29, 230, 200, "eine"},
    {"Shotgun",           25, 230, 200, "eine"},
    {"M4",                31, 280, 200, "eine"},
    {"AK-47",             30, 280, 200, "eine"},
    {"Sniper",            34, 400, 100, "eine"}
};

enum {
    CARKEY_TYPE_NORMAL,
    CARKEY_TYPE_MOVE1,
    CARKEY_TYPE_MOVE2
}

enum {
    ASETTING_GLOBALCHAT,
    ASETTING_GANGFIGHTBLOCK,
    ASETTING_ROBBLOCK,
    ASETTING_REGBLOCK,
    ASETTING_EINLOGBLOCK,
    ASETTING_CLUBCHAT
}

enum E_ASETTING {
    ASETTING_NAME[20],
    ASETTING_RANK,
    bool:ASETTING_TOGGLE
}

new g_aSettings[][E_ASETTING] = {
    {"Globaler Chat", 3, true},
    {"Gangfightsperre", 3, false},
    {"Überfallsperre", 3, false},
    {"Regsperre", 1, false},
    {"Einloggsperre", 5, false},
    {"Clubchat",3,true}
};

new jobNames[][] = {
    "Arbeitslos",
    "Bauer",
    "Busfahrer",
    "Trucker",
    "Pilot",
    "KFZ-Mechaniker",
    "Anwalt",
    "Straßenreiniger",
    "Müllmann",
    "Gärtner",
    "Bauarbeiter",
    "Schiffs-Fahrer",
    "Geld-Transportfahrer",
    "Eisverkäufer",
    "Detektiv",
    "Pizzalieferant",
    "Taxifahrer",
    "Drogendealer",
    "Waffendealer",
    "Taschendieb",
    "Prostituierte",
    "Wanted-Hacker",
    "Autodieb",
    //"Zugfahrer",
    "HotDog-Verkäufer"
};

new factionNames[][] = {
    "Zivilist",
    "LSPD",
    "FBI",
    "SAMD",
    "SA-NA",
    "Ordnungsamt",
    "Grove Street",
    "Ballas",
    "Fahrschule (Deleted)",
    "Regierung",
    "Yakuza",
    "Aztecas",
    "Cali Kartell",
    "Vagos",
    "Agency",
    "Nine Demons",
    "LVPD",
    "Wheelman (Deleted)",
    "Army",
    "Terroristen (Deleted)",
    "La Cosa Nostra",
    "Triaden",
    "Zollamt"
};

new rskins[] = {
	3,
	5,
	7,
	14,
	18,
	20,
	21,
	22,
	23,
	24,
	25,
	26,
	28,
	29,
	33,
	35,
	36,
	37,
	45,
	53,
	55,
	56,
	60,
	66,
	67,
	68,
	69,
	72,
	88,
	89,
	90,
	94,
	95,
	97,
	98,
	101,
	132,
	133,
	134,
	135,
	136,
	137,
	144,
	146,
	154,
	158
};

enum StreetInfo {Float:StreetX, Float:StreetY, Float:StreetZ,Float:StreetRZ}
new e_streets[][StreetInfo] = {
    {2710.6577,-2399.2236,13.6328,90.0542},
    {2607.1516,-2043.2106,23.7914,90.6809},
    {2649.1516,-1931.2104,13.3592,90.6809},
    {2620.2048,-1726.4554,11.6326,89.4275},
    {2639.8909,-1599.3020,19.6223,90.0543},
    {2297.8242,-1652.1158,14.7712,29.8399},
    {2297.3486,-1886.1920,13.5980,198.2953},
    {1899.6946,-2045.3514,13.5391,272.2427},
    {1467.2831,-2247.2329,13.5469,254.0692},
    {366.3965,-779.0180,15.2163,250.3091},
    {12.5206,-721.8804,6.5169,244.0424},
    {-525.7190,-910.5583,56.2566,228.0622},
    {-651.5126,-1525.1968,21.6728,239.6557},
    {-1075.3130,-2597.2083,76.6887,214.5888},
    {-1894.0760,-1760.5702,29.5470,356.5301},
    {-1549.4672,-1528.4325,38.0859,311.5301},
    {-2149.1873,-857.5145,32.0234,275.3035},
    {-1884.9939,-965.2845,32.0234,5.3036},
    {-1628.6200,-1055.8572,102.9002,10.3169},
    {-2747.7007,-321.2148,7.1875,318.6164},
    {-2145.2102,-1027.6731,32.5727,302.8771},
    {-2898.6309,-1183.9711,9.4752,97.1211},
    {-2522.5811,-1111.8091,177.6271,185.7853},
    {-2329.6550,-1410.7445,359.2854,247.5125},
    {-2547.2505,-1797.6544,372.3458,215.5522},
    {-2455.9626,-2074.9133,128.6862,234.6657},
    {-2129.0859,-2398.8142,30.6250,229.6523},
    {-2380.8767,-2256.1882,15.3336,260.0459},
    {-1914.2629,-2612.7231,45.6742,160.7534},
    {-1422.6787,-2916.2332,47.1980,266.6259},
    {-784.0634,-2765.4150,74.3939,266.6259},
    {17.1666,-2648.6929,40.4764,277.9060},
    {-285.7090,-2103.2466,39.9406,303.9129},
    {-61.8971,-1595.9540,2.6878,316.7597},
    {-175.8548,-953.2057,31.6424,151.7274},
    {42.5013,-582.9857,6.8823,88.3609},
    {813.1442,-787.9850,69.5836,24.2474},
    {955.5831,-956.6793,39.8645,27.5736},
    {1126.2563,-1134.4840,23.8281,357.1799},
    {362.5547,-2017.2710,7.8359,266.5532},
    {122.1970,-1680.7672,9.8076,277.2791},
    {423.9523,-1766.4540,5.5654,89.4457},
    {802.2222,-1699.9329,13.5469,355.9265},
    {1154.0353,-1132.7813,23.8281,356.8665},
    {1016.8257,-1312.2988,13.5469,265.9991},
    {780.2388,-1387.2576,13.6624,265.9991},
    {744.2134,-1578.8414,14.2230,357.8791},
    {549.3126,-1571.6200,16.1797,266.9391},
    {404.7155,-1658.9923,29.3716,301.7195},
    {290.7155,-1502.9923,32.9688,301.7195},
    {-2525.6599,-496.8818,85.2639,284.7993},
    {-2632.1421,-368.3360,13.9708,285.7393},
    {-1998.0101,-62.4685,35.3203,304.2027},
    {-2070.4829,23.8621,35.3203,203.7178},
    {-2232.4980,-63.4663,35.3203,28.4177},
    {-2468.0000,-217.1594,31.2327,118.4178},
    {-2715.0806,-77.0555,4.3359,118.4178},
    {-2416.0647,81.9163,35.1641,127.6249},
    {-2153.8975,313.2383,35.3203,127.6249},
    {-1994.7053,500.5745,35.1719,254.6695},
    {-2166.9824,201.2960,35.3332,184.2184},
    {-2752.3445,33.3287,7.1801,184.2184},
    {-2485.2439,167.7875,7.2732,126.2512},
    {-2735.0881,283.9780,4.5640,4.5317},
    {-2818.0000,552.9558,5.4536,184.5317},
    {-2580.9556,461.7523,14.6094,184.5317},
    {-2394.6868,551.9373,25.0656,120.0317},
    {-2083.1008,498.8426,35.1719,184.5317},
    {-1550.7592,507.6942,7.1797,184.5317},
    {-1818.3257,597.6375,35.1719,184.5317},
    {-2163.9133,558.0456,35.1719,184.5317},
    {-2589.3062,381.0439,9.9012,184.5317},
    {-2846.1292,452.5639,4.5000,184.5317},
    {-2589.8030,556.2953,14.6094,157.2505},
    {-2333.1497,663.3029,39.9629,2.1455},
    {-1971.3844,595.4547,35.1719,312.1320},
    {-1704.7144,721.6650,24.8906,222.1320},
    {-2042.2545,815.0356,54.7958,0.5062},
    {-2425.9578,700.1835,35.1719,45.5063},
    {-2831.7056,663.6365,16.0306,297.9594},
    {-2734.1001,876.9486,68.3838,297.9594},
    {-2417.7434,915.1022,45.6416,314.8795},
    {-2158.3992,910.1367,80.0078,179.6866},
    {-1884.8993,941.5956,35.1719,358.4333},
    {-1649.1198,941.5688,19.9732,356.4807},
    {-1596.1217,1178.1063,7.1875,155.4147},
    {-1845.3998,1092.4623,45.4453,155.1014},
    {-2163.1165,1086.9011,80.0078,139.2417},
    {-2566.5823,1115.5986,55.8217,22.1019},
    {-2873.6965,1141.3085,18.5557,113.3551},
    {-2077.8376,1310.4609,7.1875,155.0289},
    {-2495.1924,1363.4413,7.3723,265.7091},
    {-2680.8286,1790.4934,68.3921,179.5416},
    {-2482.6489,2325.0852,4.9844,96.8208},
    {-2390.1008,2662.8674,60.1005,99.6409},
    {-1505.6504,2663.2983,55.8359,103.5179},
    {-1282.2556,1842.6110,39.5787,319.8929},
    {-1624.2013,2052.3218,18.8615,300.8051},
    {-1445.2184,2387.9011,53.7177,140.8214},
    {-1186.4796,2089.2637,82.0937,80.0713},
    {-1004.4796,1725.2635,30.9709,80.0713},
    {-1088.1490,1260.2056,37.4515,80.0713},
    {-819.4953,1065.6548,33.1660,170.0714},
    {-761.5262,727.6758,18.1755,61.6570},
    {-576.5164,1103.4902,11.1509,151.6571},
    {-459.6909,1590.2502,36.7143,60.4037},
    {-552.4805,2010.6199,60.3828,60.4037},
    {-452.0264,2291.2773,54.0804,60.4037},
    {-833.9076,2737.1165,45.6528,38.8549},
    {-785.8416,2412.1753,157.0305,154.7179},
    {-588.5895,2372.4731,82.0344,280.0524},
    {-384.8190,2060.4561,61.3944,10.0525},
    {-313.8190,2516.4561,34.6439,10.0525},
    {-229.8190,2692.3311,62.6875,10.0525},
    {-1.6480,2653.3892,61.9747,10.0525},
    {26.9352,2291.7039,23.4423,286.4294},
    {138.1341,2052.4675,17.0167,286.4294},
    {-103.2663,1730.1583,20.2780,251.7795},
    {-327.8126,1321.9342,52.9044,354.5538},
    {-59.0721,1136.0830,19.7422,174.8673},
    {-203.1343,1004.2946,19.7209,174.8673},
    {-96.1042,1248.6298,15.0732,174.8673},
    {330.6764,1366.8502,7.7904,84.8672},
    {569.3036,1070.6971,28.3050,45.5073},
    {-125.5113,829.0718,20.6630,45.5073},
    {-232.8801,530.6381,12.8894,90.5073},
    {-169.6414,221.4666,10.7082,90.5073},
    {165.6238,-78.3997,1.5781,181.4473},
    {291.0173,-130.3503,1.5781,356.2928},
    {353.4652,-387.7117,18.3642,355.4938},
    {451.3275,-603.2820,36.8145,85.4939},
    {424.0719,-1025.4764,93.0087,85.4939},
    {368.6127,-1221.0846,53.1854,57.3689},
    {513.4401,-1254.3446,16.1829,322.6833},
    {521.3947,-1451.9801,15.1704,114.7989},
    {437.8904,-1524.3907,30.4547,103.9082},
    {554.4604,-1725.4269,13.0560,193.9082},
    {813.7932,-1790.0930,13.6507,174.4814},
    {1043.1820,-1671.1702,13.5469,233.7019},
    {868.1570,-1573.4750,13.5501,255.6355},
    {1068.4745,-1359.4906,13.5469,321.3057},
    {817.7346,-1389.0508,13.8669,185.3757},
    {1068.9210,-1197.2433,19.3451,0.2898},
    {828.6208,-1133.8574,23.8281,92.4107},
    {633.3871,-895.6879,62.8616,9.6174},
    {676.3800,-562.9138,16.3359,99.6174},
    {553.0574,-408.9074,28.4484,9.3040},
    {683.2264,-149.9398,23.6978,9.3040},
    {1417.3083,659.5626,10.8203,9.3040},
    {1705.7740,1139.3597,10.8203,97.4241},
    {1960.5747,1461.1869,10.8203,0.9165},
    {1658.7578,1864.7065,10.8203,357.0839},
    {1701.2795,2164.0046,10.8203,87.0840},
    {1534.9891,2304.3879,10.8203,1.1573},
    {1262.5144,2581.3469,10.8203,1.1573},
    {1093.7128,2046.4473,10.8203,91.1573},
    {1083.8698,1806.6479,10.8203,179.7590},
    {1121.6136,1184.7223,10.8203,147.0645},
    {1064.4672,820.8843,10.8203,43.9395},
    {1096.8879,567.3754,20.0309,189.1591},
    {1283.0674,320.7089,19.5547,158.7655},
    {1304.3268,-84.4554,36.5670,219.5527},
    {1320.7611,-366.2163,3.0623,211.7193},
    {1315.8318,-713.7991,92.0019,238.4453},
    {1297.1235,-939.1157,40.3249,355.3724},
    {1283.1031,-1133.3723,23.8281,355.3724},
    {1268.0652,-1387.5887,13.3572,269.1324},
    {1197.8877,-1579.0613,13.5469,268.8191},
    {1236.6910,-1846.1390,13.5469,91.6391},
    {1685.5624,-1154.2527,23.8281,269.9999},
    {1577.1124,-1291.7788,17.4380,356.7941},
    {1675.0599,-1434.5731,13.5469,86.7941},
    {1647.1814,-1590.8285,28.2558,356.7941},
    {1574.6523,-1725.4520,13.5469,86.7941},
    {1303.8079,-2440.3955,7.8359,87.7341},
    {1346.3989,-2049.5002,57.0493,87.7341},
    {1379.4232,-1725.5723,13.5469,87.7341},
    {1413.6664,-1585.6499,13.5550,87.7341},
    {1421.7189,-1233.9417,13.5469,92.1208},
    {1436.4200,-1040.9515,23.8281,92.1208},
    {1510.3727,-800.9271,73.2554,92.1208},
    {1523.9075,-321.0798,6.5827,2.1208},
    {1541.0024,118.4545,29.5238,2.1208},
    {1581.5426,374.7631,20.2266,180.8676},
    {1613.7740,863.6445,6.9689,0.8674},
    {1613.1414,1125.9031,10.8203,0.8674},
    {1753.1470,1447.5671,11.9402,0.8674},
    {1607.2933,1865.2313,10.8203,0.8674},
    {1607.8710,2167.3794,10.8125,180.8676},
    {1610.2885,2441.9072,7.5379,180.8676},
    {1610.5319,2724.9875,10.8203,0.8674},
    {1874.5923,2705.6792,10.8203,191.5210},
    {1877.2610,2490.7808,7.2607,191.5210},
    {1831.4979,2039.0698,8.8219,175.5408},
    {1828.4979,1446.0698,12.8375,175.5408},
    {1842.6553,1125.2915,11.8677,265.5408},
    {1830.2512,864.6233,10.4428,85.5408},
    {1701.1224,130.6337,31.8104,83.3474},
    {1838.8097,-329.6379,42.8649,24.9943},
    {1849.8922,-990.8463,36.7508,62.9805},
    {1880.6963,-1143.3427,23.9920,92.7475},
    {1871.0504,-1333.9833,13.5526,86.1675},
    {1799.3903,-1604.3960,13.5469,86.1675},
    {1800.1440,-1849.2487,13.5781,93.6875},
    {1791.3396,-2157.8992,13.5469,93.6875},
    {1998.2051,-2665.2205,9.7538,93.6875},
    {2002.4839,-2160.1006,13.5469,92.7475},
    {2059.2109,-1944.9780,13.5469,92.1934},
    {2064.2878,-1665.3854,13.5391,88.7466},
    {2037.0038,-1453.3475,16.8777,87.8066},
    {2036.7283,-1253.0206,23.9844,89.0599},
    {2032.2511,-974.0262,40.7741,89.0599},
    {2004.8601,45.8105,31.0529,89.0599},
    {2012.1024,342.5050,28.4892,73.3931},
    {1997.2524,864.6265,7.1627,92.5066},
    {1993.0992,1265.3784,10.8203,88.7467},
    {2010.0013,1719.9318,10.8203,88.7467},
    {1999.5709,2016.0203,10.8203,88.7467},
    {1985.7108,2387.0171,10.8203,88.7467},
    {1986.0465,2734.0083,10.8203,88.7467},
    {2327.6638,2222.9705,10.8281,88.7467},
    {2323.7219,1886.9626,10.8119,88.7467},
    {2266.0889,1525.9556,10.8203,88.7467},
    {2196.2949,1201.7614,10.8203,88.7467},
    {2167.7224,640.0232,10.8203,95.6401},
    {2154.2524,47.6122,26.3659,95.6401},
    {2164.2388,-379.5015,57.7820,97.8335},
    {2164.2388,-996.5015,62.9620,97.8335},
    {2155.3489,-1294.0913,23.9750,97.8335},
    {2153.7273,-1623.8635,13.7281,7.8334},
    {2145.7717,-1887.9860,13.5469,7.8334},
    {2108.3027,-2308.3188,13.5469,7.8334},
    {2423.5662,-2448.8877,13.6421,50.7605},
    {2379.7595,-2042.4424,14.9782,90.5542},
    {2467.3242,-1725.0436,13.5469,90.5542},
    {2552.0000,-1436.6307,33.5215,90.0726},
    {2507.6121,-1142.6307,39.7870,90.0726},
    {2439.6675,-968.7369,79.8481,93.6879},
    {2375.8840,-647.6301,127.9334,93.6879},
    {2411.7002,47.8930,26.4844,93.6879},
    {2455.2056,332.8844,32.2540,353.7335},
    {2496.7822,1065.9252,10.8125,270.0726},
    {2536.3984,1367.2635,10.8203,265.9992},
    {2476.5684,1706.0017,10.8203,90.8442},
    {2431.2905,2045.4457,10.8203,90.8442},
    {2468.9287,2764.8552,10.8203,91.1575},
    {2383.0959,2406.1243,10.8203,91.1575},
    {2720.2712,2107.1379,14.0347,90.5308},
    {2752.6108,1467.6945,12.5617,311.8433},
    {2662.1501,766.5666,10.8203,91.4708},
    {2645.5271,52.0025,26.3816,93.0375},
    {2690.1094,-1079.3951,69.2969,88.0241},
    {2691.3467,-1250.8083,56.6225,88.3375}

};



enum {
    EVIDENCEROOM_STATUS_IDLE,
    EVIDENCEROOM_STATUS_ONGOING,
    EVIDENCEROOM_STATUS_COOLDOWN
}

enum E_EVIDENCEROOM_HEIST {
    EVIDENCEROOM_HEIST_STATUS,
    EVIDENCEROOM_HEIST_RAIDER,
    EVIDENCEROOM_HEIST_TIMER
}

new g_evidenceRoomHeist[E_EVIDENCEROOM_HEIST];

enum {
    WHEELMAN_STATUS_NONE,
    WHEELMAN_STATUS_HAS_OFFER,
    WHEELMAN_STATUS_ESCAPING
}

enum {
    THREAD_DUMMY,

    THREAD_CONNECTION_CHECK1,
    THREAD_CONNECTION_CHECK2,

    THREAD_COMMIT,

    THREAD_ISIPBAN,
    THREAD_ADDIPBAN,
    THREAD_ISIPBANNED,
    THREAD_ISWHITELIST,
    THREAD_ISWHITELIST_CONNECT,
    THREAD_ADDWHITELIST,
    THREAD_TBAN,
    THREAD_ISVALIDSECURECUDE,
    THREAD_SELLHOUSE,
    THREAD_HAUSRAUSALLE,
    THREAD_CREATETANKE,
    THREAD_CREATEHOUSE,
    THREAD_CREATEHOTEL,
    THREAD_CREATEAPLATZ,
    THREAD_CHECKPLAYERNAMEACCOUNT,
    THREAD_CREATEPLAYERCAR,
    THREAD_SAVEPLAYERCAR,
    THREAD_CARSELL,
    THREAD_SBAN,
    THREAD_BAN,
    THREAD_IPBAN,
    THREAD_MITGLIEDER,
    THREAD_MITGLIEDER_AUSWAHL,
    THREAD_FRAKCHANGE,
    THREAD_ACCEPTMARRIAGE,
    THREAD_CHECK_SECURECODE,
    THREAD_SET_SECURECODE,
    THREAD_SET_STAATSANGEHORIGKEIT,
    THREAD_STARTBONUS,
    THREAD_DIALOGMEMBERS,
    THREAD_CONFIGBIZ_RAUSWERFEN,
    THREAD_CONFIGTANKE_RAUSWERFEN,
    THREAD_CONFIGHOUSE_RAUSWERFEN,
    THREAD_SAVEACCOUNT,
    THREAD_LOADPLAYER,
    THREAD_PWCHANGE,
    THREAD_DEAKTACC,
    THREAD_AKTACC,
    THREAD_BANKCHANGE,
    THREAD_BANKCHANGE2,
    THREAD_POSTCHANGE,
    THREAD_LOADPLAYERCARS,
    THREAD_CHECKACCOUNT,
    THREAD_CHECKNAME,
    THREAD_CREATEACCOUNT,
    THREAD_TANKESAVE,
    THREAD_HOUSESAVE,
    THREAD_ANGELSAVE,
    THREAD_BIZSAVE,
    THREAD_STATICBIZSAVE,
    THREAD_TANKELOADID,
    THREAD_TANKELOAD,
    THREAD_ANGELLOADID,
    THREAD_ANGELLOAD,
    THREAD_HOUSELOADID,
    THREAD_HOUSELOAD,
    THREAD_HOUSELOADMIETER,
    THREAD_HOUSEINTERIORLOAD,
    THREAD_CONVERTUNIX,
    THREAD_SCHEIDEN,
    THREAD_ENTBANNEN,
    THREAD_ENTBANNEN_IP,
    THREAD_LOADFRAKTION,
    THREAD_SAVEFRAKTION,
    THREAD_LOADFRAKTIONSSAFEBOX,
    THREAD_ISNUMBERPLATEFREE,
    THREAD_SHOWPLAYERBAN,
    THREAD_OFFBANNEN,
    THREAD_OAFKICK,
    THREAD_OFFVERWARNEN,
    THREAD_COLLECTUNUSEDACCOUNT,
    THREAD_FINISHEDCOLLECTING,
    THREAD_DELETEACCOUNT,
    THREAD_DELETEBIZOWNER,
    THREAD_DELETEHOUSEOWNER,
    THREAD_DELETEHOTELOWNER,
    THREAD_DELETEPLAYERCAR,
    THREAD_DELETETANKEOWNER,
    THREAD_ISBLACKLISTED,
    THREAD_ISBLACKLISTED_CONNECT,
    THREAD_ADDBLACKLISTNAME,
    THREAD_LEADER,
    THREAD_FRAKBLACKLIST,
    THREAD_FRAKBLACKLISTLABEL,
    THREAD_ADDFRAKBLACKLIST_COUNT,
    THREAD_FRAKBLACKLISTCHECK,
    THREAD_ADDFRAKBLACKLIST,
    THREAD_DELFRAKBLACKLIST_COUNT,
    THREAD_DELFRAKBLACKLIST,
    THREAD_BIZLOAD,
    THREAD_LOADINFOS,
    THREAD_SAVEINFOS,
    THREAD_STATICBIZLOAD,
    THREAD_GEBURTSTAG,
    THREAD_ISVALIDGEBURTSTAG,
    THREAD_WERBEBANNER,
    THREAD_SAVEWERBEBANNER,
    THREAD_HOTELLOAD,
    THREAD_HOTELLOADID,
    THREAD_HOTELSAVE,
    THREAD_WEBSQL_AKTE,
    THREAD_SAVEALL,
    THREAD_LOADFRIENDLIST,
    THREAD_ADDFRIENDLIST,
    THREAD_DELFRIENDLIST,
    THREAD_CHECKSCHEIDEN,
    THREAD_BESCHWERDEGGNMICH,
    THREAD_BESCHWERDEOFFEN,
    THREAD_TECHNIKABTEILUNG,
    THREAD_AKTENEINTRAG_EXISTS,
    THREAD_AKTENEINTRAG,
    THREAD_FRAKSPERRE,
    THREAD_OFFPRISON_EXISTS,
    THREAD_OFFPRISON,
    THREAD_LOADWAFFENLAGER,
    THREAD_WAFFENLAGERSAVE,
    THREAD_VIEWCONTRACTS,
    THREAD_LOBENSELECT,
    THREAD_LOBEN,
    THREAD_HWBAN,
    THREAD_HWBAN_CONNECT,
    THREAD_HWBAN_INSERT,
    THREAD_HWBAN_SHOW,
    THREAD_HWID_CHECK,
    THREAD_HWID_CHECK_MULTI,
    THREAD_PIN_VERGESSEN,
    THREAD_SAVE_ACCOUNT_WEAPONS,
    THREAD_LOAD_ACCOUNT_WEAPONS,
    THREAD_WEAPON_HACK,
    THREAD_MONEY_HACK,
    THREAD_JETPACK_HACK,
    THREAD_VEHICLEPORT_HACK,
    THREAD_SAVEHOUSEUPGRADE,
    THREAD_OFFLINEARREST,
    THREAD_ANGEWORBEN,
    THREAD_LOADGANGZONES,
    THREAD_SAVEGANGZONES,
    THREAD_FREEPHONENUMBER,
    THREAD_SAVEPHONENUMBER,
    THREAD_LOADFIRMA,
    THREAD_SAVEFIRMA,
    THREAD_HAUSMIETER,
    THREAD_HAUSMIETUNGRAUS,
    THREAD_OFFHAUSRAUS,
    THREAD_DELCLUB,
    THREAD_BANKSYSTEM,
    THREAD_ADDONLINEPLAYER,
    THREAD_DELONLINEPLAYER,
    THREAD_HASHPASSWORDS,
    THREAD_HASHPASSWORDS_VOID,
    THREAD_HASHPASSWORDS_FINISHED,
    THREAD_UPDATE_PLAYER_PASSWORD,
    THREAD_SPIELERINFO,
    THREAD_GEBANNT,
    THREAD_GEBECLUB,
    THREAD_WAFFENSPERRE,
    THREAD_CHECKNAMECHANGE_OLDNAME,
    THREAD_CHECKNAMECHANGE_NEWNAME,
    THREAD_NAMECHANGE,
    THREAD_NAMECHANGEFINISH,
    THREAD_ISVALIDVORNAME,
    THREAD_SETVORNAME,
    THREAD_ISVALIDEMAIL,
    THREAD_SETEMAIL,
    THREAD_LOADHAUSMOEBEL,
    THREAD_CREATEHAUSMOEBEL,
    THREAD_UPDATEHAUSMOEBEL,
    THREAD_DELETEHAUSMOEBEL,
    THREAD_HAUSVERSTAATLICHEN,
    THREAD_CREATEGUTSCHEIN,
    THREAD_CREATEGUTSCHEIN_CHECK,
    THREAD_GUTSCHEINCODE_CHECK,
    THREAD_GUTSCHEINCODE,
    THREAD_OFFTBAN,
    THREAD_OFFCPRISON,
    THREAD_OFFBWSTRAFE,
    THREAD_OFFBWSTRAFE_CHECK,
    THREAD_BWSTRAFEN,
    THREAD_OFFEPOINTS,
    THREAD_OFFEPOINTS_CHECK,
    THREAD_OFFAGELD_CHECK,
    THREAD_OFFAGELD,
    THREAD_GIVECOINS_CHECK,
    THREAD_GIVECOINS,
    THREAD_ADMINLIST,
    THREAD_OFFSETRANK_CHECK,
    THREAD_OFFSETRANK,
    THREAD_OFFSETLOHN_CHECK,
    THREAD_OFFSETLOHN,
    THREAD_NEW_SIM,
    THREAD_MAKEADMIN_CHECK,
    THREAD_MAKEADMIN,
    THREAD_MAKEBMOD_CHECK,
    THREAD_MAKEBMOD,
    THREAD_MAKEFV_CHECK,
    THREAD_MAKEFV,
    THREAD_OFFLINEARREST2,
    //THREAD_SETUP_POST
}

#include <a_samp>
#include <crashdetect>
#include <timerfix>
#include <pause>
#include <ocmd>
#include <YSI\y_timers>
#include <YSI\y_hooks>
#include <YSI\y_bit>
#include <YSI\y_iterate>
#include <streamer>
#include <schranke>
#include <TSConnector>

#if defined MAX_PLAYERS
    #undef MAX_PLAYERS
    #define MAX_PLAYERS 200
#endif

//Paintball Start
/*enum {
    LEAVE_REASON_COMMAND,
    LEAVE_REASON_DISCONNECT,
    LEAVE_REASON_PARTNER_COMMAND,
    LEAVE_REASON_PARTNER_DISCONNECT
}

enum {
    PAINTBALL_STATUS_NONE,
    PAINTBALL_STATUS_MENU,
    PAINTBALL_STATUS_1V1,
    PAINTBALL_STATUS_NORMAL,
    PAINTBALL_STATUS_INVITE,
    PAINTBALL_STATUS_INVITED
}

enum E_PB_INFO {
    E_PB_INFO_STATUS,
    E_PB_INFO_SETTINGS[7],
    E_PB_INFO_KILLS,
    E_PB_INFO_DEATHS,
    E_PB_INFO_PARTNER,
    bool:E_PB_INFO_SESSION_OWNER,
    PlayerText:E_PB_INFO_TEXTDRAW
}

enum {
    DIALOG_PAINTBALL_MODE = 2000,
    DIALOG_PAINTBALL_1V1MENU,
    DIALOG_PAINTBALL_SEND1V1INV,
    DIALOG_PAINTBALL_WAIT1V1,
    DIALOG_PAINTBALL_ACCEPT1V1INV
}

new paintballInfo[MAX_PLAYERS][E_PB_INFO];
*/
//Paintball ende

new Float:oldposx[MAX_PLAYERS],Float:oldposy[MAX_PLAYERS],Float:oldposz[MAX_PLAYERS];

new playertimestamp[MAX_PLAYERS];

//new g_WantedKillZone[3];
enum e_Bots {
    Bot_sName[MAX_PLAYER_NAME],
    Bot_iSkinID,
    Bot_sScript[32],
    Bot_iVehicle,
    Text3D:Bot_t3dLabel,
    Bot_iVehicleID,
}

new g_Bots[][e_Bots] = {
    {"Jens.K",94,"altermannpnsnormal",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Jessica.D",151,"frau1stadthallenorm",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Sibylle.R",41,"frau2ammuhauptstras",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Helly.G",190,"fraubsnlaufen",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Stefanie.B",141,"fraustadtahllenorma",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Sherin.D",92,"fraustrandinleiner",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Jorek.S",26,"mann1nsnormal",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Lerry.I",59,"mannbilligahausnorm",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Sebastian.P",29,"manndrogenschnormal",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Robert.G",249,"mannluxushausnormal",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Tomke.N",22,"mannnsnormal",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Cosmo.P",23,"mannstadthallenorma",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Roland.H",137,"pennerwaffednormal",0,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Pilot1",61,"pilot1lsdlspdflug53",593,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Pilot2",61,"pilot2lvflug577",577,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Pilot3",61,"pilotlsdlspdflug577",577,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID},
    {"Pilot4",61,"pilot3lvflug593",577,Text3D:INVALID_3DTEXT_ID,INVALID_VEHICLE_ID}
};

#include <a_mysql>

#if !defined INVALID_THREAD_OWNER
    #define INVALID_THREAD_OWNER -1
#endif

#define mysql_oquery(%1,%2,%3,%4) \
    mysql_tquery(%4, %1, "OnQueryFinish", "siiii", %1, %2, %3, %4, INVALID_THREAD_OWNER)

#define mysql_pquery(%1,%2,%3,%4,%5) \
    mysql_tquery(%4, %1, "OnQueryFinish", "siiii", %1, %2, %3, %4, %5[%3] )

#include <AntiCheat\nex-ac>
#include <AntiCheat\detection>
#include <weapon-config>//Benny Hitbox
#include <modeldialog>
//#include <checker>
#include <mapfix>

#include <zcmd>
#include <sscanf2>
//#include <streamer>
#include <a_zones>
#include <filemanager>
#include <nagelband>
//#include <debugviewer>
//#include <gate>
#include <riesenrad>
#include <a_metafixes>
new MySQLThreadOwner[MAX_PLAYERS],bankchange[MAX_PLAYERS],damagesperre[MAX_PLAYERS];
#include <ipban>
forward Float:GetVehicleSpeed(vehicleid);
#include <kraftstoff>
#include <strlib>
#include <floodcontrol>

native IsValidVehicle(vehicleid);	
native gpci(playerid, serial [], len);

//#define HALLOWEEN_EVENT
//#define WEIHNACHTS_EVENT
#define SILVESTER_EVENT
#if defined SILVESTER_EVENT
    forward Float:frandom(Float:max, Float:min = 0.0, dp = 4);
    #include <xFireworks>
#endif

#define MAX_DEATH_ICONS 50
#define MAX_FACTIONS 23
#define MAX_CANISTER 3

enum e_DeathIcon {
    DI_iPickup,
    DI_iTimer,
    Text3D:DI_t3dLabel
}

new g_DeathIcon[MAX_DEATH_ICONS][e_DeathIcon];
new miettimer[MAX_PLAYERS];
new sichervar[MAX_PLAYERS][10];
new pconfigRank[MAX_PLAYERS];

forward DestroyDeathIcon(idx);
public DestroyDeathIcon(idx) {
    DestroyDynamicPickup(g_DeathIcon[idx][DI_iPickup]);
    KillTimer(g_DeathIcon[idx][DI_iTimer]);
    DestroyDynamic3DTextLabel(g_DeathIcon[idx][DI_t3dLabel]);
    g_DeathIcon[idx][DI_iPickup] = 0;
    g_DeathIcon[idx][DI_t3dLabel] = Text3D:INVALID_3DTEXT_ID;
    return 1;
}

stock GetVehicleRelativePos(vehicleid, &Float:x, &Float:y, &Float:z, Float:xoff= 0.0, Float:yoff= 0.0, Float:zoff= 0.0) {
    new Float:rot;
    GetVehicleZAngle(vehicleid, rot);
    rot = 360 - rot;
    GetVehiclePos(vehicleid, x, y, z);
    x = floatsin(rot, degrees) * yoff + floatcos(rot, degrees) * xoff + x;
    y = floatcos(rot, degrees) * yoff - floatsin(rot, degrees) * xoff + y;
    z = zoff + z;
}

stock SetWeatherEx(wetterid) {	
    savewetterid = wetterid;	
    SetWeather(wetterid);	
    return 1;	
}

stock IsPlayerInRangeOfPlayer(playerid, otherPlayerid, Float:range = 5.0) {
    new Float:playerPos[3];
    GetPlayerPos(playerid, playerPos[0], playerPos[1], playerPos[2]);
    return IsPlayerInRangeOfPoint(otherPlayerid, range, playerPos[0], playerPos[1], playerPos[2]);
}

stock GetWeather()	
{	
    return savewetterid;	
}

stock AddDelimiters(integer, delimiter[] = ".") {
    new string[64];
    format(string, sizeof string, "%i", integer);
    for (new i = strlen(string) - 3, j = ((integer < 0) ? 1 : 0); i > j; i -= 3) strins(string, delimiter, i, sizeof string);
    return string;
}

stock AddDeathIcon( string[], Float:x,Float:y,Float:z,interior,virtualworld) {
    new index = -1;
    for (new i; i < sizeof(g_DeathIcon); i++) {
        if (g_DeathIcon[i][DI_iPickup] == 0) {
            index = i;
            break;
        }
    }

    if (index != -1) {
        g_DeathIcon[index][DI_iPickup] = CreateDynamicPickup(1254, 1, x, y, z, interior, virtualworld);
        g_DeathIcon[index][DI_iTimer] = SetTimerEx("DestroyDeathIcon", 3*60*1000, false, "i", index);
        g_DeathIcon[index][DI_t3dLabel] = CreateDynamic3DTextLabel(string, 0xFF0000FF, x, y, z + 0.3, 25.0, .worldid = virtualworld, .interiorid = interior, .testlos = 1);
        return 1;
    }

    return 0;
}

enum e_BallonConfig {
    BC_iObject,
    BC_iStep,
    bool:BC_bForward
}

new g_BallonConfig[e_BallonConfig];

enum e_BallonRoute {
    Float:BR_fX,
    Float:BR_fY,
    Float:BR_fZ,
    BR_iOffset,
    Float:BR_fSpeed
}

new const g_BallonRoute[][e_BallonRoute] = {
    {331.8391,-1833.9916,3.7985,1,2.0},
    {331.8391,-1833.9916,43.7985,2,2.0},
    {387.8877,-1778.6702,55.1566,4,2.5},
    {545.7441,-1770.1678,65.3160,5,2.5},
    {665.4157,-1799.6071,61.3100,6,2.5},
    {740.4435,-1806.6146,62.5419,6,2.5},
    {832.7515,-1820.3407,61.8209,6,2.5},
    {1056.8134,-1835.8986,63.0833,6,2.5},
    {1163.5846,-1744.2234,62.9628,6,2.5},
    {1311.0282,-1733.4523,63.0594,6,2.5},
    {1462.5919,-1735.0828,62.9474,6,2.5},
    {1593.3424,-1753.9630,72.4060,6,2.5},
    {1668.2162,-1778.6447,78.5350,6,2.5},
    {1890.4823,-1829.9126,73.5487,6,2.5},
    {1990.8793,-1882.8636,70.9519,6,2.5},
    {2214.6418,-2147.9441,60.9468,5,2.5},
    {2227.7844,-2221.4304,53.1103,4,2.5},
    {2203.9453,-2248.1580,36.1201,2,2.0},
    {2203.9453,-2248.1580,13.1201,1,2.0}
};

new g_VehicleDistance[MAX_VEHICLES];
new Float:g_OldVehiclePos[MAX_VEHICLES][3];
#define MAX_PASSANGERS_TRACKER 3
new g_aiLastPassengers[MAX_VEHICLES][MAX_PASSANGERS_TRACKER][MAX_PLAYER_NAME char];

enum e_FraktionAbschleppen {
    Float:FA_fX,
    Float:FA_fY,
    Float:FA_fZ,
    Float:FA_fFace,
    bool:FA_bAbgeschleppt,
    FA_fraktion
}

new g_FraktionAbschleppen[MAX_VEHICLES][e_FraktionAbschleppen];

enum e_FallTurm {
    FT_ibStatus,
    FT_tTimer,
    FT_tickUpdate,
    FT_iScheibeObjekt,
    FT_aiWagonObject[4],
    bool:FT_abUsed[4]
}

new g_FallTurm[e_FallTurm];

enum e_Schiff {
    S_ibStatus, // 1 nach links, 2 Links , 3 nach rechts mitte,4 nach rechts,5 rechts, 6 nach links mitte
    S_iObject,
    Float:S_fSpeed,
    Float:S_fX,
    Float:S_fY,
    Float:S_fZ,
    Float:S_fOffsetX,
    Float:S_fOffsetY,
    Float:S_fOffsetZ
}

new g_Schiff[e_Schiff];

enum e_WasserScooter {
    AS_tID,
    AS_ibStatus,
    AS_tickUpdate
}

new g_WasserScooter[e_WasserScooter];

enum e_WasserScooterSlot {
    ASS_iVehicle,
    Float:ASS_fX,
    Float:ASS_fY,
    Float:ASS_fZ,
    Float:ASS_fFace,
    bool:ASS_bUsed
}

new g_WasserScooterSlot[][e_WasserScooterSlot] = {
    {INVALID_VEHICLE_ID,403.3316,-2155.7444,73.9621,270.2908,false}
};

enum e_AutoScooter {
    AS_tID,
    AS_ibStatus,
    AS_tickUpdate
}

new g_AutoScooter[e_AutoScooter];

enum e_AutoScooterSlot {
    ASS_iVehicle,
    Float:ASS_fX,
    Float:ASS_fY,
    Float:ASS_fZ,
    Float:ASS_fFace,
    bool:ASS_bUsed
}

new g_AutoScooterSlot[][e_AutoScooterSlot] = {
    {INVALID_VEHICLE_ID,400.7170,-2111.6877,7.3414,89.5101,false},
    {INVALID_VEHICLE_ID,400.7515,-2107.7605,7.3410,89.5099,false},
    {INVALID_VEHICLE_ID,400.7770,-2104.8752,7.3408,89.4789,false},
    {INVALID_VEHICLE_ID,400.8107,-2101.1377,7.3474,89.4828,false},
    {INVALID_VEHICLE_ID,400.8451,-2097.2825,7.3417,89.4828,false},
    {INVALID_VEHICLE_ID,400.8761,-2093.8740,7.3437,89.4828,false},
    {INVALID_VEHICLE_ID,400.9049,-2090.5085,7.3411,89.4876,false},
    {INVALID_VEHICLE_ID,400.8738,-2086.7273,7.3406,89.4773,false},
    {INVALID_VEHICLE_ID,400.8941,-2082.6213,7.3437,89.6164,false},
    {INVALID_VEHICLE_ID,400.9153,-2079.4050,7.3458,89.6176,false},
    {INVALID_VEHICLE_ID,400.9379,-2075.7024,7.3465,89.6393,false},
    {INVALID_VEHICLE_ID,400.9565,-2072.3015,7.3461,89.6720,false},
    {INVALID_VEHICLE_ID,400.8992,-2068.1982,7.3472,89.7514,false},
    {INVALID_VEHICLE_ID,400.9172,-2063.8892,7.3453,89.7517,false},
    {INVALID_VEHICLE_ID,400.9381,-2059.0759,7.3478,89.7517,false}
};

enum e_Kartbahn {
    AS_tID,
    AS_ibStatus,
    AS_tickUpdate
}

new g_Kartbahn[e_Kartbahn];

enum e_KartbahnSlot {
    ASS_iVehicle,
    Float:ASS_fX,
    Float:ASS_fY,
    Float:ASS_fZ,
    Float:ASS_fFace,
    bool:ASS_bUsed
}

new g_KartbahnSlot[][e_KartbahnSlot] = {
    {INVALID_VEHICLE_ID,-2079.4307,-109.0893,34.6040,178.6084,false},
    {INVALID_VEHICLE_ID,-2081.5349,-109.0485,34.6041,178.7801,false},
    {INVALID_VEHICLE_ID,-2083.5842,-108.9267,34.6079,179.4327,false},
    {INVALID_VEHICLE_ID,-2085.4165,-108.9313,34.6137,180.3376,false},
    {INVALID_VEHICLE_ID,-2087.3247,-108.8820,34.6051,180.0008,false}
};

enum e_BreakDancer {
    BD_ibStatus,
    BD_tTimer,
    BD_tickUpdate
}

new g_BreakDancer[e_BreakDancer];

enum e_BreakDancerSlot {
    BDS_iObject,
    Float:BDS_fX,
    Float:BDS_fY,
    Float:BDS_fZ,
    bool:BDS_bUsed,
    BDS_iStep
}

new g_BreakDancerSlot[][e_BreakDancerSlot] = {
    {INVALID_OBJECT_ID,355.99719, -2153.05029, 10.4,false,0},
    {INVALID_OBJECT_ID,358.37784, -2152.10815, 10.4,false,0},
    {INVALID_OBJECT_ID,360.97186, -2151.81274, 10.4,false,0},
    {INVALID_OBJECT_ID,363.17868, -2153.27148, 10.4,false,0},
    {INVALID_OBJECT_ID,364.26526, -2155.45947, 10.4,false,0},
    {INVALID_OBJECT_ID,364.21054, -2158.06372, 10.4,false,0},
    {INVALID_OBJECT_ID,362.63095, -2160.13013, 10.4,false,0},

    {INVALID_OBJECT_ID,360.36526, -2161.11035, 10.4,false,0},
    {INVALID_OBJECT_ID,357.87384, -2160.74023, 10.4,false,0},
    {INVALID_OBJECT_ID,356.06296, -2159.25684, 10.4,false,0},
    {INVALID_OBJECT_ID,355.16202, -2157.21045, 10.4,false,0},
    {INVALID_OBJECT_ID,355.09671, -2155.01904, 10.4,false,0}
};

new const aiLichtpflicht[2] = {19,6};
#define     INVALID_TIMER_ID    -1

enum e_ParkscheinAutomat {
    Float:PA_fX,
    Float:PA_fY,
    Float:PA_fZ
}

#define MAX_PARKSCHEIN_AUTOMATEN 10
new g_ParkscheinAutomat[MAX_PARKSCHEIN_AUTOMATEN][e_ParkscheinAutomat], g_iParkscheinAutomat;


#define MAX_BIZ 12

enum e_Firma {
    F_iID,
    F_iJobID,
    F_sBezeichnung[32],
    F_sBesitzer[MAX_PLAYER_NAME],
    F_iKasse,
    F_iGehalt
}

new g_Firma[MAX_BIZ][e_Firma];

enum e_GELDT {
    Float:GT_fPosX,
    Float:GT_fPosY,
    Float:GT_fPosZ
}

new const GT_GELDT[][e_GELDT] = {
    {2130.10009766,-1151.19995117,23.68000031},
    {551.20001221,-1260.50000000,16.87999916},
    {1032.19995117,-1029.90002441,31.70000076},
    {491.39999390,-1734.59997559,10.86999989},
    {2072.00000000,-1834.69995117,13.17999935},
    {716.90002441,-463.10000610,15.60000038},
    {2398.00000000,1482.90002441,10.39999962},
    {1967.69995117,2166.69995117,10.39999962},
    {-95.69999695,1110.90002441,19.37999916},
    {-1424.80004883,2591.60009766,55.47999954},
    {-2419.60009766,1028.69995117,50.00000000},
    {-1900.00000000,277.20001221,40.70000076},
    {2303.60009766,79.90000153,26.10000038},
    {2475.69995117,32.09999847,26.10000038},
    {2274.69995117,-76.40000153,26.20000076},
    {1316.69995117,357.70001221,19.20000076},
    {1302.80004883,255.39999390,19.20000076},
    {211.30000305,-62.70000076,1.20000005},
    {111.09999847,-221.39999390,1.20000005},
    {242.39999390,-223.10000610,1.20000005},
    {661.29998779,-565.50000000,16.00000000},
    {811.40002441,-613.79998779,16.00000000},
    {-2094.39990234,-2477.10009766,30.29999924},
    {-2159.30004883,-2387.80004883,30.29999924},
    {-818.20001221,1547.50000000,26.79999924},
    {-860.00000000,1536.50000000,22.20000076},
    {-1515.19995117,2560.80004883,55.50000000},
    {-1486.30004883,2641.19995117,55.50000000},
    {-255.10000610,2601.30004883,62.50000000},
    {30.00000000,1187.40002441,18.70000076},
    {-173.80000305,1107.90002441,19.39999962},
    {-317.00000000,1051.69995117,20.00000000},
    {-312.89999390,1307.09997559,53.29999924},
    {-2512.00000000,2340.80004883,4.59999990},
    {-2610.39990234,2246.39990234,7.90000010},
    {-2239.00000000,2356.39990234,4.59999990},
    {-2726.30004883,-319.79998779,6.80000019},
    {-2388.30004883,-569.20001221,131.80000305},
    {1146.80004883,-1415.50000000,13.30000019},
    {1808.30004883,-1369.30004883,14.69999981},
    {2441.00000000,-1470.19995117,23.60000038},
    {2285.30004883,-2065.19995117,13.19999981},
    {1585.69995117,-2286.60009766,13.19999981},
    {396.60000610,-1543.90002441,31.89999962},
    {906.59997559,-1002.70001221,37.50000000},
    {2747.39990234,-1186.30004883,69.00000000},
    {1739.40002441,-1863.59997559,13.19999981},
    {1137.19995117,-1762.09997559,13.19999981},
    {1016.50000000,-1553.59997559,14.50000000},
    {810.50000000,-1614.59997559,13.19999981},
    {943.90002441,-1385.50000000,13.00000000},
    {-1381.69995117,-356.50000000,13.80000019},
    {-1968.00000000,512.70001221,34.79999924},
    {-2276.30004883,520.50000000,34.79999924},
    {-2438.60009766,752.59997559,34.79999924},
    {-2670.89990234,636.90002441,14.10000038},
    {-2765.30004883,366.20001221,6.00000000},
    {-2025.19995117,-102.00000000,34.79999924},
    {-2242.39990234,116.90000153,35.00000000},
    {-2417.80004883,348.89999390,34.79999924},
    {-2622.39990234,1413.19995117,6.69999981},
    {-1940.69995117,1342.09997559,6.80000019},
    {-1578.90002441,903.90002441,7.30000019},
    {-1759.69995117,963.40002441,24.50000000},
    {-1625.30004883,717.90002441,14.30000019},
    {-1830.30004883,109.50000000,14.80000019},
    {1025.00000000,1043.69995117,10.60000038},
    {1169.90002441,1363.50000000,10.50000000},
    {1703.19995117,1443.90002441,10.50000000},
    {2019.30004883,1345.90002441,10.50000000},
    {2196.89990234,1689.50000000,12.00000000},
    {2031.09997559,1936.40002441,11.80000019},
    {2137.39990234,2363.80004883,10.50000000},
    {2296.39990234,2432.39990234,10.50000000},
    {2532.30004883,1865.00000000,10.50000000},
    {2433.50000000,1670.40002441,10.50000000},
    {2578.00000000,1060.59997559,10.50000000},
    {2159.50000000,941.79998779,10.50000000},
    {2021.69995117,998.79998779,10.50000000},
    {1516.59997559,1102.59997559,10.50000000},
    {1479.69995117,2244.00000000,10.69999981},
    {1438.80004883,2616.69995117,11.00000000},
    {2159.30004883,2797.19995117,10.50000000},
    {2537.00000000,2264.00000000,10.50000000},
    {2558.19995117,2022.30004883,10.50000000},
    {2204.00000000,1295.80004883,10.50000000},
    {822.5450,-1355.8326,13.5422}
};

enum e_Muell {
    Float:M_fPosX,
    Float:M_fPosY,
    Float:M_fPosZ
}

new const g_Muell[][e_Muell] = {
    {1575.32, -1860.68, 13.33},
    {1575.31, -1794.34, 13.24},
    {1575.25, -1743.08, 13.33},
    {1372.86, -1726.57, 13.32},
    {1319.92, -1724.81, 13.33},
    {1318.34, -1673.26, 13.33},
    {1318.24, -1625.49, 13.33},
    {1318.29, -1583.30, 13.33},
    {1319.13, -1556.67, 13.32},
    {1354.74, -1476.45, 13.33},
    {1363.24, -1420.69, 13.33},
    {1291.04, -1389.49, 13.20},
    {1266.28, -1360.01, 13.26},
    {1266.27, -1308.70, 13.28},
    {1223.79, -1156.61, 23.43},
    {1268.74, -1127.32, 23.80},
    {1268.72, -1070.70, 28.36},
    {1268.90, -981.15, 36.95},
    {1254.53, -920.78, 42.56},
    {1230.39, -913.43, 42.88},
    {1143.15, -938.38, 42.80},
    {1065.78, -944.34, 42.78},
    {1004.78, -952.55, 41.96},
    {878.50, -980.15, 36.11},
    {833.05, -1021.84, 25.96},
    {787.50, -1036.63, 24.42},
    {488.16, -1276.06, 15.49},
    {436.02, -1315.29, 14.87},
    {336.44, -1375.30, 14.11},
    {230.99, -1433.80, 13.15},
    {168.37, -1514.36, 12.15},
    {168.37, -1514.36, 12.15},
    {113.44, -1694.20, 9.38},
    {181.91, -1741.32, 4.13},
    {237.01, -1738.04, 3.99},
    {289.05, -1742.17, 4.12},
    {335.57, -1747.85, 4.43},
    {459.64, -1767.67, 5.44},
    {499.18, -1732.62, 11.29},
    {563.40, -1740.97, 12.62},
    {631.54, -1752.13, 13.14},
    {713.01, -1775.15, 13.42},
    {804.34, -1789.93, 13.26},
    {938.16, -1796.69, 13.65},
    {1030.30, -1825.45, 13.64},
    {1096.22, -1858.12, 13.34},
    {1157.66, -1858.00, 13.33},
    {1234.37, -1857.95, 13.33},
    {1415.44, -1878.07, 13.33}
};

enum e_HureSkill {
    HS_iLevel,
    HS_iHP,
    HS_iPoint
}

new const g_HureSkill[][e_HureSkill] = {
    {1,10,0},
    {2,30,10},
    {3,50,25},
    {4,80,40},
    {5,100,60}
};

enum e_LayerSkills {
    LS_iJobs,
    LS_iJailTime,
    LS_iStateShare,
}

new const g_LawyerSkills[][e_LayerSkills] = {
    {0 , 1300 , 41},
    {20 , 1600 , 41},
    {80 , 2300 , 41},
    {120 , 3000 , 41},
    {250 , 4800 , 41 },
    {420 , 15000 , 41 }
};

enum e_GangFightSkills {
    GFS_iKills
}

new const g_GangFightSkills[][e_GangFightSkills] = {
    {10},
    {20},
    {60},
    {130},
    {260},
    {430},
    {560},
    {620},
    {880},
    {1000}
};

enum e_DrogenSkills {
    DS_iTour,
    DS_iPackets
}

new const g_DrogenSkills[][e_DrogenSkills] = {
    {0,5},
    {50,10},
    {100,15},
    {280,20},
    {510,25}
};

enum e_WaffenteileSkills {
    WS_iTour,
    WS_iPackets
}

new const g_WaffenteileSkills[][e_WaffenteileSkills] = {
    {0,5},
    {80,10},
    {200,15},
    {440,20},
    {710,25}
};

#define MAX_EVENTMARKER_CHECKPOINTS 50

enum e_EventMarker {
    EV_iState,
    EV_iPlayerID,
    EV_iCheckpoints,
}

new g_EventMarker[e_EventMarker];

new Float:g_EventMarkerCheckpoints[MAX_EVENTMARKER_CHECKPOINTS][4];

enum e_EventUhr {
    EU_tTimer,
    EU_iLeft
}

new g_EventUhr[e_EventUhr];

enum e_BombenDraht {
    BD_iColor,
    BD_sFarbe[10]
}

new const g_BombenDraht[][e_BombenDraht] = {
    { 0xFFFF00FF, "Gelb"},
    { 0xFF0000FF, "Rot"},
    { 0x00FF00FF, "Grün"},
    { 0x0000FFFF, "Blau"}
};



enum e_WaffenLagerConfig {
    WLC_iWaffe,
    WLC_iMuni,
    WLC_iPrice
}

new const g_WaffenLagerConfig[][e_WaffenLagerConfig] = {
    {34,25,400},
    {31,300,350},
    {30,300,320},
    {33,100,320},
    {25,100,300},
    {-1,100,220},
    {23,200,120},
    {5,1,50},
    {2,1,50}
};


enum e_Zoll {
    Z_iModel,
    Float:Z_fX,
    Float:Z_fY,
    Float:Z_fZ,
    Float:Z_fRotX,
    Float:Z_fRotY,
    Float:Z_fRotZ,
    Z_iObject,
    Z_iArea,
    Z_iStatus, // 0 Zu, 1 Öffnen , 2 Offen , 3 Schliessen
    Z_tTimer,
    Z_iPlayerID,
    bool:Z_bSperre
}

new g_Zoll[][e_Zoll] = {
    {978,59.9350, -1525.4719, 4.7959, 0.0000, 0.0000, -96.2998,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,47.8982, -1538.6879, 4.9559, 0.0000, 0.0000, 85.5999,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,100.4253, -1278.6158, 14.1212, 0.0000, 0.0000, 123.1999,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,83.7634, -1258.2729, 14.2013, 0.0000, 0.0000, -57.5000,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,-84.1439, -908.6162, 17.3085, 0.0000, -0.3000, -25.6000,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,-964.7624, -329.6128, 36.0626, 0.0000, -1.7000, 169.3999,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,-1260.6369, 961.2601, 44.7391, 0.0000, 0.0000, 136.5000,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,-1272.2734, 972.3147, 44.7391, 0.0000, 0.0000, -43.4000,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,-2695.0700, 1274.4583, 55.2848, 0.0000, 0.0000, 0.0000,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,-2677.1496, 1274.4583, 55.2448, 0.0000, 0.0000, -180.0000,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,-168.3067, 365.9939, 11.9073, 0.0000, 0.0000, 165.1001,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,523.0817, 469.3662, 18.7161, 0.0000, 0.0000, -145.0001,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,1732.1787, 523.8909, 27.8209, 0.0000, 0.0000, -20.0000,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false},
    {978,1744.8293, 519.2871, 27.8209, 0.0000, 0.0000, 160.0000,INVALID_OBJECT_ID,0,0,0,INVALID_PLAYER_ID,false}
};

new tTollTimer = INVALID_TIMER_ID;

enum e_PrisonRunCheckpoint {
    Float:PRC_fX,
    Float:PRC_fY,
    Float:PRC_fZ
}

new const g_PrisonRunCheckpoint[][e_PrisonRunCheckpoint] = {
     {-1400.9767,-166.7956,1043.5408},
     {-1521.2783,-168.4242,1050.6263},
     {-1417.5217,-277.0373,1051.1920},
     {-1301.7184,-146.2196,1050.1626},
     {-1303.5171,-269.2775,1048.4304},
     {-1394.6664,-229.8659,1043.2290}
};

enum e_FahrzeugVerleihFahrzeuge {
    Float:FVF_fX,
    Float:FVF_fY,
    Float:FVF_fZ,
    Float:FVF_fRot,
    FVF_iModel,
    FVF_iPrice,
    Text3D:FVF_t3dLabel,
    FVF_iVehicleID,
    FVF_iVerleihIndex
}

new const g_PurgeVerleihFahrzeuge[][e_FahrzeugVerleihFahrzeuge] = {
	{512.6089,-1855.6182,4.7040,1.6936,520,5000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,0}, // <== LS-Strand
	{501.0183,-1855.4266,4.3747,3.6153,425,4000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,0}, // <== LS-Strand
	{490.1476,-1854.7583,3.7935,357.9464,432,3000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,0}, // <== LS-Strand
	{477.3846,-1854.7946,4.3021,358.5551,476,2000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,0}, // <== LS-Strand
	{464.5411,-1853.6938,3.5172,355.0792,447,1000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,0}, // <== LS-Strand
	{453.2881,-1855.6869,5.0272,355.3473,406,500000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,0}, // <== LS-Strand
	{443.8658,-1853.8488,3.8944,0.3076,444,500000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,0}, // <== LS-Strand
	{980.4552,1343.3666,11.6433,272.3881,520,5000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,1}, // <== LV-Fahrschule
	{979.0232,1357.4158,11.2864,269.6431,425,4000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,1}, // <== LV-Fahrschule
	{980.9939,1366.0725,10.8908,269.2376,432,3000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,1}, // <== LV-Fahrschule
	{983.2001,1376.2994,10.7266,267.4467,447,1000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,1}, // <== LV-Fahrschule
	{979.6601,1386.9236,12.3447,268.4219,406,500000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,1}, // <== LV-Fahrschule
	{982.3207,1396.3083,11.1916,265.8330,444,500000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,1}, // <== LV-Fahrschule
	{981.8853,1404.0774,11.4658,273.3386,476,2000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,1}, // <== LV-Fahrschule
	{-2636.0676,1362.0229,7.8501,272.4497,520,5000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, // <== SF-Jizzy
	{-2637.3130,1371.9700,7.6768,276.8537,425,4000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, // <== SF-Jizzy
	{-2637.3130,1371.9700,7.6768,276.8537,432,3000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, // <== SF-Jizzy
	{-2638.7500,1337.9546,7.8731,267.6925,476,2000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, // <== SF-Jizzy
	{-2625.8257,1342.0692,7.2084,323.5879,447,1000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, // <== SF-Jizzy
	{-2616.5566,1349.8029,8.6991,50.3689,406,500000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, // <== SF-Jizzy
	{-2614.9636,1370.1774,7.4759,126.2969,444,500000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, // <== SF-Jizzy
	{186.6638,90.0891,4.5531,174.7286,520,5000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, // <== 0 Punkt
	{196.6427,88.2853,4.4336,174.6755,425,4000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, // <== 0 Punkt
	{205.4819,88.2955,3.9217,165.5292,432,3000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, // <== 0 Punkt
	{215.6357,84.2333,4.6032,166.7181,476,2000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, // <== 0 Punkt
	{225.6441,82.4325,3.9027,179.0125,447,1000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, // <== 0 Punkt
	{232.5991,87.0947,5.2662,178.4348,406,500000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, // <== 0 Punkt
	{240.7932,82.5619,4.0977,167.7876,444,500000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, // <== 0 Punkt
	{86.4286,1737.4650,18.3638,190.8576,520,5000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,4}, // <== Area-51
	{97.9283,1738.1653,18.2705,186.2302,425,4000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,4}, // <== Area-51
	{108.5456,1737.4017,17.7114,186.2302,432,3000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,4}, // <== Area-51
	{119.4177,1737.7698,18.3522,185.4900,476,2000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,4}, // <== Area-51
	{130.8515,1738.1919,17.6584,179.8350,447,1000000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,4}, // <== Area-51
	{140.5926,1738.9812,19.1514,178.3052,406,500000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,4}, // <== Area-51
	{149.1176,1736.0927,18.0119,174.4124,444,500000,Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,4} // <== Area-51
};

new const g_FahrzeugVerleihFahrzeuge[][e_FahrzeugVerleihFahrzeuge] = {
    {2078.1169,-1776.0348,13.6396,164.5930,418,6200, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,0}, //Stations an der Pizzaria LS
    {2080.3350,-1767.9788,13.2985,164.8727,426,4200, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,0}, //Stations an der Pizzaria LS
    {767.0826,-1332.9882,13.1666,215.1745,565,2360, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,1}, //Stations am: Neulingsspawn
    {762.3510,-1333.3093,13.3789,216.1863,540,4800, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,1}, //Stations am: Neulingsspawn
    {757.3802,-1333.2279,13.2777,224.2690,436,2200, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,1}, //Stations am: Neulingsspawn
    {752.2538,-1333.4092,13.2859,228.0755,426,5200, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,1}, //Stations am: Neulingsspawn
    {1461.9940,-2418.8147,14.0028,270.8374,593,35600, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, //Flugverleih
    {1490.1938,-2400.0662,13.5416,181.1372,469,49600, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, //Flugverleih
    {1481.1306,-2399.7166,13.7120,180.8858,487,52200, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, //Flugverleih
    {1495.7388,-2434.8101,14.4736,92.7344,519,82000, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, //Flugverleih
    {1462.8730,-2435.1128,14.1073,274.7881,513,82000, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, //Flugverleih
    {1494.4330,-2414.5166,14.9590,91.5051,511,82000, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,2}, //Flugverleih
    {-79.3621,-593.3800,-0.3102,84.3536,473,7600, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, //Bootsverleih
    {-68.9610,-594.0487,-0.2000,266.5981,473,7600, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, //Bootsverleih
    {-67.5698,-600.8708,-0.4598,264.1537,452,13640, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, //Bootsverleih
    {-81.9397,-599.8763,-0.4489,84.9603,452,13640, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, //Bootsverleih
    {-67.8799,-607.1755,-0.5725,264.8912,446,33800, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, //Bootsverleih
    {-82.1167,-606.5050,-0.5398,84.9556,446,33800, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,3}, //Bootsverleih
    {898.5881,-1412.9033,13.1911,270.1001,445,5000, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,4}, //Stations am: nähe Neulingsspawn
    {890.5629,-1413.0018,12.8842,270.3237,589,2760, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,4}, //Stations am: nähe Neulingsspawn
    {1335.6625,-1254.1927,13.4360,179.8543,445,5000, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,5}, //Stations am: Ammu
    {1335.5961,-1246.1841,13.2219,180.2161,589,2760, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,5}, //Stations am: Ammu
    {945.4749,-1770.0242,13.8758,80.2933,445,5000, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,6}, //Stations am: LS Strand
    {953.7225,-1771.5251,13.8645,79.9483,533,3600, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,6}, //Stations am: LS Strand
    {1192.3794,-1046.4410,31.8047,269.9852,445,5600, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,7}, //Stations am: Wohngegend am PNS
    {1183.8732,-1046.4503,31.5575,270.2816,589,2760, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,7}, //Stations am: Wohngegend am PNS
    {1580.5494,2606.4641,10.6970,178.9019,445,5000, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,8}, //Stations am: in LV
    {1580.6941,2614.7944,10.4782,179.6787,589,2760, Text3D:INVALID_3DTEXT_ID ,INVALID_VEHICLE_ID,8} //Stations am: in LV
};

enum e_FahrzeugVerleihSpawn {
    Float:FVS_fX,
    Float:FVS_fY,
    Float:FVS_fZ,
    Float:FVS_fRot,
    bool:FVS_bFree,
    FVS_iVerleihIndex
}

new g_FahrzeugVerleihSpawn[][e_FahrzeugVerleihSpawn] = {
    {2073.7065,-1774.8682,13.4305,347.8131,true,0},
    {737.4862,-1335.7058,13.2808,269.2980,true,1},
    {737.4667,-1339.4930,13.2845,270.0067,true,1},
    {737.8382,-1343.9973,13.2510,270.0016,true,1},
    {1434.1371,-2458.0557,13.5547,270.5623,true,2},
    {1434.1371,-2458.0557,13.5547,270.5623,true,2},
    {1434.1371,-2458.0557,13.5547,270.5623,true,2},
    {1434.1371,-2458.0557,13.5547,270.5623,true,2},
    {1434.1371,-2458.0557,13.5547,270.5623,true,2},
    {1434.1371,-2458.0557,13.5547,270.5623,true,2},
    {1434.1371,-2458.0557,13.5547,270.5623,true,2},
    {1434.1371,-2458.0557,13.5547,270.5623,true,2},
    {-75.7606,-618.0527,-0.5772,175.7112,true,3},
    {-75.7606,-618.0527,-0.5772,175.7112,true,3},
    {-75.7606,-618.0527,-0.5772,175.7112,true,3},
    {-75.7606,-618.0527,-0.5772,175.7112,true,3},
    {-75.7606,-618.0527,-0.5772,175.7112,true,3},
    {-75.7606,-618.0527,-0.5772,175.7112,true,3},
    {884.9829,-1412.9148,13.1111,359.8797,true,4},
    {884.9829,-1412.9148,13.1111,359.8797,true,4},
    {1333.8597,-1240.5994,13.4218,268.7983,true,5},
    {1333.8597,-1240.5994,13.4218,268.7983,true,5},
    {959.8779,-1771.8010,14.1634,167.8922,true,6},
    {959.8779,-1771.8010,14.1634,167.8922,true,6},
    {1202.1469,-1052.4700,31.7223,270.3401,true,7},
    {1202.1469,-1052.4700,31.7223,270.3401,true,7},
    {1579.2615,2600.5720,10.6914,270.6026,true,8},
    {1579.2615,2600.5720,10.6914,270.6026,true,8}
};

new g_PurgeVerleihSpawn[][e_FahrzeugVerleihSpawn] = {
	{428.0760,-1841.4963,4.0209,356.3452,true,0},
	{428.0760,-1841.4963,4.0209,356.3452,true,0},
	{428.0760,-1841.4963,4.0209,356.3452,true,0},
	{428.0760,-1841.4963,4.0209,356.3452,true,0},
	{428.0760,-1841.4963,4.0209,356.3452,true,0},
	{428.0760,-1841.4963,4.0209,356.3452,true,0},
	{428.0760,-1841.4963,4.0209,356.3452,true,0},
	{967.2629,1402.1230,11.4443,359.2319,true,1},
	{967.2629,1402.1230,11.4443,359.2319,true,1},
	{967.2629,1402.1230,11.4443,359.2319,true,1},
	{967.2629,1402.1230,11.4443,359.2319,true,1},
	{967.2629,1402.1230,11.4443,359.2319,true,1},
	{967.2629,1402.1230,11.4443,359.2319,true,1},
	{967.2629,1402.1230,11.4443,359.2319,true,1},
	{-2595.2100,1379.7234,7.4883,271.6702,true,2},
	{-2595.2100,1379.7234,7.4883,271.6702,true,2},
	{-2595.2100,1379.7234,7.4883,271.6702,true,2},
	{-2595.2100,1379.7234,7.4883,271.6702,true,2},
	{-2595.2100,1379.7234,7.4883,271.6702,true,2},
	{-2595.2100,1379.7234,7.4883,271.6702,true,2},
	{-2595.2100,1379.7234,7.4883,271.6702,true,2},
	{237.3661,102.0964,3.8724,306.8362,true,3},
	{237.3661,102.0964,3.8724,306.8362,true,3},
	{237.3661,102.0964,3.8724,306.8362,true,3},
	{237.3661,102.0964,3.8724,306.8362,true,3},
	{237.3661,102.0964,3.8724,306.8362,true,3},
	{237.3661,102.0964,3.8724,306.8362,true,3},
	{237.3661,102.0964,3.8724,306.8362,true,3},
	{122.5098,1711.5270,18.0119,147.3919,true,4},
	{122.5098,1711.5270,18.0119,147.3919,true,4},
	{122.5098,1711.5270,18.0119,147.3919,true,4},
	{122.5098,1711.5270,18.0119,147.3919,true,4},
	{122.5098,1711.5270,18.0119,147.3919,true,4},
	{122.5098,1711.5270,18.0119,147.3919,true,4},
	{122.5098,1711.5270,18.0119,147.3919,true,4}
};

enum e_PlayerTacho {
    PlayerText:pt_Name,
    PlayerText:pt_Border[6],
    PlayerText:pt_Info,
    PlayerText:pt_Speed,
    PlayerText:pt_Tank,
    PlayerText:pt_TankInfo,
    PlayerText:pt_Kennzeichen,
    PlayerText:pt_Liter,
    PlayerText:pt_Gear
}

new g_PlayerTacho[MAX_PLAYERS][e_PlayerTacho];

enum e_AdienstMeldung {
    Text:OnDuty
}

new g_AdienstMeldung[e_AdienstMeldung];

enum e_Zentralmeldung {
    Text:Z_tdVerfuegbar,
    Text:Z_tdNichtVerfuegbar
}

new g_Zentralmeldung[e_Zentralmeldung];

enum e_ClubShopItems {
    CSI_sName[38],
    CSI_iModel,
    CSI_iBone,
    Float:CSI_fX,
    Float:CSI_fY,
    Float:CSI_fZ,
    Float:CSI_fRotX,
    Float:CSI_fRotY,
    Float:CSI_fRotZ,
    Float:CSI_fScaleX,
    Float:CSI_fScaleY,
    Float:CSI_fScaleZ,
    CSI_iPrice
}

new const g_ClubShopItems[][e_ClubShopItems] = {
    {"Schwarzer Hut",19352, 2, 0.135453, 0.000000, 0.000000, 92.670608, 75.860046, 0.000000, 1.000000, 1.000000, 1.000000,1},
    {"Cowboy Hut",19095, 2, 0.185240, -0.015530, 0.000000, 351.382019, 3.160876, 347.847381, 1.000000, 1.000000, 1.000000,1},
    {"Gitarre",19319, 1, 0.062434, -0.106071, 0.017444, 0.000000, 62.955413, 358.461303, 1.000000, 1.000000, 1.000000,1},
    {"Vogelkopf",19137, 2, 0.093183, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000,1},
    {"Sonnenbrille mit schwarzem Glas",19033, 2, 0.090000, 0.028000, 0.000000, 0.000000, 90.000000, 90.000000, 1.000000, 1.000000, 1.100000,1},
    {"Sonnenbrille mit weißem Glas",19012, 2, 0.108435, 0.048540, -0.001149, 2.091111, 88.997276, 87.155326, 1.000000, 1.000000, 1.100000,1},
    {"Sportbrille mit rotem Glas",19015, 2, 0.108435, 0.048540, -0.001149, 2.091111, 88.997276, 87.155326, 1.000000, 1.000000, 1.100000,1},
    {"Sportbrille mit pinkem Glas",19006, 2, 0.108435, 0.048540, -0.001149, 2.091111, 88.997276, 87.155326, 1.000000, 1.000000, 1.100000,1},
    {"Sportbrille mit grünem Glas",19010, 2, 0.108435, 0.048540, -0.001149, 2.091111, 88.997276, 87.155326, 1.000000, 1.000000, 1.100000,1},
    {"Sportbrille mit gelbes Glas",19008, 2, 0.108435, 0.048540, -0.001149, 2.091111, 88.997276, 87.155326, 1.000000, 1.000000, 1.100000,1},
    {"Transpar. Sonnenbrille in Gelb",19007, 2, 0.108435, 0.048540, -0.001149, 2.091111, 88.997276, 87.155326, 1.000000, 1.000000, 1.000000,1},
    {"Transpar. Sonnenbrille in Pink",19018, 2, 0.108435, 0.048540, -0.001149, 2.091111, 88.997276, 87.155326, 1.000000, 1.000000, 1.000000,1},
    {"Transpar. Sonnenbrille in Blau",19019, 2, 0.108435, 0.048540, -0.001149, 2.091111, 88.997276, 87.155326, 1.000000, 1.000000, 1.000000,1},
    {"Pilotenbrille in Schwarz",19022,2, 0.109484, 0.038547, -0.001346, 177.354324, 91.498741, 271.828704, 1.000000, 1.100000, 1.399999,1},
    {"Pilotenbrille in Orange",19027,2, 0.109484, 0.038547, -0.001346, 177.354324, 91.498741, 271.828704, 1.000000, 1.100000, 1.399999,1},
    {"Pilotenbrille in Pink",19024,2, 0.109484, 0.038547, -0.001346, 177.354324, 91.498741, 271.828704, 1.000000, 1.100000, 1.399999,1},
    {"Pilotenbrille in Gelb",19028,2, 0.109484, 0.038547, -0.001346, 177.354324, 91.498741, 271.828704, 1.000000, 1.100000, 1.399999,1},
    {"Cap in Schwarz",18941, 2, 0.154340, -0.019610, -0.003148, 0.000000, 359.601928, 339.431274, 1.100000, 1.100000, 1.100000,1},
    {"Spezialer Motorradhelm",18976, 2, 0.079035, 0.013043, 0.000000, 71.521530, 79.331695, 19.203657, 1.149999, 1.500000, 1.200000,1},
    {"Wollmütze in Schwarz",18964, 2, 0.099004, 0.031445, -0.000578, 0.000000, 92.970489, 82.573211, 1.299999, 1.399999, 1.600000,1},
    {"Wollmütze in Bunt",18966, 2, 0.099004, 0.031445, -0.000578, 0.000000, 92.970489, 82.573211, 1.299999, 1.399999, 1.600000,1},
    {"Mütze in Schwarz",18953, 2, 0.110594, 0.013052, 0.000000, 0.000000, 0.000000, 331.269348, 1.500000, 1.100000, 1.299999,1},
    {"Mütze in Grau",18954, 2, 0.110594, 0.013052, 0.000000, 0.000000, 0.000000, 331.269348, 1.500000, 1.100000, 1.299999,1},
    {"Ring-Master Helm",18952, 2, 0.100472, 0.024532, 0.000000, 0.000000, 0.000000, 0.000000, 1.399999, 1.100000, 1.100000,1},
    {"Hut in Schwarz",18947, 2, 0.142415, 0.004042, 0.000000, 4.527500, 357.982025, 350.293884, 1.200000, 1.000000, 1.100000,1},
    {"Hut in Rot",18950, 2, 0.142415, 0.004042, 0.000000, 4.527500, 357.982025, 350.293884, 1.200000, 1.000000, 1.100000,1},
    {"Hut in Blau",18945, 2, 0.142415, 0.004042, 0.000000, 4.527500, 357.982025, 350.293884, 1.200000, 1.000000, 1.100000,1},
    {"Hut in Grün",18946, 2, 0.142415, 0.004042, 0.000000, 4.527500, 357.982025, 350.293884, 1.200000, 1.000000, 1.100000,1},
    {"Blaues Beret",18921,2,0.117999,0.004999,-0.010999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000,1},
    {"Rotes Beret",18922,2,0.159999,0.000000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000,1},
    {"Haare 1",18640,2,0.063999,-0.007999,-0.000000,0.000000,0.000000,5.599998,0.875000,0.755000,0.899001,1},
    {"Haare 2",18975,2,0.075999,0.000000,0.000000,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000,1},
    {"Hut mit Haaren",19136,2,0.064999,0.002999,0.000000,0.000000,0.000000,-10.199989,1.000000,1.103001,1.000000,1},
    {"Afro Orange",19274,2,0.053000,0.000000,0.000000,0.000000,0.000000,0.000000,1.000000,0.773000,0.860000,1},
    {"Bandana Grau",18918,2,0.078999,0.025000,0.009999,-81.599983,0.000000,-100.200012,1.000000,1.000000,1.000000,1},
    {"Gray Panama",18968,2,0.176000,-0.009999,0.000000,-10.099993,90.799987,85.699996,1.000000,1.000000,1.000000,1}
    
};

enum e_GangShopItems {
    GSI_sName[18],
    GSI_iModel,
    GSI_iBone,
    Float:GSI_fX,
    Float:GSI_fY,
    Float:GSI_fZ,
    Float:GSI_fRotX,
    Float:GSI_fRotY,
    Float:GSI_fRotZ,
    Float:GSI_fScaleX,
    Float:GSI_fScaleY,
    Float:GSI_fScaleZ,
    GSI_iPrice
}

new const g_GangShopItems[][e_GangShopItems] = {
    {"Schwarze Maske",18912, 2, 0.061876, 0.035511, -0.004993, 96.460441, 178.603134, 88.577461, 1.000000, 1.000000, 1.000000,200},
    {"Grüne Maske",18913, 2, 0.061876, 0.035511, -0.004993, 96.460441, 178.603134, 88.577461, 1.000000, 1.000000, 1.000000,200},
    {"Gepunktete Maske",18918, 2, 0.061876, 0.035511, -0.004993, 96.460441, 178.603134, 88.577461, 1.000000, 1.000000, 1.000000,200}
};

new const g_TUVDistance[] = {
    110,
    260,
    450
};

stock bool:IsTUVNeeded(distance) {
    for (new i; i < sizeof(g_TUVDistance); i++) if( distance == g_TUVDistance[i] ) return true;
    return false;
}

#define GANGFIGHT_TIME 40

#define FIX_KFZSTEUER 1500

#define COL_DEFAULT "{FFFFFF}"
#define COL_LIGHTBLUE "{00C0FF}"
#define COL_YELLOW "{FFFF00}"
#define COL_ORANGE "{FF9900}"
#define COL_GREEN "{15951F}"

#define COLOR_R               "{FF0000}" //Red
#define COLOR_G               "{C4C4C4}" //Grey
#define COLOR_Y               "{EEEA00}" //Yellow
#define COLOR_B             "{00A7EE}" //Blue


#define HANDY_VERTRAG 0xFFFFFF
#define INVALID_BANK_PIN 0
#define INVALID_FRIEND_ID 0xFFFFFF

#define     ATTACHED_INDEX_CLUB_SHOP 1
#define     ATTACHED_INDEX_HELM 3
#define     ATTACHED_INDEX_GANG_SHOP 1
#define     ATTACHED_INDEX_LOBEN 2
#define     ATTACHED_INDEX_MUSIK 4
#define     ATTACHED_INDEX_KOFFER 5
#define     ATTACHED_INDEX_HANDSCHELLE 6
#define     ATTACHED_INDEX_HAUSTIER 7
#define     ATTACHED_INDEX_JOB 8

#define     INVALID_MARRIAGE    0
#define     DIALOG_NO_RESPONSE  0
#define     DIALOG_REG_STEP_1   1000
#define     DIALOG_REGISTER     1001
#define     DIALOG_LOGIN        1002
#define     DIALOG_REGLOGIN     1003
#define     DIALOG_TUT_1        1004
#define     DIALOG_TUT_2        1005
#define     DIALOG_TUT_3        1006
#define     DIALOG_TUT_4        1007
#define     DIALOG_TUT_5        1008
#define     DIALOG_TUT_6        1009
#define     DIALOG_TUT_7        1010
#define     DIALOG_STATS        1011
#define     DIALOG_LINIE        1012
#define     DIALOG_LISTE        1013
#define     DIALOG_FARMLISTE    1014
#define     DIALOG_BUSLISTE     1015
#define     DIALOG_JCENTER      1016
#define     DIALOG_STADTHALLE   1017
#define     DIALOG_FARMER       1018
#define     DIALOG_BUSFAHRER    1019
#define     DIALOG_TRUCKER      1020
#define     DIALOG_PILOT        1021
#define     DIALOG_KFZ          1022
#define     DIALOG_ANWALT       1023
#define     DIALOG_SELLCAR      1024
#define     DIALOG_CARKEY       1025
#define     DIALOG_REPORT       1026
#define     DIALOG_FZACC        1027
#define     DIALOG_FZSERV       1028
#define     DIALOG_MVCHEAT      1029
#define     DIALOG_SONST        1030
#define     DIALOG_TRUCKLISTE   1031
#define     DIALOG_PILOTLISTE   1032
#define     DIALOG_KFZLISTE     1033
#define     DIALOG_ANWALTLISTE  1034
#define     DIALOG_ADMINLISTE   1035
#define     DIALOG_RADIO        1036
#define     DIALOG_ATM          1037
#define     DIALOG_ABHEBEN      1038
#define     DIALOG_ANLEGEN      1039
#define     DIALOG_BANKWERT     1040
#define     DIALOG_BANKSPIELER  1041
#define     DIALOG_BANKENDE     1042
#define     DIALOG_CAROAMT      1043
#define     DIALOG_SZETTEL      1044
#define     DIALOG_REPLISTE     1045
#define     DIALOG_SANILISTE    1046
#define     DIALOG_OAMTLISTE    1047
#define     DIALOG_WTDLISTE     1048
#define     DIALOG_MIETEN       1049
#define     DIALOG_DDEALER      1050
#define     DIALOG_WDEALER      1051
#define     DIALOG_TOTLISTE     1052
#define     DIALOG_FAHRLISTE    1053
#define     DIALOG_NAVI         1054
#define     DIALOG_CONFIGHOUSE  1055
#define     DIALOG_CONFIGHOUSE_RAUSWERFEN 1056
#define     DIALOG_CONFIGHOUSE_KAUFPREIS 1057
#define     DIALOG_CONFIGHOUSE_MIETPREIS 1058
#define     DIALOG_CONFIGHOUSE_MIETSTATUS 1059
#define     DIALOG_CONFIGHOUSE_LOCKSTATUS 1060
#define     DIALOG_CONFIGHOUSE_INTERIOR 1061
#define     DIALOG_CONFIGHOUSE_NAME     1062
#define     DIALOG_MAXWAREN     1063
#define     DIALOG_CONFIGBIZ    1064
#define     DIALOG_CONFIGBIZ_RAUSWERFEN 1065
#define     DIALOG_CONFIGBIZ_KAUFPREIS 1066
#define     DIALOG_CONFIGBIZ_WARENPREIS 1067
#define     DIALOG_CONFIGBIZ_LOCKSTATUS 1068
#define     DIALOG_CONFIGBIZ_NAME 1069
#define     DIALOG_CONFIGBIZ_WAREN 1070
#define     DIALOG_CONFIGBIZ_MAXWAREN 1071
#define     DIALOG_MAXBENZIN    1072
#define     DIALOG_CONFIGTANKE  1073
#define     DIALOG_CONFIGTANKE_RAUSWERFEN 1074
#define     DIALOG_CONFIGTANKE_KAUFPREIS 1075
#define     DIALOG_CONFIGTANKE_BENZINKOSTEN 1076
#define     DIALOG_CONFIGTANKE_NAME 1077
#define     DIALOG_CONFIGTANKE_MAXBENZIN 1078
#define     DIALOG_WMENU        1079
#define     DIALOG_HANDYAUFLADEN 1080
#define     DIALOG_SERVICE      1081
#define     DIALOG_SLISTSANI    1082
#define     DIALOG_SLISTKFZ     1083
#define     DIALOG_SLISTCOP     1084
#define     DIALOG_SLISTOAMT    1085
#define     DIALOG_SLISTAWALT   1086
#define     DIALOG_MARKT        1087
#define     DIALOG_MEMBERS      1088
#define     DIALOG_AMAMT        1095
#define     DIALOG_LIEFAUSWAHL  1096
#define     DIALOG_GESCHLISTE   1097
#define     DIALOG_TANKLISTE    1098
#define     DIALOG_GOTOLISTE    1099
#define     DIALOG_HELP         1100
#define     DIALOG_HELP_ALLG    1101
#define     DIALOG_HELP_CAR     1102
#define     DIALOG_HELP_LEADER  1103
#define     DIALOG_HELP_HANDY   1104
#define     DIALOG_HELP_HAUS    1105
#define     DIALOG_HELP_BIZ     1106
#define     DIALOG_HELP_TANKE   1107
#define     DIALOG_HELP_JOB     1108
#define     DIALOG_HELP_FRAK    1109
#define     DIALOG_HELP_ADMIN   1110
#define     DIALOG_CHATOFF      1111
#define     DIALOG_TICKETS      1112
#define     DIALOG_AMT          1113
#define     DIALOG_ANGELSTATS   1114
#define     DIALOG_ASHOP        1115
#define     DIALOG_SELLFISH     1116
#define     DIALOG_TABMENU      1117
#define     DIALOG_LICENSES     1118
#define     DIALOG_LOGMSG       1119
#define     DIALOG_SZETTEL1     1120
#define     CDIALOG_WMENU       1121
#define     BEHORDEN            1122
#define     AUTOHAUSER          1123
#define     RESTO               1124
#define     TANKSTELLEN         1125
#define     KLEIDERLADEN        1126
#define     DIESHOPS            1127
#define     WORTE               1128
#define     DIALOG_STRASSE      1129
#define     DIALOG_MULLMANN     1130
#define     DIALOG_MULLMANN     1130
#define     DIALOG_GARTEN       1131
#define     DIALOG_BAUARBEITER  1132
#define     DIALOG_SCHIFFFAHRER 1133
#define     DIALOG_GELDT        1134
#define     DIALOG_EISMANN      1135
#define     DIALOG_TASCHENDIEB  1136
#define     DIALOG_WERBUNG      1137
#define     DIALOG_NOTRUF       1138
#define     DIALOG_TABMENU_VK   1139
#define     DIALOG_TABMENU_SMS  1140
#define     DIALOG_TABMENU_CALL 1141
#define     DIALOG_HITMEN_LIST  1142
#define     DIALOG_HITMEN_E     1143
#define     DIALOG_HITMEN_AUFTRAG 1144
#define     DIALOG_FSKIN        1145
#define     DIALOG_DEDEKTIV     1146
#define     DIALOG_PIZZAMAN     1147
#define     DIALOG_SLISTPIZZA   1148

#define     DIALOG_CLUBSHOP_DEL 1149
#define     DIALOG_CLUBSHOP     1150
#define     GANGFRAKBASE        1151
#define     JOBINNAVI           1152
#define     TUNINGGARAGE        1153
#define     ILLEGALEORTE        1154
#define     DIALOG_HURE         1155
#define     DIALOG_KONTOSTAND   1156
#define     DIALOG_TAXI         1157
#define     DIALOG_DRINKS       1158
#define     DIALOG_JOBWANTED    1159
#define     DIALOG_JOBTAXI      1160
#define     DIALOG_JOBAUTODIEB  1161
#define     AMMUORTE            1162
#define     DIALOG_SLISTTAXI    1163
#define     DIALOG_STARTBONUS   1164
#define     DIALOG_CMDHELP      1165
#define     DIALOG_CONFIGBIZ_ZEITEN 1166
#define     DIALOG_SET_SECURECODE 1167
#define     DIALOG_CHECK_SECURECODE 1168
#define     DIALOG_LEADER_LIST  1169
#define     DIALOG_TANKE        1170
#define     DIALOG_BANKKONTO    1171
#define     DIALOG_BANKKONTO_PIN 1172
#define     DIALOG_UEBERWEISEN_PIN 1173
#define     DIALOG_ABHEBEN_PIN  1174
#define     DIALOG_PIN_AENDERN_PIN 1175
#define     DIALOG_PIN_AENDERN  1176
#define     DIALOG_FAHRSCHULE_SOLO 1177
#define     DIALOG_CHECKAUSWAHL 1178
#define     DIALOG_SLISTWHEEL   1179
#define     DIALOG_TAXITLISTE   1180
#define     DIALOG_SILVESTER    1181
#define     DIALOG_KOFFERRAUM   1182
#define     DIALOG_KOFFERRAUM_ACTION   1183
#define     DIALOG_KOFFERRAUM_NEHMEN   1184
#define     DIALOG_KOFFERRAUM_ABLEGEN   1185
#define     DIALOG_REG_STEP_2   1186
#define     DIALOG_REG_STEP_5   1187
#define     DIALOG_REG_STEP_6   1188
#define     DIALOG_GEBURTSTAG   1189
#define     DIALOG_HANDYKAUFEN  1190
#define     DIALOG_FIGHTSTYLE   1191
#define     DIALOG_TANKMENGE    1192
#define     DIALOG_KANISTER    1193
#define     DIALOG_ZULASSUNGSSTELLE 1194
#define     DIALOG_FAHRZEUGZULASSEN 1195
#define     DIALOG_DUMMY        1196
#define     DIALOG_FAHRZEUGABMELDEN 1197
#define     DIALOG_ADBOARD_BUY   1198
#define     DIALOG_ADBOARD_MAIN  1199
#define     DIALOG_ADBOARD_HELP  1200
#define     DIALOG_ADBOARD_TEXT  1201
#define     DIALOG_ADBOARD_MATSIZE 1202
#define     DIALOG_ADBOARD_FONT    1203
#define     DIALOG_ADBOARD_TEXTSIZE 1204
#define     DIALOG_ADBOARD_BOLD      1205
#define     DIALOG_ADBOARD_TEXTCOLOR     1206
#define     DIALOG_ADBOARD_BACKCOLOR     1207
#define     DIALOG_ADBOARD_ALIGN     1208
#define     DIALOG_ADBOARD_RESET     1209
#define     DIALOG_ADBOARD_SELL     1210
#define     DIALOG_ADBOARD_TEXTCOLOR_LIST 1211
#define     DIALOG_ADBOARD_TEXTCOLOR_INPUT 1212
#define     DIALOG_ADBOARD_BACKCOLOR_LIST  1213
#define     DIALOG_ADBOARD_BACKCOLOR_INPUT  1214
#define     DIALOG_SECURECODE_REGISTER 1217
//#define     DIALOG_VISUM    1218
#define     DIALOG_WANTEDTICKET 1219
#define     DIALOG_FSLISTE  1220
#define     DIALOG_TABMENU_ADM 1221
#define     DIALOG_BAUERHELP 1222
#define     DIALOG_RATESUPPORTER 1224
#define     DIALOG_GANGSHOP_DEL 1225
#define     DIALOG_GANGSHOP     1226
#define     DIALOG_HWERBUNG     1227
#define     DIALOG_SELLDRUGS    1228
#define     DIALOG_SELLSPICE    1229
#define     DIALOG_WAFFENLAGER  1230
#define     DIALOG_WAFFENLAGER_INFO 1231
#define     DIALOG_WAFFENLAGER_LAGERN 1232
#define     DIALOG_WAFFENLAGER_BAUEN 1233
#define     DIALOG_BOMBELEGEN   1234
#define     DIALOG_BOMBDEFUSE   1235
#define     DIALOG_FAHRZEUGVERLEIH 1236
#define     DIALOG_KREDITUEBERSICHT 1237
#define     DIALOG_KREDITCONFIRM 1238
#define     DIALOG_MUSIK 1239
#define     BANKEN  1240
#define     DIALOG_TELEFONZELLE 1241
#define     DIALOG_TELEFONZELLE_CALL 1242
#define     DIALOG_TELEFONZELLE_SMS 1243
#define     DIALOG_BANK 1244
#define     DIALOG_PIN_VERGESSEN 1245
#define     DIALOG_KOFFER   1246
#define     DIALOG_KOFFER_ACTION   1247
#define     DIALOG_KOFFER_NEHMEN   1248
#define     DIALOG_KOFFER_ABLEGEN   1249
#define     DIALOG_TELEFONZELLE_CALL_MSG 1250
#define     DIALOG_TELEFONZELLE_SMS_MSG 1251
#define     DIALOG_HAUSUPGRADE 1252
#define     DIALOG_HAUSUPGRADE_WL 1253
#define     DIALOG_HAUSUPGRADE_SB 1254
#define     DIALOG_HAUSUPGRADE_WL_BUY 1255
#define     DIALOG_HAUSUPGRADE_SB_BUY 1256
#define     DIALOG_HAUSUPGRADE_SB_ACTION   1257
#define     DIALOG_HAUSUPGRADE_SB_NEHMEN   1258
#define     DIALOG_HAUSUPGRADE_SB_ABLEGEN   1259
#define     DIALOG_HAUSUPGRADE_WL_ACTION   1260
#define     DIALOG_HAUSUPGRADE_WL_NEHMEN   1261
#define     DIALOG_HAUSUPGRADE_WL_ABLEGEN   1262
#define     DIALOG_HAUSTIER 1263
#define     DIALOG_HAUSTIER_KAUFEN 1264
#define     DIALOG_PEILSENDER_LISTE 1265
#define     DIALOG_PEILSENDER_KAUFEN 1266
#define     CASINOSORT 1267
#define     DIALOG_TANKSTELLEN_OPTION 1268
#define     DIALOG_TANKSTELLEN_VIDEO 1269
#define     DIALOG_TANKSTELLEN_AUTONOTRUF 1270
#define     DIALOG_REG_STEP_7   1271
#define     DIALOG_CLUBNEON 1272
#define     DIALOG_SELLCAR_PAYMETHOD 1273
#define     DIALOG_SELLCAR_ECPIN 1274
#define     DIALOG_HANDYSHOP 1275
#define     VERKAUFH 1276
#define     DIALOG_BIZKEY 1277
#define     DIALOG_FIRMENINFO 1278
#define     DIALOG_FIRMENUEBERSICHT 1279
#define     DIALOG_SPAWNMELDUNG 1280
#define     DIALOG_TABMENU_VKO 1281
#define     DIALOG_CONFIGHOUSE_MAXMIETER 1282
#define     DIALOG_HAUSMIETER 1283
#define     DIALOG_CONFIGTANKE_BENZIN 1284
#define     DIALOG_STARTBAUER 1285
#define     DIALOG_ZOLLPASS 1286
#define     DIALOG_UEBERWEISEN 1287
#define     DIALOG_PASSWORD_UPDATE 1288
#define     DIALOG_SNACKSHOP 1289
#define     DIALOG_FPREIS 1290
#define     DIALOG_PARKSCHEIN 1291
#define     DIALOG_ANTWORT 1292
#define     DIALOG_HAUSMENU 1293
#define     DIALOG_REG_STEP_3   1294
#define     DIALOG_REG_STEP_4   1295
#define     DIALOG_EMAIL 1296
#define     DIALOG_VORNAME 1297

#define     DIALOG_HAUSMENU_MIETERANZAHL 1298
#define     DIALOG_HAUSMENU_MIETPREIS 1299
#define     DIALOG_HAUSMOEBEL_KATALOG 1301
#define     DIALOG_HAUSMOEBEL_KATALOG_EX 1300
#define     DIALOG_HAUSMENU_MOEBEL_EDIT 1302
#define     DIALOG_HAUSMENU_MOEBEL_BUY 1303
#define     DIALOG_HAUSMENU_MOEBEL_BUY_KAT 1304
#define     DIALOG_HAUSMENU_MOEBEL_BUY_ITEM 1305
#define     DIALOG_HAUSMENU_MOEBEL_SELL_CONFIRM 1306
#define     DIALOG_HAUSMENU_MOEBEL_SELL 1307
#define     DIALOG_HAUSMENU_MOEBEL_BUY_ITEM_CONFIRM 1308
#define     DIALOG_HAUSMENU_EMPTY 1309
#define     DIALOG_HAUSMENU_EDIT 1310
#define     DIALOG_SELLWTEILE    1311
#define     NAVIFAHRSCHULE       1312
//#define     DIALOG_ZUGFAHRER     1313
#define     DIALOG_SCHWARZBERUF  1314
#define     DIALOG_SCHWARZJOBS   1315
#define     DIALOG_WLAGERCOP     1316
#define     DIALOG_JOBHOTDOG     1317
#define     DIALOG_FCAROAMT       1320
#define     DIALOG_REGSPERRE    1321
#define     DIALOG_GUTSCHEINCODE 1322
#define     CARSHARING      1323
#define     DIALOG_WARTUNG 1324
#define     HOTELNAVI 1325
#define     NOTDIENSTNAVI 1326
#define     VERSICHERUNGENAVI 1327
#define     DIALOG_RECHTSSCHUTZ 1328
#define     DIALOG_SELBSTBERUF 1329
#define     DIALOG_POST 1330
#define     DIALOG_POST2 1331
#define     DIALOG_POST3 1332
#define     DIALOG_POST4 1333
#define     DIALOG_POST5 1334
#define     DIALOG_POST6 1335
#define     DIALOG_POST7 1336
#define     DIALOG_POST8 1337
#define     DIALOG_POST9 1338
#define     DIALOG_POST10 1339
#define     DIALOG_POST11 1340
#define     DIALOG_WANTEDCODES 1341
#define     DIALOG_WANTEDCODES2 1342
#define     DIALOG_WANTEDCODES3 1343
#define     DIALOG_DEAKTACC 1344
#define     DIALOG_GUP 1345
#define     DIALOG_BESTAETIGEN 1346
#define     DIALOG_YSTREAM 1347
#define     DIALOG_PECH 1348
#define     DIALOG_SHISHA 1349
#define     DIALOG_RB 1350
#define     DIALOG_TUT_8 1351
#define     DIALOG_TUT_9 1352
#define     DIALOG_TUT_10 1353
#define     DIALOG_TUT_11 1354
#define     DIALOG_WPREIS 1355
#define     DIALOG_WHEELMAN_OFFER 1356
#define     DIALOG_SELLWCODES 1357
#define     DIALOG_SEEDPOINTS 1358
#define     DIALOG_CARSELL 1359
#define     DIALOG_SELLGUN_MAIN 1360
#define     DIALOG_SELLGUN_CLIENT 1361
#define     DIALOG_SELLGUN_PRICE 1362
#define     DIALOG_FILLUP_PAYMETHOD 1363
#define     DIALOG_FILLUP_ECPIN 1364
#define     DIALOG_BWSTRAFEN 1365
#define     DIALOG_MOVECARKEY1 1366
#define     DIALOG_MOVECARKEY2 1367
#define     DIALOG_EVENTREWARDS 1368
#define     DIALOG_EVENT_ITEM_MENU 1369
#define     DIALOG_EVENT_ITEM_WEAPONS 1370
#define     DIALOG_EVENT_ITEM_REACTIVATE 1371
#define     DIALOG_EVENT_ITEM_AMMO 1372
#define     DIALOG_EVENT_ITEM_CHANGE 1373

#define     DIALOG_SAFEBOX_MENU 1374
#define     DIALOG_SAFEBOX_ACTION 1375
#define     DIALOG_SAFEBOX_STORE 1376
#define     DIALOG_SAFEBOX_TAKE 1377
#define     DIALOG_SAFEBOX_NOITEMS 1378

#define     DIALOG_FSAFEBOX_MENU 1379
#define     DIALOG_FSAFEBOX_ACTION 1380
#define     DIALOG_FSAFEBOX_STORE 1381
#define     DIALOG_FSAFEBOX_TAKE 1382
#define     DIALOG_FSAFEBOX_NOITEMS 1383

#define     DIALOG_AWAFFENLAGER_CHANGE 1384
#define     DIALOG_FINDMPARK 1385
#define     DIALOG_NEON 1386
#define     DIALOG_GHETTOBLASTER 1387
#define     DIALOG_ADMIN_GHETTOBLASTER 1388

#define     DIALOG_ASETTINGS 1389
#define     DIALOG_CONFIGBIZ_KASSE 1390
#define     DIALOG_EARNEDMONEY 1391
#define     DIALOG_PURGEFVERLEIH 1392

#define 	DIALOG_CREATE_FRAKCAR   1393
#define     DIALOG_CREATE_FRAKCAR2  1394

#define     DIALOG_REVIVE_SPAWN 1395
#define     DIALOG_SEV 1396
#define     DIALOG_FAHRSCHULE_REMOVESPERRE 1397
#define     DRIVEBYDIALOG 1398
#define     DIALOG_FRAKTIONEN_LIST 1399
#define     DIALOG_JOB_LIST 1400

//Schwarzmarkt Start
#define     DIALOG_SCHWARZMARKT_WAFFENTEILE 1401
#define     DIALOG_SCHWARZMARKT_WAFFENTEILE_ADMIN 1402
#define     DIALOG_SCHWARZMARKT_WAFFENTEILE_LAGERN 1403
#define     DIALOG_SCHWARZMARKT_WAFFENTEILE_AUSLAGERN 1404
#define     DIALOG_SCHWARZMARKT_WAFFENTEILE_PREIS 1405

#define     DIALOG_SCHWARZMARKT_DROGEN 1406
#define     DIALOG_SCHWARZMARKT_DROGEN_ADMIN 1407
#define     DIALOG_SCHWARZMARKT_DROGEN_LAGERN 1408
#define     DIALOG_SCHWARZMARKT_DROGEN_AUSLAGERN 1409
#define     DIALOG_SCHWARZMARKT_DROGEN_PREIS 1410

#define     DIALOG_SCHWARZMARKT_SPICE 1411
#define     DIALOG_SCHWARZMARKT_SPICE_ADMIN 1412
#define     DIALOG_SCHWARZMARKT_SPICE_LAGERN 1413
#define     DIALOG_SCHWARZMARKT_SPICE_AUSLAGERN 1414
#define     DIALOG_SCHWARZMARKT_SPICE_PREIS 1415

#define     DIALOG_SCHWARZMARKT_WANTEDCODES 1416
#define     DIALOG_SCHWARZMARKT_WANTEDCODES_ADMIN 1417
#define     DIALOG_SCHWARZMARKT_WANTEDCODES_LAGERN 1418
#define     DIALOG_SCHWARZMARKT_WANTEDCODES_AUSLAGERN 1419
#define     DIALOG_SCHWARZMARKT_WANTEDCODES_PREIS 1420

#define     DIALOG_SCHWARZMARKT_WEAPONS 1421

#define     DIALOG_SCHWARZMARKT_ILLEGALE_GEGENSTAENDE 1422

#define     DIALOG_SCHWARZMARKT_KENNZEICHEN 1423

#define     DIALOG_SCHWARZMARKT_SIM 1424
//Schwarzmarkt Ende

#define     DIALOG_MINIGAMES 1425
#define     DIALOG_CANCEL_ARENA 1426

#define     DIALOG_AHELP 1427

#define     DIALOG_FINDFCAR 1428
#define     DIALOG_MEMBER_RESULT 1429
#define     DIALOG_MEMBER_RANK 1430
#define     DIALOG_MEMBER_LOHN 1432

#define     DIALOG_ATMHACK 1433
#define     DIALOG_SKINS 1434
#define     DIALOG_SETTINGS 1435
#define     DIALOG_DURCHSUCHEN 1436

#define     DIALOG_CONFIRM_DRUGS 1437
#define     DIALOG_CONFIRM_WT 1438
#define     DIALOG_CONFIRM_WCODES 1439
#define     DIALOG_CONFIRM_SPICE 1440

#define     DIALOG_SKINS_EINGELADEN 1441

#define     DIALOG_CONFIGRANK 1442
#define     DIALOG_CONFIGRANK_NAME 1443

#define     DIALOG_AUSRUESTEN_FEUERWEHR 1444
#define     DIALOG_FPUNKTE 1445
#define     DIALOG_FPUNKTE_VERGABE 1446
#define     DIALOG_FPUNKTE_LIST 1447
#define     DIALOG_FPUNKTE_ENTFERNEN 1448
#define     DIALOG_SCHIFF 1449
#define     DIALOG_CHANGEPW 1450

#define     DIALOG_APUNKTE 1451
#define     DIALOG_STAATSANGEHORIGKEIT 1452
#define     DIALOG_SUICIDEARREST 1453
#define     DIALOG_FSETTINGS 1454
#define     DIALOG_FSETTINGS_AUSWAHL 1455
#define     DIALOG_FSETTINGS_SELECT 1456
#define     DIALOG_FSETTINGS_INTERIOR 1457
#define     DIALOG_FSETTINGS_VW 1458
#define     DIALOG_FSETTINGS_KASSENSTAND 1459
#define     DIALOG_FSETTINGS_SAFEBOX 1460
#define     DIALOG_FSETTINGS_DEAKTIVIEREN 1461
#define     DIALOG_FSETTINGS_MAXCARS 1462
#define     DIALOG_FSETTINGS_FRAKPUNKTE 1463
#define     DIALOG_FSETTINGS_DROGEN 1464
#define     DIALOG_FSETTINGS_WAFFENTEILE 1465
#define     DIALOG_FSETTINGS_SPICE 1466
#define     DIALOG_FSETTINGS_WANTEDCODES 1467
#define     DIALOG_FSETTINGS_KRAUTER 1468
#define     DIALOG_FSETTINGS_GANGSAMEN 1469
#define     DIALOG_FSETTINGS_SPRIT 1470
#define     DIALOG_WAFFENBUENDEL 1471
#define     DIALOG_KEKSE 1472
#define     DIALOG_POWERRIEGEL 1473
#define     DIALOG_FRAKTIONEN 1474
#define     DIALOG_COINSHOP         1475
#define     DIALOG_COINSHOP_SKILL   1476
#define     DIALOG_CASINOROB_PANEL  1477

//#define     DIALOG_WIRE_SELECTION         1493

#define SERVER_LABEL                 "Live Your Dream"

#define     KEIN_KENNZEICHEN    "KEINE PLAKETTE"

//========================================================//
/* FRAKTIONS RANK SYSTEM */
forward LoadFRank(frakID);
public LoadFRank()
{
	new rows, fields;
	cache_get_data(rows, fields);
	for(new i=0;i<rows;i++)
	{
		new frakID = cache_get_field_content_int(i, "fsID");
		if(frakID < MAX_FRACS)
		{
		    cache_get_field_content(i, "RangName0", fRang[frakID][fRangName0], gSQL, 32);
			cache_get_field_content(i, "RangName1", fRang[frakID][fRangName1], gSQL, 32);
			cache_get_field_content(i, "RangName2", fRang[frakID][fRangName2], gSQL, 32);
			cache_get_field_content(i, "RangName3", fRang[frakID][fRangName3], gSQL, 32);
			cache_get_field_content(i, "RangName4", fRang[frakID][fRangName4], gSQL, 32);
			cache_get_field_content(i, "RangName5", fRang[frakID][fRangName5], gSQL, 32);
			cache_get_field_content(i, "RangName6", fRang[frakID][fRangName6], gSQL, 32);
		}
	}
	printf("[LOAD] Fraktions Ränge wurden geladen (%i/%i)", rows, MAX_FRACS);
	return 1;
}
//========================================================//
//========================================================//
forward SaveFRank(frakID);
stock SaveFRank(frakID)
{
	new mainQuery[512];
	format(mainQuery, sizeof(mainQuery), "UPDATE `server_rang` SET `RangName0`='%s',`RangName1`='%s', `RangName2`='%s', `RangName3`='%s', `RangName4`='%s', `RangName5`='%s', `RangName6`='%s' WHERE `fsID`='%d'",
	fRang[frakID][fRangName0],fRang[frakID][fRangName1], fRang[frakID][fRangName2], fRang[frakID][fRangName3],
	fRang[frakID][fRangName4], fRang[frakID][fRangName5], fRang[frakID][fRangName6], frakID);

	mysql_function_query(gSQL, mainQuery, false, "", "");
	return 1;
}
//========================================================//


//Checkpoints
enum {
    CP_NONE,//0
    CP_FINDCAR,//   1
    CP_TOT,//2
    CP_SHOWJOB1,//  3
    CP_SHOWJOB2,//  4
    CP_SHOWJOB3,//  5
    CP_SHOWJOB4,//  6
    CP_SHOWJOB5,//  7
    CP_SHOWJOB6,//  8
    CP_SHOWJOB7,//  9
    CP_SHOWJOB8,//217
    CP_SHOWJOB9,//218
    CP_SHOWJOB10,//219
    CP_SHOWJOB11,//220
    CP_SHOWJOB12,//221
    CP_SHOWJOB13,//222
    CP_HARVEST1,//  10
    CP_HARVEST2,//  11
    CP_HARVEST3,//  12
    CP_HARVEST4,//  13
    CP_HARVEST5,//  14
    CP_HARVEST6,//  15
    CP_HARVEST7,//  16
    CP_HARVEST8,//  17
    CP_HARVEST9,//  18
    CP_HARVEST10,//19
    CP_HARVEST11,//20
    CP_HARVEST12,//21
    CP_HARVEST13,//22
    CP_HARVEST14,//23
    CP_HARVEST15,//24
    CP_HARVEST16,//25
    CP_HARVEST17,//26
    CP_HARVEST18,//27
    CP_HARVEST19,//28
    CP_HARVEST20,//29
    CP_HARVEST21,//30
    CP_HARVEST22,//31
    CP_HARVEST23,//32
    CP_HARVEST24,//33
    CP_HARVEST25,//33
    CP_HARVEST26,//33
    CP_PILOT1,//    34
    CP_PILOT2,//    35
    CP_PILOT3,//    36
    CP_PILOT4,//229
    CP_TRUCK1,//    37
    CP_TRUCK2,//    38
    //Linie1
    CP_BUSLINIE1CP1,//39
    CP_BUSLINIE1CP2,//40
    CP_BUSLINIE1CP3,//41
    CP_BUSLINIE1CP4,//42
    CP_BUSLINIE1CP5,//43
    CP_BUSLINIE1CP6,//44
    CP_BUSLINIE1CP7,//45
    //Linie2
    CP_BUSLINIE2CP1,//39
    CP_BUSLINIE2CP2,//40
    CP_BUSLINIE2CP3,//41
    CP_BUSLINIE2CP4,//42
    CP_BUSLINIE2CP5,//43
    CP_BUSLINIE2CP6,//44
    CP_BUSLINIE2CP7,//45
    CP_BUSLINIE2CP8,//45
    //Linie3
    CP_BUSLINIE3CP1,//46
    CP_BUSLINIE3CP2,//47
    CP_BUSLINIE3CP3,//  48
    CP_BUSLINIE3CP4,//49
    CP_BUSLINIE3CP5,//50
    CP_BUSLINIE3CP6,//51
    CP_BUSLINIE3CP7,//52
    CP_BUSLINIE3CP8,//53
    //Linie4
    CP_BUSLINIE4CP1,//54
    CP_BUSLINIE4CP2,//55
    CP_BUSLINIE4CP3,//56
    CP_BUSLINIE4CP4,//57
    CP_BUSLINIE4CP5,//  58
    CP_BUSLINIE4CP6,//  58
    CP_BUSLINIE4CP7,//  58
    //Schienenersatzverkehr
    CP_SEV1CP1,
    CP_SEV1CP2,
    CP_SEV2CP1,
	CP_SEV2CP2,
    /*//Zugfahrer
    CP_ZUGB1,
    CP_ZUGB2,
    CP_ZUGB3,
    CP_ZUGB4,
    CP_ZUGB5,*/
    CP_TUTORIAL1,//68
    CP_TUTORIAL2,//69
    CP_TUTORIAL3,//70
    CP_TUTORIAL4,//71
    CP_TUTORIAL5,//72
    CP_FAHRSCHULE1,//73
    CP_FAHRSCHULE2,//74
    CP_FAHRSCHULE3,//75
    CP_FAHRSCHULE4,//76
    CP_FAHRSCHULE5,//77
    CP_FAHRSCHULE6,//78
    CP_FAHRSCHULE7,//79
    CP_FAHRSCHULE8,//80
    CP_FAHRSCHULE9,//81
    CP_FAHRSCHULE10,//82
    CP_FAHRSCHULE11,//83
    CP_FAHRSCHULE12,//84
    CP_FAHRSCHULE13,//85
    CP_FAHRSCHULE14,//86
    CP_FAHRSCHULE15,//87
    CP_FAHRSCHULE16,//88
    CP_FAHRSCHULE17,//89
    CP_FAHRSCHULE18,//90
    CP_FAHRSCHULE19,//91
    CP_FAHRSCHULE20,//92
    CP_FAHRSCHULE21,//93
    CP_FAHRSCHULE22,//94
    CP_TRUCK_RAFFINERIE,// 95
    CP_TRUCK_BELADUNG,//    96
    CP_HOME,//97
    CP_FINDEN,//    98
    CP_ACCEPTCOP,//99
    CP_ACCEPTSANI,//100
    CP_ACCEPTKFZ,//101
    CP_ACCEPTOAMT,//102
    CP_TUTORIAL6,//104
    CP_TUTORIAL7,//105
    CP_BACKUP,//    106
    CP_NAVI1,// 59
    CP_NAVI2,// 60
    CP_NAVI3,// 61
    CP_NAVI4,// 62
    CP_NAVI5,// 63
    CP_NAVI6,// 64
    CP_NAVI7,// 65
    CP_NAVI8,// 66
    CP_NAVI9,// 67
    CP_NAVI10,//    107
    CP_NAVI11,//    108
    CP_NAVI12,//    109
    CP_NAVI13,//    110
    CP_NAVI14,//    111
    CP_NAVI15,//    112
    CP_NAVI16,//    113
    CP_NAVI17,//    114
    CP_NAVI18,//    115
    CP_NAVI19,//    116
    CP_NAVI20,//    117
    CP_NAVI21,//    118
    CP_NAVI22,//    119
    CP_NAVI23,//    120
    CP_NAVI24,//    121
    CP_NAVI25,//    122
    CP_NAVI26,//    123
    CP_NAVI27,//    124
    CP_NAVI28,//    125
    CP_NAVI29,//    126
    CP_NAVI30,//    127
    CP_NAVI31,//    128
    CP_NAVI32,//    129
    CP_NAVI33,//    130
    CP_NAVI34,//    103
    CP_NAVI35,//    131
    CP_NAVI36,//    132
    CP_NAVI37,//    133
    CP_NAVI38,//223
    CP_NAVI39,//224
    CP_NAVI40,//225
    CP_NAVI41,//226
    CP_NAVI42,//227
    CP_NAVI43,//228
    //Neu
    CP_NAVI44,//229
    CP_NAVI45,//230
    CP_NAVI46,//231
    CP_NAVI47,//232
    CP_NAVI48,//233
    CP_NAVI49,//234
    CP_NAVI50,//235
    CP_NAVI51,//236
    CP_NAVI52,//237
    CP_NAVI53,//238
    CP_NAVI54,//239
    CP_NAVI55,//240
    CP_NAVI56,//241
    CP_NAVI57,//242
    CP_NAVI58,//243
    CP_NAVI59,//244
    CP_NAVI60,//245
    CP_NAVI61,//246
    CP_NAVI62,//247
    CP_NAVI63,//248
    CP_NAVI64,//249
    CP_NAVI65,//250
    CP_NAVI66,//251
    CP_NAVI67,//252
    CP_NAVI68,//253
    CP_NAVI69,//254
    CP_NAVI70,//255
    CP_NAVI71,//256
    CP_NAVI72,//257
    CP_NAVI73,//258
    CP_NAVI74,//259
    CP_NAVI75,//260
    CP_NAVI76,//261
    CP_NAVI77,//262
    CP_NAVI78,//264
    CP_NAVI79,//265
    CP_NAVI80,//266
    CP_NAVI81,//267
    CP_NAVI82,//271
    CP_NAVI83,//272
    CP_NAVI84,//kawasfürzahlendassind
    CP_NAVI85,//schwarzmarkt
    CP_NAVI86,//Spice-Lager
    CP_NAVI87, //Safebox SF
    //Reinigungsjob
    CP_REINI1,// 134
    CP_REINI2,// 135
    CP_REINI3,// 136
    CP_REINI4,// 137
    CP_REINI5,// 138
    CP_REINI6,// 139
    CP_REINI7,// 140
    CP_REINI8,// 141
    CP_REINI9,// 142
    CP_REINI10,//143
    CP_REINI11,//144
    CP_REINI12,//145
    CP_REINI13,//146
    CP_REINI14,// 207
    //Gärtner Job
    CP_GARTEN1,//147
    CP_GARTEN2,//148
    CP_GARTEN3,//149
    CP_GARTEN4,//150
    CP_GARTEN5,//151
    CP_GARTEN6,//152
    CP_GARTEN7,//153
    CP_GARTEN8,//154
    CP_GARTEN9,//155
    CP_GARTEN10,//156
    CP_GARTEN11,//157
    CP_GARTEN12,//158
    CP_GARTEN13,//159
    CP_GARTEN14,//160
    CP_GARTEN15,//161
    CP_GARTEN16,//162
    CP_GARTEN17,//206
    CP_GARTEN18,//206
    CP_GARTEN19,//206
    //Müllman Job
    CP_MUELL,// 163
    CP_MUELL_ENTLEEREN,// 163
    CP_MUELLFINISH,
    CP_MUELL_CARRY,
    //Geld Transporter Job
    CP_GTRANS1,//182
    CP_GTRANS2,//183
    CP_GTRANS3,//184
    CP_GTRANS4,//185
    CP_GTRANS5,//186
    CP_GTRANS6,// 204
    CP_GTRANS7,// 208
    CP_GTRANS8,// 209
    //Bauarbeiter
    CP_BAUARBEITER1,//187
    CP_BAUARBEITER2,//188
    CP_BAUARBEITER3,//189
    CP_BAUARBEITER4,//190
    CP_BAUARBEITER5,//191
    CP_BAUARBEITER6,//192
    CP_BAUARBEITER7,//193
    CP_BAUARBEITER8,//194
    CP_BAUARBEITER9,//195
    CP_BAUARBEITER10,//196
    CP_BAUARBEITER11,//197
    CP_BAUARBEITER12,//198
    CP_BAUARBEITER13,//199
    CP_BAUARBEITER14,//200
    CP_BAUARBEITER15,//201
    CP_BAUARBEITER16,//202
    CP_BAUARBEITER17,//203
    //Rest
    //Schiff
    CP_SCHIFF1,// 210
    CP_SCHIFF2,// 211
    CP_SCHIFF3,// 212
    CP_SCHIFF4,// 213
    CP_SCHIFF5,// 214
    CP_SCHIFF6,// 215
    CP_SCHIFF7,// 216
    CP_SCHIFF8,// 217
    CP_SCHIFF_FISH1,
    CP_SCHIFF_FISH2,
    CP_SCHIFF_FISH3,
    CP_SCHIFF_FISH4,
    CP_SCHIFF_FISH5,
    CP_SCHIFF_FISH6,
    CP_SCHIFF_FISH7,
    CP_SCHIFF_FISH8,
    CP_SCHIFF_FISH9,
    CP_SCHIFF_FISH10,
    CP_SCHIFF_FISH11,
    //Showjob
    CP_SFKRAN,//263
    CP_EVENTPOINT,//  268
    CP_FAHRSCHULE_OFFLINE,// 269
    CP_DIEBSTAHL_GT,//270
    CP_MELDESTELLE,// 273

    CP_TRUCKERWAREN,
    CP_TRUCKERWAREN2,
    CP_TRUCKERTANK,
    CP_TRUCKERTANK2,
    //
    CP_HAUSSUCHEN,
    CP_PRISONRUN,

    CP_COW,
    CP_COW_FINISH,
    CP_GELDT,// 163
    CP_GELDT_ENTLEEREN,// 163
    CP_GELDTFINISH,

    CP_SPRITKLAUEN,
    CP_ROBSPRIT,
    CP_FINDFCAR,

    CP_WT_VEH,
    CP_WT_EINLADE,
    CP_WT_FAHRZEUGHINTEN,
    CP_WT_STEG,
    CP_WT_FAHRZEUGHINTEN2,
    CP_WT_BOOTEINLADE,
    CP_WT_BOOTPLATFORM,
    CP_WT_BOOTPLATFORM_ENTLADEN,
    CP_WT_BOOTPLATFORM_VERARBEITER,
    CP_WT_BOOTPLATFORM_EINLADEN,
    CP_WT_BOOTPLATFORM_VERARABHOLEN,
    CP_WT_GOBACK_STEGBOOT,
    CP_WT_GOBACK_ENTLADEN,
    CP_WT_GOBACK_EINLADEN,
    CP_WT_GOBACK_BASE
}

//#define TEST
#define NEUE_WIRTSCHAFT

#if defined TEST // Testserver
    #define     SQL_HOST            "dape.wtf"
	#define     SQL_USER            "lyd"
	#define     SQL_PASS            "lydpass123"
	#define     SQL_DATA            "lyd"

    #define     WEBSQL_HOST            "dape.wtf"
	#define     WEBSQL_USER            "lyd"
	#define     WEBSQL_PASS            "lydpass123"
	#define     WEBSQL_DATA            "lyd"


    
#else // Main-Server
    #define     SQL_HOST            "localhost"
    #define     SQL_USER            "lyd2023"
    #define     SQL_PASS            "A9ujoBtBOYdeVRyO"
    #define     SQL_DATA            "lyd2023"

    #define     WEBSQL_HOST         "localhost"
    #define     WEBSQL_USER         "lyd2023"
    #define     WEBSQL_PASS         "A9ujoBtBOYdeVRyO"
    #define     WEBSQL_DATA         "lyd2023"
#endif

#define     MAX_HOUSES          703
#define     MAX_HOTELS          30
#define     MAX_BIZES           65
#define     MAX_TANKEN          30
#define     MAX_FISCHE_PRO_PLATZ    20
#define     MAX_APLATZ          10

#define     TEAM_LSPD_COLOR     0x217BFFFF
#define     TEAM_FBI_COLOR      0x0000A0FF
#define     TEAM_NEWS_COLOR     0xFF6600FF
#define     TEAM_OAMT_COLOR     0x3592D7FF
#define     TEAM_SANI_COLOR     0xFF0021FF
#define     TEAM_FAHR_COLOR     0xFFFF00FF
#define     TEAM_STAAT_COLOR    0x008000FF

#define     COLOR_CHAT_JOB          0x8D8DFF00 // Lila
#define     COLOR_CHAT_FRAKTION     0x07FFFFFF // Türkis
#define     COLOR_CHAT_GC_NONADM    0xFFFFFFFF // Weiß
#define     COLOR_CHAT_GC_ADM       0x247BA6FF // Blau
#define     COLOR_CHAT_MUTED        0xFF8282FF // Pink

#define     COLOR_HEX_WHITE     "{FFFFFE}"
#define     COLOR_HEX_ORANGE    "{FF6731}"
#define     COLOR_HEX_RED       "{FF1705}"
#define     COLOR_HEX_LIGHTBLUE "{2E94D0}"
#define     COLOR_HEX_BLUE      "{0077FF}"
#define     COLOR_HEX_GREEN     "{15951F}"
#define     COLOR_HEX_GREENA    "{00CC00}"
#define     COLOR_HEX_YELLOW    "{FFFF00}"
#define     COLOR_HEX_BLACK     "{000000}"
#define     COLOR_HEX_PINK      "{AF00FF}"
#define     COLOR_HEX_GRAU      "{555555}"
#define     COLOR_HEX_DARKRED   "{A52A2A}"

#define     COLOR_3D_WHITE      0xFFFFFFAA

//Schwarz, Weiß und dazwischen
#define     COLOR_BOT           0xFFFFFF20
#define     COLOR_WHITE         0xFFFFFFFF
#define     COLOR_LIGHTGREY     0xCDCDCDFF
#define     COLOR_GREY          0xADADADFF
#define     COLOR_DARKGREY      0x818181FF
#define     COLOR_BLACK         0x000000FF
#define     COLOR_CLUB          0xFF00F4FF
#define     COLOR_BLINKER       0xFFD9A6FF
//Grün
#define     COLOR_LIGHTGREEN    0x00FF00FF
#define     COLOR_GREEN         0x009D00FF
#define     COLOR_DARKGREEN     0x006200FF
#define     COLOR_LIME          0x10F441AA
//Rot
#define     COLOR_LIGHTRED      0xFF6347AA
#define     COLOR_LIGHTRED2     0xFF8282AA
#define     COLOR_RED           0xAA3333AA
#define     COLOR_DARKRED       0xAA2222FF
//Yellow & Orange
#define     COLOR_LIGHTYELLOW   0xF7F3B3FF
#define     COLOR_YELLOW        0xFFFF00FF
#define     COLOR_DARKYELLOW    0xA2A602FF
#define     COLOR_ORANGE        0xFBB420FF
//Blue
#define     COLOR_LIGHTBLUE     0x33CCFFFF
#define     COLOR_BLUE          0x3592D7FF
#define     COLOR_COPPARTNER    0x0000CDFF
#define     COLOR_DARKBLUE      0x2171ABFF
#define     COLOR_TURKIS        0x07FFFFFF
//Pink & Purple
#define     COLOR_PURPLE        0xC2A2DAAA
#define     COLOR_PINK          0xFF0080FF
//Sonstige
#define     COLOR_SAMP          0xC6D9E7FF
#define     COLOR_PROP          0xB4B2AFFF
#define     COLOR_BCHAT         0xFDE144FF
#define     COLOR_COP_VERST     0x29088AFF
#define     COLOR_COP_MELDUNG   0x8D8DFF00

#define     INVALID_HOUSE_KEY   999
#define     HOTEL_OFFSET_VW     1000
#define     MaxVeh              6

#define HARTZ4_GELD 2000
#define COINS_AMOUNT 1 // 1 Coin
#define SPECIAL_ACTION_PISSING      68
#define MONEY_ALERT_VALUE 20000

#define RunOutTime 45000
#define RefuelWait 5000

#define PRESSED(%0) \
    (((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define HOLDING(%0) \
    ((newkeys & (%0)) == (%0))

#define HOLDING2(%0,%1) \
    ((%0 & (%1)) == (%1))

#define RELEASED(%0) \
    (((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

enum GangFight {
    Float:fsMinX,
    Float:fsMinY,
    Float:fsMaxX,
    Float:fsMaxY,
    Float:fsCTFx,
    Float:fsCTFy,
    Float:fsCTFz,
    fsID,
    fsOwnerFaction,
    fsAttackFaction,
    fsKillsOfOwner,
    fsKillsOfAttack,
    fsFightTime,
    fsCTF[3],
    fsLastFight,
    fsZoneID,
    fsFlag,
    Text:fsWinFaction,
    Text:fsLoseFaction,
    Text:fsWinKills,
    Text:fsLoseKills,
    Text:fsTime
}

new const g_KofferraumBezeichnung[][] = {
    {"Drogen"},
    {"Waffenteile"},
    {"Waffe"},
    {"Wantedcodes"},
    {"Spice"},
    {"Illegale Pakete"}
};

new const g_KofferBezeichnung[][] = {
    {"Drogen"},
    {"Waffenteile"},
    {"Waffe"},
    {"Wantedcodes"},
    {"Spice"}
};

new const g_HouseUpgradeBezeichnung[][] = {
    {"Drogen"},
    {"Spice"}
};

new const g_HouseUpgradeBezeichnungWL[][] = {
    {"Waffenslot 1"},
    {"Waffenslot 2"},
    {"Waffenslot 3"}
};

enum e_Mobiltelefon {
    M_sName[26],
    M_iPrice
}

new const g_Mobiltelefon[][e_Mobiltelefon] = {
    {"iPhone 11 Pro", 2250000},
    {"iPhone 11",  1750000},
    {"iPhone X Pro",1000000},
    {"iPhone X", 780000},
    {"iPhone 6", 670000},
    {"Samsung S20", 1850000},
    {"Samsung S10", 1200000},
    {"Samsung S9", 870000},
    {"Huaweii P40 Pro", 2250000},
    {"Huaweii P40", 2000000},
    {"Huaweii P30 Pro", 1500000},
    {"Huaweii P30", 1000000},
    {"Sony Xperia XZ2", 400000},
    {"Nokia Lumia 520", 420000},
    {"HTC One X", 66000},
    {"Sony Xperia M", 40000},
    {"Nokia 106", 50000}
};

new g_aiDestroyedVehicles[MAX_PLAYERS], g_aiLastVehicle[MAX_PLAYERS], g_aiLastDamagedByPlayer[MAX_PLAYERS];

enum e_PolizeiPartner {
    PP_iPartner,
    PP_iStatus
}

enum {
    PolizeiPartner_Active = 1,
    PolizeiPartner_Wait,
    PolizeiPartner_Approval
}

new g_PolizeiPartner[MAX_PLAYERS][e_PolizeiPartner];

// Fahrzeug Zuordnung

enum {
    VEH_INVALID = 0,
    VEH_PRIVAT,
    VEH_KAUFLISTE,
    VEH_BOTVEH,
    VEH_FAHRSCHULCAR,
    VEH_CAR,
    VEH_VERLEIH,
    VEH_PVERLEIH,
    VEH_PRIVATVERLEIH,
    // Jobfahrzeuge
    VEH_DROGEN,
    VEH_WDEALER,
    VEH_COMBINES,
    //VEH_ZUGB,
    VEH_BUS,
    VEH_FLUG,
    VEH_TRUCK,
    VEH_SCHIFF,
    VEH_BAUARB,
    VEH_GARTENCARS,
    VEH_REINIGUNG,
    VEH_GELDT,
    VEH_MUELL,
    VEH_EISMANN,
    VEH_PIZZACAR,
    VEH_TAXICAR,
    VEH_KFZCARS,
    VEH_HOTDOGCAR,
    // Fraktionsfahrzeuge
    VEH_LSPDCARS,
    VEH_SANICARS,
    VEH_OAMTCARS,
    VEH_FBICARS,
    VEH_BALLASCARS,
    VEH_GROVECARS,
    VEH_NEWSCARS,
    VEH_FSCARS,
    VEH_FSACARS,
    VEH_YAKUCARS,
    VEH_STAATCARS,
    VEH_AZTCARS,
    VEH_LCNCARS,
    VEH_VAGOSCARS,
    VEH_HITMANC,
    VEH_BIKERCARS,
    VEH_LVPDCARS,
    VEH_WHEELCARS,
    VEH_ARMYCARS,
    VEH_TERRORCARS,
    VEH_TRIADENCARS,
    VEH_ZOLLCARS,
    VEH_WANTEDCAR,
    VEH_AUTOSCOOTER,
    VEH_WASSERSCOOTER,
    VEH_KARTBAHN,
    VEH_OUTLAWZSCARS,
    VEH_SUPCAR
}

new aiVehicles[MAX_VEHICLES] = {VEH_INVALID,...};
new permissionleavegz[MAX_PLAYERS];
new FlasherState[MAX_VEHICLES];
new LightPwr[MAX_VEHICLES];
new SpritTimer[MAX_PLAYERS];
new SpritCheckTimer[MAX_PLAYERS];
new WTMeldung[MAX_PLAYERS];
new CheckWVehicle[MAX_PLAYERS];
new FlashTimer;
new Flasher[MAX_VEHICLES];
new sireneobj[MAX_VEHICLES][5];
new fuelcount[MAX_PLAYERS];
new fuelcountactive[MAX_PLAYERS];
new Streak[MAX_PLAYERS];
new fahrlehrerboni[MAX_PLAYERS];
new meslock[MAX_PLAYERS];
new oldskin[MAX_PLAYERS];
new bool:bBlockTelecom = false;
new bool:bPurgeEvent = false;
new KillSperre[MAX_PLAYERS];
new KillBlackSperre[MAX_PLAYERS];
new SuicidePlayer[MAX_PLAYERS];
new Mechanikersperre[MAX_PLAYERS];
new wertpaptimer[MAX_PLAYERS];
new bool:adminnavi[MAX_PLAYERS];

#if defined OPENMP
    new bool:textDrawFixed = false;//für openMP
#endif

// Frakcars-System

#define SERVERFRAKCARS_DB frakcars

enum FrakCarInfos {
	f_dbid,
	f_veh,
	f_frak,
	f_world,
    f_color1,
    f_color2,
	bool:f_sperre,
	Float:fA_x,
	Float:fA_y,
	Float:fA_z,
	Float:fA_angle,
    f_Nitro,
    f_Hyd,
    f_Wheel,
    f_Ausp,
    f_SideL,
    f_SideR,
    f_FB,
    f_RB,
    f_Spoiler,
    f_Roof,
    f_Hood,
    f_Vents,
    f_Lamps
}

new FrakCarInfo[MAX_VEHICLES][FrakCarInfos];

new NumberPlates[][] = {
    "ZIVI", // Not Useable (0)
    "LSPD",
    "FBI",
    "SA-MD",
    "SA-NA",
    "O-AMT",
    "GROVE",
    "BALLAS",
    "FAHRSCHULE",
    "STAAT",
    "YAKUZA",
    "AZTECAS",
    "CK",
    "VAGOS",
    "LS-5945", // Agency
    "LS-4771", // NineDemons
    "LVPD",
    "WHEELMAN",
    "ARMY",
    "LS-7819", // Terror - DELETED
    "LCN",
    "TRIADEN",
    "ZOLL"
};

enum e_FahrzeugBlitzer {
    FB_iBlitzerIndex,
    FB_iLimit,
    FB_iGeldStrafe
}

new aiVehicleBlitzer[MAX_VEHICLES][e_FahrzeugBlitzer];

enum e_WantedTicket {
    WT_iPoints,
    WT_iPrice
}
new const g_WantedTicket[][e_WantedTicket] = {
    {1, 10000},
    {2, 20000},
    {3, 30000}
};


#define MAX_FRIEND_LIST 10

enum {
    FriendList_Active = 1,
    FriendList_Wait,
    FriendList_Approval
}

enum e_FriendList {
    FL_sSpieler[MAX_PLAYER_NAME],
    FL_iStatus
}

new g_FriendList[MAX_PLAYERS][MAX_FRIEND_LIST][e_FriendList];

enum e_WantedRang {
    WR_iPoints,
    WR_sRang[20]
}
new const g_WantedRang[][e_WantedRang] = {
    {0,"Buerger"},
    {1,"Kleinverbrecher"},
    {4,"Verbrecher"},
    {10,"Schwerverbrecher"},
    {28,"Staatsfeind"}
};

enum e_Kofferraum {
    K_iDrogen,
    K_iWaffenteile,
    K_iWaffen,
    K_iWantedcodes,
    K_iSpice
}

new g_Kofferraum[MAX_VEHICLES][e_Kofferraum];
new g_Parkschein[MAX_VEHICLES];

enum e_Koffer {
    K_iDrogen,
    K_iWaffenteile,
    K_iWaffen,
    K_iWantedcodes,
    K_iSpice
}

new g_Koffer[MAX_PLAYERS][e_Koffer];

new g_KFZZulassung[MAX_PLAYERS][MaxVeh][32];

enum e_KreditLimits {
    KL_iKreditwert,
    KL_iKreditRate
}

new const g_KreditLimit[][e_KreditLimits] = {
    {20000,1000},
    {50000,3000},
    {100000,8000},
    {150000,10000},
    {200000,15000},
    {500000,25000}
};

stock GetKreditWertRate(wert) {
    for (new i;  i < sizeof(g_KreditLimit); i++) {
        if (wert == g_KreditLimit[i][KL_iKreditwert]) return g_KreditLimit[i][KL_iKreditRate];
    }

    return 0;
}

new SelectedPlayer[MAX_PLAYERS];
new SelectedItem[MAX_PLAYERS];
new SelectedPickup;
new wantedcodename[MAX_PLAYERS];
new pSelectedSchein[MAX_PLAYERS];
new pSelectedFpunkte[MAX_PLAYERS];
new pFpunkteID[MAX_PLAYERS];
new pOldFrak;
new pNewFrak;

enum cInfo {
    Id,
    CarId,
    CarOwner[MAX_PLAYER_NAME],
    CarModel,
    Float:CarPos_x,
    Float:CarPos_y,
    Float:CarPos_z,
    Float:CarRotate,
    CarNitro,
    CarHyd,
    CarWheel,
    CarAusp,
    CarSideL,
    CarSideR,
    CarFB,
    CarRB,
    CarSpoiler,
    CarRoof,
    CarHood,
    CarVents,
    CarLamps,
    CarPJ,
    CarC1,
    CarC2,
    CarPreis,
    CarTank,
    CarState,
    CarNeon1,
    CarNeon2,
    CarNumberplate[32],
    CarPeilsender,
    CarPeilsenderIcon,
    ObjectIDNeon1,
    ObjectIDNeon2,
    SpecialTuned1,
    SpecialTuned2,
    SpecialTuned3,
    SpecialTuned4,
    SpecialTuned5,
    SpecialTuned6,
    SpecialTuned7,
    SpecialTuned8,
    SpecialTuned9,
    isSpecialTuned,
    TUV,
    CarDistance
};

enum {
    e_Vehicle_Status_Normal, //0
    e_Vehicle_Status_Towed, //1
    e_Vehicle_Status_Destroyed //2
}

new PlayerCar[MAX_PLAYERS][MaxVeh][cInfo];

new const g_Gutschein[][] = {
    {""},
    {"30.000 Dollar"},
    {"80.000 Dollar"},
    {"1 LevelUp"},
    {"2 LevelUp"},
    {"3 Respektpunkte"},
    {"6 Respektpunkte"},
    {"Neon-Premium"},
    {"Extra Fahrzeugschlüssel"}
};

#define MAX_HOUSEINTERIORS 30

enum HouseInterior {
    HI_iID,
    Float:HI_fExitX,
    Float:HI_fExitY,
    Float:HI_fExitZ,
    HI_iInterior,
    Float:HI_fPickupX,
    Float:HI_fPickupY,
    Float:HI_fPickupZ,
    HI_iUpgradePickup
};

new g_HouseInterior[MAX_HOUSEINTERIORS][HouseInterior];
new g_iHouseInteriors;

enum HausDaten {
    Float:EnterX,
    Float:EnterY,
    Float:EnterZ,
    hBesitzer[MAX_PLAYER_NAME],
    hMieterMax,
    hMieterAnzahl,
    hName[32],
    hPreis,
    hMieten,
    Text3D:hText,
    hPickup,
    hLock,
    hMietPreis,
    hID,
    hKasse,
    Float:SellX,
    Float:SellY,
    Float:SellZ,
    Float:SellRot,
    HouseInteriorID,
    SellObjectID
}

new Haus[MAX_HOUSES][HausDaten];
new iHaus;

enum HotelDaten {
    Float:EnterX,
    Float:EnterY,
    Float:EnterZ,
    Float:ExitX,
    Float:ExitY,
    Float:ExitZ,
    hBesitzer[MAX_PLAYER_NAME],
    hName[32],
    Text3D:hText,
    hPickup,
    hLock,
    hMietPreis,
    hID,
    hEnterInterior,
    hExitInterior,
    hEnterVirtualWorld
}

new Hotel[MAX_HOTELS][HotelDaten];
new iHotel;

enum BizDaten {
    Float:EnterX,
    Float:EnterY,
    Float:EnterZ,
    Float:ExitX,
    Float:ExitY,
    Float:ExitZ,
    bBesitzer[MAX_PLAYER_NAME],
    bName[32],
    bPreis,
    Text3D:bText,
    bPickup,
    bLock,
    bID,
    bInterior,
    bKasse,
    bEintritt,
    bWaren,
    bMaxWaren,
    bWarenPreis,
    bLadenAuf,
    bLadenZu,
    bErpresserFraktion,
    bErpresserForderung,
    bErpresserState
}

new Biz[MAX_BIZES][BizDaten];
#define MAX_STATIC_BIZES 6

enum StaticBizDaten {
    SBD_iID,
    SBD_iWaren,
    SBD_iTyp,
    Float:SBD_fX,
    Float:SBD_fY,
    Float:SBD_fZ,
    Text3D:SBD_t3dLabel
}

new StaticBiz[MAX_STATIC_BIZES][StaticBizDaten];
new StromBiz_Index, HandyShopBiz_Index, CasinoBiz_Index;

enum {
    Bankraub_Wartezeit = 0,
    Bankraub_Bereit,
    Bankraub_Aktiv
}

#define BANKRAUB_ZEIT (40*60)
new g_tPulseBank,g_tPulseBankLV, g_unixBankraub, g_tPulseBankPosition, g_iBankraubStatus= Bankraub_Bereit,g_iBankraubLVStatus= Bankraub_Bereit, g_aiVehicleSirene[MAX_VEHICLES][4];

#define NINEDEMONSROB_ZEIT (360*60)
new g_tPulseND, g_tPulseRobPosition, g_iNDRobStatus= Bankraub_Bereit;

new FischNamen[8][64] = {
    "Goldfisch",
    "Garnele",
    "Schwertfisch",
    "Forelle",
    "Hai",
    "Delphin",
    "Seebarsch",
    "Flunder"
};

enum TankeDaten {
    Float:EnterX,
    Float:EnterY,
    Float:EnterZ,
    tBesitzer[MAX_PLAYER_NAME],
    tName[32],
    tFillCost,
    Text3D:tText,
    tPickup,
    tKasse,
    tBenzin,
    tMaxBenzin,
    tID,
    tPreis,
    taiFillCost[3],
    bool:tVideoueberwachung,
    bool:tAutomatischerNotruf,
    tErpresserFraktion,
    tErpresserForderung,
    tErpresserState,
    tUnixRob,
    tRobberID
}

new Tanke[MAX_TANKEN][TankeDaten];
new iTanke;


new pDrunkLevelLast[MAX_PLAYERS];
new pFPS[MAX_PLAYERS];

#define BUS_TICKET_PRICE 20

new
    sBusLinie1[]= "Linie 1:\n\
                LS - Stadthalle\n\
                LS - Fahrschule\n\
                LS - Strand\n\
                LS - Victim Kleidergeschäft\n\
                LS - Neulingsspawn\n\
                LS - Standesamt\n\
                LS - Busbahnhof",
    sBusLinie2[]= "Linie 2:\n\
                LS - ZIP Kleidungshop\n\
                LS - Zentralbank\n\
                LS - 24/7 Shop\n\
                LS - Subway\n\
                LS - Verwahrplatz\n\
                LS - Einkaufszentrum\n\
                LS - Busbahnhof",
    sBusLinie3[]="Linie 3:\n\
                LS - Autohaus Günstig\n\
                LS - Flughafen/Airport\n\
                LS - Hafen\n\
                LS - Binco Kleidergeschäft\n\
                LS - Altes Krankenhaus\n\
                LS - Alhambra (Disco)\n\
                LS - Busbahnhof",
    sBusLinie4[]="Linie 4:\n\
                Bauernfarm und Trucker GmbH\n\
                LS - Zollamt\n\
                LS - Posthaus\n\
                LS - Clubvilla\n\
                Los Santos Startower\n\
                LS - Busbahnhof";

new g_unixWerbung = 0;
new g_unixWerbungHitman = 0;

enum e_Drinks {
    D_sName[16],
    D_iPrice,
    D_iTime,
    D_iAnimation
}

new const g_Drinks[][e_Drinks] = {
    {"Wasser",50,120,SPECIAL_ACTION_DRINK_SPRUNK},
    {"Cafe",60,140,SPECIAL_ACTION_DRINK_SPRUNK},
    {"Vodka",80,200,SPECIAL_ACTION_DRINK_WINE},
    {"Bier",50,170,SPECIAL_ACTION_DRINK_WINE},
    {"Jack Daniels",150,250,SPECIAL_ACTION_DRINK_WINE}
};

enum AngelDaten {
    aID,
    Float:PosX,
    Float:PosY,
    Float:PosZ,
    Fische,
    aPickup,
    Text3D:aText,
    Float:FacingAngle
}

new Angel[MAX_APLATZ][AngelDaten];
new iAngel;

enum KasseDaten {
    Staat,
    Sana,
    Samd,
    Oamt,
    Fahrschule,
    Ballas,
    Grove,
    Yakuza,
    Aztecas,
    LCN,
    Vagos,
    Hitman,
    BBikerZ,
    Wheelmenk,
    TerrorK,
    OutlawzK,
    ndgradethaK
}

new Kasse[KasseDaten];

#define MAX_BLITZER 50
#define AREA_BLITZER 535
#define AREA_BLITZER_VEHICLE 536
#define AREA_BLITZER_OUTER 537
#define AREA_ZOLL 538
#define OBJECT_ZOLL 538
#define OBJECT_FALLTURM 539
#define OBJECT_FALLTURM_PLATTE 540
#define OBJECT_SCHIFF 541
#define OBJECT_BREAKDANCER 542

/*IsBulletWeapon(weaponid)
    return (WEAPON_COLT45 <= weaponid <= WEAPON_SNIPER) || weaponid == WEAPON_MINIGUN;

GetWSlot(weaponid)
{
	switch(weaponid)
    {
        case 1: return 0;
        case 2..9: return 1;
        case 25..27: return 2;
        case 28, 29, 32: return 3;
        case 30, 31: return 4;
        case 16..18, 39: return 5;
        case 10..15: return 6;
    }
    return -1;
}

SetPlayerArmedWeaponEx(playerid, weaponid)
{
    SetPVarInt(playerid, "WaffenID", weaponid);
    PlayerPlaySound(playerid, 1138, 0.0, 0.0, 0.0);
    return SetPlayerArmedWeapon(playerid, weaponid);
}
*/
new iTempWeapon[MAX_PLAYERS];
new bool:DriveBy[MAX_PLAYERS];

enum e_Blitzer {
    B_iObjectID,
    B_iArea,
    B_iAreaOuter,
    B_iVehicle
}

new g_iBlitzer, g_Blitzer[MAX_BLITZER][e_Blitzer];

//Help System im help include!!!

#define MAX_HAUS_MOEBEL 30

enum e_HausMoebelKategorie {
    HMK_iID,
    HMK_sTitel[32]
}

new const g_HausMoebelKategorie[][e_HausMoebelKategorie] = {
    {1,"Wohnzimmer"},
    {2,"Kommoden/Schränke"},
    {3,"Badezimmer/Küche"},
    {4,"Musikset"},
    {5,"Schlafzimmer"},
    {6,"Stühle"},
    {7,"Tische"},
    {8,"Elektronik"},
    {9,"Sonstiges"},
    {10,"Pflanzen"},
    {11,"Poster"}
};

enum e_HausMoebelObjekt {
    HMO_iID,
    HMO_iMoebelID,
    HMO_iObjectID
}

new g_HausMoebelObjekt[MAX_HOUSES][MAX_HAUS_MOEBEL][e_HausMoebelObjekt];

enum e_HausMoebelDummy {
    HMD_iID,
    HMD_iHouseID,
    HMD_iMoebelID,
    Float:HMD_fX,
    Float:HMD_fY,
    Float:HMD_fZ,
    Float:HMD_fRotX,
    Float:HMD_fRotY,
    Float:HMD_fRotZ
}

new HausMoebelDummy[e_HausMoebelDummy];

enum e_HausMoebel {
    HM_iID,
    HM_iModelID,
    HM_iHMKID,
    HM_iPrice,
    HM_sTitel[64]
}

new const g_HausMoebel[][e_HausMoebel] = {
        //Wohnzimmer
        {1,2293,1,18000,"Dunkelbrauner Lederhoker"},
        {2,2291,1,20000,"Dunkelbrauner Ledersessel"},
        {3,1723,1,8800,"Schwarzes Sofa aus Leder mit Armlehne aus Holz"},
        {4,1724,1,4500,"Schwarzer Sessel aus Leder mit Armlehne aus Holz"},
        {5,1726,1,26000,"Schwarzer EckSofa aus Leder"},
        {6,1727,1,20000,"Schwarzer Sessel aus Leder"},
        {7,1769,1,4800,"Dunkelblauer Sessel"},
        {8,1729,1,2100,"Sessel in Cremefarbe"},
        {9,1728,1,5200,"Sofa in Cremefarbe"},
        {10,2339,7,2400,"Moderne Kommode in Weiß"},
        {11,2296,1,5000,"Kommode mit Fernseher"},
        {12,2297,1,1800,"Eckkommode mit Fernseher"},
        {13,2123,1,4500,"Weißer Esstischstuhl"},
        {14,2124,1,2500,"Roter Esstischstuhl aus Holz"},
        {15,2079,1,1500,"Schwarzer Esstischstuhl aus Metall"},
        //Kommoden Schränke
        {16,2200,2,6900,"Großer Weißer Kleiderschrank"},
        {17,2167,2,6300,"Kleiner Weißer Kleiderschrank"},
        {18,2025,2,3300,"Kleiderschrank aus Holz"},
        {19,1742,2,3500,"Bücherregal aus Holz"},
        {20,2164,2,4100,"Weißer Bücherregal"},
        {21,2133,2,4250,"Weiße Schrankkommode"},
        {22,2137,2,3100,"Schrankkommode aus Holz"},
        {23,2191,2,4000,"Dunkelblauer Bücherregal"},
        {24,2162,2,3050,"Bücherkommode"},
        {25,2609,2,800,"Metallspind"},
        //Badezimmer und Küche
        {26,1208,3,3500,"Waschmaschine"},
        {27,2528,3,1640,"Toilette"},
        {28,2517,3,3200,"Glasdusche"},
        {29,2127,3,6500,"Moderner Kühlschrank in Rot"},
        {30,2130,3,3600,"Moderne Küchenkommode in Rot"},
        {31,19609,3,3420,"Kühlschrank in Weiß"},
        {32,2526,3,1800,"Badewanne"},
        {33,19581,3,180,"Kochpfanne"},
        {34,19585,3,200,"Kochtopf"},
        {35,19586,3,150,"Pfannenwender"},
        {36,19818,3,150,"Weinglas"},
        {37,19819,3,150,"Cocktailglas"},
        {38,19824,3,360,"Weinflasche"},
        {39,19823,3,400,"Alkoholflasche"},
        //Musiksets
        {40,19609,8,6350,"Musik-Schlagzeug"},
        {41,2226,4,5100,"Ghettoblaster in rot"},
        {42,2103,4,5100,"Ghettoblaster in weiß"},
        {43,2102,4,5100,"Ghettoblaster in schwarz"},
        {44,2231,4,4100,"kleine Musikboxen aus Holz"},
        {45,1840,4,4200,"kleine Musikboxen in weiß"},
        {46,2229,4,5400,"lange Musikboxen in schwarz"},
        {45,2232,4,5300,"breite Musikboxen in schwarz"},
        {46,2227,4,5800,"Steh-Musikanlage"},
        {47,2225,4,5600,"Musikanlage auf Kommode"},
        {48,2099,4,5700,"Musikanlage in Kommode + Musikbox"},
        //Schlafzimmer
        {49,1798,5,7200,"Doppelbett aus Glanzholz"},
        {50,2298,5,8200,"Doppelbett aus Glanzholz + Nachtkommode"},
        {51,1701,5,6100,"Doppelbett aus Beigen Leder"},
        {52,1797,5,6700,"Doppelbett aus dunklem Holz"},
        {53,2302,5,4800,"Doppelbett aus Holz"},
        {54,1796,5,2450,"Einzelbett aus Holz"},
        {55,1793,5,1000,"Matratze"},
        //Stühle
        {56,1671,6,2700,"Schreibtischstuhl aus Leder"},
        {57,1714,6,3000,"großer Schreibtischstuhl aus Leder"},
        {58,1806,6,2050,"Weißer Schreibtischstuhl"},
        {59,1720,6,650,"Stuhl in weiß Holz"},
        {60,2120,6,450,"Stuhl aus Holz"},
        {61,2125,6,1850,"Roter Barhocker aus Leder"},
        {62,1716,6,1850,"Schwarzer Barhocker aus Leder"},
        //Tische
        {63,2165,7,6000,"Schreibtisch mit Computer"},
        {64,1827,7,5200,"Runder Glastisch"},
        {65,1815,7,4100,"Runder Glastisch aus Holz"},
        {66,1433,7,4280,"Schwarzer Tisch"},
        {67,2205,7,1900,"Schreibtisch aus Holz"},
        {68,1826,7,5600,"Moderner Hochglanz Tisch in weiß"},
        //Elektronik
        {69,1518,8,2100,"Fernseher"},
        {70,19807,8,1550,"Haustelefon"},
        {71,19808,8,410,"Tastertur"},
        {72,19893,8,4980,"Laptop"},
        {73,19894,8,4550,"Playstation"},
        {74,2779,8,3800,"Spielautomat"},
        {75,1775,8,2610,"Getränkeautomat"},
        {76,2202,8,2400,"Kopierer"},
        {77,18655,8,950,"Party Lichtstrahler in Blau"},
        {78,18654,8,950,"Party Lichtstrahler in Grün"},
        {79,18653,8,950,"Party Lichtstrahler in Rot"},
        //Sonstiges
        {80,2629,9,4500,"Hantelbank"},
        {81,2628,9,5200,"Große Hantelbank"},
        {82,2627,9,4100,"Laufband"},
        {83,2630,9,4100,"Laufrad"},
        {84,1985,9,1350,"Boxsack"},
        {85,19619,9,200,"Tresor"},
        {86,1738,9,500,"Heizung"},
        {87,1481,9,1100,"Grill"},
        {88,19128,9,8000,"Discoboden"},
        {89,19279,9,900,"Scheinwerfer"},
        {90,2600,9,750,"Tiloskop"},
        {91,19619,9,4000,"Tresor"},
        {92,2406,9,870,"Surfboard"},
        {93,2613,9,200,"Mülleimer in Weiß"},
        {94,19622,9,200,"Besen"},
        //Pflanzen
        {95,626,10,200,"Palme in Topf"},
        {96,2251,10,150,"Orchideen im Topf"},
        {97,628,10,280,"Bonsaipflanze im Topf"},
        {98,3802,10,200,"Wand Pflanze"},
        {99,2194,10,200,"Minikaktus in Vase"},
        {100,2245,10,170,"Tischblume in Topf"},
        //Poster
        {101,19166,11,150,"SA Map-Poster"},
        {102,19174,11,120,"Landschaftposter"},
        {103,19173,11,200,"Poster - große Brücke in SF"},
        {104,19172,11,200,"Stadtposter"},
        {105,1736,11,850,"Hirschkopf"}
};

new skins_array[] =
{
	1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,
    50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,67,68,69,72,73,75,76,77,78,79,80,81,82,83,84,85,87,88,89,90,91,93,94,95,96,
    97,98,101,111,112,119,121,127,128,129,130,131,
    132,133,134,135,136,137,138,139,140,141,145,146,151,152,153,154,155,156,157,159,160,161,162,
    167,168,170,171,172,176,178,179,180,181,182,183,188,189,190,191,192,193,194,196,197,198,199,200,201,
    202,205,206,207,209,210,211,212,213,214,215,216,217,218,225,226,227,229,230,231,232,233,234,235,236,
    237,238,239,240,241,242,243,244,245,246,249,250,251,253,255,256,257,258,259,260,261,262,264,268,
    289,290,291,296,297,298,299
};

new skins_pd_array[] =
{
 265, 266, 267, 280, 284, 285, 288, 300, 303, 304, 306, 12, 93, 93, 170, 188, 283
};

new skins_samd_array[] =
{
    70, 274, 275, 276, 277, 278, 279, 308, 12, 93, 93, 170, 188, 1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,
    50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,66,67,68,69,72,73,75,76,77,78,79,80,81,82,83,84,85,87,88,89,90,91,93,94,95,96,
    97,98,101,111,112,119,121,127,128,129,130,131,
    132,133,134,135,136,137,138,139,140,141,145,146,151,152,153,154,155,156,157,159,160,161,162,
    167,168,170,171,172,178,179,180,181,182,183,188,189,190,191,192,193,194,196,197,198,199,200,201,
    202,205,206,207,209,210,211,212,213,214,215,216,217,218,225,226,227,229,230,231,232,233,234,235,236,
    237,238,239,240,241,242,243,244,245,246,249,250,251,253,255,256,257,258,259,260,261,262,264,268,
    289,290,291,296,297,298,299
};

new skins_oamt_array[] =
{
    71, 305, 12, 93, 93, 170, 188
};

new skins_regierung_array[] =
{
    163, 164, 165, 166, 295
};

new skins_terrorist_array[] =
{
    14, 136, 137, 142, 144, 200, 220, 221, 222
};

new skins_nd_array[] =
{
    32, 100, 158, 247, 248, 254, 14, 136, 137, 142, 144, 200, 220, 221, 222
};

new skins_fbi_array[] =
{
	286 , 285 , 309 , 166, 165,59 , 21 , 60 , 72 ,188 , 229 , 93 , 233 , 226
};

new skins_zollamt_array[] =
{
    265 , 266 , 267 , 280 , 284 , 285 , 300 , 303 , 304 , 306 , 12 , 93 , 170 , 188, 282, 283, 288, 302
};

new skins_news_array[] =
{
    17, 57, 147, 148, 150, 187, 219
};

new skins_yakuza_array[] =
{
    122, 123, 169, 186, 203, 228
};

new skins_gsf_array[] =
{
    65, 105, 106, 107, 269, 270, 271
};

new skins_ballas_array[] =
{
    13, 102, 103, 104, 293
};

new skins_vagos_array[] =
{
    47, 108, 109, 110, 292
};

new skins_aztecas_array[] =
{
    114, 115, 116, 173, 174, 175,176,177
};

new skins_triaden_array[] =
{
    117, 118, 120, 208, 224
};

new skins_cali_array[] =
{
    46, 184, 185, 223, 273
};

new skins_lcn_array[] =
{
    113, 124, 125, 126, 263, 272
};

//<17:52:21> "Shadow": 272   249   216 Carli

#define MAX_TELEFONZELLEN 150
#define AREA_TELEFONZELLE 536

enum e_Telefonzelle {
    T_iObjectID,
    Text3D:T_t3dLabel
}

new g_iTelefonzelle, g_Telefonzelle[MAX_TELEFONZELLEN][e_Telefonzelle];

#if defined WEIHNACHTS_EVENT
    enum e_Geschenk {
        bool:G_bFound,
        G_iModel,
        G_iObjectID,
        Text3D:G_t3dLabel,
        Float:G_fX,
        Float:G_fY,
        Float:G_fZ
    }

    new g_iGeschenk;
    new g_Geschenk[][e_Geschenk] = {
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,1078.9740,-2135.0076,59.1114 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,1604.8754,-2693.9211,13.5469 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2078.4958,-2764.3872,2.2148 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2481.2773,-2372.1384,13.6250 }, // Osterei 19341
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2874.2598,-2125.2559,4.1695 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2961.8484,-1877.9211,8.7813 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2696.3406,-1392.7244,33.3921 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2549.0935,-953.0178,82.5777 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2208.7600,-1370.4019,25.6908 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2351.0181,-655.4427,128.0547 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2343.8057,384.7440,26.0141 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,1033.1106,-61.7556,22.7405 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,211.2027,24.7786,2.5708 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,251.4405,-300.0209,1.5781 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-744.1266,-884.6760,110.9090 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1035.5731,-719.8304,32.0078 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1858.3680,-1194.1261,34.8594 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-2211.9185,-1714.4364,376.4037 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-2023.6028,-861.8611,32.1719 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-2482.7644,-284.2287,40.5412 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-2976.3635,502.1966,2.4297 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-2816.8188,1095.7631,27.7422 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-2051.5190,1109.5011,53.2891 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1610.5121,1331.0670,5.7401 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1359.1635,308.6623,7.1875 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1705.7104,14.4345,3.5547 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1406.9772,-135.1877,6.0000 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-756.2743,-132.9903,65.8281 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,196.0154,-1230.0449,76.5034 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,531.0328,-1230.4192,37.8963 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,860.2167,-731.2683,101.4511 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2262.2981,-756.4196,38.0099 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,1954.1663,-1363.8777,18.5781 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,359.2385,-2156.4741,7.8399 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-65.7758,-1146.1208,1.0781 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-85.7822,-102.2802,6.4844 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-679.7560,966.6936,12.1328 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-772.5918,1434.9199,13.7891 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1476.8936,1877.1807,32.6328 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1821.7047,2056.0806,9.4011 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-2090.1746,2313.0225,25.9141 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1483.6116,2629.4966,58.7813 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-1290.8533,2511.9036,87.0342 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-551.1439,2594.7085,53.9348 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,-238.1836,2649.3203,62.8293 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,258.2831,2937.0186,1.7661 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,955.2698,1738.4801,8.6484 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,1435.1826,1460.4963,10.8203 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,2078.6787,1911.4092,14.0414 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,1691.6219,2245.6472,10.8203 }, // Osterei
        {false,19320, INVALID_OBJECT_ID , Text3D:INVALID_3DTEXT_ID ,1838.7594,2836.5481,10.8359 } // Osterei
    };
#endif

enum ahSpawn {
    Float:CarPos_x,
    Float:CarPos_y,
    Float:CarPos_z,
    Float:CarRotate,
};

new const Autospawns[12][ahSpawn] = {
    {1795.1863,-1884.0706,13.5724,265.0000}, // Los Santos - Intercars
    {219.6691,-1421.1245,13.3218,225.0000}, // Los Santos - Luxusautohaus
    {2535.8975, -1520.9816, 25.0000}, // Los Santos - Motorradhaus // BIKEDEALERSHIP_VEHICLE_SPAWN // TODO: can't use define here
    {1849.2611,-2545.6445,13.5469,90.0000}, // Los Santos Air Shop
    {946.9811,-1933.6057,-0.3639,90.0000}, //Bootshaus
    {679.9109,-1191.3190,16.2637,130.0000}, //Fahrradhaus
    {872.0743, -932.9666, 42.8534, 135.0000}, //Oldtimer - Autohaus
    {-1458.2250,678.7433,-0.0698,270.0000}, //Bootsverkauf in San Fierro
    {1295.5571,1397.1111,11.1011,270.0000}, //Flugzeugverkauf in Las Venturas
    {2147.5896,-1138.6252,25.3605,270.0000}, //Autohaus günstig in Los Santos 2
    {2146.2273,1386.4047,10.6953,90.0000}, //Autohaus günstig in Las Venturas
    {-1640.8359,1194.1641,7.0643,270.0000} //Spezialautohaus in San Fierro
};
// TODO: peek auslagern ^

enum aHaus {
    Name[128],
    Autohaus,//0=Intercars,1=Grottis,2 = Coutt and Schutz
    Modelid,
    Carid,
    aPreis,
    Float:CarPos_x,
    Float:CarPos_y,
    Float:CarPos_z,
    Float:CarRotate,
    Tank,
};

new dealerShipBizID[] = {46, 48, 53, 51, 55, 57, 49, 54, 52, 46, 50,4};

new Kaufliste[104][aHaus] = {
//Normal-Karosserien - Intercars
    {"Camper", 0, 483 , 1 , 1240000 ,1777.8184,-1890.2344,13.3802,310.2503, 65},
    {"Rancher", 0, 489  , 1 , 900000 , 1778.6202,-1894.5646,13.5448,308.2993, 70},
    {"Landstalker", 0, 400 , 1 , 1020000 ,1777.6068,-1900.3296,13.4808,311.0105, 70},
    {"Sunrise", 0, 550 , 1 , 62000 ,1777.4644,-1906.6050,13.2118,309.2133, 60},
    {"Premier", 0, 426 , 1 , 86000 ,1777.5166,-1912.1143,13.1128,309.2785, 60},
    {"Sentinel", 0, 405 , 1 , 154000 ,1777.6332,-1917.0110,13.2625,305.9795, 60},
    {"Admiral", 0, 445 , 1 , 92000 ,1777.6113,-1922.2838,13.2511,306.0323, 60},
    {"Stratum", 0, 561 , 1 , 220000 ,1777.7556,-1927.2994,13.2020,303.4868, 50},
    {"Club", 0, 589 , 1 , 100000 ,1778.2655,-1931.7804,13.0459,303.9989, 60},
    {"Flash", 0, 565 , 1 , 82000 ,1803.4918,-1932.1062,13.0126,57.5682, 60},
    {"Elegy", 0, 562 , 1 , 78000 ,1804.0334,-1927.7360,13.0484,59.6635, 60},
    {"Blista", 0, 496 , 1 , 68000 , 1804.0896,-1922.8599,13.1080,57.8509, 60},
    {"Bravura", 0, 401 , 1 , 64000 ,1803.9370,-1917.7627,13.1707,61.4064, 50},
    {"Manana", 0, 410 , 1 , 68000 ,1803.8704,-1912.6768,13.0536,62.5491, 50},
    {"Fortune", 0, 526 , 1 , 64000 ,1804.4590,-1908.1527,13.1659,60.4806, 50},
    {"Uranus", 0, 558 , 1 , 70000 ,1804.1251,-1903.1792,13.0329,61.4885, 50},
//Luxus-Karosserien - Grottis
    {"Buffalo", 1, 402, 1, 5400000, 197.1833, -1435.1842, 13.1553, 285.4555, 50},
    {"Stretch", 1, 409, 1, 20000000, 212.1461, -1437.2371, 17.5307, 43.5791, 60},
    {"Infernus", 1, 411, 1, 10400000, 219.7624, -1432.9853, 17.3841, 99.6492, 60},
    {"Cheetah", 1, 415, 1, 4800000, 202.9928, -1441.6617, 13.0403, 289.1838, 55},
    {"Banshee", 1, 429, 1, 6800000, 212.4055, -1426.6086, 12.9289, 162.8867, 55},
    {"Sultan", 1, 560, 1, 5000000, 206.0075, -1444.7790, 13.1077, 295.4950, 60},
    {"Bullet", 1, 541, 1, 8600000, 213.0166, -1425.7722, 17.3465, 106.3056, 60},
    {"Turismo", 1, 451, 1, 8600000, 216.1427, -1429.4055, 17.4349, 104.3519, 60},
    {"Jester", 1, 559, 1, 5000000, 200.0945, -1438.5798, 12.9746, 286.5507, 60},
    {"Comet", 1, 480, 1, 5000000, 209.3410, -1423.5688, 13.0185, 165.8007, 60},
    {"Super GT", 1, 506, 1, 3600000, 215.2903, -1429.5493, 12.9634, 158.9967, 60},
    {"ZR-350", 1, 477,1,4000000, 218.2065, -1432.4525, 12.9512, 155.3708, 60},
//Motorradhaus
    {"FCR-900", 2, 521, 1, 900000, 2505.6293, -1523.6760, 23.9423, 298.8435, 30},
    {"NRG-500", 2, 522, 1, 3600000, 2512.8532, -1524.5207, 23.9801, 131.1481, 30},
    {"Freeway", 2, 463, 1, 800000, 2518.4553, -1532.6268, 23.8086, 34.2093, 30},
    {"Wayfarer", 2, 586, 1, 560000, 2520.3647, -1532.3806, 23.7693, 37.8446, 30},
    {"Sanchez", 2, 468, 1, 360000, 2514.4797, -1532.7170, 23.9379, 28.4829, 35},
    {"Faggio", 2, 462, 1, 16000, 2512.8576, -1532.8160, 23.8680, 30.4016, 15},
	{"PCJ-600", 2, 461, 1, 860000, 2505.8344, -1527.1131, 23.9552, 300.1329, 30},
	{"BF-400", 2, 581, 1, 700000, 2516.2883, -1532.6101, 23.8641, 30.8514, 30},
//Flugzeug - Los Santos Air Shop
    {"Maverick", 3, 487, 1,30000000, 1888.7319,-2622.7720,13.7253,359.7918, 300},
    {"Dodo", 3, 593, 1,14000000, 1821.9655,-2621.8706,14.0082,2.6027, 100},
    {"Shamal", 3, 519, 1,50000000, 1754.5253,-2624.3870,14.4658,1.4927, 500},
//Bootshaus in Los Santos
    {"Speeder", 4, 452, 1, 1540000, 952.2955,-1994.8793,-0.4687,92.2294, 60},
    {"Squallo", 4, 446, 1, 1400000, 961.4017,-1949.5627,-0.2990,87.3579, 60},
    {"Reefer", 4, 453, 1, 1000000, 929.9953,-1984.5798,-0.1762,179.7515, 60},
    {"Tropic", 4, 454, 1, 3600000, 928.6147,-1961.6210,0.1139,180.4821, 60},
    {"Jetmax", 4, 493, 1, 1000000, 941.3287,-1949.8480,-0.2604,87.9953, 60},
    {"Dinghy", 4, 473, 1, 58000, 938.2015,-1994.0519,-0.2282,90.9601, 60},
    {"Coastguard", 4, 472, 1, 840000, 965.9826,-1994.2590,0.1605,89.7103, 60},
//Fahrradhaus
    {"Mountain Bike", 5, 510, 1, 80000, 698.8859, -1192.6660, 15.7238, 326.3322, 0},
    {"Bike", 5, 509, 1, 30000, 689.2124, -1186.1840, 15.2118, 48.4005, 0},
    {"BMX", 5, 481, 1, 36000, 693.5145, -1179.3686, 15.1269, 80.6211, 0},
//Oldtimer-Autohaus
    {"Stafford", 6, 580, 1, 30000000, 895.8816, -937.5002, 42.4149, 93.5958, 60},
    {"Hustler", 6, 545, 1, 26000000, 895.8915, -934.3734, 42.4119, 92.4652, 60},
    {"Broadway", 6, 575, 1, 28000000, 896.3578, -941.3626, 42.2687, 92.7796, 60},
    {"Voodoo", 6, 412, 1, 450000, 905.7409, -922.1875, 42.4787, 182.3283, 60},
    {"Majestic", 6, 517, 1, 480000, 911.0039, -921.3837, 42.4051, 183.7384, 60},
    {"Slamvan", 6, 535, 1, 1300000, 883.6339, -941.2964, 42.7489, 304.0722, 60},
    {"Savanna", 6, 567, 1, 7500000, 873.2122, -940.7374, 42.9815, 303.5382, 60},
    {"Hermes", 6, 474, 1, 25000000, 878.5829, -941.0810, 43.0642, 303.2011, 60},
    {"Remington", 6, 534, 1, 5000000, 882.9990, -930.3025, 42.5059, 236.3526, 60},
    {"Windsor", 6, 555, 1, 6000000, 895.0584, -923.1239, 42.6142, 124.2272, 60},
//Bootshaus in San Fierro
    {"Squallo", 7, 446, 1, 1400000, -1469.1959,678.7098,-0.5790,176.3522, 60},
    {"Jetmax", 7, 493, 1, 1000000, -1468.7255,691.8204,0.0081,359.4651, 60},
    {"Coastguard", 7, 472, 1, 840000, -1459.8029,688.6844,0.1490,267.0917, 60},
//Flugzeugverkauf in Las Venturas
    {"Beagle", 8, 511, 1, 36000000 , 1286.2562,1323.7429,12.1218,271.0401, 60},
    {"Maverick", 8, 487, 1, 30000000 , 1299.0364,1342.9835,11.0082,270.0564, 60},
    {"Dodo", 8, 593, 1, 14000000 , 1288.1346,1361.1349,11.2512,269.9028, 60},
//Autohaus Günstig 2 in Los Santos
    {"Mesa", 9, 500, 1 , 1440000, 2118.7173,-1123.0830,25.4588,309.5612, 60},
    {"Regina", 9, 479, 1 , 50000, 2134.5454,-1129.1372,25.4190,49.5929, 60},
    {"Stratum", 9, 561, 1 , 220000, 2134.1526,-1133.7416,25.4996,46.2296, 60},
    {"Moonbeam", 9, 418, 1 , 480000, 2135.3325,-1139.7094,25.4648,45.9770, 60},
    {"Landstalker", 9, 400, 1 , 1000000, 2134.3140,-1144.2582,24.9592,45.1484, 60},
    {"Elegant", 9, 507, 1 , 106000, 2120.1335,-1147.4746,24.1617,310.7347, 60},
    {"Elegy", 9, 562, 1 , 78000, 2119.4197,-1142.8087,24.4177,305.7601, 60},
    {"Feltzer", 9, 533, 1 , 360000, 2119.2419,-1137.4570,24.8492,306.4283, 60},
    {"Vincent", 9, 540, 1 , 70000, 2119.2632,-1132.5090,25.1499,308.5391, 60},
    {"Bobcat", 9, 422, 1 , 90000, 2119.1055,-1128.1691,25.0464,307.3262, 60},
//Autohaus Günstig in Las Venturas
    {"Burrito", 10, 482, 1 , 132000, 2100.7117,1398.5070,10.9544,180.0535, 60},
    {"Huntley", 10, 579, 1 , 1640000, 2107.2810,1398.2810,10.7800,179.7361, 60},
    {"Yosemite", 10, 554, 1 , 264000, 2113.7146,1398.6532,10.8646,180.0120, 60},
    {"Oceanic", 10, 467, 1 , 130000, 2119.9753,1397.9963,10.6060,180.1109, 60},
    {"Tornado", 10, 576, 1 , 54000, 2126.3091,1397.9482,10.4665,179.7414, 60},
    {"Glendale", 10, 466, 1 , 54000, 2126.3816,1408.3682,10.6502,0.7667, 60},
    {"Perennial", 10, 404, 1 , 50000, 2120.0273,1409.0211,10.5851,0.0615, 60},
    {"Solair", 10, 458, 1 , 78000, 2113.5535,1408.5975,10.7417,0.0542, 60},
    {"Majestic", 10, 517, 1 , 76000, 2107.0940,1408.7985,10.7135,0.0514, 60},
    {"Primo", 10, 547, 1 , 84000, 2100.7742,1408.9865,10.6122,0.0102, 60},
//Spezialautohaus in San Fierro
    {"Whoopee", 11, 423, 1 , 460000, -1674.7307, 1206.5151, 21.1423, 230.6197, 60},
    {"BF Injection", 11, 424, 1 , 540000, -1649.6823, 1211.2452, 13.3966, 73.1669, 40},
    {"Boxville", 11, 609, 1 , 730000, -1680.4546, 1212.0442, 21.1904, 314.3661, 120},
    {"Hotknife", 11, 434, 1 , 570000, -1650.1619, 1211.2605, 21.0855, 88.1867, 50},
    {"Caddy", 11, 457, 1 , 345000, -1661.2684, 1214.9708, 6.7911, 217.5711, 30},
    {"Baggage", 11, 485, 1 , 327000, -1670.9166, 1204.5367, 13.3177, 311.6076, 30},
    {"Forklift", 11, 530, 1 , 356000, -1655.1701, 1216.1055, 6.9389, 176.2483, 30},
    {"Vortex", 11, 539, 1 , 846000, -1647.0424, 1205.9987, 20.4809, 64.7005, 45},
    {"Kart", 11, 571, 1 , 375000, -1671.0455, 1207.8963, 6.4602, 277.9479, 25},
    {"Mower", 11, 572, 1 , 289000, -1668.3311, 1205.0949, 6.8010, 333.7979, 30},
    {"Sweeper", 11, 574, 1 , 297000, -1665.6643, 1204.1337, 20.8302, 313.5147, 30},
    {"TUG", 11, 583, 1 , 251000, -1654.3132, 1215.1801, 13.2919, 100.1743, 25},
    {"Hotdog", 11, 588, 1 , 468000, -1662.6785, 1221.2227, 21.0207, 209.9304, 50},
    {"Traktor", 11, 531, 1 , 2340000, -1654.8685, 1215.9527, 21.0863, 173.1970, 150},
    {"Patriot", 11, 470, 1 , 1750000, -1664.3348, 1223.6135, 13.6350, 195.7495, 60},
    {"Sandking", 11, 495, 1 , 1985000, -1647.7194, 1205.5262, 13.9415, 51.1978, 60},
    {"Bandito", 11, 568, 1 , 3500000, -1658.8205, 1219.9927, 13.5679, 181.3422, 50},
    {"Hotring Racer B", 11, 503, 1 , 4600000, -1668.7249, 1216.7230, 7.1389, 238.2159, 80},
    {"Bloodring Banger", 11, 504, 1 , 1670000, -1677.8603, 1207.9261, 13.4792, 244.7719, 50}
};

#define MAX_ATM 109
new Float:ATM[][] = {
    {2130.10009766,-1151.19995117,23.68000031},
    {551.20001221,-1260.50000000,16.87999916},
    {755.09997559,-1360.80004883,13.19999981},
    {1032.19995117,-1029.90002441,31.70000076},
    {491.39999390,-1734.59997559,10.86999989},
    {2072.00000000,-1834.69995117,13.17999935},
    {716.90002441,-463.10000610,15.60000038},
    {2398.00000000,1482.90002441,10.39999962},
    {1967.69995117,2166.69995117,10.39999962},
    {-95.69999695,1110.90002441,19.37999916},
    {-1424.80004883,2591.60009766,55.47999954},
    {-2419.60009766,1028.69995117,50.00000000},
    {-1900.00000000,277.20001221,40.70000076},
    {2303.60009766,79.90000153,26.10000038},
    {2475.69995117,32.09999847,26.10000038},
    {2274.69995117,-76.40000153,26.20000076},
    {1316.69995117,357.70001221,19.20000076},
    {1302.80004883,255.39999390,19.20000076},
    {211.30000305,-62.70000076,1.20000005},
    {111.09999847,-221.39999390,1.20000005},
    {242.39999390,-223.10000610,1.20000005},
    {661.29998779,-565.50000000,16.00000000},
    {811.40002441,-613.79998779,16.00000000},
    {-2094.39990234,-2477.10009766,30.29999924},
    {-2159.30004883,-2387.80004883,30.29999924},
    {-2196.60009766,-2251.50000000,30.39999962},
    {-818.20001221,1547.50000000,26.79999924},
    {-860.00000000,1536.50000000,22.20000076},
    {-1515.19995117,2560.80004883,55.50000000},
    {-1486.30004883,2641.19995117,55.50000000},
    {-771.90002441,2765.39990234,45.50000000},
    {-209.19999695,2713.10009766,62.59999847},
    {-255.10000610,2601.30004883,62.50000000},
    {30.00000000,1187.40002441,18.70000076},
    {-173.80000305,1107.90002441,19.39999962},
    {-317.00000000,1051.69995117,20.00000000},
    {-312.89999390,1307.09997559,53.29999924},
    {-2512.00000000,2340.80004883,4.59999990},
    {-2610.39990234,2246.39990234,7.90000010},
    {-2239.00000000,2356.39990234,4.59999990},
    {-2726.30004883,-319.79998779,6.80000019},
    {-2388.30004883,-569.20001221,131.80000305},
    {1146.80004883,-1415.50000000,13.30000019},
    {1808.30004883,-1369.30004883,14.69999981},
    {2441.00000000,-1470.19995117,23.60000038},
    {2285.30004883,-2065.19995117,13.19999981},
    {1585.69995117,-2286.60009766,13.19999981},
    {1125.40002441,-2033.00000000,69.50000000},
    {374.39999390,-2053.69995117,7.69999981},
    {396.60000610,-1543.90002441,31.89999962},
    {906.59997559,-1002.70001221,37.50000000},
    {2747.39990234,-1186.30004883,69.00000000},
    {2689.30004883,-1710.19995117,11.50000000},
    {1739.40002441,-1863.59997559,13.19999981},
    {1137.19995117,-1762.09997559,13.19999981},
    {1016.50000000,-1553.59997559,14.50000000},
    {810.50000000,-1614.59997559,13.19999981},
    {943.90002441,-1385.50000000,13.00000000},
    {-1381.69995117,-356.50000000,13.80000019},
    {-1980.59997559,135.00000000,27.29999924},
    {-1968.00000000,512.70001221,34.79999924},
    {-2276.30004883,520.50000000,34.79999924},
    {-2438.60009766,752.59997559,34.79999924},
    {-2670.89990234,636.90002441,14.10000038},
    {-2765.30004883,366.20001221,6.00000000},
    {-2665.39990234,-5.50000000,5.80000019},
    {-2025.19995117,-102.00000000,34.79999924},
    {-2242.39990234,116.90000153,35.00000000},
    {-2417.80004883,348.89999390,34.79999924},
    {-2622.39990234,1413.19995117,6.69999981},
    {-1940.69995117,1342.09997559,6.80000019},
    {-1578.90002441,903.90002441,7.30000019},
    {-1759.69995117,963.40002441,24.50000000},
    {-1625.30004883,717.90002441,14.30000019},
    {-1830.30004883,109.50000000,14.80000019},
    {1025.00000000,1043.69995117,10.60000038},
    {1169.90002441,1363.50000000,10.50000000},
    {1703.19995117,1443.90002441,10.50000000},
    {2019.30004883,1345.90002441,10.50000000},
    {2196.89990234,1689.50000000,12.00000000},
    {2031.09997559,1936.40002441,11.80000019},
    {2137.39990234,2363.80004883,10.50000000},
    {2296.39990234,2432.39990234,10.50000000},
    {2532.30004883,1865.00000000,10.50000000},
    {2433.50000000,1670.40002441,10.50000000},
    {2841.60009766,1296.59997559,11.00000000},
    {2578.00000000,1060.59997559,10.50000000},
    {2159.50000000,941.79998779,10.50000000},
    {2021.69995117,998.79998779,10.50000000},
    {1516.59997559,1102.59997559,10.50000000},
    {1479.69995117,2244.00000000,10.69999981},
    {1438.80004883,2616.69995117,11.00000000},
    {2159.30004883,2797.19995117,10.50000000},
    {2537.00000000,2264.00000000,10.50000000},
    {2558.19995117,2022.30004883,10.50000000},
    {2204.00000000,1295.80004883,10.50000000},
    {827.0036, -1355.3913, 13.2144},
    {1004.599915, -1131.191284, 23.465918}, //Clubvilla LS
    {1225.32947,-1811.68408,16.24608},
    {1420.52087, -980.45911, 1639.41125},
    {921.592407, -1207.274780, 16.619688},
    {1790.9886, -1303.7802, 119.8556},
    {959.964539, -1562.702515, 13.211584},
    {-29.488010, -2522.075195, 36.048595},
	{1292.7639, -994.2083, 32.3353},
    {1674.3127, -1033.3083, 1340.3857},//bankint
    {1674.2822, -1034.2076, 1340.3857},//bankint
    {1675.4840, -1028.0058, 1340.3857},//bankint
    {1675.4840, -1033.7684, 1340.3857},//bankint
    {1674.3127, -1027.5454, 1340.3857},//bankint
    {1674.2822, -1028.3839, 1340.3857},//bankint
    {1471.130737, -1805.306030, 15.000000}, // <== ATM Stadthalle
    {1490.133789, -1805.306030, 15.000000}, // <== ATM Stadthalle
    {-1642.0250, 1207.7510, 6.8446} //Spezial-Autohaus
};

new Float:HOSPITAL[][] = {
	{1185.7225,-1323.6067,13.5590},//Krankenhaus LS am Bus
	{1463.9080,-1063.1261,23.8477},//Krankenhaus Base
	{2002.5291,-1445.5175,13.5615}//Krankenhaus Jefferson
};

new Float:HOSPITAL_CAMERA_POS[][] = {
	{1229.2507,-1323.8712,35.7392},//Krankenhaus LS am Bus
	{1469.7659,-1027.0270,35.7392},//Krankenhaus Base
	{1967.6145,-1481.9442,35.7392}//Krankenhaus Jefferson
};

new Float:HOSPITAL_SPAWN_POS[][] = {
	{1174.4246,-1323.3820,14.7891},//Krankenhaus LS am Bus
	{1459.5419,-1044.8303,23.8278},//Krankenhaus Base
	{2034.3339,-1406.5508,17.2057}//Krankenhaus Jefferson
};

new Float:HOSPITAL_Player_POS[][] = {
	{1161.7201,-1339.1417,15.0727},//Krankenhaus LS am Bus
	{1463.1527,-1016.0865,34.2356},//Krankenhaus Base
	{2031.0273,-1389.7472,17.2057}//Krankenhaus Jefferson
};

enum e_FahrpruefungCP {
    Float:F_fX,
    Float:F_fY,
    Float:F_fZ
}

new const g_FahrpruefungCP[][e_FahrpruefungCP] = {
    {1196.0063,-1846.9019,13.3482},
    {1060.8523,-1836.4686,13.3828},
    {1038.0686,-1785.5364,13.4336},
    {1040.2084,-1598.6849,13.2578},
    {1014.4639,-1569.7875,13.2597},
    {895.7375,-1569.3164,13.2656},
    {828.5221,-1601.7271,13.2577},
    {774.6823,-1572.2042,13.2607},
    {813.5296,-1408.1097,13.1610},
    {1123.9777,-1408.5974,13.3006},
    {1340.1985,-1420.1740,13.2578},
    {1294.7069,-1596.5747,13.2578},
    {1286.8190,-1849.9485,13.2616},
    {1197.1539,-1846.7806,13.3475}
};

new Text3D:g_t3dPolizeiKontrolle[MAX_VEHICLES] = {Text3D:INVALID_3DTEXT_ID,...}, Text3D:g_t3dTaxi[MAX_VEHICLES] = {Text3D:INVALID_3DTEXT_ID,...},
    Float:g_fVehicleHealth[MAX_VEHICLES], g_iVehicleFixNotation[MAX_VEHICLES char];

new SideL;
new SideR;
new PlayerHaveCar[MAX_PLAYERS][MaxVeh];
new PlayerKey[MAX_PLAYERS];
new Spectating[MAX_PLAYERS][1];

new gGas[MAX_VEHICLES];
new gMaxGas[MAX_VEHICLES];
new StundenZeigerObj, MinutenZeigerObj;

new Text:DummyTextDraw;
new Text:BlackBox;
new Text:tdNoDM;
new Text:tdBlitzerWarnung;

stock GetPlayerVehicleSpeed(playerid) {
    new Float:velocity_x, Float:velocity_y, Float:velocity_z, vehicleid = GetPlayerVehicleID(playerid);
    GetVehicleVelocity(vehicleid,velocity_x,velocity_y,velocity_z);
    velocity_x *= velocity_x;
    velocity_y *= velocity_y;
    velocity_z *= velocity_z;
    return floatround(floatsqroot( velocity_x + velocity_y + velocity_z ) * 143); // 142.85
}

stock Float:GetPlayerVehicleSpeedEx(playerid) {
    new Float:velocity_x, Float:velocity_y, Float:velocity_z, vehicleid = GetPlayerVehicleID(playerid);
    GetVehicleVelocity(vehicleid,velocity_x,velocity_y,velocity_z);
    velocity_x *= velocity_x;
    velocity_y *= velocity_y;
    velocity_z *= velocity_z;
    return floatsqroot( velocity_x + velocity_y + velocity_z ) * 143.0; // 142.85
}

//Servername
#if defined WINTER_EVENT
    new serverhost = 1;
#else
	new bool:serverhost = false;
#endif
//new bool:serverhost = false;
new lagerbestand = 0;
new Lottostand = 0;

new Samen1Bestand = 0;
new Samen2Bestand = 0;
new Samen3Bestand = 0;
new Samen4Bestand = 0;
new Samen5Bestand = 0;

//Schwarzmarkt Start
new Schwarzmarkt_Waffenteile = 0;
new Schwarzmarkt_Waffenteile_Preis = 0;

new Schwarzmarkt_Drogen = 0;
new Schwarzmarkt_Drogen_Preis = 0;

new Schwarzmarkt_Spice = 0;
new Schwarzmarkt_Spice_Preis = 0;

new Schwarzmarkt_Wantedcodes = 0;
new Schwarzmarkt_Wantedcodes_Preis = 0;

forward Load_FrakcarsEx();
forward Reload_FCars();
forward CREATEFRAKCAR(veh);

forward SaveInfos();
forward LoadInfos();

forward HauptTimerTest();
forward MinuteTimer(playerid);

forward split(const strsrc[], strdest[][], delimiter);
forward HeilReady(playerid);
forward OnPlayerCarUpdate(playerid);
//forward OnPlayerCarLogin(playerid);
forward PlayerCarSpawn(playerid, Slot);
forward OnUpdateUhr();
forward OnUpdateDatum();
forward OnPlayerUpdateTacho();
forward OnPlayerTot(playerid);
forward OnPlayerJail(playerid);
forward OnPlayerMute(playerid);
forward OnPlayerWaitPilot(playerid);
forward OnPlayerWaitLinie(playerid);
forward PlayaInfo(playerid);
forward SetPlayerSpawn(playerid);
forward PayDay();
forward GetWBack(playerid);
forward AFKTimer(playerid);

/*enum StreamURL {
	StreamUrlLink[128]
};

new StreamVehicle[MAX_VEHICLES][StreamURL];*/


#define MAX_TAXI_KUNDEN 3

enum SpielerDaten {
    ID, // ID aus der Datenbank.Einzigartig und unbedingt notwendig für Hochzeitsystem!
    pLoginTimestamp,
    pMarriage, // ID mit der man Verheiratet ist.Identisch zu der pID eines Spielers
    pMarriageName[MAX_PLAYER_NAME],
    pHeiratsantragID,
    pLevel,//Spieler Level
    pAdmin,//Spieler Adminlevel
    pDonateRank,//0 = Normal 1 = Premium
    pHours,// Spielstunden (jeden PayDay +1)
    pSex,//Geschlecht
    pMuted,//Ob gemutet oder nicht
    pExp,//Wieviel Respekt man hat
    pCash,//Wieviel Geld man hat
    pCrimes,//Wieviele Wanteds man insgesamt hatte
    pKills,//Wieviele Abschüsse man insgesamt gemacht hat
    pDeaths,//Wie oft man insgesamt gestorben ist
    pArrested,//Wie oft man eingesperrt wurden ist
    pWantedDeaths,//Wie oft man mit Wanteds vom Cop getötet wurden ist
    pPhoneBook,//Ob man ein Telefonbuch hat
    pLottoNr,//Welche Lotto Nr man hat
    pJob,//Welchen Job man hat
    pPfand,
    pPayCheck,//Wieviel Geld man beim nächsten PD erhält
    pMinenErlos,//Erlös bei der Mine
    pJailed,//Ob man eingesperrt ist
    pJailTime,//Wielange man eingesperrt ist
    pDuty,//Ob man OnDuty ist(Sani, Cop etc.)
    pfDuty,
    pDutyTask, // 0 frei, 1 belegt
    pDrugs,//Wieviele Drogen man dabei hat
    pFraktion,//Welche Fraktions-ID man hat
    pRank,//Welchen Fraktions Rank man hat
    pSkin,//Welchen Skin man hat
    pHouseAngebot[2], // 0 ID  , 1 Price
    pBizAngebot[2], // 0 ID  , 1 Price
    pTankeAngebot[2], // 0 ID  , 1 Price
    pPlayerHotel,
    pPlayerBiz,
    pPlayerBizEx, // 2.
    pPlayerFirma,
    pHouseMieteKey,
    pPremiumBizSlot,
    pCarLic,//Führerschein 1 = Ja 0 = Nein
    pFlyLic,//Flugschein 1 = Ja 0 = Nein
    pBoatLic,//Bootlizens 1 = Ja 0 = Nein
    pEisVerkaeufer,
    pEisPreis,
    pHotDogVerkaeufer,
    pHotDogPreis,
    pTimerTaschendieb,
    pUnixTaschendieb,
    pTaschendiebCount,
    pTimerKnastbefreien,
    pUnixKnastbefreien,
    pKnastbefreienCount,
    pGunLic,//Waffenschein A 1 Ja 0 Nein
    pGunLicB,//Waffenschein B 1 Ja 0 Nein
    pLKWLic,//LKWschein 1 = Ja 0 = Nein
    pMotoLic,//Motorradschein 1 = Ja 0 = Nein
    pPayDay,//Wieviele Minuten man vom Payday hat
    pTut,//Ob man Tutorial schon durch hat
    pTutTimer,
    pWarns,//Wieviele Warns man hat (max. 5)
    pPerso,//Ob man den Perso hat
    pHandyNr,//Handy-Nummer
    pHandyNr_Temp,
    pHandyNr_Counter,
    pHandyGeld,//Wieviel handygeld man hat
    pClassRequest,
    pTot,//Ob man Tot ist
    pBanned,//Ob man gebannt ist
    pWanteds,//Wieviele Wanteds man hat
    pBank,//Geld auf der Bank
    pJailType,//0 = Links|Prison, 1 = Mitte, 2 = Rechts
    pPrisonRunCount,
    pPrisonRun,
    pPrisonRunStep,
    pTotTime,//Wielange man Tot ist
    Float:pTotX,//Tot-Position X
    Float:pTotY,//Tot-Position Y
    Float:pTotZ,//Tot-Position Z
    pKanister,//Kanister 0 = Nein, 1 = Ja
    pHeilReady,//Ob Heil Ready ist von /gheilen
    pWaffenteile,
    pSafeTeile,
    pdeacc,
    pschulden,
    pWeihnachtsday,
    pSafeDrogen,
    pSpawnChange,
    pPlayerTank,
    pPlayerHouse,
    pKekse,
    pZigaretten,
    pHandyState,
    Text3D:pWantedLabel,
    Text3D:pWantedLabelEx,
    Text3D:pBlacklistLabel,
    Text3D:pNeuling,
    Text3D:pAFKLabel,
    Text3D:pAntiSpawnKill,
    Text3D:t3dSInfo,
    bool:pAntiSpawnKillOn,
    pFrakLohn,
    pTimeBan,
    pMuteTime,
    pAngel,
    pFische,
    pKoeder,
    pMaxFishes,
    pMaxVerloren,
    pFishLic,
    pFPunkte,
    pFBPunkte,
    pFlPunkte,
    pGunPunkte,
    pLKWPunkte,
    pMotoPunkte,
    punixFSperre,
    punixFBSperre,
    punixFlSperre,
    punixGunSperre,
    punixLKWSperre,
    punixMotoSperre,
    pFrakSperre, // MySQL Tabelle neu
    pHartz4, // MySQL Tabelle neu
    pHitmenAuftragID,
    pWheelAuftragID,
    bool:pKopfgeldStatus,
    pKopfgeld,
    pKopfgeldID,
    tickDfind,
    tDfind,
    tickJobCheckpoint,
    bool:bMaske,
    tMaske,
    bool:wbMaske,
    wtMaske,
    bool:abMaske,
    atMaske,
    iKidnapID,
    tKidnap,
    tickKidnap,
    bool:bKidnapped,
    bool:bAugenbinde,
    bool:bMundbinde,
    pPizzaVerkaeufer,
    pPizzaPreis,
    tHure,
    tickHure,
    bool:bHasSex,
    pHureID,
    pHurePreis,
    pWeaponInfo[13],
    pKFZSteuer,
    punixSpeedhack,
    tAutoknacken,
    punixAutoknacken,
    pAutoknackerVehicleID,
    pTaxiPreis,
    PlayerText:tdTaxi,
    pTaxiVehicle,
    pTaxiKunden[MAX_TAXI_KUNDEN],
    pTaxiKundenStart[MAX_TAXI_KUNDEN],
    tTaxiLeave,
    tDrink,
    pWantedCodes,
    bool:bWantedHacking,
    pSafeWantedCodes,
    punixWantedCodes,
    bool:pJetPack,
    tWantedCodes,
    punixWantedCodesDone,
    unixUpdate,
    pStartbonus,
    pInterviewer,
    ibInterviewStat,
    pHurePoints,
    pDetektivPoints,
    pLawyerPoints,
	tWheelman,
	iWheelmanID,
	punixFlyhack,
	pSecureCodeLevel,
	pStaat,
	pVertragID,
	pVertragText[128],
	pKekseValue,
	pBankKonto,
	pBankKontoPin,
	tFahrschule,
	pFahrschuleSpeedWarnung,
	unixFahrschuleSpeed,
	unixFahrschuleZeit,
	unixFahrschuleFahrzeug,
	pGeldcheckID,
	pGeldcheckBetrag,
	#if defined SILVESTER_EVENT
	pBoeller,
	pRaketen,
	#endif
	bool:pTransportActive,
	pLoginVersuch,
	pJobWechsel,
	unixFeuerwerk,
	unixFeuerwerkleucht,
	unixKrankenversicherung,
	pKofferraumItem,
	pDrogenSamen,
	unixSpiceCooldown,
	pGeburtstag[20],
	pSpice,
	pSafeSpice,
	pHandy,
	pFightstyle,
	pBlitzerCooldown,
	pBrecheisen,
	unixHausAufbrechen,
	tEinbrechen,
	unixBlinkerCooldown,
	PlayerText:ptPayDay,
	pAutoknackerExtraLohn,
	pSSteuer,
	pHelm,
	pExperte,
	unixAFKNotice,
	pLobe,
	pVehicleVerleih,
	tickVehicleVerleih,
	pBMOD,
	pKreditwert,
	pKreditGezahlt,
	pKreditAuswahl,
	pMP3Player,
	pCommandSpam,
	pChatSpam,
	pPremiumCarSlot,
    Float:pSpawnX,
    Float:pSpawnY,
    Float:pSpawnZ,
    Float:pSpawnFace,
    pSpawnInt,
    pSpawnVirtual,
    bool:pKoffer,
    bool:bNoDMZone,
    bool:bAccountExists,
    pPinVergessen,
    pKofferItem,
    pWiederbelebung,
    pUpgradeWaffenlager,
    pUpgradeSafebox,
    pHausWaffenlager1,
    pHausWaffenlager2,
    pHausWaffenlager3,
    pHausSafeboxSpice,
    pHausSafeboxDrogen,
    pHaustierTemp,
    pHaustier,
    bool:pHaustierSpawned,
    pHaustierCooldown,
    pHaustierNotice,
    pHaustierFutter,
    pHaustierObject,
    pHaustierDistanceAlert,
    Float:pPos[3],
    pHausSafeboxItem,
    pHausWaffenlagerItem,
    tSpawnView,
    pVehiclePort,
    tTankeUeberfall,
    tTankeUnix,
    pPeilsenderTemp,
    ptickBotTest,
    Float:pAimbotTestValues[2],
    pRadarfallenWarnung,
    punixRadarfallenWarnung,
    tRadarfallenWarnung,
    pAutomatik,
    pMuellCP,
    pMuell[2],
    pGeldTCP,
    pGELDT[2],
    pCow[3], // 91 / 32
    pCowJob,
    pZollValid,
    pFahrgeschaeft,
    pFahrgeschaeftData,
    pWaffenSperre,
    pKFZVersicherung,
    pSHeilen,
    tSHeilen,
    pFLehrer,
    pFModus,
    pTrakLic,
    pCarmALic,
    pWheelmenP,
    pWModus,
    pKillsGangFight,
    pKillsStreetwar,
    pKillsGangFightSession,
    pPremiumNeon,
    tLoginTimeout,
    pAdminDienst,
    pBenutzerfarbe,
    pTempMoebelKategorie,
    pTempMoebelID,
    pEditObjectMode,
    pEditObjectModeFS,
    pTruckerBlock,
    pDrogenPoints,
    pWaffenteilePoints,
    pfrakwarn,
    Float:pArmourInfo,
    Float:pHealthInfo,
    pSuspendedSentence,
    pSusSentenceReason[128],
    pEventPoints,
    pAdventDay,
    pAdventMin,
    pMustUseAC, // AC obligation
    create_fcar,
    aufgenommen, //Ob Verletzter im Medicwagen
    Float:pAMarkX,
    Float:pAMarkY,
    Float:pAMarkZ,
    pCoins,
    pSpiceSamenPoints,
    LoadedPremiumWeapons,
    pPilotPoints,
    pFRadarStatus,
    pC4,
    pFV,
    pGangDrogenSamen,
    pKrauterMische,
    pOldname[50],
    swSpice,
    swDrogen,
    swWT,
    swWCodes,
    DmgTog,
    pSpawnWeste,
    pBooster,
    pPowerRiegel,
    pTSFrei,
    pSpawnWaffenUnix,
    pSpawnWaffen,
    pSchaufel
}

enum e_FahrPruefung {
    FP_sName[16],
    FP_iPrice,
    SpielerDaten:FP_iVar
}

new const g_FahrPruefung[][e_FahrPruefung] = {
    {"",0,SpielerDaten:0},
    {"Autoschein",8000,SpielerDaten:pCarLic},
    {"Motorradschein",11000,SpielerDaten:pMotoLic},
    {"Flugschein",50000,SpielerDaten:pFlyLic},
    {"Bootschein",17000,SpielerDaten:pBoatLic},
    {"LKWSchein",22000,SpielerDaten:pLKWLic},
    {"A-Waffenschein",65000,SpielerDaten:pGunLic},
    {"B-Waffenschein",85000,SpielerDaten:pGunLicB},
    {"Busschein",18000,SpielerDaten:pCarmALic}
};


enum e_WheelmenD {
    W_sName[29],
    W_iPrice,
    SpielerDaten:FP_iVar
}

new const g_WheelmenD[][e_WheelmenD] = {
    {"",0,SpielerDaten:0},
    {"Chauffeur",8000,SpielerDaten:pCarLic},
    {"Personenschutz",25000,SpielerDaten:pMotoLic},
    {"Befreiung vor Entführung",20000,SpielerDaten:pFlyLic},
    {"Befreiung vor Festnahme",25000,SpielerDaten:pBoatLic},
    {"Alcatraz Gefangenenbefreiung",50000,SpielerDaten:pGunLic},
    {"GangJail Gefangenenbefreiung",15000,SpielerDaten:pGunLicB}
};

new Spieler[MAX_PLAYERS][SpielerDaten];
new kampfzone[4];
new kampfzonePoints[MAX_FACTIONS];
new gangfightpause[22],gangfightwetten[4],gangfightwettenpot[4],gangfightwettenp[MAX_PLAYERS][MAX_PLAYER_NAME],gangfightwettenppp[MAX_PLAYERS],gangfightwettenpp[MAX_PLAYERS],gangfightkampffraks[4][2];
new pCar[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS];

new postpsenden[MAX_PLAYERS][MAX_PLAYER_NAME],postpid[MAX_PLAYERS][300],firstspawn[MAX_PLAYERS];
new AcceptStats[MAX_PLAYERS];
new AcceptAngelStats[MAX_PLAYERS];
new AcceptCarSell[MAX_PLAYERS];
new AcceptCarSellPreis[MAX_PLAYERS];
new MedicHealID[MAX_PLAYERS];
new MedicHealPreis[MAX_PLAYERS];
new buswait[MAX_PLAYERS];
new truckwait[MAX_PLAYERS];
new DrogenTimer[MAX_PLAYERS];
new unfreezewait[MAX_PLAYERS];
new BusTime[MAX_PLAYERS];
new TruckTime[MAX_PLAYERS];
new PilotTime[MAX_PLAYERS];
new pilotwait[MAX_PLAYERS];
new carmsgwait[MAX_PLAYERS];
new paydaywait[MAX_PLAYERS];
new ndrobspawn[MAX_FACTIONS];
new RepairCar[MAX_PLAYERS];
new RepairCarPreis[MAX_PLAYERS];
new RefillCar[MAX_PLAYERS];
new RefillCarPreis[MAX_PLAYERS];
new ZettelID[MAX_PLAYERS];
new ZettelPreis[MAX_PLAYERS];
new TazerTime[MAX_PLAYERS];
new Tazered[MAX_PLAYERS];
new Cuffed[MAX_PLAYERS];
new vehicleRefueling[MAX_VEHICLES];
new Refueling[MAX_PLAYERS];
new RefuelType[MAX_PLAYERS];
new MakeAnimation[MAX_PLAYERS];
new BankWert[MAX_PLAYERS];
new BankAn[MAX_PLAYERS];
new TelefonzelleAn[MAX_PLAYERS];
new PlayerIsPaintballing[MAX_PLAYERS];
new AnwaltID[MAX_PLAYERS];
new AnwaltPreis[MAX_PLAYERS];
new CurrentPhone[MAX_PLAYERS];
new pDrogenID[MAX_PLAYERS];
new pDrogenMenge[MAX_PLAYERS];
new pDrogenPreis[MAX_PLAYERS];
new pSpiceID[MAX_PLAYERS];
new pSpiceMenge[MAX_PLAYERS];
new pSpicePreis[MAX_PLAYERS];
new pWTeileID[MAX_PLAYERS];
new pWTeileMenge[MAX_PLAYERS];
new pWTeilePreis[MAX_PLAYERS];
new pDrogenEinfluss[MAX_PLAYERS];
new pWaffenPlayer[MAX_PLAYERS];
new pWaffenID[MAX_PLAYERS];
new pWaffenPreis[MAX_PLAYERS];
new pFahrStunde[MAX_PLAYERS];
new pCheckpoint[MAX_PLAYERS];
new pMakeTutorial[MAX_PLAYERS];
new pFahrschulCar[MAX_PLAYERS];
new pFahrschuleCP[MAX_PLAYERS];
new NeedCop[MAX_PLAYERS];
new NeedMedic[MAX_PLAYERS];
new NeedKFZ[MAX_PLAYERS];
new NeedOAMT[MAX_PLAYERS];
new NeedAWALT[MAX_PLAYERS];
new NeedPIZZA[MAX_PLAYERS];
new NeedWHEEL[MAX_PLAYERS];
new pUnderCover[MAX_PLAYERS];
new pCurrentSite[MAX_PLAYERS];
new RadioSender[MAX_VEHICLES];
new FrakInviteID[MAX_PLAYERS];
new JobVehicle[MAX_PLAYERS];
new IsAFK[MAX_PLAYERS];
new NeedBackup[MAX_PLAYERS];
new pBackupTimer[MAX_PLAYERS];
new pCurrentBiz[MAX_PLAYERS];
new pSkinSelection[MAX_PLAYERS];
new pChoosedSkin[MAX_PLAYERS];
new ReportCall[MAX_PLAYERS];
new ReportTimer[MAX_PLAYERS];
new PlayerNeedsHelp[MAX_PLAYERS];
new SupText[MAX_PLAYERS][128];
new PlayerAngel[MAX_PLAYERS];
new pAngelTimer[MAX_PLAYERS];
new IsPlayerFishing[MAX_PLAYERS];
new NeedTAXI[MAX_PLAYERS];
new EventCP[MAX_PLAYERS];
new sAFKTimer[MAX_PLAYERS];
new pAFKTimer[MAX_PLAYERS];
new pAFKMinute[MAX_PLAYERS];
new GFFlucht[MAX_PLAYERS];

new Vehicle_Custom_Stream[MAX_VEHICLES][10000];

enum {
    CHAT_GC,
    CHAT_FC,
    CHAT_JC,
    CHAT_CC,
    CHAT_JL,
    CHAT_SM,
    CHAT_BC
}

new bool:pChatSettings[MAX_PLAYERS][7];

new bestand[MAX_VEHICLES];
new Benzin[MAX_VEHICLES];
new Waren[MAX_VEHICLES];
new Text3D:lager3d;

new Text:ASKDraw;
new Text:URL;
new Text:TazerBox;
new Text:Leer;
new Text:UhrMessage;
new Text:DatumMessage;

new Text:Logo1;
new Text:Logo2;

new PlayerText:Gesucht[MAX_PLAYERS];
new PlayerText:BusMessage[MAX_PLAYERS];
new Text:tdOffeneTickets;

new Text3D:terrorVehLabel;
new Text3D:terrorBootLabel;
new speederID;
new terrorVerarbeiter;
new bool:wtstatus = false;
new wtid = -1;

new bool:spritstatus = false;

new schwarzmarktMaxSpice = 50;
new newSchwarzmarktMaxSpice = 50;

new schwarzmarktMaxDrogen = 500;
new newSchwarzmarktMaxDrogen = 500;

new schwarzmarktMaxWT = 500;
new newSchwarzmarktMaxWT = 500;

new schwarzmarktMaxWCodes = 100;
new newSchwarzmarktMaxWCodes = 100;

new knastunfreezetimer[MAX_PLAYERS];

new vSirene[MAX_VEHICLES];
new vNeon[MAX_VEHICLES];
new OAmtSirene[MAX_VEHICLES];

new GMXMode;
new gmxtimer;
//new automsg;
new CurWeather;

new drogen[6];
new wdealer[6];
new combines[6];
//new zugb[3];
new pizzacar[8];
new Text3D:t3dBus[4];
new kfzcars[6];
new bauarb[8];
new reinigung[8];
new geldt[8];
new muell[6];
new eismann[4];
new hotdogcar[3];
new pdeaccadmin[MAX_PLAYERS][MAX_PLAYER_NAME];

new gSteuern;

new g_aiNoDM[6];
new g_waiNoDM[2];
new g_iWantedHackerZone;
new g_iAlcatraz;
new g_iAlhambra;
new g_NDanbauSperre;

new feuer[MAX_HOUSES][7];
new brandtimer[MAX_HOUSES];


// Robbingzones:
new g_iBankLS, g_iBankLV, g_iEvidenceRoom,
    g_iBankLS_area, g_iBankLV_area, g_iEvidenceRoom_area;

new CarName[][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
    "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus",
    "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection",
    "Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus",
    "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie",
    "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral",
    "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder",
    "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "Berkley's RC Van",
    "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale",
    "Oceanic","Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy",
    "Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX",
    "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper",
    "Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking",
    "Blista Compact", "Police Maverick", "Boxvillde", "Benson", "Mesa", "RC Goblin",
    "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher", "Super GT",
    "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt",
    "Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra",
    "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune",
    "Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer",
    "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
    "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo",
    "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite",
    "Windsor", "Monster", "Monster", "Uranus", "Jester", "Sultan", "Stratum",
    "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper",
    "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400",
    "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car",
    "Police Car", "Police Car", "Police Ranger", "Picador", "S.W.A.T", "Alpha",
    "Phoenix", "2. Gebrauchtwagen", "1. Gebrauchtwagen", "Luggage", "Luggage", "Stairs", "Boxville",
    "Tiller", "Utility Trailer"
};

AntiDeAMX() {
    new a[][] = {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}

stock GetDistance(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2) {
    x1 -= x2;
    y1 -= y2;
    z1 -= z2;
    return floatround(floatsqroot((x1 * x1) + (y1 * y1) + (z1 * z1)));
}

stock IsPlayerFalling(playerid) {
    new index = GetPlayerAnimationIndex(playerid);
    if (index >= 958 && index <= 979 || index == 1130 || index == 1195 || index == 1132) return 1;
    return 0;
}

stock Float:frandom(Float:max, Float:min = 0.0, dp = 4) {
    new Float:mul = floatpower(10.0, dp), imin = floatround(min * mul), imax = floatround(max * mul);
    return float(random(imax - imin) + imin) / mul;
}

stock GetPlayerExecutiveName(playerid) {
    new execName[20] = "Beamter";
    for (new i = 0; i < sizeof(g_executiveNames); i++) {
        if (Spieler[playerid][pFraktion] == g_executiveNames[i][EXECUTIVE_FACTION]) {
            format(execName, sizeof(execName), "%s", g_executiveNames[i][EXECUTIVE_NAME]);
            break;
        }
    }

    return execName;
}

#define ALCATRAZ_WANTEDS 40

#define MAX_GANGZONES 28

enum e_GangZone {
    GZ_iID,
    Float:GZ_fMinX,
    Float:GZ_fMaxX,
    Float:GZ_fMinY,
    Float:GZ_fMaxY,
    Float:GZ_fIconX,
    Float:GZ_fIconY,
    Float:GZ_fIconZ,
    GZ_iOwner,
    GZ_iTimeout,
    GZ_iAttacker,
    GZ_iOwnerScore,
    GZ_iAttackerScore,
    GZ_iAreaID,
    GZ_iGangZoneID,
    GZ_iIconID,
    Text3D:GZ_t3dLabel,
    GZ_iStatus, // 0 normal,1 angriff
    GZ_iGangWarEnd,
    Text:GZ_tdInfo,
    GZ_iFlagge, // -1 keiner , 0 Owner,1 Attacker
    GZ_iFlaggePlayer,
    GZ_iFlaggeEnd,
    GZ_iCounter,
    GZ_igbestand,
    GZ_igupgrade
}

new iGangZones;
new Text:tdGangZoneHeader;
new g_GangZone[MAX_GANGZONES][e_GangZone];

enum e_AGF
{
    agf_Owner,
    agf_Attacker
}

new AStopGF[MAX_FACTIONS][e_AGF];
new AStopTimer;

new alcatrazGateHackTimeout   = 0;
new alcatrazGateHackTimestamp = 0;

// Systems
#include <werbebanner>
#include <extfire_0.4>
#include <helmet>
#include <gdrop>
#include <bomb>
#include <pOneArmedBandit>
#include <obj_blinker>
#include <timestamptodate>
#include <robbing>
//#include <minigame>
#include <help>

// MAPS
#include <maps\Includes>

// Systems
#include <paintball>
//#include <paintballfix>
//#include <halloween>
//#include <core\anticheat>
#include <core\fsettings>
#include <core\airdrop_system>
#include <core\ghettoblaster>
#include <core\streetwar>
#include <core\minework_system>
#include <core\trashcan_system>
#include <core\shamalinterior>
#include <core\casino>
#include <core\spec>
#include <core\bizfight>
#include <core\coinshop>
#include <core\knastausbruch_system>
#include <core\NDRaub>
#include <core\Casinorob>

#include <Commands\Includes>

#include <drogen>
#include <gangdrugs>
enum E_VEHICLE_DEALERSHIP {
    VEHICLE_DEALERSHIP_NAME[50],
    Float:VEHICLE_DEALERSHIP_COORD_X,
    Float:VEHICLE_DEALERSHIP_COORD_Y,
    Float:VEHICLE_DEALERSHIP_COORD_Z
}

new const g_vehicleDealership[][E_VEHICLE_DEALERSHIP] = {
    {"Autohaus - Günstig am Bahnhof in Los Santos", CHEAPCARDEALERSHIPLS_COORDS},
    {"Autohaus - Günstig nahe der Ballas Base", CHEAPCARDEALERSHIPLS2_COORDS},
    {"Autohaus - Günstig in Las Venturas", CHEAPCARDEALERSHIPLV_COORDS},
    {"Fahrradladen in Los Santos", BICYCLEDEALERSHIP_COORDS},
    {"Motorradhandel in Los Santos", BIKEDEALERSHIP_COORDS},
    {"Luxus-Autohaus in Los Santos", LUXURYCARDEALERSHIP_COORDS},
    {"Oldtimer Autohaus in Los Santos", OLDTIMERDEALERSHIP_COORDS},
    {"Flugzeughandel in Los Santos", AIRPORTLS_PLANE_DEALERSHIP_POINT},
    {"Flugzeughandel in Las Venturas", 1310.9393, 1342.6803, 10.8203},
    {"Bootshandel in Los Santos", BOATDEALERSHIPLS_COORDS},
    {"Bootshandel in San Fierro", BOATDEALERSHIPSF_COORDS},
    {"Spezial-Autohaus in San Fierro", -1649.3412,1192.3958,8.2888}
};



enum e_KampfStyle {
	KS_sName[16],
	KS_iStyle,
	KS_iPrice
}
new const g_KampfStyle[][e_KampfStyle] = {
	{"Normal", FIGHT_STYLE_NORMAL , 1000},
	{"Boxen", FIGHT_STYLE_BOXING , 50000},
	{"Kung-Fu", FIGHT_STYLE_KUNGFU , 50000},
	{"Wrestling", FIGHT_STYLE_GRABKICK , 250000 },
    {"Elbow",FIGHT_STYLE_ELBOW,500000},
    {"Knee-Head",FIGHT_STYLE_KNEEHEAD,500000}
};

main() {
    print("----------------------------------");
    print("LyD-Roleplay");
    printf("Compiled on %s %s by PatrickJ. & Mike.", __date, __time);
    print("----------------------------------\n");
}

enum rInfo {
    sCreated,
    Float:sX,
    Float:sY,
    Float:sZ,
    sObject,
};

new isTotInGF[MAX_PLAYERS] = 0;

#define MAX_ROADBLOCKS 100
new Roadblocks[MAX_ROADBLOCKS][rInfo];

forward Lotto(number);
public Lotto(number) {
    new message[128];
    if (Lottostand == 0) return SendClientMessageToAll(COLOR_RED, "** [LOTTO] Der Jackpot ist leer! Die Lottoziehung findet daher nicht statt. **");
    format(message, sizeof(message), "** [LOTTO] >> Der heutige Lotto-Jackpot beträgt: $%s - Die Gewinnummer lautet: %d. << **", AddDelimiters(Lottostand), number);
    SendClientMessageToAll(COLOR_YELLOW, message);

    new winnerCount = 0, poolSize = GetPlayerPoolSize(), bool:winners[MAX_PLAYERS];
    for (new b; b <= poolSize; b++) {
        if (!gPlayerLogged[b]) continue;
        if (Spieler[b][pLottoNr] == number) {
            winnerCount++; 
            winners[b] = true;
        }

        Spieler[b][pLottoNr] = 0;
    }

    if (winnerCount == 0) return SendClientMessageToAll(COLOR_ORANGE, "** [LOTTO] >> Leider konnte in dieser Lottoziehung keiner den Jackpot knacken. << **");

    if (winnerCount > 1) {
        format(message, sizeof(message), "** [LOTTO] >> Da es %d Sieger gibt erhält jeder Sieger nur 1/%d des Jackpots! << **", winnerCount, winnerCount    );
        SendClientMessageToAll(COLOR_GREEN, message);
    }

    new jackPot = Lottostand/winnerCount, jackPotString[64];
    jackPotString = AddDelimiters(jackPot);
    for (new i = 0; i < MAX_PLAYERS; i++) {
        if (!winners[i]) continue;
        
        format(message, sizeof(message), "** [LOTTO] >> %s hat mit der Nummer %d den heutigen Lotto-Jackpot in Höhe von $%s gewonnen! << **", GetName(i), number, jackPotString);
        SendClientMessageToAll(COLOR_GREEN, message);
        format(message, sizeof(message), "[LOTTO] {FFFFFF}Du erhältst deinen Lottogewinn in Höhe von: $%s.", jackPotString);
        SendClientMessage(i, COLOR_GREEN, message);
        GivePlayerCash(i, jackPot);
    }

    Lottostand = 0;
    return 1;
}

forward LottoTimer();
public LottoTimer() {
    Lotto(minrand(1, 100));
    return 1;
}

stock SendServerInfo(infoColor, infoText[]) {
    new pPoolSize = GetPlayerPoolSize();
    for (new i = 0; i <= pPoolSize; i++) {
        if (!gPlayerLogged[i] || !pChatSettings[i][CHAT_SM]) continue;
        SendClientMessage(i, infoColor, infoText);
    }

    return 1;
}

new schongeloescht[MAX_HOUSES];

public MinuteTimer(playerid) {
    new i, stunde, minute, sekunde;
    for (i = 0; i < iAngel; i++) if (Angel[i][Fische] < MAX_FISCHE_PRO_PLATZ) Angel[i][Fische]++;
    // -- Aus HauptTimer verschoben
    for (i = 1; i < MAX_BIZES; i++) UpdateBizText(i);
    for (i = 0; i < MAX_STATIC_BIZES; i++) UpdateStaticBizText(i);
    for (i = 0; i < MAX_HOUSES; i++) UpdateHouseText(i);
    for (i = 0; i < MAX_TANKEN; i++) UpdateTankeText(i);
    for (i = 0; i < MAX_APLATZ; i++) UpdateAngelText(i);
    // --
    gettime(stunde, minute, sekunde);
    if (minute == 0) {
        new str[128];
        SendClientMessageToAll(0xFF6731FF, "~>~>~>~>~>~>~>~>~>~>~> {FFFFFF}San Andreas - Lotto " COLOR_HEX_ORANGE "<~<~<~<~<~<~<~<~<~<~");
        format(str, sizeof(str), COLOR_HEX_YELLOW "Die Lottoziehung beginnt um " COLOR_HEX_ORANGE "%d:05 Uhr" COLOR_HEX_YELLOW " - im Jackpot sind $%s!", stunde, AddDelimiters(Lottostand));
        SendClientMessageToAll(COLOR_YELLOW, str);
        SendClientMessageToAll(COLOR_YELLOW, "Kaufe dir mit /Lotto ein Lottoticket für $10.000 und versuche dein Glück!");
        SetTimer("LottoTimer", 1000 * 60 * 5, false);
    }

    if (minute == 10) {
        SendServerInfo(COLOR_BLUE,   "________________________________________________________________");
        SendServerInfo(COLOR_YELLOW, "                                  LyD ~ Häufig gestellte Fragen");
        SendServerInfo(COLOR_WHITE,  "Mit /Help werden Dir die wichtigsten Befehle auf dem Server aufgelistet.");
        SendServerInfo(COLOR_WHITE,  "Solltest Du einen Ort nicht finden, so leitet Dir /Navi den Weg!");
        SendServerInfo(COLOR_WHITE,  "Bei einem Anliegen kannst Du unseren Support mit /Sup erreichen.");
        SendServerInfo(COLOR_BLUE,   "________________________________________________________________");
    }
    else if (minute == 25) {
        /*SendServerInfo(COLOR_BLUE,   "___________________________________________________________________");
        SendServerInfo(COLOR_YELLOW, "                                     LyD ~ Spenden für den Server");
        SendServerInfo(COLOR_WHITE,  "Du möchtest LyD unterstützen?");
        SendServerInfo(COLOR_WHITE,  "Dann schau in unserem Shop vorbei, wo Du dir tolle Extras sichern kannst!");
        SendServerInfo(COLOR_WHITE,  "Unseren Shop erreichst Du unter: LyD-Roleplay.de/shop");
        SendServerInfo(COLOR_BLUE,   "___________________________________________________________________");*/
    }
    else if (minute == 40) {
        SendServerInfo(COLOR_BLUE,   "________________________________________________________________");
        SendServerInfo(COLOR_YELLOW, "                                      LyD ~ Informationen");
        SendServerInfo(COLOR_WHITE,  "In unserem Forum findest Du wichtige Neuigkeiten,");
        SendServerInfo(COLOR_WHITE,  "bezüglich Updates und Neuerungen, welche Du nicht verpassen solltest!");
        SendServerInfo(COLOR_WHITE,  "Unser Forum erreichst du unter: www.LyD-Roleplay.de");
        SendServerInfo(COLOR_WHITE,  "Unsere Teamspeak-IP lautet: ts.LyD-Roleplay.de");
        SendServerInfo(COLOR_BLUE,   "________________________________________________________________");
    }
    else if (minute == 55) {
        SendServerInfo(COLOR_BLUE,   "______________________________________________________________");
        SendServerInfo(COLOR_YELLOW, "                                  LyD ~ User Control Panel");
        SendServerInfo(COLOR_WHITE,  "In unserem User Panel kannst Du jederzeit diverse Statistiken abrufen,");
        SendServerInfo(COLOR_WHITE,  "ein Support-Ticket erstellen oder einen Regelverstoß melden.");
        SendServerInfo(COLOR_WHITE,  "Unser User-Panel erreichst Du unter: ucp.LyD-Roleplay.de");
        SendServerInfo(COLOR_BLUE,   "______________________________________________________________");
    }
    else if(minute == 59)
    {
        KillSperre[playerid] = 0;
    }

    new wday, wmonth, wyear;
    getdate(wyear, wmonth, wday);

    /*for (new adventplayerid; adventplayerid <= GetPlayerPoolSize(); adventplayerid++) {
        if (IsPlayerConnected(adventplayerid) && gPlayerLogged[adventplayerid] && !IsAFK[adventplayerid] && Spieler[adventplayerid][pJailed] != 3 && Spieler[adventplayerid][pPrisonRun] <= 0) {
            if (Spieler[adventplayerid][pAdventMin] >= 90 && wday != Spieler[adventplayerid][pAdventDay]) {
                SendClientMessage(adventplayerid, COLOR_LIME, "Du kannst jetzt ein Adventstürchen beim Adventskalender öffnen (/Findekalender).");
            } else {
                Spieler[adventplayerid][pAdventMin] ++;
            }
        }
    }*/

	if(minute == 5 || minute == 10 || minute == 15 || minute == 20 || minute == 25 || minute == 30 || minute == 35 || minute == 40 || minute == 45 || minute == 50 || minute == 55){
		new c = 0;
	    for(new y ; y < MAX_PLAYERS ; y++) {
	      	if( IsPlayerConnected(y) ) {
	       		if( Spieler[y][pFraktion] == 3 ) {
	 				c++;
	           	}
	       	}
		}
	    if(c > 1){//Mindestens 1 Medic online
			new brandid = RandomEx(1, MAX_HOUSES);
			if(brandid == 0){
			    //SendClientMessageToAll(COLOR_RED, "** DEBUG: Hausnummer 0");
			}else if(strcmp(Haus[brandid][hBesitzer],"Niemand",true)==0){
	            //SendClientMessageToAll(COLOR_RED, "** DEBUG: Kein Besitzer");
			}else{
			    new feuerString[128];
			    feuer[brandid][0] = AddFire(Haus[brandid][EnterX], Haus[brandid][EnterY], Haus[brandid][EnterZ]);
			    feuer[brandid][1] = AddFire(Haus[brandid][EnterX]+1, Haus[brandid][EnterY], Haus[brandid][EnterZ]);
				feuer[brandid][2] = AddFire(Haus[brandid][EnterX]+1, Haus[brandid][EnterY]+1, Haus[brandid][EnterZ]);
				feuer[brandid][3] = AddFire(Haus[brandid][EnterX], Haus[brandid][EnterY]+1, Haus[brandid][EnterZ]);
			    feuer[brandid][4] = AddFire(Haus[brandid][EnterX]-1, Haus[brandid][EnterY], Haus[brandid][EnterZ]);
			    feuer[brandid][5] = AddFire(Haus[brandid][EnterX]-1, Haus[brandid][EnterY]-1, Haus[brandid][EnterZ]);
			    feuer[brandid][6] = AddFire(Haus[brandid][EnterX], Haus[brandid][EnterY], Haus[brandid][EnterZ]);
			    schongeloescht[brandid] = 0;
			    brandtimer[brandid]=SetTimerEx("flammentimer", 600000, false, "brandid", brandid);//Wann das Haus abgefackelt sein soll Standart: 600000
	            format(feuerString, sizeof(feuerString), "[FEUERWEHR] Es wurde ein Brand an der Hausnummer %i gemeldet!", Haus[brandid][hID]);
	   			SendFraktionMessage(3, COLOR_RED, feuerString);
	   			SendClientMessage(Haus[brandid][hBesitzer], COLOR_RED, "[FEUERWEHR] An deinem Haus wurde ein Brand gemeldet!");
			}
		}
	}
    new weekday = GetWeekDayNumber();
    if(weekday == WEEKDAY_MONDAY && stunde == 0 && minute == 1){
        schwarzmarktMaxSpice = newSchwarzmarktMaxSpice;
        for(new e; e < MAX_PLAYERS; e++){
           Spieler[e][swSpice] = 0;//SpiceSperre von allen Spielern die Online sind reseten
        }
        //Über Datenbank reseten;
        new string[128];
        format(string,sizeof(string),"UPDATE `accounts` SET `swSpiceSp` = 0");
        mysql_oquery(string,THREAD_DUMMY,playerid,gSQL);


        schwarzmarktMaxDrogen = newSchwarzmarktMaxDrogen;
        for(new e; e < MAX_PLAYERS; e++){
           Spieler[e][swDrogen] = 0;
        }
        format(string,sizeof(string),"UPDATE `accounts` SET `swDrogenSp` = 0");
        mysql_oquery(string,THREAD_DUMMY,playerid,gSQL);

        schwarzmarktMaxWT = newSchwarzmarktMaxWT;
        for(new e; e < MAX_PLAYERS; e++){
           Spieler[e][swWT] = 0;
        }
        format(string,sizeof(string),"UPDATE `accounts` SET `swWTSp` = 0");
        mysql_oquery(string,THREAD_DUMMY,playerid,gSQL);

        schwarzmarktMaxWCodes = newSchwarzmarktMaxWCodes;
        for(new e; e < MAX_PLAYERS; e++){
           Spieler[e][swWCodes] = 0;
        }
        format(string,sizeof(string),"UPDATE `accounts` SET `swCodesSp` = 0");
        mysql_oquery(string,THREAD_DUMMY,playerid,gSQL);
    }
    return 1;
}

forward flammenupdate(brandid);
public flammenupdate(brandid){
    for(new i; i<MAX_HOUSES; i++){
        for(new x; x<7; x++){
        	if(brandid==feuer[i][x]&&feuer[i][x]!=0){
				feuer[i][x]=0;
				if(feuer[i][0]==0&&feuer[i][1]==0&&feuer[i][2]==0&&feuer[i][3]==0&&feuer[i][4]==0&&feuer[i][5]==0&&feuer[i][6]==0){
					new feuerString[128];
					KillTimer(brandtimer[i]);
				    brandtimer[i] = 0;
				    if(schongeloescht[i] != 1){
				        schongeloescht[i] = 1;
				    	format(feuerString, sizeof(feuerString), "[FEUERWEHR] Der Brand an der Hausnummer %i wurde gelöscht (+$1.500)!", Haus[i][hID]);
				    	Kasse[Samd] += 1.500;
				    	SendFraktionMessage(3, COLOR_GREEN, feuerString);
				    	SendClientMessage(Haus[brandid][hBesitzer], COLOR_GREEN, "[FEUERWEHR] Der Brand an deinem Haus wurde gelöscht!");
			    	}
				}
			}
		}
	}
	return 1;
}
				    
				    

forward flammentimer(brandid);
public flammentimer(brandid){
    schongeloescht[brandid] = 1;
	new feuerString[128];
    Haus[brandid][hKasse]-=7500;
	KillFire(feuer[brandid][0]);
	KillFire(feuer[brandid][1]);
	KillFire(feuer[brandid][2]);
	KillFire(feuer[brandid][3]);
	KillFire(feuer[brandid][4]);
	KillFire(feuer[brandid][5]);
	KillFire(feuer[brandid][6]);
	format(feuerString, sizeof(feuerString), "[FEUERWEHR] Hausnummer %i wurde nicht gelöscht und ist abgebrannt!", Haus[brandid][hID]);
	SendFraktionMessage(3, COLOR_RED, feuerString);
	SendClientMessage(Haus[brandid][hBesitzer], COLOR_RED, "[FEUERWEHR] Der Brand an deinem Haus konnte nicht gelöscht werden! (-7.500$)");
}


forward PMarkerTimer();
public PMarkerTimer() {
	foreach(new i : Player) {
		if (IsPlayerConnected(i) && gPlayerLogged[i]) {
			if (IsPlayerNPC(i)) continue;  
            UpdateMarkerForPlayer(i); 
        }
    }
	return 1;
}

stock UpdateMarkerForPlayer(playerid)
{
	foreach(new i : Player) {
		if (IsPlayerConnected(i) && gPlayerLogged[i]) {
			if (IsPlayerNPC(i)) continue;     
			if (playerid == i) continue;
            if (Spieler[i][pAdminDienst] == 1 && bIsSpectating[i] == 0) {
                SetPlayerMarkerForPlayer(playerid, i, 0xFF0000FF);
            } else if (Spieler[playerid][pFraktion] == Spieler[i][pFraktion] && Spieler[playerid][pFRadarStatus] == 1 && Spieler[playerid][pFraktion] != 0) {	
                SetPlayerMarkerForPlayer(playerid, i, 0xFF6F1FFF);
			} else {
				if (Spieler[playerid][pAdminDienst] == 1) {
					SetPlayerMarkerForPlayer(playerid, i, 0xFFFFFFFF);
				} else {
					SetPlayerMarkerForPlayer(playerid, i, ( GetPlayerColor(i) & 0xFFFFFF00 ) );
				}
			}
		}
	}
}

public HauptTimerTest() {
    #if defined _RUN_HAUPTTIMER_TEST_
        new tick = GetTickCount(), tick2;
    #endif
    new i, str[58];
    //Für OpenMP
    #if defined OPENMP
        if(!textDrawFixed) {
            TextDrawDestroy(Text:0);
            textDrawFixed = true;
        }
    #endif

    OnUpdateUhr();
    OnUpdateDatum();
    // TODO: einige Dinge aus dem Timer nehmen @Icii2q
    for (i = 0; i < MAX_PLAYERS; i++) {
        if (!IsPlayerConnected(i) || IsPlayerNPC(i) || !gPlayerLogged[i]) continue;
        if (Spieler[i][pDuty] == 1) {
            if (Spieler[i][pDutyTask] == 1) {
                TextDrawShowForPlayer(i, g_Zentralmeldung[Z_tdNichtVerfuegbar]);
                TextDrawHideForPlayer(i, g_Zentralmeldung[Z_tdVerfuegbar]);
            }
            else {
                TextDrawShowForPlayer(i, g_Zentralmeldung[Z_tdVerfuegbar]);
                TextDrawHideForPlayer(i, g_Zentralmeldung[Z_tdNichtVerfuegbar]);
            }
        }
        if (Spieler[i][pAdminDienst] == 1) {
            TextDrawShowForPlayer(i, g_AdienstMeldung[OnDuty]);
        }
        else {
            TextDrawHideForPlayer(i, g_AdienstMeldung[OnDuty]);
        }

        OnPlayerTot(i);
        OnPlayerJail(i);
        OnPlayerMute(i);

        format(str, sizeof(str), "Status: ~y~%s~n~~r~Wantedlevel: ~w~%d", GetPlayerWantedRang(i), Spieler[i][pWanteds]);
        if (Spieler[i][pLevel] >= 2) {
            if (_:Spieler[i][pNeuling] != INVALID_3DTEXT_ID) {
                DestroyDynamic3DTextLabel(Spieler[i][pNeuling]);
                Spieler[i][pNeuling] = Text3D:INVALID_3DTEXT_ID;
            }
        }

        if (Spieler[i][pWanteds] > 0) SetPlayerWantedLevel(i,Spieler[i][pWanteds]);
        else SetPlayerWantedLevel(i, 0);

        PlayerTextDrawSetString(i, Gesucht[i], str);

        if (damagesperre[i] > 0) damagesperre[i]--;
        if (Mechanikersperre[i] > 0) Mechanikersperre[i]--;
    }

    #if defined _RUN_HAUPTTIMER_TEST_
        tick2 = GetTickCount();
    #endif

    #if defined _RUN_HAUPTTIMER_TEST_
        new finish = GetTickCount(), players = GetOnlinePlayers();
        printf("HauptTimer: %dms bei %d Spielern", finish - tick , players );
        printf("HauptTimer ( Part #1 ): %dms bei %d Spielern", tick2 - tick , players );
        printf("HauptTimer ( Part #2 ): %dms bei %d Spielern", finish - tick2 , players );
    #endif

    return 1;
}

public OnGameModeInit() {
	Connect_To_Database();
	Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, STREAMER_MAX_OBJECTS, -1); // Object fix
    CallLocalFunction("OnGameModeInit2", ""); // y_hooks
    mysql_function_query(gSQL, "SELECT * FROM `server_rang`", true, "LoadFRank", "");
}

forward OnGameModeInit2();
public OnGameModeInit2() {
    CollectUnusedAccount();
    //UsePlayerPedAnims();//Rennen !
    HashPasswords();
    LoadInfos();
    LoadFraktion();
    LoadFirma();
    HouseInteriorLoad();
    HotelLoad();
    AngelLoad();
    StaticBizLoad();
    BizLoad();
    TankeLoad();
    InitWerbebanner();
    Blinker_Init();
    ClearOnlinePlayers();
    #if defined USE_NPCS
        ConnectBot(0);
    #endif
    //SetTimer("Pulse_TSBOT",300000,true);
    SetTimer("Pulse_Banksystem",15013,true);
    SetTimer("fraklabeltimer",11941,true);
    SetTimer("DetectHacks",11941,true);
    SetTimer("Haustier_Follow",631,true);
    SetTimer("Pulse_Tickets",5227,true);
    SetTimer("Pulse_SInfo",757,true);
    //SetTimer("gwarentimer",60000*60*3,true);
    SetTimer("gwarentimer",60000*60,true);
    SetTimer("PayDay",60000,true);
    SetTimer("NagelBand_Timer",NAGELBAND_TIMER_INTERVALL,true);
    SetTimer("SaveAll", ( 30*60*1000 ) + 2161 ,true); // Alle ~30 Minuten
    //SetTimerEx("AllSave", 300000,true, "i", "-1");
    World_Pulse();
    SetTimer("World_Pulse",60013 * 59 , true ); // Alle ~60 Minuten
    SetTimer("Freischalten",60013 * 59 , true ); // Alle ~60 Minuten
    g_EventUhr[EU_tTimer] = INVALID_TIMER_ID;
    SetTimer("PMarkerTimer", 1013, true);

    Streamer_TickRate(67);
    LoadPlayerColumns();
    ExtFire_Init();
    InitDrogenPflanzen();
    InitDrogengang_pflanzen();
    Riesenrad_Init();
    Zoll_Init();
    ShowPlayerMarkers(PLAYER_MARKERS_MODE_STREAMED);
    LoadFahrzeugVerleih();
    InitBallon();

    SetDisableSyncBugs(true);
    SetDamageSounds(0, 0);
    
    SetNameTagDrawDistance(50.0);
    SetTimer("HauptTimerTest", 1013, 1); // Primzahlen
    SetTimer("OnPlayerUpdateTacho", 683, 1);
    SetTimer("MinuteTimer", 60013, 1); // Primzahlen
    SetTimer("Servername", 5003, 1);// Primzahlen
    SetTimer("AFK_Check",30851,true);
    SetTimer("OnPlayerMoneyCheck",1013,true); // ::..Puma..:: Man es mal bitte auf 1 Millisekunde
    SetTimer("Pulse_Taxi",2281,true);
    SetTimer("WantedLabel",15277,true);
    SetTimer("FreeLicence",50021,true);
    SetTimer("GangZone_Pulse",3221,true);

    SetTimer("DerbyTimer", 500, true);

    {
        DummyTextDraw = TextDrawCreate(0.0,0.0,"_");
        TextDrawFont(DummyTextDraw,1);
        TextDrawLetterSize(DummyTextDraw, 0.0, 0.0);
        TextDrawUseBox(DummyTextDraw, true);
        TextDrawColor(DummyTextDraw,0);
        TextDrawBoxColor(DummyTextDraw, 0x00000000);
    }
    {
        BlackBox = TextDrawCreate(0.0,0.0,"_");
        TextDrawFont(BlackBox,1);
        TextDrawLetterSize(BlackBox, 0.0, 50.0);
        TextDrawUseBox(BlackBox, true);
        TextDrawColor(BlackBox,0);
        TextDrawBoxColor(BlackBox, 0x000000FF);
    }
    {
        tdNoDM = TextDrawCreate(320.000000, 376.000000, "No DM Zone");
        TextDrawAlignment(tdNoDM, 2);
        TextDrawBackgroundColor(tdNoDM, 255);
        TextDrawFont(tdNoDM, 1);
        TextDrawLetterSize(tdNoDM, 0.509999, 2.299999);
        TextDrawColor(tdNoDM, -16776961);
        TextDrawSetOutline(tdNoDM, 1);
        TextDrawSetProportional(tdNoDM, 1);
        TextDrawUseBox(tdNoDM, 1);
        TextDrawBoxColor(tdNoDM, 85);
        TextDrawTextSize(tdNoDM, 417.000000, 137.000000);
    }
    {
        tdOffeneTickets = TextDrawCreate( 35.0, 306.0,"Offene Support-Tickets: ~b~~h~2");
        TextDrawBackgroundColor(tdOffeneTickets, 255);
        TextDrawFont(tdOffeneTickets, 1);
        TextDrawLetterSize(tdOffeneTickets, 0.31, 0.31 * 3.5 );
        TextDrawColor(tdOffeneTickets,-1);
        TextDrawSetOutline(tdOffeneTickets, 1);

    }
    
    g_tPulseND = SetTimer("Pulse_NDRob",( (NINEDEMONSROB_ZEIT)*1000)+197,false);
    g_tPulseBank = SetTimer("Pulse_Bankraub",( (BANKRAUB_ZEIT)*1000)+197,false);
    g_tPulseBankLV = SetTimer("Pulse_LVBankraub",( (BANKRAUB_ZEIT)*1000)+197,false);
    g_aiNoDM[0] = CreateDynamicRectangle(346.0, -2006.0, 415.0, -2191.0, .interiorid = -1); // Freizeitpark
    g_aiNoDM[1] = CreateDynamicRectangle(1284.0, -1776.0, 1157.0, -1846.0, .interiorid = -1); // Fahrschule
    g_aiNoDM[2] = CreateDynamicRectangle(1614.3436, -1331.6265, 1671.4816, -1403.0798, .worldid = VW_LSPDINTERIOR, .interiorid = MAPS_LSPDINTERIOR_INTERIOR); // LSPD Interior
    g_aiNoDM[3] = CreateDynamicRectangle(882.1005, -1438.1812, 965.1881, -1483.2373, .worldid = VW_CITYHALLINTERIOR, .interiorid = MAPS_CITYHALLINTERIOR_INTERIOR); // Cityhall Interior
	g_aiNoDM[4] = CreateDynamicRectangle(1486.3165, -1742.7417, 1399.4124, -1862.0428, .worldid = VW_MAIN, .interiorid = MAPS_CITYHALLEXTERIOR_INTERIOR); // Cityhall Exterior
    g_aiNoDM[5] = CreateDynamicRectangle(908.0503, -1385.3702, 802.8357, -1336.6713, .interiorid = -1); // Noobspawn
	g_waiNoDM[0] = CreateDynamicRectangle( 1602.0 , -1864.0 , 1419.0 , -1581.0, .interiorid = -1 );
    g_waiNoDM[1] = CreateDynamicRectangle( 788.0 , -1388.0 , 849.0 , -1331.0, .interiorid = -1 );
    g_iAlcatraz = CreateDynamicRectangle(2794.0, 2000.0, 2929.0, 1763.0, .interiorid = 0, .worldid = 0);
    g_iWantedHackerZone = CreateDynamicRectangle(1535.1904,-1728.8754, 1628.9525,-1597.0757, .interiorid = 0 ,.worldid = 0);
    g_iAlhambra = CreateDynamicCube(470.0,-27.0,998.0,510.0,5.0,1010.0,.interiorid = 17);
    g_NDanbauSperre = CreateDynamicRectangle(354.321533, -198.249023, 1204.696533, 563.750976, .interiorid = 0, .worldid = 0);

	// Kampfzone
	kampfzone[0] = GangZoneCreate(-2639.5930,2229.4695, -2218.5574,2631.8311); // Bayside
	kampfzone[3] = CreateDynamicRectangle(-2639.5930,2229.4695, -2218.5574,2631.8311);

    // Robbing Zones:
    g_iBankLS = GangZoneCreate(1388.0, -1053.0, 1516.0, -1008.0);
    g_iBankLV = GangZoneCreate(1837.0, 1273.0, 2053.0, 1454.0);
    g_iEvidenceRoom = GangZoneCreate(1757.0, -1620.0, 1832.0, -1555.0);
    g_iBankLS_area = CreateDynamicRectangle(1388.0, -1053.0, 1516.0, -1008.0, .interiorid = 0, .worldid = 0);
    g_iBankLV_area = CreateDynamicRectangle(1837.0, 1273.0, 2053.0, 1454.0, .interiorid = 0, .worldid = 0);
    g_iEvidenceRoom_area = CreateDynamicRectangle(1757.0, -1620.0, 1832.0, -1555.0, .interiorid = 0, .worldid = 0);
    stopBlinkAndHideZone(g_iBankLS);
    stopBlinkAndHideZone(g_iBankLV);
    stopBlinkAndHideZone(g_iEvidenceRoom);

    EnableStuntBonusForAll(0);
    for (new at = 0; at <sizeof(ATM); at++) CreateDynamic3DTextLabel("{FF7700}Bankautomat\n{00FF00}Tippe /Automat",0xFFFFFFFF, ATM[at][0], ATM[at][1], ATM[at][2]+1, 5.0);
    
    
    
    
    new lagerstr[128];
    format(lagerstr, sizeof(lagerstr), COLOR_HEX_BLUE"Lagerbestand\n"COLOR_HEX_WHITE"%d Pakete\nTippe /Paketeinladen"COLOR_HEX_BLUE"/"COLOR_HEX_WHITE" um Pakete zu entnehmen\n"COLOR_HEX_BLUE"$500 pro Paket", lagerbestand);
    lager3d = CreateDynamic3DTextLabel(lagerstr, COLOR_WHITE, -38.4148,56.1184,3.1172, 10.0);
    CreateDynamicPickup(1239, 1, -38.4148,56.1184,3.1172,0);
    CreateDynamicPickup(1239, 1, 1678.1671,2358.7722,10.8203);
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Waffenteile-Pakete\n"COLOR_HEX_WHITE"Tippe /WPakete um Pakete zu entnehmen",  COLOR_WHITE, 1678.1671,2358.7722,10.8203, 15.0);
    CreateDynamicPickup(1239, 1, 2348.1086,-2302.4243,13.5469);
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Waffenteile-Pakete\n"COLOR_HEX_WHITE"Tippe /Paketeinladen um Pakete zu entnehmen",  COLOR_WHITE, 2348.1086,-2302.4243,13.5469, 15.0);
    SetTimer("CheckGas", RunOutTime, 1);
    OnUpdateUhr();
    OnUpdateDatum();
    AntiDeAMX();
    ManualVehicleEngineAndLights();
    SetGameModeText("German Roleplay Selfmade");
    AddPlayerClass(0, 1958.3783, 1343.1572, 15.3746, 269.1425, 0, 0, 0, 0, 0, 0);
    DisableInteriorEnterExits();
    OAB_OnGameModeInit();
    InitAdienstMeldung();
    InitZentralMeldung();
    //fWheel_init();

    for (new i; i < MAX_PLAYERS; i++) {
        Spieler[i][pKopfgeld] = 0;
        Spieler[i][pKopfgeldID] = INVALID_PLAYER_ID;
        Spieler[i][pJailed] = INVALID_PLAYER_ID;
        Spieler[i][iKidnapID] = INVALID_PLAYER_ID;
    }

    //Drogen Transporter
    /*drogen[0] = AddStaticVehicleEx(482,311.2510,-47.8946,1.6779,180.0258,34,34,60*10); // Drogen1
    drogen[1] = AddStaticVehicleEx(482,314.6620,-47.8846,1.6602,181.2968,87,87,60*10); // Drogen2
    drogen[2] = AddStaticVehicleEx(482,328.7251,-45.3317,1.5990,89.8018,51,1,60*10); // Drogen3
    drogen[3] = AddStaticVehicleEx(482,328.6741,-48.6964,1.5664,90.7113,31,34,60*10); // Drogen4
    drogen[4] = AddStaticVehicleEx(482,328.6540,-52.0104,1.5976,90.2421,6,34,60*10); // Drogen4
    drogen[5] = AddStaticVehicleEx(482,328.6812,-55.3923,1.6008,90.0675,5,5,60*10); // Drogen4*/
    
    /*
    //Zug
    zugb[0] = AddStaticVehicleEx(538,1810.9481,-1957.9902,13.5469,268.9864,1,1,60*10); // Zug
    zugb[1] = AddStaticVehicleEx(538,1724.2969,-1957.7959,13.5391,173.4324,1,1,60*10); // Zug
    zugb[2] = AddStaticVehicleEx(538,1654.6897,-1957.9625,13.5469,270.8898,1,1,60*10); // Zug
    */

    //Waffenteile Transporter
    wdealer[0] = AddStaticVehicleEx(482,2282.6243,-2351.6001,13.6290,226.3535,6,3,60*10); // WDealer1
    wdealer[1] = AddStaticVehicleEx(482,2290.0530,-2343.9314,13.6311,225.6010,4,4,60*10); // WDealer2
    wdealer[2] = AddStaticVehicleEx(482,2297.5593,-2336.3022,13.6220,227.2437,9,9,60*10); // WDealer3
    wdealer[3] = AddStaticVehicleEx(482,2290.8293,-2329.9988,13.6274,226.5028,85,84,60*10); // WDealer4
    wdealer[4] = AddStaticVehicleEx(482,2283.5171,-2337.6597,13.6266,227.1544,108,108,60*10); // WDealer5
    wdealer[5] = AddStaticVehicleEx(482,2276.0869,-2345.1609,13.6405,225.8990,3,38,60*10); // WDealer6

	//Farmer Combines
	combines[0] =AddStaticVehicleEx(532,-29.79999924,-1.29999995,4.19999981,66.24993896,-1,-1,60*10); //Combine
	combines[1] =AddStaticVehicleEx(532,-34.09999847,-10.39999962,4.19999981,66.24755859,-1,-1,60*10); //Combine
	combines[2] =AddStaticVehicleEx(532,-38.29999924,-19.79999924,4.19999981,66.24755859,-1,-1,60*10); //Combine
	combines[3] =AddStaticVehicleEx(532,-72.90000153,5.59999990,4.19999981,158.49755859,-1,-1,60*10); //Combine
	combines[4] =AddStaticVehicleEx(532,-83.30000305,-20.39999962,4.19999981,338.49414062,-1,-1,60*10); //Combine
	combines[5] =AddStaticVehicleEx(532,-89.80000305,32.29999924,4.19999981,248.49414062,-1,-1,60*10); //Combine

    //KFZ-Fahrzeuge
    kfzcars[0] =AddStaticVehicleEx(552,1941.2205,-1790.8042,13.0758,271.9213,1,79,60*10); // MECHA an Tanke
    kfzcars[1] =AddStaticVehicleEx(552,982.5037,-929.1548,41.3965,267.4868,1,79,60*10); // MECHA an Tanke NEU
    kfzcars[2] =AddStaticVehicleEx(552,982.7092,-924.4758,41.4802,269.6549,1,79,60*10); // MECHA an Tanke
    kfzcars[3] =AddStaticVehicleEx(552,667.0059,-580.8707,16.0361,90.2695,1,79,60*10); // MECHA an Tanke
    kfzcars[4] =AddStaticVehicleEx(552,-90.1938,-1196.0406,1.9958,345.7256,1,79,60*10); // MECHA an Tanke
    kfzcars[5] =AddStaticVehicleEx(552,-86.8948,-1196.8789,2.0065,345.7235,1,79,60*10); // MECHA an Tanke

    //Pizzacar
    pizzacar[0] = AddStaticVehicleEx(448,2122.7878,-1784.4783,12.9871,15.4276,3,5,60*10); // Pizza
    pizzacar[1] = AddStaticVehicleEx(448,2121.1492,-1784.9320,13.0122,15.4396,3,5,60*10); // Pizza
    pizzacar[2] = AddStaticVehicleEx(448,2118.9297,-1785.0514,12.9817,15.4484,3,5,60*10); // Pizza
    pizzacar[3] = AddStaticVehicleEx(448,2116.8140,-1785.0240,12.9760,15.4484,3,5,60*10); // Pizza
    pizzacar[4] = AddStaticVehicleEx(448,2114.5076,-1784.9103,12.9863,15.4576,3,5,60*10); // Pizza
    pizzacar[5] = AddStaticVehicleEx(448,2112.3501,-1785.1090,13.0096,15.4682,3,5,60*10); // Pizza
    pizzacar[6] = AddStaticVehicleEx(448,2108.7300,-1784.7393,12.9869,20.0269,3,5,60*10); // Pizza
    pizzacar[7] = AddStaticVehicleEx(448,2105.5789,-1784.8358,12.9815,20.0102,3,5,60*10); // Pizza

	//Busse
	t3dBus[0] = Text3D:INVALID_3DTEXT_ID;
	t3dBus[1] = Text3D:INVALID_3DTEXT_ID;
	t3dBus[2] = Text3D:INVALID_3DTEXT_ID;
	t3dBus[3] = Text3D:INVALID_3DTEXT_ID;

	//Reinigung
	reinigung[0] = AddStaticVehicleEx(574,2065.6135,-1903.0514,13.2720,180.3510,1,3,60*10); // reni
	reinigung[1] = AddStaticVehicleEx(574,2062.4521,-1903.0706,13.2972,180.3509,1,3,60*10); // reni
	reinigung[2] = AddStaticVehicleEx(574,2059.1306,-1903.0906,13.2974,180.3509,1,3,60*10); // reni
	reinigung[3] = AddStaticVehicleEx(574,2055.6692,-1903.1121,13.2593,180.3509,1,3,60*10); // reni
	reinigung[4] = AddStaticVehicleEx(574,2052.7971,-1903.1295,13.2850,180.3509,1,3,60*10); // reni
	reinigung[5] = AddStaticVehicleEx(574,2062.2500,-1920.5278,13.2720,359.5535,1,3,60*10); // reni
	reinigung[6] = AddStaticVehicleEx(574,2065.2402,-1920.5510,13.2972,359.5535,1,3,60*10); // reni

    //Eiswagen
    eismann[0] = AddStaticVehicleEx(423,1000.8613,-1368.5023,13.2883,14.3345,1,5,60*10); // eiswagen
    eismann[1] = AddStaticVehicleEx(423,1005.3301,-1368.3827,13.3348,16.2586,1,3,60*10); // eiswagen
    eismann[2] = AddStaticVehicleEx(423,1015.1770,-1369.0472,13.4086,15.4217,2,1,60*10); // eiswagen
    eismann[3] = AddStaticVehicleEx(423,1010.4574,-1368.8745,13.3912,14.7082,3,2,60*10); // eiswagen

    //Hotdogwagen
    hotdogcar[0] = AddStaticVehicleEx(588,2370.6411,-1928.0067,13.3064,359.5818,8,8,60*10); // Hotdogwagen
    hotdogcar[1] = AddStaticVehicleEx(588,2377.0818,-1928.0540,13.3332,359.5819,8,8,60*10); // Hotdogwagen
    hotdogcar[2] = AddStaticVehicleEx(588,2383.5793,-1928.1016,13.3400,359.5818,8,8,60*10); // Hotdogwagen

	//Bauarbeiter
	bauarb[0] = AddStaticVehicleEx(486,823.8465,886.6324,13.5834,276.7267,1,1,60*10); // bauarba
	bauarb[1] = AddStaticVehicleEx(486,823.3401,890.9330,13.5920,276.7213,1,1,60*10); // bauarba
	bauarb[2] = AddStaticVehicleEx(486,822.8735,894.8936,13.6017,276.7277,1,1,60*10); // bauarba
	bauarb[3] = AddStaticVehicleEx(486,822.3878,899.0094,13.6016,276.7277,1,1,60*10); // bauarba
	bauarb[4] = AddStaticVehicleEx(486,821.9666,902.5806,13.6016,276.7277,1,1,60*10); // bauarba
	bauarb[5] = AddStaticVehicleEx(486,821.4063,907.3297,13.6016,276.7277,1,1,60*10); // bauarba
	bauarb[6] = AddStaticVehicleEx(486,820.8406,912.1172,13.6112,276.7340,1,1,60*10); // bauarba
	bauarb[7] = AddStaticVehicleEx(486,820.3097,916.6208,13.5928,276.7313,1,1,60*10); // bauarba

    //Geldtransporter
    geldt[0] = AddStaticVehicleEx(428,1558.4480,-1011.4513,24.0308,181.0827,9,9,60*10); // gt
    geldt[1] = AddStaticVehicleEx(428,1562.5607,-1011.3737,24.0687,181.0817,9,9,60*10); // gt
    geldt[2] = AddStaticVehicleEx(428,1567.0750,-1011.2867,24.0258,181.0806,9,9,60*10); // gt
    geldt[3] = AddStaticVehicleEx(428,1571.5496,-1011.2010,24.0635,181.0796,9,9,60*10); // gt
    geldt[4] = AddStaticVehicleEx(428,1575.7191,-1011.1234,24.0285,181.0806,9,9,60*10); // gt
    geldt[5] = AddStaticVehicleEx(428,1555.4271,-1028.2484,24.0302,342.9333,9,9,60*10); // gt
    geldt[6] = AddStaticVehicleEx(428,1559.6638,-1029.5486,24.0644,342.9344,9,9,60*10); // gt
    geldt[7] = AddStaticVehicleEx(428,1563.9189,-1030.8583,24.0202,342.9335,9,9,60*10); // gt

    //Müllwagen
    muell[0] = AddStaticVehicleEx(408,2119.0425,-2077.1606,14.0978,137.4615,1,16,60*10); // müllmann
    muell[1] = AddStaticVehicleEx(408,2127.0383,-2084.0186,14.1013,137.4624,1,16,60*10); // müllmann
    muell[2] = AddStaticVehicleEx(408,2133.9006,-2090.3154,14.1523,137.4605,1,16,60*10); // müllmann
    muell[3] = AddStaticVehicleEx(408,2141.5610,-2097.3281,14.0799,137.4607,1,16,60*10); // müllmann
    muell[4] = AddStaticVehicleEx(408,2112.6843,-2070.8335,14.1242,137.4605,1,16,60*10); // müllmann
    muell[5] = AddStaticVehicleEx(408,2089.0874,-2084.4946,14.0993,179.7765,1,16,60*10); // müllmann

	for (new i = 0; i < sizeof(combines); i++) {
		SetVehicleToRespawn(combines[i]);
	    aiVehicles[combines[i]] = VEH_COMBINES;
	}
	/*for(new i=0;i<sizeof(zugb);i++) {
		SetVehicleToRespawn( zugb[i] );
	    aiVehicles[ zugb[i] ] = VEH_ZUGB;
	}*/
	for(new i=0;i<sizeof( vehicle_airportLs );i++) {
	    aiVehicles[ vehicle_airportLs[i] ] = VEH_FLUG;
	}
	for(new i=0;i<sizeof(vehicle_truckerBase);i++)
	{
		SetVehicleNumberPlate(vehicle_truckerBase[i], COLOR_HEX_BLACK"TRUCKER");
		SetVehicleToRespawn(vehicle_truckerBase[i]);
		aiVehicles[ vehicle_truckerBase[i] ] = VEH_TRUCK;
	}
	for(new i=0;i<sizeof(vehicle_busStation);i++)
	{
		SetVehicleNumberPlate(vehicle_busStation[i], COLOR_HEX_BLACK"BUS");
		SetVehicleToRespawn(vehicle_busStation[i]);
		aiVehicles[ vehicle_busStation[i] ] = VEH_BUS;
	}
	for(new i=0;i<sizeof(drogen);i++)
	{
		SetVehicleNumberPlate(drogen[i], COLOR_HEX_BLACK"LS-43795");
		SetVehicleToRespawn(drogen[i]);
		aiVehicles[ drogen[i] ] = VEH_DROGEN;
	}
	for(new i=0;i<sizeof(wdealer);i++)
	{
		SetVehicleNumberPlate(wdealer[i], COLOR_HEX_BLACK"LS-98651");
		SetVehicleToRespawn(wdealer[i]);
		aiVehicles[ wdealer[i] ] = VEH_WDEALER;
	}
	for(new i=0;i<sizeof(vehicle_wantedHackerBase);i++)
	{
		SetVehicleNumberPlate(vehicle_wantedHackerBase[i], COLOR_HEX_BLACK"LS-87492");
		SetVehicleToRespawn(vehicle_wantedHackerBase[i]);
		aiVehicles[ vehicle_wantedHackerBase[i] ] = VEH_WANTEDCAR;
	}
	for(new i=0;i<sizeof(vehicle_gardenerBase);i++)
	{
		SetVehicleNumberPlate(vehicle_gardenerBase[i], COLOR_HEX_BLACK"GÄRTNER");
		SetVehicleToRespawn(vehicle_gardenerBase[i]);
		aiVehicles[ vehicle_gardenerBase[i] ] = VEH_GARTENCARS;
	}
	for(new i=0;i<sizeof(bauarb);i++)
	{
		SetVehicleNumberPlate(bauarb[i], COLOR_HEX_BLACK"BAUARBEITER");
		SetVehicleToRespawn(bauarb[i]);
		aiVehicles[ bauarb[i] ] = VEH_BAUARB;
	}
	for(new i=0;i<sizeof(eismann);i++)
	{
		SetVehicleNumberPlate(eismann[i], COLOR_HEX_BLACK"EISWAGEN");
		SetVehicleToRespawn(eismann[i]);
		aiVehicles[ eismann[i] ] = VEH_EISMANN;
	}
	for(new i=0;i<sizeof(hotdogcar);i++)
	{
		SetVehicleNumberPlate(hotdogcar[i], COLOR_HEX_BLACK"HOTDOG");
		SetVehicleToRespawn(hotdogcar[i]);
		aiVehicles[ hotdogcar[i] ] = VEH_HOTDOGCAR;
	}
	for(new i=0;i<sizeof(geldt);i++)
	{
		SetVehicleNumberPlate(geldt[i], COLOR_HEX_BLACK"GELDTRANS");
		SetVehicleToRespawn(geldt[i]);
		aiVehicles[ geldt[i] ] = VEH_GELDT;
	}
	for(new i=0;i<sizeof(vehicle_boatCargoJob);i++)
	{
		SetVehicleNumberPlate(vehicle_boatCargoJob[i], COLOR_HEX_BLACK"SCHIFF");
		SetVehicleToRespawn(vehicle_boatCargoJob[i]);
		aiVehicles[ vehicle_boatCargoJob[i] ] = VEH_SCHIFF;
	}
	for(new i=0;i<sizeof(reinigung);i++)
	{
		SetVehicleNumberPlate(reinigung[i], COLOR_HEX_BLACK"REINIGUNG");
		SetVehicleToRespawn(reinigung[i]);
		aiVehicles[ reinigung[i] ] = VEH_REINIGUNG;
	}
	for(new i=0;i<sizeof(muell);i++)
	{
		SetVehicleNumberPlate(muell[i], COLOR_HEX_BLACK"MÜLLMANN");
		SetVehicleToRespawn(muell[i]);
		aiVehicles[ muell[i] ] = VEH_MUELL;
	}
	for(new i=0;i<sizeof(pizzacar);i++)
	{
		SetVehicleNumberPlate(pizzacar[i], COLOR_HEX_BLACK"PIZZA");
		SetVehicleToRespawn(pizzacar[i]);
		aiVehicles[ pizzacar[i] ] = VEH_PIZZACAR;
	}
	for(new i=0;i<sizeof(vehicle_taxiStations);i++)
	{
		SetVehicleNumberPlate(vehicle_taxiStations[i], COLOR_HEX_BLACK"TAXI");
		SetVehicleToRespawn(vehicle_taxiStations[i]);
		aiVehicles[ vehicle_taxiStations[i] ] = VEH_TAXICAR;
	}
	for(new i=0;i<sizeof(kfzcars);i++)
	{
		SetVehicleNumberPlate(kfzcars[i], COLOR_HEX_BLACK"MECHANIKER");
		SetVehicleToRespawn(kfzcars[i]);
		aiVehicles[ kfzcars[i] ] = VEH_KFZCARS;
	}

 	LoadFrakCars();

    ASKDraw = TextDrawCreate(514.000000, 125.000000, "Anti-Spawn-Kill");
    TextDrawBackgroundColor(ASKDraw, 255);
    TextDrawFont(ASKDraw, 2);
    TextDrawLetterSize(ASKDraw, 0.230000, 1.000000);
    TextDrawColor(ASKDraw, -65281);
    TextDrawSetOutline(ASKDraw, 1);
    TextDrawSetProportional(ASKDraw, 1);

    UhrMessage = TextDrawCreate(547.000000,28.000000, "23:49");
    TextDrawBackgroundColor(UhrMessage, 255);
    TextDrawFont(UhrMessage, 3);
    TextDrawLetterSize(UhrMessage, 0.399999,1.600000);
    TextDrawColor(UhrMessage, -1);
    TextDrawSetOutline(UhrMessage, 1);
    TextDrawSetProportional(UhrMessage, 1);

    DatumMessage = TextDrawCreate(547.000000,11.000000, "--");
    TextDrawBackgroundColor(DatumMessage, 255);
    TextDrawFont(DatumMessage,3);
    TextDrawLetterSize(DatumMessage,0.399999,1.600000);
    TextDrawColor(DatumMessage, -1);
    TextDrawSetOutline(DatumMessage, 1);
    TextDrawSetProportional(DatumMessage, 1);
//klammer start LYD LOGO
    /*Logo1 = TextDrawCreate(557.000000, 16.000000, "Roleplay");
    TextDrawBackgroundColor(Logo1, 255);
    TextDrawFont(Logo1, 3);
    TextDrawLetterSize(Logo1, 0.280000, 1.699998);
    TextDrawColor(Logo1, 869072895);
    TextDrawSetOutline(Logo1, 1);
    TextDrawSetProportional(Logo1, 1);

    Logo2 = TextDrawCreate(554.000000, 5.000000, "LyD");
    //Logo2 = TextDrawCreate(514.000000, 125.000000, "LyD");
    TextDrawBackgroundColor(Logo2, 255);
    TextDrawFont(Logo2, 0);
    TextDrawLetterSize(Logo2, 0.479999, 1.699998);
    TextDrawColor(Logo2, -1);
    TextDrawSetOutline(Logo2, 1);
    TextDrawSetProportional(Logo2, 1);*/
//klammer ende
    URL = TextDrawCreate(26.000000, 430.000000, "~g~Forum: ~w~www.LyD-Roleplay.de");
    TextDrawBackgroundColor(URL, 255);
    TextDrawFont(URL, 2);
    TextDrawLetterSize(URL, 0.280000, 1.000000);
    TextDrawColor(URL, -1);
    TextDrawSetOutline(URL, 1);
    TextDrawSetProportional(URL, 1);
    for(new a=0;a<sizeof(Kaufliste);a++)
    {
        Kaufliste[a][Carid] = CreateVehicle(Kaufliste[a][Modelid],Kaufliste[a][CarPos_x], Kaufliste[a][CarPos_y], Kaufliste[a][CarPos_z], Kaufliste[a][CarRotate], -1, -1, 20);
        aiVehicles[ Kaufliste[a][Carid] ] = VEH_KAUFLISTE;
    }

    //pTextdraw[playerid] = CreatePlayerTextDraw(playerid, 000000, 340.000000, "DASISTEINTEST");
    Leer = TextDrawCreate(490.000000, 340.000000, "Animation Abbrechen:~r~ Enter");
    TextDrawBackgroundColor(Leer, 255);
    TextDrawFont(Leer, 2);
    TextDrawLetterSize(Leer, 0.200000, 1.000000);
    TextDrawColor(Leer, -1);
    TextDrawSetOutline(Leer, 1);
    TextDrawSetProportional(Leer, 1);

    TazerBox = TextDrawCreate(650.000000, 0.000000, "_");
    TextDrawBackgroundColor(TazerBox, 255);
    TextDrawFont(TazerBox, 1);
    TextDrawLetterSize(TazerBox, 0.500000, 50.000000);
    TextDrawColor(TazerBox, -1);
    TextDrawSetOutline(TazerBox, 0);
    TextDrawSetProportional(TazerBox, 1);
    TextDrawSetShadow(TazerBox, 1);
    TextDrawUseBox(TazerBox, 1);
    TextDrawBoxColor(TazerBox, -156);
    TextDrawTextSize(TazerBox, -20.000000, 11.000000);




    KillTimer(gmxtimer);
    GMXMode = 0;
    //automsg = 0;
    

	//CreateDynamicPickup(19346, 23, -824.9174,1915.1334,22.9245, 0);//Bratwurst
	//Create3DTextLabel(COLOR_HEX_GREEN"Bratwurst Tag, 21.08.2019\n"COLOR_HEX_RED"Mach ein Screen und poste ihn ins Forum!", COLOR_WHITE, -824.9174,1915.1334,22.9245, 10.0, 0,0);

	CreateDynamicPickup(19197, 1, 377.213928, -192.850128, 1000.640100, 0, 17);//Donatladen exit
	CreateDynamicPickup(19197, 1, 1038.3171,-1339.7793,13.7266, 0);//Donatladen enter
	CreateDynamicPickup(19197, 1,  2305.8259,-16.1325,26.7496, 0);//KFZ-AMT Außen

	CreateDynamicPickup(1318, 1, 2127.5486,2378.9626,10.8203, 0);//Clubmitglied enter in Las Venturas
	CreateDynamicPickup(1318, 1, -2636.6230,1403.3202,906.4609, 0);//Ausgangclub in Las Venturas

	CreateDynamicPickup(19197, 1, 1571.2114,-1336.6027,16.4844, 0);//Startower unten
	CreateDynamicPickup(19197, 1, 1571.2114,-1336.6027,16.4844, 0);//Startower oben
	CreateDynamicPickup(19197, 1,  1726.6801,-1638.5601,20.2233, 0);//In Hotel ausgang
	CreateDynamicPickup(19197, 1, 1489.0573,-1771.7749,18.7958, 0);//Fahrschule Interior enter //FahrschuleMap 1487.2024,-1805.1606,15.3578
	CreateDynamicPickup(19197, 1, -2029.8124,-119.0646,1035.1719, 0);//Fahrschule Interior Ausgang
	CreateDynamicPickup(19197, 1, -2026.8407,-104.1143,1035.1719, 0);//Fahrschule Waffen  enter
	CreateDynamicPickup(19197, 1, 305.3869,-158.9812,999.5938, 0);//Fahrschule Waffen  exit
	CreateDynamicPickup(19197, 1, 1221.9672,-1812.2772,16.5938, 0);//Fahrschule Flugschein enter
	CreateDynamicPickup(19197, 1, 1234.1289,-1784.0337,33.6312, 0);//Fahrschule Flugschein  exit

	CreateDynamicPickup(18635, 1, -382.0342,-1426.4521,26.0822, 0);//zerbrechen
	// CreateDynamicPickup(18635, 1, -1632.7894,-2239.3267,31.4766, 0);//Wheelman befreien
	CreateDynamicPickup(19197, 1, 285.79,-85.8,1001.52, 1);//Ausgang Ammu LS
	CreateDynamicPickup(19197, 1, 316.42,-169.41,999.59, 40);//Ausgang Ammu LS Ballas
	CreateDynamicPickup(19197, 1, 286.14,-40.63,1001.52, 53);//Ausgang Ammu LV


    //CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Starterpack\n"COLOR_HEX_WHITE"Tippe /Starterpack", COLOR_WHITE, 808.8542,-1347.3077,13.5416, 8.0);
    //CreateDynamicPickup(1239, 1,  808.8542,-1347.3077,13.5416, 0);

    //CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Asservatenkammer - Illegale Gegenstände abgeben\n"COLOR_HEX_WHITE"Tippe /Abgeben [Waffenteile/Spice/Drogen/WCodes]", COLOR_WHITE, 1754.412963, -1592.894897, 13.532833, 8.0);
    //CreateDynamicPickup(1239, 1, 1754.412963, -1592.894897, 13.532833, 0);

    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Bankschalter\n"COLOR_HEX_WHITE"Tippe /Bank\nTippe /Kredit\nTippe /Ueberweisen", COLOR_WHITE, 1683.024658, -1022.939270, 1340.750854, 8.0, .worldid = VW_BANKINTERIORLS);
    CreateDynamicPickup(1239, 1, 1683.024658, -1022.939270, 1340.750854, .worldid = VW_BANKINTERIORLS);

	//Info Position

	CreateDynamicPickup(1239, 1, 822.3183,1.8747,1004.1797, -1);//Posthaus /Post
	CreateDynamicPickup(1239, 1, 2316.4529,-12.6540,26.7422, VW_REGISTRATIONOFFICE);//KFZ Schalter 1
	CreateDynamicPickup(1239, 1, 2316.3318,-9.9532,26.7422, VW_REGISTRATIONOFFICE);//KFZ Schalter 2
	CreateDynamicPickup(1239, 1,  -2158.7920,642.9232,1052.3750, 0);//Clubzeichen
	CreateDynamicPickup(1247, 1,  2268.1128,2448.0073,3.5313, 0);//Arrest Point LV

	CreateDynamicPickup(1239, 1, -2656.1047,1416.0248,906.2734, 0);//Waffenshop Club in Las Venturas

    CreateDynamicPickup(1240, 1, -2653.5183,1413.5085,906.2734, 0);//Heal Club in Las Venturas
   	CreateDynamicPickup(1239, 1, -1857.7711,-1616.8975,21.8372, 0);//Unloadpunkt Waffendealer
	CreateDynamicPickup(1239, 1, -258.9534,-2181.9905,29.0150, 0);//Unloadpunkt Drogendealer

	CreateDynamicPickup(1318, 1, -1548.0554,125.1203,3.5547, 0);//Autodieb kran
	CreateDynamicPickup(1239, 1, 1412.1915,-1700.3817,13.5395, 0);//Werbeagentur LS
	CreateDynamicPickup(1239, 1, 2008.1722,1169.3364,10.8203, 0);//Werbeagentur LV
	CreateDynamicPickup(1239, 1, 2160.4111,-98.0815,2.8239, 0);//Gangjail Point
	CreateDynamicPickup(1239, 1, -2033.1216,-117.4597,1035.1719, 0);//Auto. Fahrschule
	//CreateDynamicPickup(1239, 1,  1248.3843,-1833.8750,13.3930, 0);//Staatsrepair von Army
	CreateDynamicPickup(1239, 1, 1138.9730,-1820.9103,33.6354, 0);//Staatsrepairfür Fahrschule Helikopterplatz
	CreateDynamicPickup(1239, 1, 1.5613,-2510.2061,36.6555, 0);//Staatsrepair SA-NA

	CreateDynamicPickup(3798, 1, 2571.6233,-2226.6980,13.3550, 0);//Warenkauf LS
	CreateDynamicPickup(3798, 1, 2187.6926,-2263.8967,13.4674, 0);//Warenkauf LS
	CreateDynamicPickup(3798, 1, -1034.6223,-626.2365,32.0078, 0);//Spritkauf LS
	CreateDynamicPickup(3798, 1, 2482.8813,-2084.2239,13.5469, 0);//Spritkauf LS
	CreateDynamicPickup(1299, 1, 577.4390,1221.7273,11.2689, 0);//Loadware in LV
	CreateDynamicPickup(1650, 1, 268.9609,1384.2981,10.1610, 0);//Loadbenzin in LV

    //ND Spritbox
    CreateDynamicPickup(1277, 1, 764.9532,347.7378,20.0458, 0);






	//Job Skinpoints
	CreateDynamicPickup(1275, 1,-90.4999,-10.3628,3.1094, 0);//Bauer
	CreateDynamicPickup(1275,  1,2046.2723,-1913.2064,13.5469, 0);//Straßenreiniger
	CreateDynamicPickup(1275, 1,2118.6157,-2085.0828,13.5544, 0);//Müllmann

	CreateDynamicPickup(1275, 1,831.2045,865.6005,12.5911, 0);//Bauarbeiter
	CreateDynamicPickup(1275,  1,1551.5492,-1005.0830,24.0781, 0);//Geldtransportfahrer
	CreateDynamicPickup(1275, 1,1021.9334,-1371.0099,13.5585, 0);//Eisverkäufer
	CreateDynamicPickup(1275, 1,2117.3662,-1790.0100,13.5547, 0);//Pizzalieferrant
	CreateDynamicPickup(1275,  1,2417.1555,-1220.1472,25.3914, 0);//Hure
	//CreateDynamicPickup(1275, 1,1735.0045,-1944.0450,13.5681, 0);//Zugfahrer
	CreateDynamicPickup(1275, 1,2384.0181,-1915.5509,13.5469, 0);//Hotdog

	CreateDynamicPickup(1275, 1,980.6174,-933.2461,41.3419, 0);//Mechaniker
	CreateDynamicPickup(1275, 1,1945.9237,-1793.6355,13.5469, 0);//Mechaniker
	CreateDynamicPickup(1275, 1,662.6830,-579.0665,16.3359, 0);//Mechaniker
	CreateDynamicPickup(1275, 1,-93.9144,-1196.9713,2.4775, 0);//Mechaniker

	//Verkaufspoints

	CreateDynamicPickup(19627, 1, 1782.8275,-1702.7240,13.5096,0);//Tuningabbaue für Autos und Motorräder
	CreateDynamicPickup(1240, 1, 373.7167,-119.1190,1001.4922,5);//Pizza Stack
	CreateDynamicPickup(1240, 1, 373.7167,-119.1190,1001.4922,6);//Pizza Stack
	CreateDynamicPickup(1240, 1, 373.7167,-119.1190,1001.4922,7);//Pizza Stack
	CreateDynamicPickup(1240, 1, 373.7167,-119.1190,1001.4922,8);//Pizza Stack 
	CreateDynamicPickup(1240, 1, 373.7167,-119.1190,1001.4922,9);//Pizza Stack 
	CreateDynamicPickup(1240, 1, 377.1597,-67.7632,1001.5151,10);//Cluckin Bell
	CreateDynamicPickup(1240, 1, 377.1597,-67.7632,1001.5151,11);//Cluckin Bell
	CreateDynamicPickup(1240, 1, 377.1597,-67.7632,1001.5151,12);//Cluckin Bell
	CreateDynamicPickup(1240, 1, 377.1597,-67.7632,1001.5151,13);//Cluckin Bell
	CreateDynamicPickup(1240, 1, 377.1597,-67.7632,1001.5151,14);//Cluckin Bell
	CreateDynamicPickup(1240, 1, 376.5080,-67.6393,1001.5151,15);//Burger Shot
	CreateDynamicPickup(1240, 1, 376.5080,-67.6393,1001.5151,16);//Burger Shot
	CreateDynamicPickup(1240, 1, 376.5080,-67.6393,1001.5151,17);//Burger Shot
	CreateDynamicPickup(1240, 1, 376.5080,-67.6393,1001.5151,18);//Burger Shot
	CreateDynamicPickup(1240, 1, 376.5080,-67.6393,1001.5151,19);//Burger Shot
	CreateDynamicPickup(1240, 1, 376.5080,-67.6393,1001.5151,20);//Subway
	CreateDynamicPickup(1239, 1, 2.2396,-29.0123,1003.5494, 21);//24/7-1
	CreateDynamicPickup(1239, 1, 2.2396,-29.0123,1003.5494, 22);//24/7-2
	CreateDynamicPickup(1239, 1, 2.2396,-29.0123,1003.5494, 23);//24/7-3
	CreateDynamicPickup(1239, 1, 2.2396,-29.0123,1003.5494, 24);//24/7-4
	CreateDynamicPickup(1239, 1, 2.2396,-29.0123,1003.5494, 25);//24/7-5
	CreateDynamicPickup(1239, 1, 296.4476,-37.9833,1001.5156, 2);//Ammu LV
	CreateDynamicPickup(1239, 1, 312.1370,-165.9137,999.6010, 3);//Ammu LS Ballas
	CreateDynamicPickup(1239, 1, 295.5200,-80.3668,1001.5156, 1);//Ammu LS
    CreateDynamicPickup(1239, 1, 295.5200,-80.3668,1001.5156, 4);//Ammu SH
	CreateDynamicPickup(1239, 1, 206.3740,-8.2494,1001.2109, 36);//Victim LS (Strand)
	CreateDynamicPickup(1239, 1, 161.4726,-83.2517,1001.8047, 32);//ZIP LS (Bank)
	CreateDynamicPickup(1239, 1, 207.7187,-100.5032,1005.2578, 26);//Binco (GS)
	CreateDynamicPickup(1239, 1,  1702.9427,-1470.3704,13.5469, 0);//Motorradfärbe point
	CreateDynamicPickup(1239, 1, 1763.4915,2080.2959,10.8203, 0);//Autofärbe point
	CreateDynamicPickup(1239, 1,  -2653.6023,1407.0844,906.2734, 0);//Getränke Clubvilla in Las Venturas
	CreateDynamicPickup(1239, 1,  2309.3276,-8.2968,26.7422, VW_REGISTRATIONOFFICE);//kfzversicherung
	//CreateDynamicPickup(1239, 1, 1455.8802,-1741.8704,13.5469, 0);//Getraenk

	//CreateDynamicPickup(1239, 1, 1151.7448,-1203.0283,19.5159, 0);//Peilsender Verkauf


	//Jobpoints
	//CreateDynamicPickup(1279, 1, 645.3646,-521.5663,16.3359, 0);//Geld  entladen
	CreateDynamicPickup(1279, 1, 635.8752,862.5970,-42.6892, 0);//Steine laden
	CreateDynamicPickup(1279, 1, 607.7939,863.4465,-42.0452, 0);//Steine laden
	CreateDynamicPickup(1279, 1, 382.3929,871.6203,21.9523, 0);//steine entladen

	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Staats-Reparatur\n"COLOR_HEX_WHITE"Tippe /Staatrepair", COLOR_WHITE, 2288.5466,2444.9841,3.2734, 10.0);//LVPD
	// CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Staats-Reparatur\n"COLOR_HEX_WHITE"Tippe /Staatrepair", COLOR_WHITE, 621.3207,-584.6555,17.2330, 10.0);
	//CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Staats-Reparatur\n"COLOR_HEX_WHITE"Tippe /Staatrepair", COLOR_WHITE, 1248.3843,-1833.8750,13.3930, 10.0);//Fahrschule
	//CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Staats-Reparatur\n"COLOR_HEX_WHITE"Tippe /Staatrepair", COLOR_WHITE, 1138.9730,-1820.9103,33.6354, 10.0);//Fahrschule Dach
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Staats-Reparatur\n"COLOR_HEX_WHITE"Tippe /Staatrepair", COLOR_WHITE, 1.5613,-2510.2061,36.6555, 10.0);//Staatsrepair SA-NA


	//Fahrtticket 3D Text
	/*CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Fahrgeschäft: Fallturm\n"COLOR_HEX_WHITE"Tippe /Ticketkaufen\n"COLOR_HEX_BLUE"Ticketpreis: 300$", COLOR_WHITE, 374.6658,-2121.6416,7.8820, 10.0);//Fallturm
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Fahrgeschäft: Autosscooter\n"COLOR_HEX_WHITE"Tippe /Ticketkaufen\n"COLOR_HEX_BLUE"Ticketpreis: 300$", COLOR_WHITE, 373.8057,-2056.3586,7.9260, 10.0);//Autosscooter
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Fahrgeschäft:  Breakdancer\n"COLOR_HEX_WHITE"Tippe /Ticketkaufen\n"COLOR_HEX_BLUE"Ticketpreis: 300$", COLOR_WHITE, 356.7114,-2149.5613,7.8779, 10.0);//Breakdancer
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Fahrgeschäft: Schaukelschiff\n"COLOR_HEX_WHITE"Tippe /Ticketkaufen\n"COLOR_HEX_BLUE"Ticketpreis: 300$", COLOR_WHITE, 382.0282,-2165.8818,7.8511, 10.0);//Schaukelschiff
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Fahrgeschäft: Wasserbahn\n"COLOR_HEX_WHITE"Tippe /Ticketkaufen\n"COLOR_HEX_BLUE"Ticketpreis: 300$", COLOR_WHITE, 396.3516,-2152.5928,7.8399, 10.0);//Wasserbahn
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Sprungturm\n"COLOR_HEX_BLUE"Drück 'Enter'\n", COLOR_WHITE, 361.7136,-2107.5913,7.8340, 10.0);//Sprungbrett*/

    //Job Skin 3D Text
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Bauern\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, -90.4999,-10.3628,3.1094, 25.0);//BAUER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Straßenreiniger\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 2046.2723,-1913.2064,13.5469, 25.0);//STRAßENREINIGER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Müllmann\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 2118.6157,-2085.0828,13.5544, 25.0);//MÜLLMANN
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Bauarbeiter\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 831.2045,865.6005,12.5911, 25.0);//BAUARBEITER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Geldtransportfahrer\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 1551.5492,-1005.0830,24.0781, 25.0);//GELDTRANSPORTFAHRER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Eisverkäufer\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 1021.9334,-1371.0099,13.5585, 25.0);//EISVERKÄUFER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Pizzalieferrant\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 2117.3662,-1790.0100,13.5547, 25.0);//PIZZALIEGERRANT
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Prostituierte\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 2417.1555,-1220.1472,25.3914, 25.0);//HURE
    //CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Zugfahrer\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 1735.0045,-1944.0450,13.5681, 25.0);//ZUFAHRER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Hotdog Verkäufer\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 2384.0181,-1915.5509,13.5469, 25.0);//Hotdog
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Mechaniker\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 980.6174,-933.2461,41.3419, 25.0);//MECHANIKER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Mechaniker\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 1945.9237,-1793.6355,13.5469, 25.0);//MECHANIKER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Mechaniker\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, 662.6830,-579.0665,16.3359, 25.0);//MECHANIKER
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Arbeitskleidung für Mechaniker\n"COLOR_HEX_WHITE"Tippe /Jobkleidung", COLOR_WHITE, -93.9144,-1196.9713,2.4775, 25.0);//MECHANIKER

	
    
    //Job 3D Text
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Bauarbeiter\n"COLOR_HEX_WHITE"Tippe /Steineladen", COLOR_WHITE, 635.8752,862.5970,-42.6892, 10.0, .worldid = 0);
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Bauarbeiter\n"COLOR_HEX_WHITE"Tippe /Steineladen", COLOR_WHITE, 607.7939,863.4465,-42.0452, 10.0, .worldid = 0);
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Bauarbeiter\n"COLOR_HEX_WHITE"Tippe /Steineentladen", COLOR_WHITE, 382.3929,871.6203,21.9523, 10.0, .worldid = 0);
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Waren-Vergabe Las Venturas\n"COLOR_HEX_WHITE"Tippe /Loadwaren", COLOR_WHITE, 577.4390,1221.7273,11.2689, 20.0);//Loadware in LV
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Öl-Raffinerie Las Venturas\n"COLOR_HEX_WHITE"Tippe /Loadbenzin", COLOR_WHITE, 268.9609,1384.2981,10.1610, 20.0);//Loadbenzin in LV

    //CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Terroristen Spawn\n"COLOR_HEX_WHITE"Tippe /Terrorwaffen zum Ausrüsten\nTippe /Gheilen zum heilen", COLOR_WHITE, 969.3871,2056.1943,10.8203, 15.0);

	//3D Gebäude mit Enter betreten
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Fahrschule\n"COLOR_HEX_WHITE"Gebäude betreten mit 'Enter'", COLOR_WHITE, 1489.0573,-1771.7749,18.7958, 20.0); //FahrschuleMap
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Paintball - Anlage\n"COLOR_HEX_WHITE"Gebäude betreten mit 'Enter'", COLOR_WHITE, 1738.5869,-1586.3961,13.5555, 8.0);

    //Nine Demons Spritbox
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Spritlager der Nine Demons\n"COLOR_HEX_WHITE"Tippe /Spritlager", COLOR_WHITE, 764.9532,347.7378,20.0458, 8.0);

	//3D Infotext
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"SERVER - EXPERTE\nFreischalten mit:"COLOR_HEX_WHITE"/Experte", COLOR_WHITE, 808.7208,-1350.4906,13.5418, 15.0);
	//CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"OSTER-AKTION im LyD-Shop\n"COLOR_HEX_GREEN"Es erwarten dich tolle Preise!\n"COLOR_HEX_WHITE"Weitere Informationen im Forum!", COLOR_WHITE, 1480.9296,-1613.7988,14.0979, 25.0);
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"POSTHAUS - Eingang\n"COLOR_HEX_WHITE"Betreten mit 'Enter'", COLOR_WHITE, 914.3174,-1004.0942,37.9902, 25.0);
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"POSTHAUS\n"COLOR_HEX_WHITE"Tippe /Post", COLOR_WHITE, 822.3183,1.8747,1004.1797, 15.0);
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Schmied (Befreit von Handschellen)\n"COLOR_HEX_WHITE"Tippe /Zerbrechen\n"COLOR_HEX_ORANGE"Preis: 500$", COLOR_WHITE, -382.0342,-1426.4521,26.0822, 25.0);
	CreateDynamic3DTextLabel(COLOR_HEX_GREENA"Werbeagentur\n"COLOR_HEX_WHITE"Tippe /Werbung", COLOR_WHITE, 1412.1915,-1700.3817,13.5395, 15.0); //in LS
	CreateDynamic3DTextLabel(COLOR_HEX_GREENA"Werbeagentur\n"COLOR_HEX_WHITE"Tippe /Werbung", COLOR_WHITE, 2008.1722,1169.3364,10.8203, 15.0); // in LV
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Motorradlackiererei\n"COLOR_HEX_ORANGE"Preis: 2.000$\n"COLOR_HEX_WHITE"Tippe /Bikefarbe", COLOR_WHITE, 1702.9427,-1470.3704,13.5469, 20.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Autolackiererei\n"COLOR_HEX_ORANGE"Preis: 1.500$\n"COLOR_HEX_WHITE"Tippe /Autofarbe", COLOR_WHITE, 1763.4915,2080.2959,10.8203, 20.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Abbauwerkstatt\nfür Auto- u. Motorradtuning\n"COLOR_HEX_ORANGE"Preis: 3.000$\n"COLOR_HEX_WHITE"Tippe /Tuningabbauen", COLOR_WHITE, 1782.8275,-1702.7240,13.5096, 20.0);

    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Entladungspunkt\n"COLOR_HEX_WHITE"Tippe /Paketentladen", COLOR_WHITE, -1857.7711,-1616.8975,21.8372, 10.0, .worldid = 0);
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Entladungspunkt\n"COLOR_HEX_WHITE"Tippe /Samenpaketentladen", COLOR_WHITE, -258.9534,-2181.9905,29.0150, 10.0, .worldid = 0);
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Fahrschule Los Santos\n"COLOR_HEX_WHITE"Tippe /Fahrpruefung\nTippe /Sperrefreikaufen", COLOR_WHITE, -2033.1216,-117.4597,1035.1719, 40.0); //FahrschuleMap
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Paintball - Anlage\nGebäude verlassen mit 'Enter'", COLOR_BLUE, 2169.8208,1618.7504,999.9766, 15.0, .worldid = 0);

	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Gangjail\n"COLOR_HEX_WHITE"Tippe /Gangjail um einzusperren\nTippe /Aufbrechen um zu befreien", COLOR_WHITE, 2160.4111,-98.0815,2.8239, 13.0, .worldid = 0);
	CreateDynamic3DTextLabel(COLOR_HEX_GREENA"Die Clubvilla\n"COLOR_HEX_WHITE"Zutritt nur für Clubmitglieder", COLOR_WHITE, 2127.5486,2378.9626,10.8203, 20.0, .worldid = 0); // Clubvilla in Las Venturas

    //CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Informationen zum Stadtamt\n"COLOR_HEX_WHITE"Tippe /Stadtamtinfo", COLOR_WHITE, 1481.7039,-1740.6183,13.5469, 30.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Los Santos 4 Sterne Hotel\n"COLOR_HEX_WHITE"Miete Dir günstig ein schönes Hotelzimmer", COLOR_WHITE, 1722.5425,-1650.1168,20.2289, 20.0);
   	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Fahrzeug Zulassungsstelle\n"COLOR_HEX_WHITE"Schalter 1\nTippe /Zulassungsstelle", COLOR_WHITE, 2316.4529,-12.6540,26.7422, 15.0);
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Fahrzeug Zulassungsstelle\n"COLOR_HEX_WHITE"Schalter 2\nTippe /Zulassungsstelle", COLOR_WHITE, 2316.3318,-9.9532,26.7422, 15.0);
	//CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Einwohnermeldeamt\n"COLOR_HEX_WHITE"Schalter 1", COLOR_WHITE, 359.0863,210.2258,1008.3828, 15.0);
	//CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Einwohnermeldeamt\n"COLOR_HEX_WHITE"Schalter 2", COLOR_WHITE, 358.2361,184.5094,1008.3828, 15.0);
   	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"LOS SANTOS - FAHRSCHULE", COLOR_WHITE, 1270.0138,-1846.0366,13.3906, 20.0);
   	/*CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Las Venturas - Bahnhof NORD\n"COLOR_HEX_WHITE"Bitte halten Sie Abstand von der Bahnsteigkante und\n"COLOR_HEX_WHITE"betreten Sie erst den Bahnsteig nach Halt des Zuges!", COLOR_WHITE, 1433.3264,2640.8018,11.3926, 18.0);
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Las Venturas - Bahnhof OST\n"COLOR_HEX_WHITE"Bitte halten Sie Abstand von der Bahnsteigkante und\n"COLOR_HEX_WHITE"betreten Sie erst den Bahnsteig nach Halt des Zuges!", COLOR_WHITE, 2859.5542,1290.5511,11.3906, 18.0);
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"San Fierro - Hauptbahnhof\n"COLOR_HEX_WHITE"Bitte halten Sie Abstand von der Bahnsteigkante und\n"COLOR_HEX_WHITE"betreten Sie erst den Bahnsteig nach Halt des Zuges!", COLOR_WHITE, -1952.0848,137.6278,26.2813, 18.0);
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Los Santos - Bahnhof NORD\n"COLOR_HEX_WHITE"Bitte halten Sie Abstand von der Bahnsteigkante und\n"COLOR_HEX_WHITE"betreten Sie erst den Bahnsteig nach Halt des Zuges!", COLOR_WHITE, 816.9464,-1362.2501,-0.5078, 18.0);
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Los Santos - Hauptbahnhof\n"COLOR_HEX_WHITE"Bitte halten Sie Abstand von der Bahnsteigkante und\n"COLOR_HEX_WHITE"betreten Sie erst den Bahnsteig nach Halt des Zuges!", COLOR_WHITE, 1738.0658,-1949.8571,14.1172, 18.0);*/

	//Verkaufs 3D Infotext
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Clubvilla Bar\n"COLOR_HEX_WHITE"Tippe /Getraenk", COLOR_WHITE, -2653.6023,1407.0844,906.2734, 10.0); //in Las Venturas

    //CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Getränkestand\n"COLOR_HEX_WHITE"Tippe /Getraenk", COLOR_WHITE, 1455.8802,-1741.8704,13.5469, 10.0);
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Club Waffenshop\n"COLOR_HEX_WHITE"Tippe /Clubwaffen", COLOR_WHITE, -2656.1047,1416.0248,906.2734, 8.0); // in Las Venturas
	CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Club Kueche\n"COLOR_HEX_WHITE"Tippe /Clubheal", COLOR_WHITE, -2653.5183,1413.5085,906.2734, 8.0); //in Las Venturas
   	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"KFZ-Versicherung\n"COLOR_HEX_WHITE"Keine Reparaturkosten für 7 Tage! Preis: $50.000\nTippe /Kfzversicherung", COLOR_WHITE, 2309.3276,-8.2968,26.7422, 25.0, .worldid = VW_REGISTRATIONOFFICE);
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Flugzeugverkauf - Las Venturas\n"COLOR_HEX_WHITE"Steige in ein beliebiges Flugzeug deiner Wahl ein!", COLOR_WHITE, 1310.9393,1342.6803,10.8203, 30.0);//Flugzeugverkauf LV

	//Verkaus 3D Infotext 2
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Kleidungs Shop\n"COLOR_HEX_WHITE"Tippe /Kleidung", COLOR_WHITE, 206.3740,-8.2494,1001.2109, 11.0);//Victim LS (Strand)
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Kleidungs Shop\n"COLOR_HEX_WHITE"Tippe /Kleidung", COLOR_WHITE, 161.4726,-83.2517,1001.8047, 11.0);//ZIP LS (Bank)
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Kleidungs Shop\n"COLOR_HEX_WHITE"Tippe /Kleidung", COLOR_WHITE, 207.7187,-100.5032,1005.2578, 11.0);//Binco LS /GS)
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"CLUB Waffenshop\n"COLOR_HEX_WHITE"Tippe /Cwmenu", COLOR_WHITE, -2165.6643,646.1125,1052.3750, 10.0);//Clubammu
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Waffen Laden\n"COLOR_HEX_WHITE"Tippe /Wmenu", COLOR_WHITE, 313.3604,-139.3339,1004.0625, 10.0); // LS SH Ammu
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Waffen Laden\n"COLOR_HEX_WHITE"Tippe /Wmenu", COLOR_WHITE, 296.4476,-37.9833,1001.5156, 10.0);//LV Amu
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Waffen Laden\n"COLOR_HEX_WHITE"Tippe /Wmenu", COLOR_WHITE, 312.1370,-165.9137,999.6010, 10.0);//LS Amu Ballas
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Waffen Laden\n"COLOR_HEX_WHITE"Tippe /Wmenu", COLOR_WHITE, 295.5200,-80.3668,1001.5156, 10.0);//LS Amu
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"CLUB Küche\n"COLOR_HEX_WHITE"Tippe /Cheilen", COLOR_WHITE, -2160.3027,638.3347,1057.5861, 10.0);//Clubheal
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Super Markt\n"COLOR_HEX_WHITE"Tippe /Supermarkt", COLOR_WHITE, 2.2396,-29.0123,1003.5494, 10.0);//24/7-1
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Super Markt\n"COLOR_HEX_WHITE"Tippe /Supermarkt", COLOR_WHITE, 2.2396,-29.0123,1003.5494, 10.0);//24/7-2
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Super Markt\n"COLOR_HEX_WHITE"Tippe /Supermarkt", COLOR_WHITE, 2.2396,-29.0123,1003.5494, 10.0);//24/7-3
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Super Markt\n"COLOR_HEX_WHITE"Tippe /Supermarkt", COLOR_WHITE, 2.2396,-29.0123,1003.5494, 10.0);//24/7-4
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Super Markt\n"COLOR_HEX_WHITE"Tippe /Supermarkt", COLOR_WHITE, 2.2396,-29.0123,1003.5494, 10.0);//24/7-5
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Super Markt\n"COLOR_HEX_WHITE"Tippe /Supermarkt", COLOR_WHITE, 2.2396,-29.0123,1003.5494, 10.0);//24/7-6
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Pizza Stack\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 373.7167,-119.1190,1001.4922, 10.0, .worldid = 5);//BSN (BS 1)
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Pizza Stack\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 373.7167,-119.1190,1001.4922, 10.0, .worldid = 6);//BSS (BS 2)
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Pizza Stack\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 373.7167,-119.1190,1001.4922, 10.0, .worldid = 7);//Cluckin Bell 1
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Pizza Stack\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 373.7167,-119.1190,1001.4922, 10.0, .worldid = 8);//Pizza Stack 1
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Pizza Stack\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 373.7167,-119.1190,1001.4922, 10.0, .worldid = 9);//Pizza Stack 2
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Cluckin Bell\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  368.1664,-6.0193,1001.8516, 10.0, .worldid = 10);//BS 3
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Cluckin Bell\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  368.1664,-6.0193,1001.8516, 10.0, .worldid = 11);//Pizza Stack 3
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Cluckin Bell\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  368.1664,-6.0193,1001.8516, 10.0, .worldid = 12);//BS 4
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Cluckin Bell\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  368.1664,-6.0193,1001.8516, 10.0, .worldid = 13);//BS 5
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Cluckin Bell\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 368.1664,-6.0193,1001.8516, 10.0, .worldid = 14);//Cluckin Bell 2
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Burger Shot\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 376.5080,-67.6393,1001.5151, 10.0, .worldid = 15);//Cluckin Bell 3
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Burger Shot\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE, 376.5080,-67.6393,1001.5151, 10.0, .worldid = 16);//Cluckin Bell 4
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Burger Shot\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  376.5080,-67.6393,1001.5151, 10.0, .worldid = 17);//Pizza Stack 4
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Burger Shot\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  376.5080,-67.6393,1001.5151, 10.0, .worldid = 18);//BS 6
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Burger Shot\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  376.5080,-67.6393,1001.5151, 10.0, .worldid = 19);//BS 7
	CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Subway\n"COLOR_HEX_WHITE"Tippe /Essen\n"COLOR_HEX_ORANGE"Preis: 50$", COLOR_WHITE,  376.5080,-67.6393,1001.5151, 10.0, .worldid = 20);//BS 7

	//ND Spice Samen Punkte
	CreateDynamicPickup(1239, 1, -111.0688,1133.3749,19.7422);
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Samen-Pakete\n"COLOR_HEX_WHITE"Tippe /Paketeinladen um Pakete zu entnehmen",  COLOR_WHITE, -111.0688,1133.3749,19.7422, 15.0);
    /*CreateDynamicPickup(1239, 1, -66.3187,-1121.1329,0.6501);
    CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Samen-Pakete\n"COLOR_HEX_WHITE"Tippe /Paketentladen um Pakete auszuladen",  COLOR_WHITE, -66.3187,-1121.1329,0.6501, 15.0);*/

	//CreateDynamic3DTextLabel(COLOR_HEX_BLUE"Peilsender-Verkauf\n"COLOR_HEX_WHITE"Tippe /Peilsender", COLOR_WHITE,  1151.7448,-1203.0283,19.5159, 25.0);//

    //Schwarzmarkt Start
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Schwarzmarkt: Waffenteile\n"COLOR_HEX_WHITE"Tippe /Schwarzmarkt", COLOR_WHITE, -1101.9084,-2861.1260,61.1270, 5.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Schwarzmarkt: Drogen\n"COLOR_HEX_WHITE"Tippe /Schwarzmarkt", COLOR_WHITE, -1104.9402,-2861.1267,61.1270, 5.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Schwarzmarkt: Spice\n"COLOR_HEX_WHITE"Tippe /Schwarzmarkt", COLOR_WHITE, -1098.8091,-2861.1267,61.1270, 5.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Schwarzmarkt: Wantedcodes\n"COLOR_HEX_WHITE"Tippe /Schwarzmarkt", COLOR_WHITE, -1098.1770,-2858.3450,61.1270, 5.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Schwarzmarkt: Waffen\n"COLOR_HEX_WHITE"Tippe /Schwarzmarkt", COLOR_WHITE, -1098.1770,-2855.7100,61.1270, 5.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Schwarzmarkt: Illegale Gegenstände\n"COLOR_HEX_WHITE"Tippe /Schwarzmarkt", COLOR_WHITE, -1098.7355,-2854.2180,61.1343, 5.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Schwarzmarkt: Kennzeichen\n"COLOR_HEX_WHITE"Tippe /Schwarzmarkt", COLOR_WHITE, -1101.9292,-2854.2185,61.1343, 5.0);
    CreateDynamic3DTextLabel(COLOR_HEX_YELLOW"Schwarzmarkt: SIM-Karten\n"COLOR_HEX_WHITE"Tippe /Schwarzmarkt", COLOR_WHITE, -1105.0177,-2854.2180,61.1343, 5.0);
    //Schwarzmarkt Ende

    #if defined NEUE_WIRTSCHAFT
        gSteuern = 2;
    #else
        gSteuern = 1;
    #endif

    //Gate::Gate();
    //Spikes::Spikes();

    InitSchilder();
    InitParkscheibe();
    MuellInit();
    CowInit();
    InitTelefonzelle();
    CreateBlitzerWarnung();
    InitKartbahn();

    /*InitAutoscooter();
    InitWasserscooter();
    InitFallturm();
    SchaukelschiffInit();
    InitBreakdancer();*/

	// TODO: Peek delete?
    #if defined WEIHNACHTS_EVENT
	for(new i ; i < sizeof(g_Geschenk) ; i++) {
	    g_Geschenk[i][G_iObjectID] = CreateDynamicObject( g_Geschenk[i][G_iModel],g_Geschenk[i][G_fX],g_Geschenk[i][G_fY],g_Geschenk[i][G_fZ],0.0,0.0,0.0,50.0);
	    g_Geschenk[i][G_t3dLabel] = CreateDynamic3DTextLabel("/HALLOWEEN",0xFFFFFFFF,g_Geschenk[i][G_fX],g_Geschenk[i][G_fY],g_Geschenk[i][G_fZ] + 0.65,20.0);
		MoveDynamicObject( g_Geschenk[i][G_iObjectID] , g_Geschenk[i][G_fX],g_Geschenk[i][G_fY],g_Geschenk[i][G_fZ] , 1.0 , 180.0 , 0.0 , 0.0 );
	}
	#endif


    for(new i=0;i<MAX_VEHICLES;i++)
    {
        ResetKofferraum(i);
        RadioSender[i] = 0;
        GetVehicleHealth(i,g_fVehicleHealth[i]);
        /*g_iVehicleFixNotification{i} = 0;
        g_iVehicleBrokeNotification{i} = 0;*/
        g_iVehicleFixNotation{i} = 0;
        bestand[i] = 0;
        Benzin[i] = 0;
        Waren[i] = 0;
        vSirene[i] = INVALID_OBJECT_ID;
        vNeon[i] = INVALID_OBJECT_ID;
        OAmtSirene[i] = INVALID_OBJECT_ID;
        g_aiVehicleSirene[i][0] = INVALID_OBJECT_ID;
        g_aiVehicleSirene[i][1] = INVALID_OBJECT_ID;
        g_aiVehicleSirene[i][2] = INVALID_OBJECT_ID;
        g_aiVehicleSirene[i][3] = INVALID_OBJECT_ID;
        aiVehicleBlitzer[i][FB_iBlitzerIndex] = -1;
        aiVehicleBlitzer[i][FB_iLimit] = 0;
        aiVehicleBlitzer[i][FB_iGeldStrafe] = 0;

        gGas[i] = GetMaxTank(i);
        gMaxGas[i] = GetMaxTank(i);

        LightPwr[i]=1;
        Flasher[i]=0;
        FlasherState[i]=0;
        ResetVehiclePassengers(i);
    }
    LoadGangZones();
    //GZ_Init();
    FlashTimer = SetTimer("FlasherFunc",223,1);

    SetWeather(7);
    
    //SendRconCommand("reloadfs TS-Controller");//TS freischaltung
    
    return 1;
}

/*forward AllSave(playerid);
public AllSave(playerid){
    return cmd_allesspeichern(playerid);
}*/

forward SaveAll();
public SaveAll() {
    print("Saving everything to the database...");
    HouseSave();
    HotelSave();
    StaticBizSave();
    SaveFraktion();
    BizSave();
    AngelSave();
    TankeSave();
    SaveInfos();
    SaveFirma();
    SaveGangZones();
    SaveWerbebanner();
    SaveFrctionCars();
    for (new i = 0; i <= GetPlayerPoolSize(); i++) if (IsPlayerConnected(i) && gPlayerLogged[i]) SaveAccount(i);
    return 1;
}

public OnGameModeExit() {
    Riesenrad_Exit();
    ExtFire_Close();
    SaveWerbebanner();
    //Spikes::SpikesClose();

    HouseSave();
    HotelSave();
    SaveFraktion();
    StaticBizSave();
    BizSave();
    AngelSave();
    TankeSave();
    SaveInfos();
    SaveFirma();
    SaveGangZones();
    ClearOnlinePlayers();

    for (new i = 0; i <= GetPlayerPoolSize(); i++) if (IsPlayerConnected(i) && gPlayerLogged[i]) SaveAccount(i) && OnPlayerCarUpdate(i);
    for(new i=0;i<iAngel;i++)
    {
        DestroyDynamic3DTextLabel(Angel[i][aText]);
        DestroyDynamicPickup(Angel[i][aPickup]);
    }
    for(new i=0;i<iHaus;i++)
    {
        DestroyDynamic3DTextLabel(Haus[i][hText]);
        DestroyDynamicPickup(Haus[i][hPickup]);
    }
    for(new i=1;i<MAX_BIZES;i++)
    {
        DestroyDynamic3DTextLabel(Biz[i][bText]);
        DestroyDynamicPickup(Biz[i][bPickup]);
    }
    for(new i=0;i<iTanke;i++)
    {
        DestroyDynamic3DTextLabel(Tanke[i][tText]);
        DestroyDynamicPickup(Tanke[i][tPickup]);
    }
    DestroyDynamic3DTextLabel(lager3d);

    KillTimer(FlashTimer);
    for (new i = 0; i < MAX_VEHICLES; i++)
    {
        DestroyDynamicObject(sireneobj[i][0]);
        DestroyDynamicObject(sireneobj[i][1]);
        DestroyDynamicObject(sireneobj[i][2]);
        DestroyDynamicObject(sireneobj[i][3]);
        DestroyDynamicObject(sireneobj[i][4]);
    }
    TextDrawDestroy( g_Zentralmeldung[Z_tdVerfuegbar] );
    TextDrawDestroy( g_Zentralmeldung[Z_tdNichtVerfuegbar] );
    TextDrawDestroy( g_AdienstMeldung[OnDuty] );
    mysql_close(gSQL);
    mysql_close(gWebSQL);
    return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    SetSpawnInfo(playerid, 0,0,0,0,0,0,0,0,0,0,0,0);
    #if defined USE_NPCS
    if( IsPlayerNPC(playerid) ) {
        new name[MAX_PLAYER_NAME];
        GetPlayerName(playerid,name,sizeof(name));
        gPlayerLogged[playerid] = 0; // <- Hots eingeloggt ... wieso?
        for(new i ; i < sizeof(g_Bots) ; i++) {
            if(!strcmp(name,g_Bots[i][Bot_sName])) {
                if( g_Bots[i][Bot_iVehicle] > 0 ) {
                    new vehicleid;
                    if(!strcmp(name,"Pilot1")) {
                        vehicleid = CreateVehicle( g_Bots[i][Bot_iVehicle], 0.0,0.0,0.0,0.0,3,6,-1);
                    }
                    else if(!strcmp(name,"Pilot2")) {
                        vehicleid = CreateVehicle( g_Bots[i][Bot_iVehicle], 0.0,0.0,0.0,0.0,6,1,-1);
                    }
                    else if(!strcmp(name,"Pilot3")) {
                        vehicleid = CreateVehicle( g_Bots[i][Bot_iVehicle], 0.0,0.0,0.0,0.0,3,1,-1);
                    }
                    else if(!strcmp(name,"Pilot4")) {
                        vehicleid = CreateVehicle( g_Bots[i][Bot_iVehicle], 0.0,0.0,0.0,0.0,2,1,-1);
                    }
                    g_Bots[i][Bot_iVehicleID] = vehicleid;
                }
                SetSpawnInfo(playerid,NO_TEAM, g_Bots[i][Bot_iSkinID] ,0.0,0.0,0.0,0.0,0,0,0,0,0,0);
                SpawnPlayer(playerid);
            }
        }
        return 1;
    }
    #endif
    /*
    else {
        if( gPlayerLogged[playerid] == 0 ) {
            printf("gPlayerLogged == false");
            SetTimerEx("SetPlayerView",503,false,"dd",playerid,-1); // Muss,sonst klappt Spectate nicht
        }
    }
    */
    if (!Spieler[playerid][pClassRequest]) Spieler[playerid][pClassRequest] = 1;
    else {
        TogglePlayerSpectating(playerid, true);
        TogglePlayerSpectating(playerid, false);
    }
    return 1;
}

public OnPlayerConnect(playerid)
{
    //#if defined USE_NPCS
    //printf("OnPlayerConnect(%d) Bot %d",playerid,IsPlayerNPC(playerid) );
    SetPlayerMaxHealth(playerid, 500);
    SetDamageFeedForPlayer(playerid, 0);
    new _gettime = gettime();
    if(IsPlayerNPC(playerid)) return 1;
    //#endif
    new serial[128], string[256], sName[MAX_PLAYER_NAME], ip[16];
    MySQLThreadOwner[playerid]++;
    GetPlayerIp(playerid,ip,sizeof(ip));
    GetPlayerName(playerid,sName,sizeof(sName));

    gpci(playerid, serial,sizeof( serial ) );
    AddOnlinePlayer(playerid);
    ClearAnimations(playerid);
    ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0,1 ); // Dieing of Crack
    Riesenrad_OnPlayerConnect(playerid);

	TextDrawShowForPlayer(playerid, URL);
	if(strcmp(sName, "Niemand", true) == 0)
	{
		SendClientMessage(playerid, COLOR_RED, "Du wurdest gekickt, da dein Name nicht passend war!");
		Kick(playerid);
	}
	format(string, sizeof(string), "* %s hat LyD-Roleplay betreten.", sName);
    
	for (new i = 0; i < MAX_PLAYERS; i++)
	    if (IsPlayerConnected(i) && gPlayerLogged[i] == 1 && pChatSettings[i][CHAT_JL] == 1)
            SendClientMessage(i, COLOR_GREY, string);

    PlayAudioStreamForPlayer(playerid, URL_LOGINMUSIC);

    /*new randomLogin = RandomEx(0, 100);

    if(randomLogin > 0 && randomLogin < 20){
        PlayAudioStreamForPlayer(playerid, "https://summerjam.xyz/music/login.wav");
    }
    if(randomLogin > 20 && randomLogin < 40){
        PlayAudioStreamForPlayer(playerid, "https://summerjam.xyz/music/login2.wav");
    }
    if(randomLogin > 40 && randomLogin < 60){
        PlayAudioStreamForPlayer(playerid, "https://summerjam.xyz/music/login3.wav");
    }
    if(randomLogin > 60 && randomLogin < 80){
        PlayAudioStreamForPlayer(playerid, "https://summerjam.xyz/music/login4.wav");
    }
    if(randomLogin > 80 && randomLogin < 100){
        PlayAudioStreamForPlayer(playerid, URL_LOGINMUSIC);
    }*/

    //PlayAudioStreamForPlayer(playerid, "http://www.uploadmusic.org/MUSIC/5384711376757549.mp3");
    PlayerKey[playerid] = 0;

    format(string,sizeof(string),"SELECT * FROM `hwban` WHERE `hwid` = '%s'",serial );
    mysql_pquery(string,THREAD_HWBAN_CONNECT,playerid,gSQL,MySQLThreadOwner);



	// OnPlayerCarLogin(playerid);
	//ResetPlayerMoney(playerid);

	SetPlayerMapIcon(playerid, 99, 1329.4666,-1559.4634,13.5469, 31, 0, 0);//Hotel
    SetPlayerMapIcon(playerid, 97, 1154.4122, -1457.7490, 15.7968, 25, 0, 0); // 247 mall
	SetPlayerMapIcon(playerid, 96, 1238.0809,-1814.2310,13.4292, 19, 0, 0);//Fahrschule
    //SetPlayerMapIcon(playerid, 95, 1038.5304,-1339.6097,13.7266, 17, 0, 0);//Donatladen
    //SetPlayerMapIcon(playerid, 94, 1833.2742,-1681.8307,13.4802, 49, 0, 0);//Bar
    SetPlayerMapIcon(playerid, 95, 1006.6136,-942.5633,42.0423, 42, 0, 0);//Tankstelle
    SetPlayerMapIcon(playerid, 94, 1944.6305,-1774.1670,13.3906, 42, 0, 0);//Tankstelle
    SetPlayerMapIcon(playerid, 93, 612.2504,1694.3873,6.9922, 42, 0, 0);//Tankstelle
    SetPlayerMapIcon(playerid, 92, 1596.0598,2198.7400,10.8203, 42, 0, 0);//Tankstelle
    SetPlayerMapIcon(playerid, 91, -2023.9924,156.4616,28.8359, 42, 0, 0);//Tankstelle
    SetPlayerMapIcon(playerid, 90, -1676.5607,412.4557,7.1797, 42, 0, 0);//Tankstelle
    SetPlayerMapIcon(playerid, 89, -99.1346,-1166.1656,2.5805, 42, 0, 0);//Tankstelle
    SetPlayerMapIcon(playerid, 88, -1676.5607,412.4557,7.1797, 42, 0, 0);//Tankstelle
    //SetPlayerMapIcon(playerid, 85, 2127.5486,2378.9626,10.8203, 48, 0, 0);//Clubvilla in LV
    //SetPlayerMapIcon(playerid, 84, 2422.1592,-1508.4604,23.9922, 14, 0, 0);//Cluckin' Süd
    SetPlayerMapIcon(playerid, 87, 1350.0214,-1754.2931,13.3554, 25, 0, 0);//247 lspd
    SetPlayerMapIcon(playerid, 86, 1316.0682,-906.5001,38.3864, 25, 0, 0);//247 bsn
    SetPlayerMapIcon(playerid, 85, 2098.0144,-1806.8236,13.5541, 29, 0, 0);//pizzaria
    SetPlayerMapIcon(playerid, 84, 1457.8679,-1140.2852,24.0735, 45, 0, 0);//Skin Shop Bank
    SetPlayerMapIcon(playerid, 83, 2244.6521,-1664.0035,15.4766, 45, 0, 0);//Skin Shop Grove
    //SetPlayerMapIcon(playerid, 78, 817.6655,-1618.9307,13.7034, 10, 0, 0);//süd bsn
    SetPlayerMapIcon(playerid, 82, 1411.5352,-1699.5714,13.5395, 46, 0, 0);//Werbung in LS
    SetPlayerMapIcon(playerid, 81, 2400.5369,-1981.5837,13.5469, 18, 0, 0);//Nähe Ballasbase Ammunastion
    SetPlayerMapIcon(playerid, 80, 1380.9908,457.3878,19.9316, 42, 0, 0);//Tankstelle
	SetPlayerMapIcon(playerid, 79, 2423.8147,-1742.4226,13.1120, 25, 0, 0);//247 grove street
 	SetPlayerMapIcon(playerid, 78, 1257.1144,-1339.0963,12.9213, 8, 0, 0);//Busbahnhof
 	//SetPlayerMapIcon(playerid, 72, 2008.1722,1169.3364,10.8203, 46, 0, 0);//Werbung in LV


    // 36 für /DFINDE reserviert
    //  SetPlayerCameraPos(playerid, 1511.7239,-1715.6687,30.0469);//Brücke Verona Beach
    // SetPlayerCameraPos(playerid, 369.8176, -1869.0303, 22.6842);//Brücke Verona Beach
    //SetPlayerCameraLookAt(playerid, 1481.4827,-1756.5393, 22.5);
    //SetPlayerPos(playerid, 1486.3573,-1749.6531,15.4453 );
    SetPlayerColor(playerid, COLOR_WHITE);
    ClearPlayerChat(playerid);
    /*
    format(string, sizeof(string), "Herzlich Willkommen auf LyD - Reallife, %s", GetName(playerid));
    SendClientMessage(playerid, COLOR_GREEN, string);
    */

    //Daten zurücksetzen
    for(new i = 0 ; i < MaxVeh ; i++) {
        PlayerCar[playerid][i][CarId] = INVALID_VEHICLE_ID;
        PlayerHaveCar[playerid][i] = 0;
    }
    SuicidePlayer[playerid] = INVALID_TIMER_ID;
    damagesperre[playerid]=0;
    Mechanikersperre[playerid]=0;
    KillSperre[playerid]=0;
    KillBlackSperre[playerid]=0;
    Spieler[playerid][pAdventMin]=0;
    Spieler[playerid][pLevel] = 1;
    Spieler[playerid][pHeiratsantragID] = INVALID_PLAYER_ID;
    Spieler[playerid][pMarriage] = INVALID_MARRIAGE;
    format(Spieler[playerid][pMarriageName],32,"Niemand");
    Spieler[playerid][ID] = 0;
    Spieler[playerid][pfrakwarn] = 0;
    Spieler[playerid][pArmourInfo] = 0.0;
    Spieler[playerid][pHealthInfo] = 0.0;
    Spieler[playerid][pSuspendedSentence] = 0;
    format(Spieler[playerid][pSusSentenceReason], 128, "");
    Spieler[playerid][pEventPoints] = 0;
    Spieler[playerid][pAdventDay] = 0;
    Spieler[playerid][pAdmin] = 0;
    Spieler[playerid][pDonateRank] = 0;
    Spieler[playerid][pHours] = 0;
    Spieler[playerid][pSex] = 0;
    Spieler[playerid][pMuted] = 0;
    Spieler[playerid][pExp] = 0;
    Spieler[playerid][pCash] = 0;
    Spieler[playerid][pCrimes] = 0;
    Spieler[playerid][pKills] = 0;
    Spieler[playerid][pDeaths] = 0;
    Spieler[playerid][pArrested] = 0;
    Spieler[playerid][pWantedDeaths] = 0;
    Spieler[playerid][pPhoneBook] = 0;
    Spieler[playerid][pLottoNr] = 0;
    Spieler[playerid][pJob] = 0;
    Spieler[playerid][pPayCheck] = 0;
    Spieler[playerid][pJailed] = 0;
    Spieler[playerid][pJailTime] = 0;
    Spieler[playerid][pDuty] = 0;
    Spieler[playerid][pDutyTask] = 0;
    Spieler[playerid][pfDuty] = 0;
    // Spieler[playerid][pMats] = 0;
    Spieler[playerid][pDrugs] = 0;
    Spieler[playerid][pWantedCodes] = 0;
    Spieler[playerid][pFraktion] = 0;
    Spieler[playerid][pRank] = 0;
    Spieler[playerid][pSkin] = 0;
    //Spieler[playerid][pHouseKey] = INVALID_HOUSE_KEY;
    //Spieler[playerid][pHotelKey] = INVALID_HOTEL_KEY;
    //Spieler[playerid][pBizKey] = INVALID_BIZ_KEY;
    //Spieler[playerid][pTankKey] = INVALID_TANK_KEY;
    Spieler[playerid][pCarLic] = 0;
    Spieler[playerid][pFlyLic] = 0;
    Spieler[playerid][pBoatLic] = 0;
    Spieler[playerid][pGunLic] = 0;
    Spieler[playerid][pGunLicB] = 0;
    Spieler[playerid][pLKWLic] = 0;
    Spieler[playerid][pMotoLic] = 0;
    Spieler[playerid][pTrakLic] = 0;
    Spieler[playerid][pCarmALic] = 0;
    Spieler[playerid][pPayDay] = 0;
    Spieler[playerid][pTut] = 0; // UNGÜLTIG!
    Spieler[playerid][pWarns] = 0;
    Spieler[playerid][pPerso] = 0;
    Spieler[playerid][pHandyNr] = 0;
    Spieler[playerid][pHandyGeld] = 0;
    Spieler[playerid][pTot] = 0;
    Spieler[playerid][pClassRequest] = 0;
    Spieler[playerid][pBanned] = 0;
    Spieler[playerid][pdeacc] = 0;
    fahrlehrerboni[playerid]=0;
    meslock[playerid]=0;
    Spieler[playerid][pschulden] = 0;
    Spieler[playerid][pWeihnachtsday] = 0;
    format(pdeaccadmin[playerid],32,"");
    Spieler[playerid][pWanteds] = 0;
    Spieler[playerid][pBank] = 0;
    Spieler[playerid][pJailType] = 0;
    Spieler[playerid][pTotTime] = 0;
    Spieler[playerid][pTotX] = 0.0;
    Spieler[playerid][pTotY] = 0.0;
    Spieler[playerid][pTotZ] = 0.0;
    Spieler[playerid][pKanister] = 0;
    Spieler[playerid][pHeilReady] = 1;
    Spieler[playerid][pWaffenteile] = 0;
    Spieler[playerid][pC4] = 0;
    // Spieler[playerid][pDrogen] = 0;
    Spieler[playerid][pSafeTeile] = 0;
    Spieler[playerid][pSafeWantedCodes] = 0;
    //Spieler[playerid][bShowMarker] = false;
    Spieler[playerid][pSafeDrogen] = 0;
    Spieler[playerid][pSpawnChange] = 0;
    Spieler[playerid][pHandyState] = 1;
    Spieler[playerid][pFrakLohn] = 0;
    Spieler[playerid][pTimeBan] = 0;
    Spieler[playerid][pMuteTime] = 0;
    Spieler[playerid][pAngel] = 0;
    Spieler[playerid][pFische] = 0;
    Spieler[playerid][pKoeder] = 0;
    Spieler[playerid][pMaxFishes] = 0;
    Spieler[playerid][pMaxVerloren] = 0;
    Spieler[playerid][pFishLic] = 0;
    Spieler[playerid][pFPunkte] = 0;
    Spieler[playerid][pFBPunkte] = 0;
    Spieler[playerid][pFlPunkte] = 0;
    Spieler[playerid][pMotoPunkte] = 0;
    Spieler[playerid][pGunPunkte] = 0;
    Spieler[playerid][pKekse] = 0;
    Spieler[playerid][pZigaretten] = 0;
    Spieler[playerid][pFrakSperre] = 0;
    Spieler[playerid][pHartz4] = 0;
    Spieler[playerid][pKopfgeld] = 0;
    Spieler[playerid][pKopfgeldID] = INVALID_PLAYER_ID;
    Spieler[playerid][pHitmenAuftragID] = INVALID_PLAYER_ID;
    Spieler[playerid][pWheelAuftragID] = INVALID_PLAYER_ID;
    Spieler[playerid][tickJobCheckpoint] = _gettime;
    Spieler[playerid][bMaske] = false;
    Spieler[playerid][wbMaske] = false;
    Spieler[playerid][abMaske] = false;
    Spieler[playerid][bMundbinde] = false;
    ClearPlayerTaxiSlots(playerid);
    Spieler[playerid][pAutoknackerVehicleID] = INVALID_VEHICLE_ID;
    Spieler[playerid][pVehicleVerleih] = INVALID_VEHICLE_ID;
    Spieler[playerid][tickVehicleVerleih] = 0;
    Spieler[playerid][pSpice] = 0;
    Spieler[playerid][pSafeSpice] = 0;
    Spieler[playerid][pHausSafeboxSpice] = 0;
    Spieler[playerid][pVehiclePort] = 0;
    Spieler[playerid][pHandyNr] = 0;
    Spieler[playerid][pHandyNr_Temp] = 0;
    Spieler[playerid][pHandyNr_Counter] = 0;
    
    //Spieler[playerid][pMarkerStatus] = 0;
    Spieler[playerid][pFRadarStatus] = 0;

    Spieler[playerid][DmgTog] = 0;
    Spieler[playerid][pSpawnWaffen] = 0;
    Spieler[playerid][pSpawnWaffenUnix] = 0;

    Spieler[playerid][tDrink] = INVALID_TIMER_ID;
    Spieler[playerid][tSpawnView] = INVALID_TIMER_ID;
    Spieler[playerid][pTutTimer] = INVALID_TIMER_ID;

    Spieler[playerid][punixWantedCodes] = 0;
    Spieler[playerid][bHasSex] = false;
    Spieler[playerid][bNoDMZone] = false;
    Spieler[playerid][bWantedHacking] = false;
    Spieler[playerid][pInterviewer] = INVALID_PLAYER_ID;
    Spieler[playerid][ibInterviewStat] = 0;
    Spieler[playerid][unixUpdate] = _gettime;
    Spieler[playerid][punixFlyhack] = Spieler[playerid][unixUpdate];
    Spieler[playerid][pStartbonus] = 0;
    Spieler[playerid][pDetektivPoints] = 1;
    Spieler[playerid][pHurePoints] = 1;
    Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
    Spieler[playerid][pSecureCodeLevel] = -1;
    Spieler[playerid][pVertragID] = INVALID_PLAYER_ID;
    Spieler[playerid][pVertragText][0] = '\0';
    oldposx[playerid]=0,oldposy[playerid]=0,oldposz[playerid]=0;
    Spieler[playerid][pWantedLabel] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pWantedLabelEx] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pBlacklistLabel] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pNeuling] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][t3dSInfo] = Text3D:INVALID_3DTEXT_ID;
    //Spieler[playerid][pAdminLabel] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pAdminDienst] = 0;
    Spieler[playerid][pBenutzerfarbe] = 0;
    Spieler[playerid][pKekseValue] = 0;
    Spieler[playerid][pGeldcheckID] = INVALID_PLAYER_ID;
    Spieler[playerid][pGeldcheckBetrag] = 0;
    Spieler[playerid][pBankKontoPin] = INVALID_BANK_PIN;
    Spieler[playerid][pBankKonto] = 0;
    Spieler[playerid][pLoginVersuch] = 0;
    Spieler[playerid][pJobWechsel] = 0;
    Spieler[playerid][unixFeuerwerk] = _gettime;
    Spieler[playerid][unixFeuerwerkleucht] = _gettime;
    Spieler[playerid][pDrogenSamen] = 0;
    Spieler[playerid][pGangDrogenSamen] = 0;
    Spieler[playerid][pKrauterMische] = 0;
    Spieler[playerid][pAutoknackerExtraLohn] = 0;
    Spieler[playerid][punixFSperre] = 0;
    Spieler[playerid][punixFBSperre] = 0;
    Spieler[playerid][punixFlSperre] = 0;
    Spieler[playerid][punixGunSperre] = 0;
    Spieler[playerid][punixLKWSperre] = 0;
    Spieler[playerid][punixMotoSperre] = 0;
    Spieler[playerid][pCommandSpam] = 0;
    Spieler[playerid][pChatSpam] = 0;
    Spieler[playerid][pPinVergessen] = 0;
    Spieler[playerid][pHaustierSpawned] = false;
    Spieler[playerid][pHaustierObject] = INVALID_OBJECT_ID;
    Spieler[playerid][pWiederbelebung] = 0;
    Spieler[playerid][pLawyerPoints] = 0;
    Spieler[playerid][tRadarfallenWarnung] = INVALID_TIMER_ID;
    Spieler[playerid][pAutomatik] = 0;
    Spieler[playerid][tKidnap] = INVALID_TIMER_ID;
    Spieler[playerid][pMuellCP] = 0;
    Spieler[playerid][pMuell][0] = 0;
    Spieler[playerid][pMuell][1] = 0;
    Spieler[playerid][pGeldTCP] = 0;
    Spieler[playerid][pGELDT][0] = 0;
    Spieler[playerid][pGELDT][1] = 0;
    Spieler[playerid][pCowJob] = 0;
    Spieler[playerid][pCow][0] = 0;
    Spieler[playerid][pCow][1] = 0;
    Spieler[playerid][pCow][2] = 0;
    Spieler[playerid][pFahrgeschaeft] = -1;
    pDrunkLevelLast[playerid] = 0;
    pFPS[playerid] = 0;

    Spieler[playerid][pBMOD] = 0;
    Spieler[playerid][pFV] = 0;
    Spieler[playerid][pLobe] = 0;
    Spieler[playerid][pKoffer] = false;
    Spieler[playerid][pHelm] = 0;
    Spieler[playerid][pSHeilen] = INVALID_PLAYER_ID;
    Spieler[playerid][pFLehrer] = INVALID_PLAYER_ID;
    Spieler[playerid][pPremiumNeon] = 0;
    Spieler[playerid][pKillsGangFight] = 0;
    Spieler[playerid][pKillsStreetwar] = 0;
    Spieler[playerid][pMP3Player] = 0;
    Spieler[playerid][pRadarfallenWarnung] = 0;
    Spieler[playerid][pPremiumBizSlot] = 0;
    Spieler[playerid][pPremiumCarSlot] = 0;
    format(postpsenden[playerid],MAX_PLAYER_NAME,"");
    format(postpid[playerid],300,""),firstspawn[playerid]=0;
    Spieler[playerid][pKillsGangFightSession] = 0;
    Spieler[playerid][pMustUseAC] = 0;
	Spieler[playerid][pTSFrei] = 0;
    ClearKFZZulassung(playerid);
    ClearPolizeiPartner(playerid);
    ReleasePlayerKeys(playerid);
    ResetKoffer(playerid);

    //gSpawned{playerid} = 0;
    gPlayerLogged[playerid] = 0;
    AcceptStats[playerid] = 999;
    AcceptAngelStats[playerid] = 999;
    AcceptCarSell[playerid] = 999;
    AcceptCarSellPreis[playerid] = 0;
    RepairCar[playerid] = 999;
    RepairCarPreis[playerid] = 0;
    RefillCar[playerid] = 999;
    RefillCarPreis[playerid] = 0;
    ZettelID[playerid] = 999;
    ZettelPreis[playerid] = 0;
    TazerTime[playerid] = 1;
    Tazered[playerid] = 0;
    Cuffed[playerid] = 0;
    MedicHealID[playerid] = 999;
    MedicHealPreis[playerid] = 0;
    Refueling[playerid] = 0;
    MakeAnimation[playerid]= 0;
    FrakInviteID[playerid]=999;
    BankWert[playerid] = 0;
    BankAn[playerid] = 999;
//  wheelmanclient[playerid]=0;
    PlayerIsPaintballing[playerid] = 0;
    AnwaltID[playerid] = 999;
    AnwaltPreis[playerid] = 0;
    CurrentPhone[playerid] = 999;
    pDrogenID[playerid] = 999;
    pDrogenMenge[playerid] = 0;
    pDrogenPreis[playerid] = 0;
    pSpiceID[playerid] = 999;
    pSpiceMenge[playerid] = 0;
    pSpicePreis[playerid] = 0;
    pWTeileID[playerid] = 999;
    pWTeileMenge[playerid] = 0;
    pWTeilePreis[playerid] = 0;
    pDrogenEinfluss[playerid] = 0;
    pWaffenPlayer[playerid] = 999;
    pWaffenPreis[playerid] = 0;
    pWaffenID[playerid] = 0;
    pFahrStunde[playerid] = 0;
    pCar[playerid] = INVALID_VEHICLE_ID;
    pCheckpoint[playerid] = CP_NONE;
    pMakeTutorial[playerid] = 0;
    pFahrschulCar[playerid] = INVALID_VEHICLE_ID;
    NeedCop[playerid] = 0;
    NeedMedic[playerid] = 0;
    NeedKFZ[playerid] = 0;
    NeedOAMT[playerid] = 0;
    NeedAWALT[playerid] = 0;
    pUnderCover[playerid] = 0;
    pCurrentSite[playerid] = 0;
    JobVehicle[playerid] = INVALID_VEHICLE_ID;
    IsAFK[playerid] = 0;
    NeedBackup[playerid] = 0;
    pCurrentBiz[playerid] = 0;
    pSkinSelection[playerid] = 0;
    pChoosedSkin[playerid] = 0;
    pChatSettings[playerid][CHAT_GC] = 0;
    pChatSettings[playerid][CHAT_FC] = 0;
    pChatSettings[playerid][CHAT_JC] = 0;
    pChatSettings[playerid][CHAT_BC] = 0;
    pChatSettings[playerid][CHAT_CC] = 0;
    pChatSettings[playerid][CHAT_JL] = 0;
    pChatSettings[playerid][CHAT_SM] = 0;
    wantedcodename[playerid]=MAX_PLAYERS;
    ReportCall[playerid]=999;
    PlayerNeedsHelp[playerid] = 0;
    IsPlayerFishing[playerid] = 0;
    NeedPIZZA[playerid] = 0;
    NeedTAXI[playerid] = 0;
    NeedWHEEL[playerid] = 0;
    g_aiDestroyedVehicles[playerid] = 0;
    TelefonzelleAn[playerid] = INVALID_PLAYER_ID;
    if (Spieler[playerid][tLoginTimeout] != INVALID_TIMER_ID) KillTimer(Spieler[playerid][tLoginTimeout]);
    Spieler[playerid][tLoginTimeout] = INVALID_TIMER_ID;
    Spieler[playerid][pHouseAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pHouseAngebot][1] = 0;
    Spieler[playerid][pBizAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pBizAngebot][1] = 0;
    Spieler[playerid][pTankeAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pTankeAngebot][1] = 0;
    Spieler[playerid][tdTaxi] = PlayerText:INVALID_TEXT_DRAW;
    Spieler[playerid][pTaxiVehicle] = INVALID_VEHICLE_ID;
    Spieler[playerid][pTruckerBlock] = _gettime;
    Spieler[playerid][pCoins] = 0;
    Spieler[playerid][LoadedPremiumWeapons] = 0;
    Spieler[playerid][pPfand] = 0;
    for(new i ; i < MAX_TAXI_KUNDEN ; i++) {
        Spieler[playerid][pTaxiKundenStart][i] = 0;
        Spieler[playerid][pTaxiKunden][i] = INVALID_PLAYER_ID;
    }
    Spieler[playerid][pAMarkX] = 0;
    Spieler[playerid][pAMarkX] = 0;
    Spieler[playerid][pAMarkZ] = 0;
    Spieler[playerid][swSpice] = 0;
    Spieler[playerid][swDrogen] = 0;
    Spieler[playerid][swWT] = 0;
    Spieler[playerid][swDrogen] = 0;

    //Player 3DText's
    Spieler[playerid][pWantedLabel] = CreateDynamic3DTextLabel(" ", COLOR_RED, 0.0, 0.0, 0.0, 35.0, .attachedplayer = playerid, .testlos = true);
//  Spieler[playerid][pWantedLabelEx] = CreateDynamic3DTextLabel("Gesucht", COLOR_RED, 0.0, 0.0, 0.0, 12.0 , .attachedplayer = playerid );
    Spieler[playerid][pBlacklistLabel] = CreateDynamic3DTextLabel(" ", 0xFF0000FF, 0.0, 0.0, 0.0, 12.0, .attachedplayer = playerid, .testlos = true);
    Spieler[playerid][pNeuling] = CreateDynamic3DTextLabel("-> NEULING <-\nKILL-SCHUTZ", 0xFFFF00FF, 0.0, 0.0, 0.4, 12.0, .attachedplayer = playerid, .testlos = true);

    // Spieler[playerid][pWantedLabel] = Create3DTextLabel(" ", COLOR_RED, 0.0, 0.0, 0.0, 10.0, 0, 0);
    // Attach3DTextLabelToPlayer(Spieler[playerid][pWantedLabel], playerid, 0.0, 0.0, 0.85);
    // Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[playerid][pWantedLabelEx] , E_STREAMER_ATTACH_OFFSET_X , 0.0 );
    // Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[playerid][pWantedLabelEx] , E_STREAMER_ATTACH_OFFSET_Y , 0.0 );
    // Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[playerid][pWantedLabelEx] , E_STREAMER_ATTACH_OFFSET_Z , 0.3 );


    Spieler[playerid][pAFKLabel] = CreateDynamic3DTextLabel(" ", COLOR_PURPLE, 0.0, 0.0, 0.0, 20.0, .attachedplayer = playerid , .testlos = false);
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Spieler[playerid][pAFKLabel], E_STREAMER_ATTACH_OFFSET_X, 0.0 );
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Spieler[playerid][pAFKLabel], E_STREAMER_ATTACH_OFFSET_Y, 0.0 );
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Spieler[playerid][pAFKLabel], E_STREAMER_ATTACH_OFFSET_Z, 0.7 );
    UpdateDynamic3DTextLabelText(Spieler[playerid][pAFKLabel], COLOR_PURPLE, " ");
    pAFKTimer[playerid] = 0;
    pAFKMinute[playerid] = 0;

    Spieler[playerid][pAntiSpawnKill] = CreateDynamic3DTextLabel(" ", COLOR_3D_WHITE, 0.0, 0.0, 0.0, 10.0, .attachedplayer = playerid );
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Spieler[playerid][pAntiSpawnKill], E_STREAMER_ATTACH_OFFSET_X, 0.0 );
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Spieler[playerid][pAntiSpawnKill], E_STREAMER_ATTACH_OFFSET_Y, 0.0 );
    Streamer_SetFloatData(STREAMER_TYPE_3D_TEXT_LABEL, Spieler[playerid][pAntiSpawnKill], E_STREAMER_ATTACH_OFFSET_Z, 0.55 );

    Gesucht[playerid] = CreatePlayerTextDraw(playerid, 35.0, 321.0, " ");
    PlayerTextDrawBackgroundColor(playerid,Gesucht[playerid], 255);
    PlayerTextDrawFont(playerid,Gesucht[playerid], 1);
    PlayerTextDrawLetterSize(playerid,Gesucht[playerid], 0.31, 0.31 * 3.5 );
    PlayerTextDrawColor(playerid,Gesucht[playerid],-1);
    PlayerTextDrawSetOutline(playerid,Gesucht[playerid], 1);
    //PlayerTextDrawSetProportional(playerid,Gesucht[playerid], 1);

    BusMessage[playerid] = CreatePlayerTextDraw(playerid,241.000000, 111.000000, " ");
    PlayerTextDrawBackgroundColor(playerid,BusMessage[playerid], 255);
    PlayerTextDrawFont(playerid,BusMessage[playerid], 2);
    PlayerTextDrawLetterSize(playerid,BusMessage[playerid], 0.300000, 1.000000);
    PlayerTextDrawColor(playerid,BusMessage[playerid], -1);
    PlayerTextDrawSetOutline(playerid,BusMessage[playerid], 1);
    PlayerTextDrawSetProportional(playerid,BusMessage[playerid], 1);
    PlayerTextDrawUseBox(playerid,BusMessage[playerid], 1);
    PlayerTextDrawBoxColor(playerid,BusMessage[playerid], 60);
    PlayerTextDrawTextSize(playerid,BusMessage[playerid], 396.000000, 0.000000);

    CreatePlayerTacho(playerid);

    CreatePayDayTextdraw(playerid);

    ClearAnimations(playerid);
    for(new i ; i < MAX_PLAYERS ; i++) {
        if(Spieler[i][bMaske]) {
            ShowPlayerNameTagForPlayer(playerid,i,0);
        }
    }
    for(new i ; i < MAX_PLAYERS ; i++) {
        if(Spieler[i][abMaske]) {
            ShowPlayerNameTagForPlayer(playerid,i,0);
        }
    }
    for(new i ; i < MAX_PLAYERS ; i++) {
        if(Spieler[i][wbMaske]) {
            ShowPlayerNameTagForPlayer(playerid,i,0);
        }
    }
    format(string,sizeof(string),"%s - %s CONNECTED",sName,ip);
    LoginLog(string);

    format(string,sizeof(string),"UPDATE `accounts` SET `ipadresse` = '%s' WHERE `Name` = '%s'",ip,sName );
    mysql_oquery(string,THREAD_DUMMY,playerid,gSQL);

    // FS JOIN
    new idx;
    format(string,sizeof(string),"[FS-NACHRICHT] Dein Freund %s hat das Spiel betreten!",sName);
    for(new i ; i < MAX_PLAYERS; i++) {
        if( i != playerid ) {
            if( IsPlayerConnected(i) ) {
                if(IsNameOnFriendList(i,sName,idx) ) {
                    SendClientMessage(i,0x8B008BFF,string);
                }
            }
        }
    }

    /*if(randomLogin > 0 && randomLogin < 20){
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "{2E94D0}[{FFFFFF}LyD{2E94D0}]{FFFFFF} Du hörst gerade '{2E94D0}Parov Stelar - All Night{FFFFFF}'");
    }
    if(randomLogin > 20 && randomLogin < 40){
        SendClientMessage(playerid, COLOR_LIGHTBLUE, "{2E94D0}[{FFFFFF}LyD{2E94D0}]{FFFFFF} Du hörst gerade '{2E94D0}Deorro ft. Chris Brown - Five more Hours{FFFFFF}'");
    }
    if(randomLogin > 40 && randomLogin < 60){
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "{2E94D0}[{FFFFFF}LyD{2E94D0}]{FFFFFF} Du hörst gerade '{2E94D0}Eric Prydz - Pjanoo{FFFFFF}'");
    }
    if(randomLogin > 60 && randomLogin < 80){
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "{2E94D0}[{FFFFFF}LyD{2E94D0}]{FFFFFF} Du hörst gerade '{2E94D0}Martin Garrix - Bouncybob (ft. Justin Mylo & Mesto){FFFFFF}'");
    }
    if(randomLogin > 80 && randomLogin < 100){
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "{2E94D0}[{FFFFFF}LyD{2E94D0}]{FFFFFF} Du hörst gerade: '{2E94D0}20syl - Voices feat. Rita J.{FFFFFF}'");
    }*/


    return 1;
}

public OnPlayerUpdateTacho() {
    new Float:x, Float:y, Float:z, kennzeichen, skennzeichen[64], radios[64], string[200], slot, Float:CarHealth, kraftstoff, model,
        fraktion, besitzer, Float:kmStand, Float:kmStandOld, SpeedF, Distance, Float:percent, Float:td_size, tuerstatus[] = "Auf", vehicleid;
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerConnected(i))
        {
            vehicleid = GetPlayerVehicleID(i);
            if(vehicleid && IsPlayerInVehicle(i,vehicleid) ) {
                SpeedF = GetPlayerVehicleSpeed(i);
                GetVehicleHealth(vehicleid, CarHealth);
                model = GetVehicleModel( vehicleid );
                kmStandOld = 0;
                if(model >= 400){
                    GetVehiclePos(vehicleid,x,y,z);
                    Distance = GetDistance(x,y,z,g_OldVehiclePos[vehicleid][0],g_OldVehiclePos[vehicleid][1],g_OldVehiclePos[vehicleid][2]);
                    if( Distance < 125.0 ) { // mehr als 125m in 600ms ist unrealistisch.
                        kmStandOld = (g_VehicleDistance[vehicleid] / 1000.0);
                        g_VehicleDistance[vehicleid] += Distance;
                    }

                    g_OldVehiclePos[vehicleid][0] = x;
                    g_OldVehiclePos[vehicleid][1] = y;
                    g_OldVehiclePos[vehicleid][2] = z;

                    if(RadioSender[vehicleid] == 0){radios ="Radio aus";}
                    else if(RadioSender[vehicleid] == 1){radios ="1-Live";}
                    else if(RadioSender[vehicleid] == 2){radios ="Technobase.FM";}
                    else if(RadioSender[vehicleid] == 3){radios ="Hardbase.FM";}
                    else if(RadioSender[vehicleid] == 4){radios ="I Love Radio";}
                    else if(RadioSender[vehicleid] == 5){radios ="Breakz.us";}
                    else if(RadioSender[vehicleid] == 6){radios ="You.FM";}
                    else if(RadioSender[vehicleid] == 7){radios ="PlanetRadio";}
                    else if(RadioSender[vehicleid] == 8){radios ="The Club";}
                    else if(RadioSender[vehicleid] == 9){radios ="NightWax";}
                    else if(RadioSender[vehicleid] == 10){radios ="I Love Mashup";}
                    else if(RadioSender[vehicleid] == 11){radios ="Das Hitradio";}
                    else if(RadioSender[vehicleid] == 12){radios ="I Love the Battle";}
                    else if(RadioSender[vehicleid] == 13){radios ="I Love 2Dance";}
                    else if(RadioSender[vehicleid] == 14){radios ="Login-Musik";}
                    else if(RadioSender[vehicleid] == 15){radios ="iTunes Hot 40";}
                    else if(RadioSender[vehicleid] == 17){radios ="RMF MAXXX";}
                    else if(RadioSender[vehicleid] == 18){radios ="Eigener Audiostream";}

                    besitzer = GetCarOwner(vehicleid);
                    fraktion = GetVehicleFraktion(vehicleid);
                    if( besitzer != INVALID_PLAYER_ID  && i == besitzer ) {
                        slot = GetCarOwnerSlot(i, vehicleid);
                        if( !HasVehicleLicence( besitzer,slot ) ) {
                            //szulassung = "~r~Keine Zulassung";
                            kennzeichen = 0;
                        }
                        else {
                            kennzeichen = 1;
                            format(skennzeichen,sizeof(skennzeichen),"%s",PlayerCar[i][slot][CarNumberplate]);
                        }
                    }
                    else {
                        kennzeichen = 2;
                        //szulassung = "Zugelassen";
                    }
                    if( fraktion != 0 ) {
                        new s[50];
                        ReturnFraktionByID(fraktion,s);
                    }
                    kraftstoff = GetVehicleModelKraftstoff( model  );

                    // Kraftstoff: Diesel~n~Zustand: 977/1000~n~Radio: Technobase.FM~n~Fahrzeugtuer: Auf
                    if( !IsDoorOpen(vehicleid) ) {
                        tuerstatus = "Zu";
                    }
                    else {
                        tuerstatus = "Auf";
                    }
                    kmStand = (g_VehicleDistance[vehicleid] / 1000.0);
                    if( besitzer != INVALID_PLAYER_ID ) {
                        if( IsTUVNeeded( floatround(kmStandOld,floatround_floor) ) == false &&
                            IsTUVNeeded( floatround(kmStand,floatround_floor) ) == true) {
                            slot = GetCarOwnerSlot(i, vehicleid);
                            if( slot != 555 ) {
                                PlayerCar[besitzer][slot][TUV] = 1;
                                format(string,sizeof(string),"Dein Fahrzeug (%s) muss wieder aufgrund seines Kilometerstandes zum TÜV.",CarName[model-400]);
                                SendClientMessage(besitzer,COLOR_ORANGE,string);
                            }
                        }
                    }
                    format(string,sizeof(string),"Kraftstoff: %s~n~KM-Stand: %.1f~n~Zustand: %.0f/1000~n~Radio: %s~n~Fahrzeugtuer: %s",
                        g_asKraftstoff[kraftstoff],kmStand,CarHealth,radios,tuerstatus);

                    PlayerTextDrawSetString(i, g_PlayerTacho[i][pt_Info],string);

                    format(string,sizeof(string),"%s~n~~n~~n~~n~~n~~n~~n~~n~",CarName[model-400] );
                    PlayerTextDrawSetString(i, g_PlayerTacho[i][pt_Name], string);

                    format(string,sizeof(string),"km/h: %d",floatround(SpeedF) );
                    PlayerTextDrawSetString(i,g_PlayerTacho[i][pt_Speed],string);

                    if( kennzeichen == 0) {
                        format(string,sizeof(string),"~r~Keine Zulassung" );
                    }
                    else if( kennzeichen == 1) {
                        format(string,sizeof(string),"Kennzeichen: %s",skennzeichen );
                    }
                    else {
                        //format(string,sizeof(string),"~g~Zugelassen",skennzeichen );
                        format(string,sizeof(string),"~g~Zugelassen");
                    }
                    PlayerTextDrawSetString(i,g_PlayerTacho[i][pt_Kennzeichen],string);

                    percent = float( gGas[vehicleid] ) / float( GetMaxTank(vehicleid) );
                    if( percent > 1.0 ) percent = 0.0;
                    if( percent < 0.01 ) percent = 0.0; // Minimum 1% Anzeigen,sonst ist nichts sichtbar
                    td_size = percent * 6.0;
                    //printf("tank %d max_tank %d percent %.2f td_size %.2f",tank,max_tank,percent,td_size);

                    PlayerTextDrawLetterSize(i,g_PlayerTacho[i][pt_Tank], 1.0, td_size );
                    format(string,sizeof(string),"%d/%d l", gGas[vehicleid], gMaxGas[vehicleid] );
                    PlayerTextDrawSetString(i,g_PlayerTacho[i][pt_Liter], string );
                    if( percent > 0.4 ) {
                        // Grün
                        PlayerTextDrawColor(i,g_PlayerTacho[i][pt_Tank], 0x00FF0070);
                    }
                    else if( 0.15 < percent <= 0.4 ) {
                        // Orange
                        PlayerTextDrawColor(i,g_PlayerTacho[i][pt_Tank], 0xFF8C0070);
                    }
                    else {
                        // Rot
                        PlayerTextDrawColor(i,g_PlayerTacho[i][pt_Tank], 0xFF000070);
                    }
                    PlayerTextDrawHide(i,g_PlayerTacho[i][pt_Tank]);
                    PlayerTextDrawShow(i,g_PlayerTacho[i][pt_Tank]);

                    if( SpeedF >= 240 ) {
                        new t = gettime();
                        if( t >= Spieler[i][punixSpeedhack] ) {
                            format(string,sizeof(string),"[ACHTUNG] Spieler %s Speed-Warnung %dKm/h",GetName(i),SpeedF);
                            SendAdminMessage(COLOR_LIGHTRED2,string);
                            Spieler[i][punixSpeedhack] = t + 5; // Alle 5 Sekunden MAXIMAL die Nachricht senden
                        }
                    }
                }
            }
        }
    }
    return 1;
}

public OnUpdateUhr()
{
    new stunde, minute;
    gettime(stunde, minute);
    //SetWorldTime(stunde);
    new string[10];
    format(string, sizeof(string), "%02d:%02d", stunde, minute);
    TextDrawSetString(UhrMessage, string);
}

public OnUpdateDatum()
{
    new year,string[14],month,day;
    getdate(year, month, day);
    format(string, sizeof string, "%02d/%02d/%d", day, month , year);
    TextDrawSetString(DatumMessage, string);
}

public OnPlayerDisconnect(playerid, reason)
{
	
    if(fuelcountactive[playerid]==1)
    {
        GivePlayerCash(playerid,-100*fuelcount[playerid]);
        if(fuelcount[playerid]>=1)
        {
            new string[200];
            format(string,200,"Du hast %d Liter verbraucht. Kosten: $%s",fuelcount[playerid], AddDelimiters(100*fuelcount[playerid]));
            SendClientMessage(playerid,COLOR_ORANGE,string);
        }
        fuelcountactive[playerid]=0;
        fuelcount[playerid]=0;
    }
    pconfigRank[playerid] = 0;
    new vehID = GetPlayerVehicleID(playerid);
    if (vehID) {
        if (Refueling[playerid]) vehicleRefueling[vehID] = 0;
        if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleFraktion(vehID)) {
            new engine, lights, alarm, doors, bonnet, boot, objective;
            GetVehicleParamsEx(vehID, engine, lights, alarm, doors, bonnet, boot, objective);
            SetVehicleParamsEx(vehID, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
            UnLockCar(vehID);
        }
    }

    if (g_evidenceRoomHeist[EVIDENCEROOM_HEIST_STATUS] == EVIDENCEROOM_STATUS_ONGOING && g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER] == playerid) {
       KillTimer(g_evidenceRoomHeist[EVIDENCEROOM_HEIST_TIMER]);
       g_evidenceRoomHeist[EVIDENCEROOM_HEIST_TIMER] = INVALID_TIMER_ID;
       EvidenceRoomHeistFinished();
    }

    //print("OnPlayerDisconnect");
    MySQLThreadOwner[playerid]++;
    DeleteOnlinePlayer(playerid);
    KillTimer(Spieler[playerid][pTutTimer]);
    KillTimer(Spieler[playerid][tLoginTimeout]);
    Spieler[playerid][tLoginTimeout] = INVALID_TIMER_ID;
    Spieler[playerid][pTutTimer] = INVALID_TIMER_ID;
    KillTimer(Spieler[playerid][tKidnap]);
    Spieler[playerid][tKidnap] = INVALID_TIMER_ID;
    KillTimer(Spieler[playerid][tEinbrechen]);
    Spieler[playerid][tEinbrechen] = INVALID_TIMER_ID;
    new sName[MAX_PLAYER_NAME], idx, partner, ip[16], String[128], Float:X, Float:Y, Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    GetPlayerName(playerid,sName,sizeof(sName));
    GetPlayerIp(playerid,ip,sizeof(ip));
    Spieler[playerid][pLoginTimestamp] = 0;
    Spieler[playerid][pFahrgeschaeft] = -1;
    Spieler[playerid][pSpawnX] = X;
    Spieler[playerid][pSpawnY] = Y;
    Spieler[playerid][pSpawnZ] = Z;
    GetPlayerFacingAngle(playerid,Spieler[playerid][pSpawnFace]);
    Spieler[playerid][pSpawnInt] = GetPlayerInterior(playerid);
    Spieler[playerid][pSpawnVirtual] = GetPlayerVirtualWorld(playerid);
    Spieler[playerid][pHouseAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pHouseAngebot][1] = 0;
    Spieler[playerid][pBizAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pBizAngebot][1] = 0;
    Spieler[playerid][pTankeAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pTankeAngebot][1] = 0;
    Spieler[playerid][pKillsGangFightSession] = 0;
    gangfightwettenpp[playerid] = 0;
    gangfightwettenppp[playerid] = 0;
    KillSperre[playerid] = 0;
    KillBlackSperre[playerid] = 0;
    ReleasePlayerKeys(playerid,false);
    KillTimer( Spieler[playerid][tTankeUeberfall] );
    if( Spieler[playerid][tTankeUnix] != 0 ) {
        Tankstelle_Ueberfall_Stop(playerid,-1,2);
    }
    Spieler[playerid][tTankeUnix] = 0;
    Haustier_RemovePlayer(playerid);
    format(String,sizeof(String),"%s - %s DISCONNECTED",sName,ip);
    LoginLog(String);
    partner = GetPlayerVertragsPartner(playerid);
    DestroyPayDayTextdraw(playerid);
    //Robbing_OnPlayerDisconnect(playerid);
    DeletePlayerDropItem(playerid);
    StopOnArmedBanditForPlayer(playerid);
    Streak[playerid] = 0;

    new zoll = GetPlayerZollAreaUser(playerid);
    if( zoll != -1 ) {
        g_Zoll[zoll][Z_iStatus] = 2;
        StopDynamicObject( g_Zoll[zoll][Z_iObject] );
        Zoll_Close(zoll);
    }
    /*
    if( pFahrschulCar[playerid] != INVALID_VEHICLE_ID ) {
        FahrschuleAbbruch(playerid);
    }*/
    // Falls noch offene Freundschaftsanfragen , Löschen
    for(new i ; i < MAX_FRIEND_LIST ; i++) {
        if( g_FriendList[playerid][i][FL_iStatus] == FriendList_Wait ||
            g_FriendList[playerid][i][FL_iStatus] == FriendList_Approval ) {
            sscanf(g_FriendList[playerid][i][FL_sSpieler],"u",partner);
            if( IsPlayerConnected(partner) ) {
                if( IsNameOnFriendList(partner,sName,idx)) {
                    g_FriendList[partner][idx][FL_iStatus] = 0;
                    g_FriendList[partner][idx][FL_sSpieler] = '\0';
                    //printf("PartnerSlot %d gelöscht",idx);
                }
            }
        }
        g_FriendList[playerid][i][FL_sSpieler] = '\0';
        g_FriendList[playerid][i][FL_iStatus] = 0;
    }
    if( partner != INVALID_PLAYER_ID ) {
        Spieler[partner][pVertragID] = INVALID_PLAYER_ID;
    }
    if( Spieler[playerid][pGeldcheckID] != INVALID_PLAYER_ID ) {
        new giveid;
        giveid = Spieler[playerid][pGeldcheckID];
        format(String,sizeof(String),"Der Geldcheck von %s in Höhe von $%s ist nicht mehr gültig",sName, AddDelimiters(Spieler[playerid][pGeldcheckBetrag]));
        SendClientMessage(giveid,COLOR_RED,String);
        Spieler[playerid][pGeldcheckID] = INVALID_PLAYER_ID;
    }
    if( Spieler[playerid][pInterviewer] != INVALID_PLAYER_ID ) {
        partner = Spieler[playerid][pInterviewer];
        Spieler[playerid][pInterviewer] = INVALID_PLAYER_ID;
        Spieler[partner][pInterviewer] = INVALID_PLAYER_ID;
        if( Spieler[playerid][ibInterviewStat] != 0 ) {
            if( Spieler[playerid][ibInterviewStat] == 2 ) {
                format(String,sizeof(String),"Das Interview zwischen %s und %s wurde beendet,da der Newsreporter den Server verlassen hat",sName,GetName(partner));
            }
            else if( Spieler[partner][ibInterviewStat] == 2 ) {
                format(String,sizeof(String),"Das Interview zwischen %s und %s wurde beendet,da die interviewte Person den Server verlassen hat",sName,GetName(partner));
            }
            Spieler[playerid][ibInterviewStat] = 0;
            Spieler[partner][ibInterviewStat] = 0;
            SendClientMessageToAll(COLOR_CHAT_JOB,String);
            UnfreezePlayer(partner);
        }
    }

    if( g_PolizeiPartner[playerid][PP_iStatus] == PolizeiPartner_Active ) {
        ClearPolizeiPartner( g_PolizeiPartner[playerid][PP_iPartner] );
        ClearPolizeiPartner(playerid);
    }
    for(new i ; i < MAX_PLAYERS ; i++) {
        // Streifenpartner Anfrage löschen
        if( g_PolizeiPartner[i][PP_iPartner] == playerid ) {
            g_PolizeiPartner[i][PP_iPartner] = INVALID_PLAYER_ID;
            g_PolizeiPartner[i][PP_iStatus] = 0;
        }
        /* Spectate bei LOGIN entfernen
        if( IsPlayerSpectating[i] == 1 ) {
            if( SpectatedPlayer[i] == playerid ) {
                StopSpectate(i);
            }
        }*/
    }

    CreateDisconnectNotice(playerid, sName , X , Y , Z , reason );

    KillTimer(pAngelTimer[playerid]);
    KillTimer( Spieler[playerid][tDrink] );
    if( IsPlayerAnyTaxiCustomer(playerid) != -1) {
        //Fahrgast Disconnected
        new preis, driverid = IsPlayerAnyTaxiCustomer(playerid);
        preis = GetPlayerTaxiCosts(driverid,playerid);
        format(String,sizeof(String),"Dein Fahrgast %s hat den Server verlassen. Die Fahrtkosten in Höhe von $%s werden dennoch abgebucht und dir bezahlt.", sName, AddDelimiters(preis));
        SendClientMessage( driverid ,COLOR_YELLOW,String);
        Spieler[playerid][pCash] -= preis;
        Spieler[driverid][pCash] += preis;
        RemovePlayerFromTaxi(driverid,playerid);
    }
    //printf("OnPlayerDisconnect(%s) HasPlayerTaxiCustomers(%d) = %d",GetName(playerid),playerid,HasPlayerTaxiCustomers(playerid) );
    if( HasPlayerTaxiCustomers(playerid) ) {
        // KillTimer(Spieler[playerid][tTaxi]);
        CancelTaxi(playerid, Spieler[playerid][pTaxiVehicle],0 );
    }
    if( Spieler[playerid][bMaske] ) {
        KillTimer(Spieler[playerid][tMaske]);
    }
    if( Spieler[playerid][wbMaske] ) {
        KillTimer(Spieler[playerid][wtMaske]);
    }
    if( Spieler[playerid][abMaske] ) {
        KillTimer(Spieler[playerid][atMaske]);
    }
    if( Spieler[playerid][pTimerTaschendieb] != INVALID_TIMER_ID ) {
        KillTimer(Spieler[playerid][pTimerTaschendieb]);
        Spieler[playerid][pTimerTaschendieb] = INVALID_TIMER_ID;
    }
    if( Spieler[playerid][pTimerKnastbefreien] != INVALID_TIMER_ID ) {
        KillTimer(Spieler[playerid][pTimerKnastbefreien]);
        Spieler[playerid][pTimerKnastbefreien] = INVALID_TIMER_ID;
    }
    if( Spieler[playerid][pTot] == 2 ) {
        Spieler[playerid][pTot] = 1;
    }
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i)) {
            if(Spieler[i][pKopfgeldID] == playerid) {
                // Spieler Server verlassen bevor Kopfgeld Aktion beendet
                format(String,sizeof(String),"Auftragsziel %s hat den Server verlassen bevor dein Auftrag ausgeführt/angenommen wurde.",sName);
                SendClientMessage(i,COLOR_RED,String);

                GivePlayerCash(i, Spieler[i][pKopfgeld]);
                if( Spieler[i][pKopfgeldStatus] == true ) {
                    // Auftragnehmer finden und entfernen!
                    for(new j ; j < MAX_PLAYERS ; j++) {
                        if( Spieler[j][pHitmenAuftragID] == i ) {
                            //Auftragnehmer gefunden
                            format(String,sizeof(String),"Deine Zielperson %s hat den Server verlassen.",sName);
                            SendClientMessage(j,COLOR_RED,String);
                            Spieler[j][pHitmenAuftragID] = INVALID_PLAYER_ID;
                        }
                    }
                }
                Spieler[i][pKopfgeldStatus] = false;
                Spieler[i][pKopfgeldID] = INVALID_PLAYER_ID;
                Spieler[i][pKopfgeld] = 0;
            }
        }
    }
    if( Spieler[playerid][pKopfgeldID] != INVALID_PLAYER_ID ) {
        // Auftrag wurde nicht beendet bevor Auftraggeber Server verlässt
        GivePlayerCash(playerid,Spieler[playerid][pKopfgeldID]);
        if( Spieler[playerid][pKopfgeldStatus] ) {
            for(new i ; i < MAX_PLAYERS ; i++) {
                if( Spieler[i][pHitmenAuftragID] == playerid ) {
                    format(String,sizeof(String),"Dein Auftraggeber %s hat den Server verlassen. Auftrag beendet.",sName);
                    SendClientMessage(i,COLOR_RED,String);
                    Spieler[i][pHitmenAuftragID] = INVALID_PLAYER_ID;
                }
            }
        }
    }
    if( Spieler[playerid][pHitmenAuftragID] != INVALID_PLAYER_ID ) {
        // Auftragnehmer Offline.Auftrag ist wieder frei.
        new auftraggeber;
        auftraggeber = Spieler[playerid][pHitmenAuftragID];
        if( Spieler[auftraggeber][pKopfgeldStatus] ) {
            Spieler[auftraggeber][pKopfgeldStatus] = false;
            SendClientMessage(auftraggeber,COLOR_YELLOW,"Dein Auftragskiller hat den Server verlassen, bevor der Auftrag erledigt werden konnte.");
            SendClientMessage(auftraggeber,COLOR_YELLOW,"Dein Auftrag kann wieder von anderen Hitmen angenommen werden.");
        }
        Spieler[playerid][pHitmenAuftragID] = INVALID_PLAYER_ID;
    }
    Spieler[playerid][pKopfgeldID] = INVALID_PLAYER_ID;
    Spieler[playerid][pKopfgeld] = 0;
    DestroyVehicleEx(Spieler[playerid][pVehicleVerleih]);
    Spieler[playerid][pVehicleVerleih] = INVALID_VEHICLE_ID;
    Spieler[playerid][tickVehicleVerleih] = 0;

    RemovePlayerAttachedObject(playerid, 0);
    if(Cuffed[playerid] == 1)
    {
        format(String, sizeof(String), "%s wurde vom Server für 30 Minuten ins Prison teleportiert, Grund: Offline Flucht", sName);
        SendAdminMessage(COLOR_DARKRED, String);
        Spieler[playerid][pJailed] = 3;
        Spieler[playerid][pJailTime] = 1800;
        format(String,sizeof(String),"Spieler %s wurde vom System wegen Offline-Flucht für 30 Minuten ins Prison gesteckt",GetName(playerid));
        SendUCPAktenEintrag(playerid,"System","System",String);
    }
    if(ReportCall[playerid] != 999)
    {
        format(String, sizeof(String), "> Ticket < - %s hat den Server verlassen. Ticket geschlossen.", sName);
        SendClientMessage(ReportCall[playerid], COLOR_LIGHTGREEN, String);
        ReportCall[playerid] = 999;
        for(new i=0;i<MAX_PLAYERS;i++)
        {
            if(IsPlayerConnected(i))
            {
                if(ReportCall[i] == playerid)
                {
                    ReportCall[i] = 999;
                }
            }
        }
    }
    Spieler[playerid][pDuty] = 0;
    Spieler[playerid][pfDuty] = 0;
    Spieler[playerid][pDutyTask] = 0;
    pUnderCover[playerid] = 0;
    if(reason==0)
    {
        format(String, sizeof(String), "* %s hat LyD-Roleplay verlassen. (Crash/Time-Out)", sName);
    }
    else if(reason==1)
    {
        format(String, sizeof(String), "* %s hat LyD-Roleplay verlassen.", sName);
    }
    else if(reason==2)
    {
        format(String, sizeof(String), "* %s hat LyD-Roleplay verlassen. (Kick/Bann)", sName);
    }
    // SendAdminMessage(COLOR_GREY, str);
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if (IsPlayerConnected(i) && gPlayerLogged[i] == 1)
        {
            if (pChatSettings[i][CHAT_JL] == 1) SendClientMessage(i, COLOR_GREY, String);
        }
    }
    KillTimer( Spieler[playerid][tFahrschule] );
    if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
    {
        FahrschuleAbbruch(playerid);
        //DestroyVehicleEx(pFahrschulCar[playerid]); FahrschuleAbbruch
        //aiVehicles[pFahrschulCar[playerid]] = VEH_INVALID; FahrschuleAbbruch
    }
    pFahrschulCar[playerid] = INVALID_VEHICLE_ID;
    if(pCar[playerid] != INVALID_VEHICLE_ID)
    {
        DestroyVehicleEx(pCar[playerid]);
        aiVehicles[pCar[playerid]] = VEH_INVALID;
    }
    pCar[playerid] = INVALID_VEHICLE_ID;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( Spieler[i][iKidnapID] == playerid ) {
                // Disconnect während KIDNAP
                printf("Flucht bei KidNap von Spieler %s -> GangJail",sName );
                Spieler[playerid][pJailed] = 4;
                Spieler[i][iKidnapID] = INVALID_PLAYER_ID;
                break;
            }
        }
    }
    Spieler[playerid][iKidnapID] = INVALID_PLAYER_ID;
    //PlayerTextDrawDestroy(playerid, TachoMessage[0][playerid]);
    //PlayerTextDrawDestroy(playerid, TachoMessage[1][playerid]);
    //PlayerTextDrawDestroy(playerid, TachoMessage[2][playerid]);
    DestroyPlayerTacho(playerid);
    //DriveBy_OnPlayerDisconnect(playerid,reason);

    PlayerTextDrawDestroy(playerid, BusMessage[playerid]);
    //PlayerTextDrawDestroy(playerid, WantedBar[playerid]);
    PlayerTextDrawDestroy(playerid, Gesucht[playerid]);
    DestroyDynamic3DTextLabel(Spieler[playerid][pWantedLabel]);
    Spieler[playerid][pWantedLabel] = Text3D:INVALID_3DTEXT_ID;
    DestroyDynamic3DTextLabel(Spieler[playerid][pWantedLabelEx]);
    DestroyDynamic3DTextLabel(Spieler[playerid][pBlacklistLabel]);
    Spieler[playerid][pWantedLabelEx] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pBlacklistLabel] = Text3D:INVALID_3DTEXT_ID;
    DestroyDynamic3DTextLabel(Spieler[playerid][pNeuling]);
    Spieler[playerid][pNeuling] = Text3D:INVALID_3DTEXT_ID;
    //DestroyDynamic3DTextLabel(Spieler[playerid][pAdminLabel]);
    Spieler[playerid][pAdminDienst] = 0;
    Spieler[playerid][pBenutzerfarbe] = 0;
    DestroyDynamic3DTextLabel(Spieler[playerid][pAFKLabel]);
    Spieler[playerid][pAFKLabel] = Text3D:INVALID_3DTEXT_ID;
    pAFKTimer[playerid] = 0;
    pAFKMinute[playerid] = 0;
    DestroyDynamic3DTextLabel(Spieler[playerid][pAntiSpawnKill]);
    Spieler[playerid][pAntiSpawnKill] = Text3D:INVALID_3DTEXT_ID;
    DestroyDynamic3DTextLabel(Spieler[playerid][t3dSInfo]);
    Spieler[playerid][t3dSInfo] = Text3D:INVALID_3DTEXT_ID;
    KillTimer(pBackupTimer[playerid]);
    paydaywait[playerid]=1;
    KillTimer(carmsgwait[playerid]);
    KillTimer(pilotwait[playerid]);
    KillTimer(DrogenTimer[playerid]);
    OnPlayerCarUpdate(playerid);
    KillTimer(buswait[playerid]);
    KillTimer(truckwait[playerid]);
    KillTimer(unfreezewait[playerid]);
    KillTimer(knastunfreezetimer[playerid]);
    KillTimer(ReportTimer[playerid]);
    DestroyTaxiTextdraw(playerid);
    // FS LEFT
    format(String,sizeof(String),"[FS-NACHRICHT] Dein Freund %s hat das Spiel verlassen!",sName);
    for(new i ; i < MAX_PLAYERS; i++) {
        if( i != playerid ) {
            if( IsPlayerConnected(i) ) {
                if(IsNameOnFriendList(i,sName,idx) ) {
                    SendClientMessage(i,0x8B008BFF,String);
                }
            }
        }
    }
    if(gPlayerLogged[playerid]){
        SaveAccount(playerid);
    }

    if (PlayerIsPaintballing[playerid]) {
        new message[145];
        format(message, sizeof(message), "%s hat die Paintball-Halle verlassen.", GetName(playerid));
        paintballInfo[playerid][E_PB_INFO_STATUS] = PAINTBALL_STATUS_NONE;
        PlayerIsPaintballing[playerid] = 0;
        SendPaintballMessage(COLOR_ORANGE, message);
    }

    SuicidePlayer[playerid] = INVALID_TIMER_ID;
    damagesperre[playerid]=0;
    Mechanikersperre[playerid]=0;
    Spieler[playerid][pAdventMin]=0;
    Spieler[playerid][pCoins] = 0;
    Spieler[playerid][LoadedPremiumWeapons] = 0;
    Spieler[playerid][pPfand] = 0;
    Spieler[playerid][pLevel] = 1;
    Spieler[playerid][swSpice] = 0;
    Spieler[playerid][swDrogen] = 0;
    Spieler[playerid][swWT] = 0;
    Spieler[playerid][swDrogen] = 0;
    Spieler[playerid][pHeiratsantragID] = INVALID_PLAYER_ID;
    Spieler[playerid][pMarriage] = INVALID_MARRIAGE;
    format(Spieler[playerid][pMarriageName],32,"Niemand");
    Spieler[playerid][ID] = 0;
    Spieler[playerid][pfrakwarn] = 0;
    Spieler[playerid][pArmourInfo] = 0.0;
    Spieler[playerid][pHealthInfo] = 0.0;
    Spieler[playerid][pSuspendedSentence] = 0;
    format(Spieler[playerid][pSusSentenceReason], 128, "");
    Spieler[playerid][pEventPoints] = 0;
    Spieler[playerid][pAdventDay] = 0;
    Spieler[playerid][pAdmin] = 0;
    Spieler[playerid][pDonateRank] = 0;
    Spieler[playerid][pHours] = 0;
    Spieler[playerid][pSex] = 0;
    Spieler[playerid][pMuted] = 0;
    Spieler[playerid][pExp] = 0;
    Spieler[playerid][pCash] = 0;
    Spieler[playerid][pCrimes] = 0;
    Spieler[playerid][pKills] = 0;
    Spieler[playerid][pDeaths] = 0;
    Spieler[playerid][pArrested] = 0;
    Spieler[playerid][pWantedDeaths] = 0;
    Spieler[playerid][pPhoneBook] = 0;
    Spieler[playerid][pLottoNr] = 0;
    Spieler[playerid][pJob] = 0;
    Spieler[playerid][pPayCheck] = 0;
    Spieler[playerid][pJailed] = 0;
    Spieler[playerid][pJailTime] = 0;
    Spieler[playerid][pDuty] = 0;
    Spieler[playerid][pDutyTask] = 0;
    Spieler[playerid][pfDuty] = 0;
    // Spieler[playerid][pMats] = 0;
    Spieler[playerid][pDrugs] = 0;
    Spieler[playerid][pFraktion] = 0;
    Spieler[playerid][pRank] = 0;
    Spieler[playerid][pSkin] = 0;
    //Spieler[playerid][pHouseKey] = INVALID_HOUSE_KEY;
    //Spieler[playerid][pHotelKey] = INVALID_HOTEL_KEY;
    //Spieler[playerid][pBizKey] = INVALID_BIZ_KEY;
    //Spieler[playerid][pTankKey] = INVALID_TANK_KEY;
    Spieler[playerid][pCarLic] = 0;
    Spieler[playerid][pFlyLic] = 0;
    Spieler[playerid][pBoatLic] = 0;
    Spieler[playerid][pGunLic] = 0;
    Spieler[playerid][pGunLicB] = 0;
    Spieler[playerid][pLKWLic] = 0;
    Spieler[playerid][pMotoLic] = 0;
    Spieler[playerid][pTrakLic] = 0;
    Spieler[playerid][pCarmALic] = 0;
    Spieler[playerid][pPayDay] = 0;
    Spieler[playerid][pTut] = 0; // UNGÜLTIG!
    Spieler[playerid][pWarns] = 0;
    Spieler[playerid][pPerso] = 0;
    Spieler[playerid][pHandyNr] = 0;
    Spieler[playerid][pHandyGeld] = 0;
    Spieler[playerid][pTot] = 0;
    Spieler[playerid][pBanned] = 0;
    Spieler[playerid][pdeacc] = 0;
    fahrlehrerboni[playerid]=0;
    meslock[playerid]=0;
    Spieler[playerid][pschulden] = 0;
    Spieler[playerid][pWeihnachtsday] = 0;
    format(pdeaccadmin[playerid],32,"");
    Spieler[playerid][pWanteds] = 0;
    Spieler[playerid][pBank] = 0;
    Spieler[playerid][pJailType] = 0;
    Spieler[playerid][pTotTime] = 0;
    Spieler[playerid][pTotX] = 0.0;
    Spieler[playerid][pTotY] = 0.0;
    Spieler[playerid][pTotZ] = 0.0;
    Spieler[playerid][pKanister] = 0;
    Spieler[playerid][pHeilReady] = 1;
    Spieler[playerid][pWaffenteile] = 0;
    Spieler[playerid][pC4] = 0;
    Spieler[playerid][pWantedCodes] = 0;
    Spieler[playerid][pSafeWantedCodes] = 0;
    // Spieler[playerid][pDrogen] = 0;
    Spieler[playerid][pSafeTeile] = 0;
    //Spieler[playerid][bShowMarker] = false;
    Spieler[playerid][pSafeDrogen] = 0;
    Spieler[playerid][pSpawnChange] = 0;
    Spieler[playerid][pHandyState] = 1;
    Spieler[playerid][pFrakLohn] = 0;
    Spieler[playerid][pTimeBan] = 0;
    Spieler[playerid][pMuteTime] = 0;
    Spieler[playerid][pAngel] = 0;
    Spieler[playerid][pFische] = 0;
    Spieler[playerid][pKoeder] = 0;
    Spieler[playerid][pMaxFishes] = 0;
    Spieler[playerid][pMaxVerloren] = 0;
    Spieler[playerid][pFishLic] = 0;
    Spieler[playerid][pFPunkte] = 0;
    Spieler[playerid][pFBPunkte] = 0;
    Spieler[playerid][pFlPunkte] = 0;
    Spieler[playerid][pMotoPunkte] = 0;
    Spieler[playerid][pGunPunkte] = 0;
    Spieler[playerid][pKekse] = 0;
    Spieler[playerid][pZigaretten] = 0;
    Spieler[playerid][pFrakSperre] = 0;
    Spieler[playerid][pHartz4] = 0;
    Spieler[playerid][pKopfgeld] = 0;
    Spieler[playerid][pKopfgeldID] = INVALID_PLAYER_ID;
    Spieler[playerid][pHitmenAuftragID] = INVALID_PLAYER_ID;
    Spieler[playerid][pWheelAuftragID] = INVALID_PLAYER_ID;
    Spieler[playerid][bMaske] = false;
    Spieler[playerid][wbMaske] = false;
    Spieler[playerid][abMaske] = false;
    Spieler[playerid][bMundbinde] = false;
    ClearPlayerTaxiSlots(playerid);
    Spieler[playerid][pAutoknackerVehicleID] = INVALID_VEHICLE_ID;
    Spieler[playerid][pVehicleVerleih] = INVALID_VEHICLE_ID;
    Spieler[playerid][tickVehicleVerleih] = 0;
    Spieler[playerid][pSpice] = 0;
    Spieler[playerid][pSafeSpice] = 0;
    Spieler[playerid][pHausSafeboxSpice] = 0;
    Spieler[playerid][pVehiclePort] = 0;
    Spieler[playerid][pHandyNr] = 0;
    Spieler[playerid][pHandyNr_Temp] = 0;
    Spieler[playerid][pHandyNr_Counter] = 0;
    SelectedPlayer[playerid] = INVALID_PLAYER_ID;

    Spieler[playerid][tDrink] = INVALID_TIMER_ID;
    Spieler[playerid][tSpawnView] = INVALID_TIMER_ID;
    Spieler[playerid][pTutTimer] = INVALID_TIMER_ID;

    Spieler[playerid][punixWantedCodes] = 0;
    Spieler[playerid][bHasSex] = false;
    Spieler[playerid][bNoDMZone] = false;
    Spieler[playerid][bWantedHacking] = false;
    Spieler[playerid][pInterviewer] = INVALID_PLAYER_ID;
    Spieler[playerid][ibInterviewStat] = 0;
    Spieler[playerid][punixFlyhack] = Spieler[playerid][unixUpdate];
    Spieler[playerid][pStartbonus] = 0;
    Spieler[playerid][pDetektivPoints] = 1;
    Spieler[playerid][pHurePoints] = 1;
    Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
    Spieler[playerid][pSecureCodeLevel] = -1;
    Spieler[playerid][pVertragID] = INVALID_PLAYER_ID;
    Spieler[playerid][pVertragText][0] = '\0';
    oldposx[playerid]=0,oldposy[playerid]=0,oldposz[playerid]=0;
    Spieler[playerid][pWantedLabel] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pWantedLabelEx] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pBlacklistLabel] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pNeuling] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][t3dSInfo] = Text3D:INVALID_3DTEXT_ID;
    //Spieler[playerid][pAdminLabel] = Text3D:INVALID_3DTEXT_ID;
    Spieler[playerid][pAdminDienst] = 0;
    Spieler[playerid][pBenutzerfarbe] = 0;
    Spieler[playerid][pKekseValue] = 0;
    Spieler[playerid][pGeldcheckID] = INVALID_PLAYER_ID;
    Spieler[playerid][pGeldcheckBetrag] = 0;
    Spieler[playerid][pBankKontoPin] = INVALID_BANK_PIN;
    Spieler[playerid][pBankKonto] = 0;
    Spieler[playerid][pLoginVersuch] = 0;
    Spieler[playerid][pJobWechsel] = 0;
    Spieler[playerid][pDrogenSamen] = 0;
    Spieler[playerid][pGangDrogenSamen] = 0;
    Spieler[playerid][pKrauterMische] = 0;
    Spieler[playerid][pAutoknackerExtraLohn] = 0;
    Spieler[playerid][punixFSperre] = 0;
    Spieler[playerid][punixFBSperre] = 0;
    Spieler[playerid][punixFlSperre] = 0;
    Spieler[playerid][punixGunSperre] = 0;
    Spieler[playerid][punixLKWSperre] = 0;
    Spieler[playerid][punixMotoSperre] = 0;
    Spieler[playerid][pCommandSpam] = 0;
    Spieler[playerid][pChatSpam] = 0;
    Spieler[playerid][pPinVergessen] = 0;
    Spieler[playerid][pHaustierSpawned] = false;
    Spieler[playerid][pHaustierObject] = INVALID_OBJECT_ID;
    Spieler[playerid][pWiederbelebung] = 0;
    Spieler[playerid][pLawyerPoints] = 0;
    Spieler[playerid][tRadarfallenWarnung] = INVALID_TIMER_ID;
    Spieler[playerid][pAutomatik] = 0;
    Spieler[playerid][tKidnap] = INVALID_TIMER_ID;
    Spieler[playerid][pMuellCP] = 0;
    Spieler[playerid][pMuell][0] = 0;
    Spieler[playerid][pMuell][1] = 0;
    Spieler[playerid][pGeldTCP] = 0;
    Spieler[playerid][pGELDT][0] = 0;
    Spieler[playerid][pGELDT][1] = 0;
    Spieler[playerid][pCowJob] = 0;
    Spieler[playerid][pCow][0] = 0;
    Spieler[playerid][pCow][1] = 0;
    Spieler[playerid][pCow][2] = 0;
    Spieler[playerid][pFahrgeschaeft] = -1;
    pDrunkLevelLast[playerid] = 0;
    pFPS[playerid] = 0;

    Spieler[playerid][pBMOD] = 0;
    Spieler[playerid][pFV] = 0;
    Spieler[playerid][pLobe] = 0;
    Spieler[playerid][pKoffer] = false;
    Spieler[playerid][pHelm] = 0;
    Spieler[playerid][pSHeilen] = INVALID_PLAYER_ID;
    Spieler[playerid][pFLehrer] = INVALID_PLAYER_ID;
    Spieler[playerid][pPremiumNeon] = 0;
    Spieler[playerid][pKillsGangFight] = 0;
    Spieler[playerid][pKillsStreetwar] = 0;
    Spieler[playerid][pMP3Player] = 0;
    Spieler[playerid][pRadarfallenWarnung] = 0;
    Spieler[playerid][pPremiumBizSlot] = 0;
    Spieler[playerid][pPremiumCarSlot] = 0;
    format(postpsenden[playerid],MAX_PLAYER_NAME,"");
    format(postpid[playerid],300,""),firstspawn[playerid]=0;
    Spieler[playerid][pKillsGangFightSession] = 0;
    Spieler[playerid][pMustUseAC] = 0;
	Spieler[playerid][pTSFrei] = 0;
    ClearKFZZulassung(playerid);
    ClearPolizeiPartner(playerid);
    ReleasePlayerKeys(playerid);
    ResetKoffer(playerid);

    //gSpawned{playerid} = 0;
    gPlayerLogged[playerid] = 0;
    AcceptStats[playerid] = 999;
    AcceptAngelStats[playerid] = 999;
    AcceptCarSell[playerid] = 999;
    AcceptCarSellPreis[playerid] = 0;
    RepairCar[playerid] = 999;
    RepairCarPreis[playerid] = 0;
    RefillCar[playerid] = 999;
    RefillCarPreis[playerid] = 0;
    ZettelID[playerid] = 999;
    ZettelPreis[playerid] = 0;
    TazerTime[playerid] = 1;
    Tazered[playerid] = 0;
    Cuffed[playerid] = 0;
    MedicHealID[playerid] = 999;
    MedicHealPreis[playerid] = 0;
    Refueling[playerid] = 0;
    MakeAnimation[playerid]= 0;
    FrakInviteID[playerid]=999;
    BankWert[playerid] = 0;
    BankAn[playerid] = 999;
//  wheelmanclient[playerid]=0;
    PlayerIsPaintballing[playerid] = 0;
    AnwaltID[playerid] = 999;
    AnwaltPreis[playerid] = 0;
    CurrentPhone[playerid] = 999;
    CurrentPhone[GetPlayerPhonePartner(playerid)] = 999;
    SetPlayerSpecialAction( GetPlayerPhonePartner(playerid), SPECIAL_ACTION_STOPUSECELLPHONE );
    pDrogenID[playerid] = 999;
    pDrogenMenge[playerid] = 0;
    pDrogenPreis[playerid] = 0;
    pSpiceID[playerid] = 999;
    pSpiceMenge[playerid] = 0;
    pSpicePreis[playerid] = 0;
    pWTeileID[playerid] = 999;
    pWTeileMenge[playerid] = 0;
    pWTeilePreis[playerid] = 0;
    pDrogenEinfluss[playerid] = 0;
    pWaffenPlayer[playerid] = 999;
    pWaffenPreis[playerid] = 0;
    pWaffenID[playerid] = 0;
    pFahrStunde[playerid] = 0;
    pCar[playerid] = INVALID_VEHICLE_ID;
    pCheckpoint[playerid] = CP_NONE;
    pMakeTutorial[playerid] = 0;
    pFahrschulCar[playerid] = INVALID_VEHICLE_ID;
    NeedCop[playerid] = 0;
    NeedMedic[playerid] = 0;
    NeedKFZ[playerid] = 0;
    NeedOAMT[playerid] = 0;
    NeedAWALT[playerid] = 0;
    pUnderCover[playerid] = 0;
    pCurrentSite[playerid] = 0;
    JobVehicle[playerid] = INVALID_VEHICLE_ID;
    IsAFK[playerid] = 0;
    NeedBackup[playerid] = 0;
    pCurrentBiz[playerid] = 0;
    pSkinSelection[playerid] = 0;
    pChoosedSkin[playerid] = 0;
    pChatSettings[playerid][CHAT_GC] = 0;
    pChatSettings[playerid][CHAT_FC] = 0;
    pChatSettings[playerid][CHAT_JC] = 0;
    pChatSettings[playerid][CHAT_BC] = 0;
    pChatSettings[playerid][CHAT_CC] = 0;
    pChatSettings[playerid][CHAT_JL] = 0;
    pChatSettings[playerid][CHAT_SM] = 0;
    wantedcodename[playerid]=MAX_PLAYERS;
    ReportCall[playerid]=999;
    PlayerNeedsHelp[playerid] = 0;
    IsPlayerFishing[playerid] = 0;
    NeedPIZZA[playerid] = 0;
    NeedTAXI[playerid] = 0;
    NeedWHEEL[playerid] = 0;
    g_aiDestroyedVehicles[playerid] = 0;
    TelefonzelleAn[playerid] = INVALID_PLAYER_ID;
    Spieler[playerid][tLoginTimeout] = INVALID_TIMER_ID;
    Spieler[playerid][pHouseAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pHouseAngebot][1] = 0;
    Spieler[playerid][pBizAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pBizAngebot][1] = 0;
    Spieler[playerid][pTankeAngebot][0] = INVALID_PLAYER_ID;
    Spieler[playerid][pTankeAngebot][1] = 0;
    Spieler[playerid][tdTaxi] = PlayerText:INVALID_TEXT_DRAW;
    Spieler[playerid][pTaxiVehicle] = INVALID_VEHICLE_ID;
    for(new i ; i < MAX_TAXI_KUNDEN ; i++) {
        Spieler[playerid][pTaxiKundenStart][i] = 0;
        Spieler[playerid][pTaxiKunden][i] = INVALID_PLAYER_ID;
    }

    return 1;
}

forward ERROR_RANG_MSG(playerid);
public ERROR_RANG_MSG(playerid){
    return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
}

forward ERROR_FRAKTION_MSG(playerid);
public ERROR_FRAKTION_MSG(playerid){
    return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten Rechte.");
}






public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ){
    if(response == EDIT_RESPONSE_FINAL){
        SetObjectPos(objectid,fX,fY,fZ);
        SetObjectRot(objectid,fRotX,fRotY,fRotZ);
        SendClientMessage(playerid,COLOR_BLUE,"Object Saved");
        return 1;
    }
    return 1;
}

forward gwarentimer();
public gwarentimer()
{
    for(new index;index<MAX_GANGZONES;index++)
    {
        if(g_GangZone[index][GZ_igupgrade]!=0)
        {
            if(GetFactionOnlinePlayers(g_GangZone[index][GZ_iOwner]) < 2)
                continue;

            if(g_GangZone[index][GZ_igupgrade] == 3){ // Geld
                //g_GangZone[index][GZ_igbestand] += 60000;
                if(g_GangZone[index][GZ_iOwner] == 6){
            		Kasse[Grove] += 10000;
     			}else if(g_GangZone[index][GZ_iOwner] == 7){
            		Kasse[Ballas] += 10000;
        		}else if(g_GangZone[index][GZ_iOwner] == 10){
            		Kasse[Yakuza] += 10000;
       			}else if(g_GangZone[index][GZ_iOwner] == 11){
            		Kasse[Aztecas] += 10000;
        		}else if(g_GangZone[index][GZ_iOwner] == 12){
            		Kasse[LCN] += 10000;
        		}else if(g_GangZone[index][GZ_iOwner] == 13){
            		Kasse[Vagos] += 10000;
        		}else if(g_GangZone[index][GZ_iOwner] == 20){
            		Kasse[OutlawzK] += 10000;
        		}else if(g_GangZone[index][GZ_iOwner] == 21){
            		Kasse[ndgradethaK] += 10000;
        		}
            }else if (g_GangZone[index][GZ_igupgrade] == 2){ // Drogen
                //g_GangZone[index][GZ_igbestand] += 180;
                FSafeboxSoreGebiet(g_GangZone[index][GZ_iOwner], SAFEBOX_DRUGS, 20);
            }else if (g_GangZone[index][GZ_igupgrade] == 1){ // WTeile
                //g_GangZone[index][GZ_igbestand] += 2800;
                FSafeboxSoreGebiet(g_GangZone[index][GZ_iOwner], SAFEBOX_MATS, 2000);
			}
            SaveGangZones();
        }
    }
}

/*ocmd:fl(playerid,params[])
{
    new string[850];
	format(string,sizeof(string),"{247BA6}1. {FFFFFF}%s\n{247BA6}2. {FFFFFF}%s\n{247BA6}3. {FFFFFF}%s\n{247BA6}4. {FFFFFF}%s\n{247BA6}5. {FFFFFF}%s\n{247BA6}6. {FFFFFF}%s\n{247BA6}7. {FFFFFF}%s",FraktionsName(1),FraktionsName(2),FraktionsName(3),FraktionsName(4),FraktionsName(5),FraktionsName(6),FraktionsName(7));
	format(string,sizeof(string),"%s\n{247BA6}8. {FFFFFF}%s\n{247BA6}9. {FFFFFF}%s\n{247BA6}10. {FFFFFF}%s\n{247BA6}11. {FFFFFF}%s\n{247BA6}12. {FFFFFF}%s\n{247BA6}13. {FFFFFF}%s",string, FraktionsName(8), FraktionsName(9), FraktionsName(10), FraktionsName(11), FraktionsName(12), FraktionsName(13));
	format(string,sizeof(string),"%s\n{247BA6}14. {FFFFFF}%s\n{247BA6}15. {FFFFFF}%s\n{247BA6}16. {FFFFFF}%s\n{247BA6}17. {FFFFFF}%s\n{247BA6}18. {FFFFFF}%s\n{247BA6}19. {FFFFFF}%s\n{247BA6}20. {FFFFFF}%s\n{247BA6}21. {FFFFFF}%s\n{247BA6}22. {FFFFFF}%s\n\n"SERVER_LABEL"", string, FraktionsName(14), FraktionsName(15), FraktionsName(16), FraktionsName(17), FraktionsName(18), FraktionsName(19), FraktionsName(20), FraktionsName(21), FraktionsName(22));
	ShowPlayerDialog(playerid, DIALOG_FRAKTIONEN, DIALOG_STYLE_MSGBOX,"{FFFFFF}Fraktionen", string, "Verlassen","");
    return 1;
}*/
ocmd:fl(playerid,params[])
{
    if(!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_WHITE, ERROR_LOGGED);
    if(Spieler[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_WHITE, ERROR_ADMIN);
    new string[850];
	format(string,sizeof(string),"{247BA6}1. {FFFFFF}%s\n{247BA6}2. {FFFFFF}%s\n{247BA6}3. {FFFFFF}%s\n{247BA6}4. {FFFFFF}%s\n{247BA6}5. {FFFFFF}%s\n{247BA6}6. {FFFFFF}%s\n{247BA6}7. {FFFFFF}%s",FraktionsName(1),FraktionsName(2),FraktionsName(3),FraktionsName(4),FraktionsName(5),FraktionsName(6),FraktionsName(7));
	format(string,sizeof(string),"%s\n{247BA6}9. {FFFFFF}%s\n{247BA6}10. {FFFFFF}%s\n{247BA6}11. {FFFFFF}%s\n{247BA6}12. {FFFFFF}%s\n{247BA6}13. {FFFFFF}%s",string, FraktionsName(9), FraktionsName(10), FraktionsName(11), FraktionsName(12), FraktionsName(13));
	format(string,sizeof(string),"%s\n{247BA6}14. {FFFFFF}%s\n{247BA6}15. {FFFFFF}%s\n{247BA6}16. {FFFFFF}%s\n{247BA6}18. {FFFFFF}%s\n{247BA6}20. {FFFFFF}%s\n{247BA6}21. {FFFFFF}%s\n{247BA6}22. {FFFFFF}%s\n\n"SERVER_LABEL"", string, FraktionsName(14), FraktionsName(15), FraktionsName(16), FraktionsName(18), FraktionsName(20), FraktionsName(21), FraktionsName(22));
	ShowPlayerDialog(playerid, DIALOG_FRAKTIONEN, DIALOG_STYLE_MSGBOX,"{FFFFFF}Fraktionen", string, "Verlassen","");
    return 1;
}
/*ocmd:freischalten(playerid,params[])
{
    if(!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_WHITE, ERROR_LOGGED);
    if(Spieler[playerid][pTSFrei] != 0) return SendClientMessage(playerid, COLOR_RED, "Du hast dich schon Freigeschaltet gehabt.");
    if(Spieler[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_RED, "Du kannst dir erst ab Level 2 dich Freischalten.");
    new PlayerIP[24];
    GetPlayerIp(playerid, PlayerIP, sizeof(PlayerIP));
	new ClientID = TSC_GetClientIdByIpAddress(PlayerIP);
	TSC_AddClientToServerGroup(ClientID, TS_SERVER_GROUP_MITGLIED);
	Spieler[playerid][pTSFrei] = 1;
	SaveAccount(playerid);
	SendClientMessage(playerid, COLOR_GREEN, "Du hast dich erfolgreich Freigeschaltet für den TS.");
	SendClientMessage(playerid, COLOR_RED, "- Solltest du zum Zeitpunkt der Freischaltung nicht auf dem Teamspeak Server gewesen sein, melde dich bei einem Admin per /sup");
	return 1;
}
ocmd:reloadfreischalten(playerid,params[])
{
	if(!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_WHITE, ERROR_LOGGED);
	if(Spieler[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_WHITE, ERROR_ADMIN);
    SendRconCommand("reloadfs TS-Controller");//Haustiersystem by Marco
 	SendClientMessage(playerid, COLOR_GREEN, "Du hast dich erfolgreich Freiscahlten neu geladen.");
	return 1;
}
CMD:givetsfreischaltung(playerid, params[])
{
	new pID, wert, string[128];
	if(!gPlayerLogged[playerid]) return SendClientMessage(playerid, COLOR_WHITE, ERROR_LOGGED);
	if(Spieler[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_WHITE, ERROR_ADMIN);
    if(sscanf(params, "uu", pID, wert))return SendClientMessage(playerid, COLOR_BLUE, INFO_STRING"/givetsfreischaltung [SpielerID/Name] [0 - 1]");
    if(!IsPlayerConnected(pID))return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht online.");
    if (wert <= 0 && wert >= 1) return SendClientMessage(playerid, COLOR_RED, "Gebe entweder 0 für Frei oder 1 für Gesperrt ein.");
    Spieler[pID][pTSFrei] = wert;
    if(Spieler[pID][pTSFrei]) {
        SendClientMessage(playerid, COLOR_WHITE, "Dir wurde die TS Freischaltung gegeben!");
        SCMFormatted(playerid, COLOR_LIGHTBLUE, "Du hast dem Spieler %s die TS Freischaltung gegeben.", GetName(pID));
   	    format(string, sizeof(string), "Admin %s hat %s die TS Freischaltung gegeben!", GetName(playerid), GetName(pID));
	    SendModMessage(COLOR_RED, string);
    } else {
        SendClientMessage(pID, COLOR_WHITE, "Dir wurde die TS Freischaltung freigeschalten.");
        SendClientMessage(pID, COLOR_RED, "Du kannst nun dich wieder für den TS Freischalten.");
        SCMFormatted(playerid, COLOR_LIGHTBLUE, "Du hast dem Spieler %s die TS Freischaltung freigeschalten.", GetName(pID));
   	    format(string, sizeof(string), "Admin %s hat %s die TS Freischaltung freigeschalten!", GetName(playerid), GetName(pID));
	    SendModMessage(COLOR_RED, string);
	    return 1;
    }
    SaveAccount(pID);
	return 1;
}*/
stock ShowEventItemDialog(playerid, type = DIALOG_EVENT_ITEM_MENU, extravar = 0) {
    new dialogText[512], dialogCaption[64];
    switch (type) {
        case DIALOG_EVENT_ITEM_MENU: {
            format(dialogText, sizeof(dialogText), "{FFFFFF}Status: %s%s\n{FFFFFF}Typ: %s{FFFFFF}\nFür einen Spieler wieder freischalten\n{FFFFFF}Für alle wieder \
                freischalten\nEinstellungen zurücksetzen\n- - - {7599FF}Items hinzufügen {FFFFFF}- - -\nSchusswaffen\nNahkampfwaffen\nWeiteres\n\
                - - - {7599FF}Ausgewählte Items {FFFFFF}- - -\n", gEventItem ? "{00FF00}" : "{FF0000}", gEventItem ? "aktiviert" : "deaktiviert"
                , gEventItemType ? "Einmal nutzbar" : "Immer nutzbar");

            for (new i = 0; i < sizeof(aEventItems); i++) {
                if (!aEventItems[i][AEVENT_ITEM_INDEX]) continue;
                format(dialogText, sizeof(dialogText), "%s%s - %d\n", dialogText, g_EventItems[aEventItems[i][AEVENT_ITEM_INDEX] - 1][EVENT_ITEM_NAME], aEventItems[i][AEVENT_ITEM_AMMO]);
            }
            
            return ShowPlayerDialog(playerid, DIALOG_EVENT_ITEM_MENU, DIALOG_STYLE_LIST, "{FF9900}Eventitems - Übersicht", dialogText, "Weiter", "Schließen");
        }
        case DIALOG_EVENT_ITEM_REACTIVATE: {
            return ShowPlayerDialog(playerid, DIALOG_EVENT_ITEM_REACTIVATE, DIALOG_STYLE_INPUT, "{FF9900}Eventitems - Spieler freischalten", "{FFFFFF}Gebe die ID \
                oder den Namen des Spielers ein,\nfür den du die Eventitems wieder freischalten willst:", "Freischalten", "Zurück");
        }
        case DIALOG_EVENT_ITEM_WEAPONS: {
            for (new i = 0; i < sizeof(g_EventItems); i++)
                if (g_EventItems[i][EVENT_ITEM_TYPE] == extravar || extravar == WEAPON_MELEE && g_EventItems[i][EVENT_ITEM_TYPE] == WEAPON_SPRAY) 
                    format(dialogText, sizeof(dialogText), "%s%s\n", dialogText, g_EventItems[i][EVENT_ITEM_NAME]);

            format(dialogCaption, sizeof(dialogCaption), "{FF9900}Eventitems - %s", extravar == WEAPON_GUN ? "Schusswaffen" : (extravar == WEAPON_MELEE ? "Nahkampfwaffen" : "Weiteres"));
            SetPVarInt(playerid, "EVENTITEM_TYPE", extravar);
            return ShowPlayerDialog(playerid, DIALOG_EVENT_ITEM_WEAPONS, DIALOG_STYLE_LIST, dialogCaption, dialogText, "Auswählen", "Zurück");
        }
        case DIALOG_EVENT_ITEM_AMMO: {
            new index = aEventItems[extravar][AEVENT_ITEM_INDEX] - 1, replaceString[128];
            if (index < 0) replaceString = "";
            else if (index == GetPVarInt(playerid, "EVENTITEM_INDEX")) format(replaceString, sizeof(replaceString), "{FFFFFF}Eingestellter Wert: {7599FF}%d\n", aEventItems[extravar][AEVENT_ITEM_AMMO]);
            else format(replaceString, sizeof(replaceString), "{FFFFFF}Ersetzt: {7599FF}%s\n", g_EventItems[index][EVENT_ITEM_NAME]);
            format(dialogText, sizeof(dialogText), "{FFFFFF}Item: {7599FF}%s\n%s\n{FFFFFF}Gebe an, wieviel Munition bzw. welchen Wert das Item haben soll:"
                , g_EventItems[GetPVarInt(playerid, "EVENTITEM_INDEX")][EVENT_ITEM_NAME], replaceString);

            return ShowPlayerDialog(playerid, DIALOG_EVENT_ITEM_AMMO, DIALOG_STYLE_INPUT, "{FF9900}Eventitems - Munition", dialogText, "Hinzufügen", "Abbrechen");
        }
        case DIALOG_EVENT_ITEM_CHANGE: {
            new index = GetPVarInt(playerid, "EVENTITEM_INDEX");
            format(dialogText, sizeof(dialogText), "Löschen%s", g_EventItems[index][EVENT_ITEM_TYPE] == WEAPON_MELEE 
                || !strcmp(g_EventItems[index][EVENT_ITEM_NAME], "Fallschirm") ? "" : "\nÄndern");

            format(dialogCaption, sizeof(dialogCaption), "{FF9900}Eventitems - %s", g_EventItems[index][EVENT_ITEM_NAME]);
            return ShowPlayerDialog(playerid, DIALOG_EVENT_ITEM_CHANGE, DIALOG_STYLE_LIST, dialogCaption, dialogText, "Weiter", "Zurück");
        }
    }

    return 1;
}


stock ShowAngelStats(targetid, playerid)
{
    if(IsPlayerConnected(playerid))
    {
        new maxgefangen = Spieler[playerid][pMaxFishes];
        new maxverloren = Spieler[playerid][pMaxVerloren];
        new dabei = Spieler[playerid][pFische];
        new koeder = Spieler[playerid][pKoeder];
        new angel[32];
        if(Spieler[playerid][pAngel] == 0){angel=COLOR_HEX_RED"Nicht Vorhanden";}
        else if(Spieler[playerid][pAngel] == 1){angel =COLOR_HEX_GREEN"Vorhanden";}
        new schein[32];
        if(Spieler[playerid][pFishLic] == 0){schein=COLOR_HEX_RED"Nicht Vorhanden";}
        else if(Spieler[playerid][pFishLic] == 1){schein=COLOR_HEX_GREEN"Vorhanden";}
        new str1[256], str2[256], finalstr[512];
        format(str1, sizeof(str1), COLOR_HEX_BLUE"Gefangene Fische: "COLOR_HEX_WHITE"%d\n"COLOR_HEX_BLUE"Verfehlte Fische: "COLOR_HEX_WHITE"%d\n"COLOR_HEX_BLUE"Fische dabei: "COLOR_HEX_WHITE"%d\n"COLOR_HEX_BLUE"Köder: "COLOR_HEX_WHITE"%d\n", maxgefangen, maxverloren, dabei, koeder);
        format(str2, sizeof(str2), COLOR_HEX_BLUE"Angel: "COLOR_HEX_WHITE"%s\n"COLOR_HEX_BLUE"Angelschein: "COLOR_HEX_WHITE"%s", angel, schein);
        format(finalstr, sizeof(finalstr), "%s%s", str1, str2);
        new aTitle[64];
        format(aTitle,sizeof(aTitle), "Angelstatistiken von %s", GetName(playerid));
        ShowPlayerDialog(targetid, DIALOG_ANGELSTATS, DIALOG_STYLE_MSGBOX, aTitle, finalstr, "Schließen", "");
    }
    return 1;
}

forward AngelTimer(playerid);
public AngelTimer(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        new string[128];
        new change = minrand(1, 100);
        if(change < 50)
        {
            SendClientMessage(playerid, COLOR_ORANGE, "Du hattest leider kein Glück, und hast nichts gefangen. Versuche es erneut!");
            Spieler[playerid][pMaxVerloren] ++;
        }
        else if(change >= 50)
        {
            new a = IsPlayerAtAngelPlatz(playerid);
            if(Angel[a][Fische] == 0)return SendClientMessage(playerid, COLOR_RED, "Es gibt keine Fische mehr!");
            new fischname = random(sizeof(FischNamen));
            Spieler[playerid][pFische] ++;
            format(string, sizeof(string), "Du hast einen Fisch gefangen! ("COLOR_HEX_BLUE"%s"COLOR_HEX_WHITE")", FischNamen[fischname]);
            SendClientMessage(playerid, COLOR_WHITE, string);
            Angel[a][Fische] --;
            Spieler[playerid][pMaxFishes] ++;
            UpdateAngelText(a);
        }
    }
    RemovePlayerAttachedObject(playerid, 0);
    ClearAnimations(playerid);
    UnfreezePlayer(playerid);
    IsPlayerFishing[playerid] = 0;
    KillTimer(pAngelTimer[playerid]);
    return 1;
}

stock SaveReportData(playerid,supporter) {
    SetPVarString(playerid, "Supporter" , GetName(supporter) );
    return 1;
}


forward ReportReset(playerid);
public ReportReset(playerid)
{
    if(IsPlayerConnected(playerid) && gPlayerLogged[playerid])
    {
        if(PlayerNeedsHelp[playerid] == 1)
        {
            PlayerNeedsHelp[playerid] = 0;
            //format(SupText[playerid], 128, " "); quatsch
            SupText[playerid][0] = '\0';
            SendClientMessage(playerid, COLOR_YELLOW, "Dein Ticket ist nicht geöffnet worden und wurde automatisch gelöscht. Erstelle ein neues!");
            KillTimer(ReportTimer[playerid]);
        }
    }
    return 1;
}



stock StartPlayerSkinSelection(playerid) {
    pSkinSelection[playerid] = 1;
    FreezePlayer(playerid);
    SetPlayerPos(playerid, 257.9847,-41.5232,1002.0234);
   	SetPlayerCameraPos(playerid, 255.0529,-41.4668,1002.0234);
   	SetPlayerCameraLookAt(playerid, 256.2413,-41.4954,1002.0234);
    SetPlayerInterior(playerid, 14);
    SetPlayerVirtualWorld(playerid, playerid+1337);
    SetPlayerFacingAngle(playerid, 90.4982);

    if(Spieler[playerid][pFraktion] == 0)
    {
        if(Spieler[playerid][pSex] == 1)
        {
            SetPlayerSkin(playerid, 2);
            pChoosedSkin[playerid] = 2;
        }
        else if(Spieler[playerid][pSex] == 2)
        {
            SetPlayerSkin(playerid, 12);
            pChoosedSkin[playerid] = 12;
        }
    }
    else if(Spieler[playerid][pFraktion] == 1)
    {
        SetPlayerSkin(playerid, 265);
        pChoosedSkin[playerid] = 265;
    }
    else if(Spieler[playerid][pFraktion] == 2)
    {
        SetPlayerSkin(playerid, 286);
        pChoosedSkin[playerid] = 286;
    }
    else if(Spieler[playerid][pFraktion] == 3)
    {
        SetPlayerSkin(playerid, 274);
        pChoosedSkin[playerid] = 274;
    }
    else if(Spieler[playerid][pFraktion] == 4)
    {
        SetPlayerSkin(playerid, 57);
        pChoosedSkin[playerid] = 57;
    }
    else if(Spieler[playerid][pFraktion] == 5)
    {
        SetPlayerSkin(playerid, 50);
        pChoosedSkin[playerid] = 50;
    }
    else if(Spieler[playerid][pFraktion] == 6)
    {
        SetPlayerSkin(playerid, 105);
        pChoosedSkin[playerid] = 105;
    }
    else if(Spieler[playerid][pFraktion] == 7)
    {
        SetPlayerSkin(playerid, 102);
        pChoosedSkin[playerid] = 102;
    }
    else if(Spieler[playerid][pFraktion] == 8)
    {
        SetPlayerSkin(playerid, 240);
        pChoosedSkin[playerid] = 240;
    }
    else if(Spieler[playerid][pFraktion] == 9)
    {
        SetPlayerSkin(playerid, 170);
        pChoosedSkin[playerid] = 170;
    }
    else if(Spieler[playerid][pFraktion] == 10)
    {
        SetPlayerSkin(playerid, 123);
        pChoosedSkin[playerid] = 123;
    }
    else if(Spieler[playerid][pFraktion] == 11)
    {
        SetPlayerSkin(playerid, 114);
        pChoosedSkin[playerid] = 114;
    }
    else if(Spieler[playerid][pFraktion] == 12)
    {
        SetPlayerSkin(playerid, 125);
        pChoosedSkin[playerid] = 125;
    }
    else if(Spieler[playerid][pFraktion] == 13)
    {
        SetPlayerSkin(playerid, 110);
        pChoosedSkin[playerid] = 110;
    }
    else if(Spieler[playerid][pFraktion] == 14)
    {
        SetPlayerSkin(playerid, 229);
        pChoosedSkin[playerid] = 229;
    }
    else if(Spieler[playerid][pFraktion] == 15)
    {
        SetPlayerSkin(playerid, 248);
        pChoosedSkin[playerid] = 248;
    }
    else if(Spieler[playerid][pFraktion] == 16)
    {
        SetPlayerSkin(playerid, 282);
        pChoosedSkin[playerid] = 282;
    }
    else if(Spieler[playerid][pFraktion] == 17)
    {
        SetPlayerSkin(playerid, 202);
        pChoosedSkin[playerid] = 202;
    }
    else if(Spieler[playerid][pFraktion] == 18)
    {
        SetPlayerSkin(playerid, 287);
        pChoosedSkin[playerid] = 287;
    }
    else if(Spieler[playerid][pFraktion] == 19)
    {
        SetPlayerSkin(playerid, 14);
        pChoosedSkin[playerid] = 14;
    }
    else if(Spieler[playerid][pFraktion] == 20)
    {
        SetPlayerSkin(playerid, 47);
        pChoosedSkin[playerid] = 47;
    }
    else if(Spieler[playerid][pFraktion] == 21)
    {
        SetPlayerSkin(playerid, 120);
        pChoosedSkin[playerid] = 120;
    }
    else if(Spieler[playerid][pFraktion] == 22)
    {
        SetPlayerSkin(playerid, 288);
        pChoosedSkin[playerid] = 288;
    }

    SendClientMessage(playerid, COLOR_WHITE, COLOR_HEX_WHITE"Drücke "COLOR_HEX_BLUE"SPRINT-TASTE "COLOR_HEX_WHITE"um den nächsten Skin anzeigen zu lassen.");
    SendClientMessage(playerid, COLOR_WHITE, COLOR_HEX_WHITE"Drücke "COLOR_HEX_BLUE"ENTER-TASTE "COLOR_HEX_WHITE"um den derzeitigen Skin auszuwählen.");
    SendClientMessage(playerid, COLOR_WHITE, COLOR_HEX_BLUE"INFO: "COLOR_HEX_WHITE"Wenn du doch keinen Skin wechseln möchtest, wähle einfach deinen derzeitigen Skin aus.");
    return 1;
}







forward RemoveBackupCP(playerid);
public RemoveBackupCP(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        KillTimer(pBackupTimer[playerid]);
        DisablePlayerCheckpointEx(playerid);
    }
}

public AFKTimer(playerid)
{
    if(IsAFK[playerid])
    {
        pAFKTimer[playerid] ++;
        new string[128];
        if(pAFKTimer[playerid] > 60) pAFKMinute[playerid] ++ , pAFKTimer[playerid] = 0;
        if(pAFKMinute[playerid] > 0) format(string,sizeof(string),"Im AFK-Modus\nSeit %d Minuten und %d Sekunden",pAFKMinute[playerid],pAFKTimer[playerid]);
        else format(string,sizeof(string),"Im AFK-Modus\nSeit %d Sekunden",pAFKTimer[playerid]);
        UpdateDynamic3DTextLabelText(Spieler[playerid][pAFKLabel], 0xC2A2DAFF, string);
        sAFKTimer[playerid] = SetTimerEx("AFKTimer", 1000 ,false,"d",playerid);
    }
    return 1;
}





public OnPlayerSpawn(playerid)
{
    //Prev_DestroyPlayerTextDraws(playerid);

    Spieler[playerid][aufgenommen] = 0;

    if (!gPlayerLogged[playerid]) {
        SendClientMessage(playerid, COLOR_RED, "Du bist noch nicht eingeloggt.");
        KickDelay(playerid);
        return 1;
    }
    
    if(Spieler[playerid][pDonateRank] > 0 && Spieler[playerid][LoadedPremiumWeapons] == 0){
        Spieler[playerid][LoadedPremiumWeapons] = 1;
    	SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Du bist Clubmitglied! Befehle: /Clubhelp");
     	SetTimerEx("LoadPremiumWeaponData", 353 ,false,"d",playerid);
	}

    #if defined USE_NPCS
    if( IsPlayerNPC( playerid ) ) {
        new
            Text3D:Label, npcname[MAX_PLAYER_NAME];
        ResetPlayerWeapons(playerid);
        GetPlayerName(playerid, npcname, sizeof(npcname));
        SetPlayerColor(playerid,0xFFFFFFFF);
        Label = Create3DTextLabel(npcname,0x000000,0.0,0.0,0.0,45.0,0,1);
        for(new i ; i < sizeof(g_Bots) ; i++) {
            if(!strcmp(npcname,g_Bots[i][Bot_sName])) {
                if( g_Bots[i][Bot_iVehicle] > 0 ) {
                    PutPlayerInVehicle(playerid, g_Bots[i][Bot_iVehicleID],0);
                    g_Bots[i][Bot_t3dLabel] = Label;
                }
            }
        }
        Attach3DTextLabelToPlayer(Label,playerid,0.0,0.0,0.20);
        Update3DTextLabelText(Label,0xFFFFFFFF,npcname);
        return 1;
    }
    #endif

    DeletePVar(playerid, "MP3.PLAYER");
    DeletePVar(playerid, "EVENTITEM");
    if (g_evidenceRoomHeist[EVIDENCEROOM_HEIST_STATUS] == EVIDENCEROOM_STATUS_ONGOING && g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER] == playerid) {
        KillTimer(g_evidenceRoomHeist[EVIDENCEROOM_HEIST_TIMER]);
        g_evidenceRoomHeist[EVIDENCEROOM_HEIST_TIMER] = INVALID_TIMER_ID;
        EvidenceRoomHeistFinished();
    }

    //ShowPlayerDialog(playerid, DIALOG_SPAWNMELDUNG, DIALOG_STYLE_MSGBOX, "LyD - Roleplay", "LyD ist heute 2 JAHRE ALT geworden und das feiern wir mit tollen Events und Gewinnen!\nWas für Events, zu welcher Uhrzeit stattfinden, steht im Forum: www.LyD-Roleplay.de\n\nProjektdaten:\n\nServer IP: Server.LyD-Roleplay.de\nTeamspeak IP: TS.LyD-Roleplay.de\nForum Adresse: www.LyD-Roleplay.de\n\nSchau täglich auf unserem Forum vorbei, um über Neuigkeiten informiert zu sein!", "OK", "");
    GZ_OnPlayerSpawn(playerid);
    g_aiLastDamagedByPlayer[playerid] = INVALID_PLAYER_ID;

    if( Spieler[playerid][bAugenbinde]) {
        ResetAugenbinde(playerid);
        Spieler[playerid][bAugenbinde] = false;
    }
    g_aiDestroyedVehicles[playerid] = 0;
    Spieler[playerid][pEisVerkaeufer] = INVALID_PLAYER_ID;
    Spieler[playerid][pHotDogVerkaeufer] = INVALID_PLAYER_ID;
    Spieler[playerid][iKidnapID] = INVALID_PLAYER_ID;
    Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
    Spieler[playerid][bKidnapped] = false;
    Spieler[playerid][pTransportActive] = false ;
    Spieler[playerid][bNoDMZone] = false;
    g_aiLastVehicle[playerid] = INVALID_VEHICLE_ID;
    Spieler[playerid][pHureID] = INVALID_PLAYER_ID;
    if( Spieler[playerid][pTimerTaschendieb] != INVALID_TIMER_ID ) {
        KillTimer(Spieler[playerid][pTimerTaschendieb]);
    }
    if( Spieler[playerid][pTimerKnastbefreien] != INVALID_TIMER_ID ) {
        KillTimer(Spieler[playerid][pTimerKnastbefreien]);
    }
    Spieler[playerid][pAutoknackerVehicleID] = INVALID_VEHICLE_ID;
    KillTimer( Spieler[playerid][tAutoknacken] );

    Spieler[playerid][pTimerTaschendieb] = INVALID_TIMER_ID;
    Spieler[playerid][pTimerKnastbefreien] = INVALID_TIMER_ID;
    paydaywait[playerid] =0;
    Cuffed[playerid] = 0;
    StopAudioStreamForPlayer(playerid);
    pSkinSelection[playerid]= 0;
    pChoosedSkin[playerid]= 0;
    pCurrentBiz[playerid] = 0;
    Spieler[playerid][pSHeilen] = INVALID_PLAYER_ID;
    Spieler[playerid][pFLehrer] = INVALID_PLAYER_ID;
    if(Spieler[playerid][pDuty] == 0) Spieler[playerid][pDuty] = 0;
    Spieler[playerid][pDutyTask] = 0;
    pUnderCover[playerid] = 0;
    TextDrawShowForPlayer(playerid, UhrMessage);
    TextDrawShowForPlayer(playerid, DatumMessage);

    TextDrawShowForPlayer(playerid, Logo1);
    TextDrawShowForPlayer(playerid, Logo2);

    SetPlayerSkin(playerid, Spieler[playerid][pSkin]);
    UnfreezePlayer(playerid);
    if (!Spieler[playerid][pTot]) SetPlayerInterior(playerid, 0);
    //SetPlayerColor(playerid, COLOR_WHITE & 0xFFFFFF00 );
    if (!Spieler[playerid][pAdminDienst] && !Spieler[playerid][pBenutzerfarbe]) SetPlayerColor(playerid, COLOR_WHITE);
    SetCameraBehindPlayer(playerid);
    if(!HasKrankenversicherung(playerid)){
		ResetPlayerWeapons(playerid);
	}
    if( Spieler[playerid][pSpawnWeste] > gettime() && !PlayerIsPaintballing[playerid])
    {
        SetPlayerArmour(playerid, 100);
    }
    else
    {
        SetPlayerArmour(playerid, 0);
    }
    
    if( Spieler[playerid][pSpawnWaffenUnix] > gettime() && !PlayerIsPaintballing[playerid] && !Spieler[playerid][pJailed] && !Spieler[playerid][pTot]) {
        if(Spieler[playerid][pSpawnWaffen] == 1) {
            GivePlayerWeapon(playerid, 24, 100);
            GivePlayerWeapon(playerid, 29, 100);
        } else {
            if(Spieler[playerid][pSpawnWaffen] == 2) { 
                GivePlayerWeapon(playerid, 24, 100);
                GivePlayerWeapon(playerid, 25, 50);
                GivePlayerWeapon(playerid, 31, 300);
                GivePlayerWeapon(playerid, 34, 25);
            }
        }
    }

    SetPlayerHealth(playerid, 0x7F800000);
    SetPlayerSpawn(playerid);
    if(firstspawn[playerid]==0)
    {
        PreloadAnimLib(playerid, "FOOD");
        PreloadAnimLib(playerid, "BD_FIRE");
        PreloadAnimLib(playerid, "COP_AMBIENT");
        PreloadAnimLib(playerid, "CRACK");
        PreloadAnimLib(playerid, "INT_HOUSE");
        PreloadAnimLib(playerid, "INT_SHOP");
        PreloadAnimLib(playerid, "BOMBER");
        PreloadAnimLib(playerid, "MEDIC");
        PreloadAnimLib(playerid, "ATTRACTORS");
        PreloadAnimLib(playerid, "CAR");
        PreloadAnimLib(playerid, "MISC");
        PreloadAnimLib(playerid, "ROB_BANK");
        PreloadAnimLib(playerid, "PED");
        PreloadAnimLib(playerid, "PARK");
        PreloadAnimLib(playerid, "DANCING");
        PreloadAnimLib(playerid, "GYMNASIUM");
        PreloadAnimLib(playerid, "BEACH");
        PreloadAnimLib(playerid, "SMOKING");
        PreloadAnimLib(playerid, "DANCING");
        PreloadAnimLib(playerid, "MUSCULAR");
        PreloadAnimLib(playerid, "GANGS");
        PreloadAnimLib(playerid, "CAMERA");
        PreloadAnimLib(playerid, "STRIP");
        PreloadAnimLib(playerid, "SHOP");
        PreloadAnimLib(playerid, "GRAVEYARD");
        PreloadAnimLib(playerid, "VENDING");
        PreloadAnimLib(playerid, "KNIFE");
        PreloadAnimLib(playerid, "PAULNMAC");
        PreloadAnimLib(playerid, "RIOT");
        PreloadAnimLib(playerid, "WUZI");
        PreloadAnimLib(playerid, "ON_LOOKERS");
        PreloadAnimLib(playerid, "PLAYIDLES");
        PreloadAnimLib(playerid, "BENCHPRESS");
        PreloadAnimLib(playerid, "POLICE");
        PreloadAnimLib(playerid, "SWORD");
        PreloadAnimLib(playerid, "PARACHUTE");

        PreloadAnimLib(playerid, "KISSING");
        PreloadAnimLib(playerid, "BAR");
        PreloadAnimLib(playerid, "GRENADE");
        PreloadAnimLib(playerid, "CASINO");

        firstspawn[playerid]=1;
        new i,pfad[64];
        for(;i<50;i++)
        {
            format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
            if(fexist(pfad))
            {
                new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                fread(datei,briefstring);
                fclose(datei);
                sscanf(briefstring,"s[32]s[32]s[20]s[20]s[500]iii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                if(klasseint==0)
                {
                    SendClientMessage(playerid,COLOR_YELLOW,"Du hast ungelesene Post erhalten! Gehe zum Postamt und öffne die Post.");
                    break;
                }
            }
        }
/*      if(Spieler[playerid][ID]<=0||Spieler[playerid][ID]>=1000000000)
        {
            new specialid=100000000+random(899999999);
            Spieler[playerid][ID] = specialid;
        }*/
    }
    UpdateDynamic3DTextLabelText(Spieler[playerid][pAntiSpawnKill], 0xFFFFFFFF, "Antispawn-Kill");
    TextDrawShowForPlayer(playerid, ASKDraw);
    PlayerTextDrawShow(playerid, Gesucht[playerid]);
    //PlayerTextDrawShow(playerid, WantedBar[playerid]);
    Spieler[playerid][pAntiSpawnKillOn] = true;
    SetTimerEx("ASKTimer", PlayerIsPaintballing[playerid] ? 1000 : 15000, 0, "i", playerid);
    //SetPlayerWeather(playerid,18);
    UpdatePayDayTextdraw(playerid);
    PlayerTextDrawShow(playerid,Spieler[playerid][ptPayDay]);

    //SPEC
    if (bIsSpectating[playerid] == 0) {
        iSpectatorID[playerid] = -1;
    }

    if (bIsSpectating[playerid] == 1) { 
        bIsSpectating[playerid] = 0;
        bIsBeingSpectated[iSpectatorID[playerid]] = 0;
        iSpectatorID[playerid] = -1;	
        Spieler[playerid][pAdminDienst] = 0;
        Spieler[playerid][pHandyState] = 1;
        SendClientMessage(playerid, COLOR_YELLOW, "Dein Handy wurde automatisch wieder eingeschaltet.");
        SetDamageFeedForPlayer(playerid, 0);
        SetPlayerHealth(playerid, iHealth[playerid]);	
        SetPlayerSkin(playerid, Spieler[playerid][pSkin]);
        SetPlayerColor(playerid, COLOR_WHITE);
        if (iArmour[playerid] > 0) {
            SetPlayerArmour(playerid, iArmour[playerid]);
        }		
        ResetPlayerWeapons(playerid);
        for(new iSlot = 0; iSlot != 12; iSlot++) {	
            GivePlayerWeapon(playerid, iWeaponID[playerid][iSlot], iWeaponAmmo[playerid][iSlot]);
        }	
        if (bWasInVehiclePrior[playerid] == 1) {
            GetVehiclePos(iVehicleID[playerid], vehXCheck, vehYCheck, vehZCheck);
            new bWasSeatOccupied;
            if (vehX[playerid] <= vehXCheck + 15 && vehX[playerid] >= vehXCheck - 15 && vehY[playerid] <= vehYCheck + 15 && vehY[playerid] >= vehYCheck - 15) {
                foreach(new i : Player) {
                    if (i == playerid) {
                        continue;
                    }
                    if (GetPlayerVehicleID(i) == iVehicleID[playerid] && GetPlayerVehicleSeat(i) == iVehicleSeat[playerid]) {
                        Streamer_UpdateEx(playerid, vehX[playerid], vehY[playerid], vehZ[playerid], iWorld[playerid], iInterior[playerid], .compensatedtime = 1500);
                        SetPlayerPos(playerid, vehX[playerid], vehY[playerid], vehZ[playerid] + 2);
                        SetPlayerInterior(playerid, iInterior[playerid]);
                        SetPlayerVirtualWorld(playerid, iWorld[playerid]);
                        SendClientMessage(playerid, COLOR_YELLOW, "Der Sitz deines letzten bekannten Fahrzeuges ist besetzt!");
                        SendClientMessage(playerid, COLOR_YELLOW, "Du wurdest in die Nähe des letzten bekannten Standorts teleportiert!");
                        bWasSeatOccupied = 1;
                        break;    	
                    } else {
                        continue;
                    }
                }
                if (bWasSeatOccupied == 0) {
                    PutPlayerInVehicle(playerid, iVehicleID[playerid], iVehicleSeat[playerid]);
                    SetPlayerInterior(playerid, iInterior[playerid]);
                    SetPlayerVirtualWorld(playerid, iWorld[playerid]);
                    SendClientMessage(playerid, COLOR_YELLOW, "Du wurdest in dein letztes bekanntes Fahrzeug teleportiert!");
                }
            } else {
                Streamer_UpdateEx(playerid, vehX[playerid], vehY[playerid], vehZ[playerid], iWorld[playerid], iInterior[playerid], .compensatedtime = 1500);
                SetPlayerPos(playerid, vehX[playerid], vehY[playerid], vehZ[playerid] + 2);
                SetPlayerInterior(playerid, iInterior[playerid]);
                SetPlayerVirtualWorld(playerid, iWorld[playerid]);
                SendClientMessage(playerid, COLOR_YELLOW, "Du wurdest in die Nähe deines letzten bekannten Fahrzeuges teleportiert!");
            }
            bWasInVehiclePrior[playerid] = 0;
        } else {
            Streamer_UpdateEx(playerid, posX[playerid], posY[playerid], posZ[playerid], iWorld[playerid], iInterior[playerid], .compensatedtime = 1500);
            SetPlayerInterior(playerid, iInterior[playerid]);
            SetPlayerVirtualWorld(playerid, iWorld[playerid]);
            SetPlayerPos(playerid, posX[playerid], posY[playerid], posZ[playerid]);
            SendClientMessage(playerid, COLOR_YELLOW, "Du wurdest zu deiner letzten bekannten Position teleportiert!");
        }

        new string[128];
        format(string, sizeof(string), "%s spectatet nun nicht mehr.", GetName(playerid));
        SendManagerMessage(COLOR_YELLOW, string);
    }

    if (bIsBeingSpectated[playerid] == 1) {
        foreach(new i : Player) {
            if (iSpectatorID[i] == playerid) {
                SpectatePlayer(i, playerid);
            }
        }
    }

    //PB START
    new pID = paintballInfo[playerid][E_PB_INFO_PARTNER];
    switch (paintballInfo[playerid][E_PB_INFO_STATUS]) {
        case PAINTBALL_STATUS_NONE: return 1;
        case PAINTBALL_STATUS_MENU: {
            new temp[E_PB_INFO];
            paintballInfo[playerid] = temp;
            ClosePlayerDialog(playerid);
        }
        case PAINTBALL_STATUS_1V1: {
            SetPlayerPaintballPos(playerid);
            SetPlayerSkin(playerid, Spieler[playerid][pSkin]);
            SetPlayerHealth(playerid, 10000.0);
            Spieler[playerid][pAntiSpawnKillOn] = true;
            SetTimerEx("ASKTimer", 2000, 0, "i", playerid);
            return -1;
        }
        case PAINTBALL_STATUS_INVITE: {
            new temp[E_PB_INFO];
            paintballInfo[playerid] = temp;
            paintballInfo[pID] = temp;
            ShowPlayerDialog(playerid, -1, 0, " ", " ", " ", " ");
            ShowPlayerDialog(pID, -1, 0, " ", " ", " ", " ");
            SCMFormatted(pID, COLOR_RED, "[Paintball] {FFFFFF}%s hat die Anfrage zu einem 1v1-Match zurückgezogen.", GetName(playerid));
        }
        case PAINTBALL_STATUS_INVITED: {
            new temp[E_PB_INFO];
            paintballInfo[playerid] = temp;
            paintballInfo[pID] = temp;
            ClosePlayerDialog(playerid);
            ClosePlayerDialog(pID);
            SCMFormatted(pID, COLOR_RED, "[Paintball] {FFFFFF}%s hat die Anfrage zu einem 1v1-Match abgelehnt.", GetName(playerid));
        }
    }
    //PB ENDE

    return 1;
}

stock IsValidSecureCode(playerid) {
    new query[136];
    format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s' AND ( `SecureCode` = '' OR `SecureCode` IS NULL  )",GetName(playerid));
    mysql_pquery(query,THREAD_ISVALIDSECURECUDE,playerid,gSQL,MySQLThreadOwner);
    /*
    mysql_store_result();
    securecode = mysql_num_rows();
    mysql_free_result();
    if( securecode > 0 ) return 0;
    */
    return 1;
}

stock IsValidGeburtstag(playerid) {
    new query[136];
    format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s' AND ( `Geburtstag` = '' OR `Geburtstag` IS NULL  )",GetName(playerid));
    mysql_pquery(query,THREAD_ISVALIDGEBURTSTAG,playerid,gSQL,MySQLThreadOwner);
    return 1;
}
stock IsValidVornameDB(playerid) {
    new query[136];
    format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s' AND ( `vorname` = '' OR `vorname` IS NULL  )",GetName(playerid));
    mysql_pquery(query,THREAD_ISVALIDVORNAME,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

stock IsValidEmailDB(playerid) {
    new query[136];
    format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s' AND ( `email` = '' OR `email` IS NULL  )",GetName(playerid));
    mysql_pquery(query,THREAD_ISVALIDEMAIL,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

forward ASKTimer(playerid);
public ASKTimer(playerid)
{
    UpdateDynamic3DTextLabelText(Spieler[playerid][pAntiSpawnKill], COLOR_3D_WHITE, " ");
    TextDrawHideForPlayer(playerid, ASKDraw);
    Spieler[playerid][pAntiSpawnKillOn] = false;
    SetPlayerHealth(playerid, 100);
    return 1;
}

public SetPlayerSpawn(playerid)
{
    KillTimer(Spieler[playerid][tSpawnView]);
    if( IsPlayerNPC(playerid)) return 1;
    if(IsPlayerConnected(playerid))
    {
        /*if( Spieler[playerid][pTut] == 0 &&!IsPlayerNPC(playerid) )
        {
            if( Spieler[playerid][pTutTimer] != INVALID_TIMER_ID) {
                KillTimer(Spieler[playerid][pTutTimer]);
            }
            Spieler[playerid][pTutTimer] = SetTimerEx("ShowPlayerTutorial",500,false,"dd",playerid,0);*/
            /*
            FreezePlayer(playerid);
            ShowPlayerDialog(playerid, DIALOG_TUT_1, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: Geschlecht", COLOR_HEX_WHITE"Bitte gebe nun dein Geschlecht ein.\n \nTipp: Gebe entweder "COLOR_HEX_ORANGE"MANN "COLOR_HEX_WHITE"oder "COLOR_HEX_ORANGE"FRAU "COLOR_HEX_WHITE"ein.", "Absenden", "Abbrechen");
            // SetPlayerCameraPos(playerid, 1511.7239,-1715.6687,30.0469);//Brücke Verona Beach
            // SetPlayerCameraPos(playerid, 369.8176, -1869.0303, 22.6842);//Brücke Verona Beach
            // SetPlayerCameraLookAt(playerid, 1481.4827,-1756.5393, 22.5);
            // SetPlayerPos(playerid, 1486.3573,-1749.6531,15.4453 );
            */
            //return 1;
        //}
        //gSpawned{playerid} = 1;
        if(pMakeTutorial[playerid] == 1)
        {
            SetPlayerCheckpointEx(playerid, NOOBSPAWN_STARTBONUS_POINT, 5.0, CP_TUTORIAL1);
            SendClientMessage(playerid, COLOR_WHITE, " ");
            SendClientMessage(playerid, COLOR_WHITE, " ");
            SendClientMessage(playerid, COLOR_WHITE, " ");
            SendClientMessage(playerid, COLOR_WHITE, " ");
            SendClientMessage(playerid, COLOR_WHITE, " ");
            SendClientMessage(playerid, COLOR_WHITE, " ");
            SendClientMessage(playerid, COLOR_WHITE, " ");
            SendClientMessage(playerid, COLOR_WHITE, "Zugfahrer sagt: Herzlich Willkommen beim Los Santos Hauptbahnhof!");
            SendClientMessage(playerid, COLOR_WHITE, "Zugfahrer sagt: Wir wünschen Ihnen eine Gute Weiterreise und viel Spaß!");
		}
		if(PlayerIsPaintballing[playerid] == 1)
		{
			new zuf = random(5);
			if(zuf == 0)
			{
				SetPlayerPos(playerid, 2219.4368,1553.9379,1004.7188);
				SetPlayerFacingAngle(playerid,355.2485);
			}
			else if(zuf == 1)
			{
				SetPlayerPos(playerid, 2218.3101,1614.8721,999.9827);
				SetPlayerFacingAngle(playerid,0.2854);
			}
			else if(zuf == 2)
			{
				SetPlayerPos(playerid, 2200.1055,1613.8082,999.9735);
				SetPlayerFacingAngle(playerid,270.9845);
			}
			else if(zuf == 3)
			{
				SetPlayerPos(playerid, 2189.8403,1592.9681,999.9729);
				SetPlayerFacingAngle(playerid,90.1084);
			}
			else if(zuf == 4)
			{
				SetPlayerPos(playerid, 2169.8208,1618.7504,999.9766);
				SetPlayerFacingAngle(playerid,272.3657);
			}
			Spieler[playerid][pTot] = 0;
			GivePlayerWeapon(playerid, 29, 150);
            GivePlayerWeapon(playerid, 24, 150);
			SetPlayerVirtualWorld(playerid, VW_PAINTBALLBASEMENT);
			SetPlayerInterior(playerid, 1);
			return 1;
		}
		if(Spieler[playerid][pTot] == 1)
		{
			SetPlayerPos(playerid, Spieler[playerid][pTotX], Spieler[playerid][pTotY], Spieler[playerid][pTotZ]);
			Streamer_UpdateEx(playerid, Spieler[playerid][pTotX], Spieler[playerid][pTotY], Spieler[playerid][pTotZ]);
			ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0,1); // Dieing of Crack
			SetPlayerCameraPos(playerid, Spieler[playerid][pTotX], Spieler[playerid][pTotY], Spieler[playerid][pTotZ]+5);
			SetPlayerCameraLookAt(playerid, Spieler[playerid][pTotX], Spieler[playerid][pTotY], Spieler[playerid][pTotZ]);
		    FreezePlayer(playerid);
		    //SendClientMessage(playerid,COLOR_WHITE,"SpawnPlayer()");
		    //SpawnPlayer(playerid);
		    Spieler[playerid][pTot] = 2;
		    return 1;
		}
		//Polizeiknast
		if(Spieler[playerid][pJailed] == 1)
		{
			new randSpawn = random(sizeof(lspdInterior_jailSpawnPoints));
			SetPlayerFacingAngle(playerid, 90.0);
			SetCameraBehindPlayer(playerid);
			SetPlayerPosEx(playerid, lspdInterior_jailSpawnPoints[randSpawn][ 0], lspdInterior_jailSpawnPoints[randSpawn][1], lspdInterior_jailSpawnPoints[randSpawn][2], MAPS_LSPDINTERIOR_INTERIOR, VW_LSPDINTERIOR);
			SetPVarInt(playerid, "JAIL.TIMESTAMP", gettime());
			SendClientMessage(playerid, COLOR_BLUE, "[INFO] Du kannst erst in 2 Minuten von einem Anwalt befreit werden.");
		    return 1;
		}
		//Hochsicherheitsgefängnis
		else if(Spieler[playerid][pJailed] == 2)
		{
			SetPlayerFacingAngle(playerid, ALCATRAZ_JAIL_SPAWN_FACING);
			SetCameraBehindPlayer(playerid);
			SetPlayerPosEx(playerid, ALCATRAZ_JAIL_SPAWN_POINT, MAPS_ALCATRAZ_INTERIOR, VW_MAIN);
			SendClientMessage(playerid, COLOR_RED, "Du wurdest aufgrund deiner schweren Verbrechen in das Alcatraz eingesperrt!");return 1;
		}
		// Admin Prison
		else if(Spieler[playerid][pJailed] == 3)
		{
			SetPlayerVirtualWorld(playerid, VW_ADMINPRISON);
			SetPlayerInterior(playerid, 10);
			SetPlayerPosEx(playerid, 264.7464, 109.6102, 1004.6172, 10, 0);
			return 1;
		}
		// GangJail
		else if(Spieler[playerid][pJailed] == 4)
		{
			SetPlayerInterior(playerid, 0);
      		SetPlayerPosEx(playerid, 2162.6523, -102.3127, 2.7500, 0, 0);
			SetTimerEx("SetPlayerPosEx", 131, false, "dfffdd", playerid, 2162.6523, -102.3127, 2.7500, 0, 0);
		    return 1;
		}
		if( Spieler[playerid][pPrisonRun] > 0 ) {
		    new String[128];
			format(String,sizeof(String),"[PRISON] Deine Strafe (Checkpoint-Lauf) wurde noch nicht beendet! %d/%d",Spieler[playerid][pPrisonRunCount],Spieler[playerid][pPrisonRun]);
			SendClientMessage(playerid,COLOR_RED,String);
			SetPlayerPrisonRun(playerid);
			return 1;
		}
		//Frakspawn

		/*if( IsValidSpawn(playerid) ) {
		    SetOldPlayerSpawn(playerid);
		    ResetPlayerSpawn(playerid);
		    return 1;
		}*/
        if(Spieler[playerid][pSpawnChange] == 0){
            SetPlayerPos(playerid, 798.4492,-1345.5676,-0.5078);
            SetPlayerInterior(playerid, 0);
            SetPlayerVirtualWorld(playerid, 0);
            Streamer_UpdateEx(playerid,798.4492,-1345.5676,-0.5078);
        }
		else if(Spieler[playerid][pSpawnChange] == 2)
		{
			if(Spieler[playerid][pFraktion] == 0)
			{
				SetPlayerPos(playerid, 798.4492,-1345.5676,-0.5078);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				Streamer_UpdateEx(playerid,798.4492,-1345.5676,-0.5078);
                Spieler[playerid][pSpawnChange] = 0;
			}
            for (new i; i < MAX_FACTIONS; i++)
            {
                if(Spieler[playerid][pFraktion] == g_fraktion[i][Fr_FrakID])
                {
                    SetPlayerPosEx(playerid, g_fraktion[i][Fr_WaffenX],g_fraktion[i][Fr_WaffenY],g_fraktion[i][Fr_WaffenZ], g_fraktion[i][Fr_Interior], g_fraktion[i][Fr_VW]);
                    SetPlayerFacingAngle(playerid, 90);
                    SetCameraBehindPlayer(playerid);
                }
            }
		}
		else if(Spieler[playerid][pSpawnChange] == 1)
		{
			new pHouse = GetPlayerHouse(playerid);
			new pHotel = Spieler[playerid][pPlayerHotel];
			if( pHouse == 999 )
			{
				if( pHotel != 999) {
					// Im Hotel spawnen
					SetPlayerInterior(playerid, Hotel[pHotel][hExitInterior]);
					SetPlayerVirtualWorld(playerid, pHotel + HOTEL_OFFSET_VW );
					SetPlayerPos(playerid, Hotel[pHotel][ExitX], Hotel[pHotel][ExitY], Hotel[pHotel][ExitZ]);
				}
				else {
					Spieler[playerid][pSpawnChange] = 0;
					SendClientMessage(playerid, COLOR_GREEN, "Deine Spawn-Position wurde wieder auf die normale Position gesetzt.");
					SetPlayerSpawn(playerid);
					return 1;
				}
			}
			else {
			    new index;
				index = GetHouseInteriorIndexByID( Haus[pHouse][HouseInteriorID] );
				SetPlayerInterior(playerid, g_HouseInterior[index][HI_iInterior]);

                SetPlayerVirtualWorld(playerid, pHouse );
                SetPlayerPos(playerid, g_HouseInterior[index][HI_fExitX], g_HouseInterior[index][HI_fExitY], g_HouseInterior[index][HI_fExitZ]);
            }
        }
        else if(Spieler[playerid][pSpawnChange] == 3){
            if(Spieler[playerid][pFraktion] != 14) {
                Spieler[playerid][pSpawnChange] = 0;
                SetPlayerPos(playerid, 798.4492,-1345.5676,-0.5078);
				SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				Streamer_UpdateEx(playerid,798.4492,-1345.5676,-0.5078);
            }else{
                SetPlayerPos(playerid, 1515.711791, -1457.327270, 9.5);
                SetPlayerInterior(playerid, 0);
				SetPlayerVirtualWorld(playerid, 0);
				Streamer_UpdateEx(playerid,1515.711791, -1457.327270, 9.5);
            }
        }
        if( Spieler[playerid][pHours] < 2 ) {
            SetPlayerAttachedObject( playerid, 2, 1210, 5, 0.293532, 0.103431, 0.007843, 340.256103, 257.806579, 0.000000, 1.000000, 1.000000, 1.000000 );
        }
    }
    DeletePlayerDropItem(playerid);
    {
        if( gPlayerLogged[playerid] == 0 ) {
            // Nicht eingeloggt aber gespawnt ??
            if( Spieler[playerid][bAccountExists] ) {
                ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, COLOR_HEX_LIGHTBLUE"Anmeldung:", COLOR_HEX_ORANGE"[LyD]\n\n"COLOR_HEX_WHITE"Willkommen zurück auf "COLOR_HEX_GREEN"LyD - Roleplay\n"COLOR_HEX_WHITE"Ein Account unter diesem Namen ist bei uns registriert!\nLogge Dich bitte nun mit deinem Passwort ein.\n \n"COLOR_HEX_ORANGE"Behalte dein Passwort immer für dich!\n"COLOR_HEX_RED">Passwort vergessen?< - kontaktiere uns: Admin@LyD-Roleplay.de", "Verbinden", "Disconnect");

                Spieler[playerid][tLoginTimeout] = SetTimerEx("PlayerLoginTimeout",90033,false,"d",playerid);
                Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",5003,false,"dd",playerid,1); // Muss,sonst klappt Spectate nicht
            }
            else {
                if(g_aSettings[ASETTING_REGBLOCK][ASETTING_TOGGLE]) {
                    static String[] = "\
                                    Wir begrüßen dich ganz Herzlich auf LyD!\n\
                                    Aus aktuellem Anlass ist eine Registrierung gerade nicht möglich.\n\
                                    Bitte melde Dich auf dem Teamspeak!\n\n\
                                    Ein Teammitglied hebt die Sperre gerne für Dich auf\n\n\
                                    Wir bitten vielmals um Verständnis!\n\n\
                                    Forum Adresse: www.LyD-Roleplay.de\n\
                                    Teamspeak: TS.LyD-Roleplay.de\n\
                                    User Panel: www.UCP.LyD-Roleplay.de\n\
                                    E-Mail: Admin@LyD-Roleplay.de";
                    ShowPlayerDialog(playerid, DIALOG_REGSPERRE, DIALOG_STYLE_MSGBOX, "{FF0000}Registrationssperre" , String, "Disconnect","");
                    Spieler[playerid][tLoginTimeout] = SetTimerEx("PlayerRegsperreKick",10011,false,"d",playerid);
                    for(new i;i<MAX_PLAYERS;i++)
                    {
                        if(Spieler[i][pAdmin]>=1)
                        {
                            SendClientMessage(i,COLOR_RED,"[ADMIN-INFO] Die Registrationssperre ist noch aktiviert!");
                        }
                    }
                }
                else {
                        new
                            String[512], header[128];
                        strcat(String,COLOR_HEX_WHITE"Wir begrüßen dich ganz Herzlich auf LyD!\n\n",sizeof(String));
                        strcat(String,"Wir freuen uns, dass Du den Weg zu uns gefunden hast! Lege Dir bitte zunächst einen Account an\n",sizeof(String));
                        strcat(String,"Um Dir den Einstieg zu erleichtern, erhältst du einen kurzen Überblick\n",sizeof(String));
                        strcat(String,"Dies nimmt nur etwa 2 Minuten in Anspruch.\n",sizeof(String));
                        strcat(String,"Sollten dennoch Fragen offen bleiben, hilft Dir gerne ein Teamler unter /sup weiter.\n\n",sizeof(String));
                        strcat(String,"Um nun durchzustarten, drücke bitte auf 'Erstellen' ",sizeof(String));
                        format(header,sizeof(header),COLOR_HEX_LIGHTBLUE "Der Spielername %s ist noch frei!",GetName(playerid));
                        ShowPlayerDialog(playerid, DIALOG_REG_STEP_1, DIALOG_STYLE_MSGBOX, header , String, "Erstellen", "Disconnect");
                    /*strcat(String,COLOR_HEX_WHITE"Wir begrüßen dich ganz Herzlich auf LyD!\n",sizeof(String));
                    strcat(String,"\nAus aktuellem Anlass ist eine Registrierung am heutigen Tag nicht möglich.\n",sizeof(String));
                    strcat(String,"Schau doch einfach morgen nochmal vorbei!\n\nWir bitten vielmals um Verständnis!\n",sizeof(String));
                    strcat(String,"\nForum Adresse: www.LyD-Roleplay.de\nTeamspeak: TS.LyD-Roleplay.de\n",sizeof(String));
                    strcat(String,"User Panel: www.UCP.LyD-Roleplay.de\nE-Mail: Admin@LyD-Roleplay.de",sizeof(String));
                    format(header,sizeof(header),COLOR_HEX_LIGHTBLUE "LyD - ROLEPLAY");
                    ShowPlayerDialog(playerid, DIALOG_REG_STEP_1, DIALOG_STYLE_MSGBOX, header , String, "OK", "-");
                    KickDelay(playerid);*/
                }
            }
        }
    }
    return 1;
}

public OnPlayerTot(playerid)
{
    if(Spieler[playerid][pTot] == 2)
    {
        /*SetPlayerPos(playerid,Spieler[playerid][pTotX],Spieler[playerid][pTotY],Spieler[playerid][pTotZ]);
        SetPlayerCameraPos(playerid, Spieler[playerid][pTotX], Spieler[playerid][pTotY], Spieler[playerid][pTotZ]+5);
        SetPlayerCameraLookAt(playerid, Spieler[playerid][pTotX], Spieler[playerid][pTotY], Spieler[playerid][pTotZ]);*/
        if(Spieler[playerid][pTotTime] > 0)
        {
            if(isTotInGF[playerid] == 1){
                SetPlayerPosEx(playerid, 1152.8165, -1341.2827, 13.9058, 0, 0);
                SetPlayerCameraPos(playerid, 1154.1194, -1381.8311, 18.5110);
                SetPlayerCameraLookAt(playerid, 1153.4645, -1347.6658, 19.4843);              
            }
            if(Spieler[playerid][aufgenommen] == 1){
	            if(IsPlayerInRangeOfPoint(playerid, 10.0, 1463.9080, -1063.1261, 23.8477) || IsPlayerInRangeOfPoint(playerid, 10.0, 1185.7225,-1323.6067,13.5590) || IsPlayerInRangeOfPoint(playerid, 10.0, 2002.5291,-1445.5175,13.5615)){
                    PlayAudioStreamForPlayer(playerid, SOUND_HOSPITAL);
					new Float:x, Float:y, Float:z, Float:distance, Float:smallestDistance = 10000, index = 0, String[128], string[128];
					format(String, sizeof(String), "* Patienten %s wurde ins Krankenhaus abgeliefert.", GetName(playerid));
					SendRoundMessage(x, y, z, COLOR_PURPLE, String);
					format(string, sizeof(string), "[NOTRUFZENTRALE] Verletzter %s wurde wiederbelebt.", GetName(playerid));
	    			SendFraktionMessage(3, COLOR_YELLOW, string);
	    			Spieler[playerid][aufgenommen] = 0;
					DisablePlayerCheckpointEx(playerid);
					GetPlayerPos(playerid,x,y,z);

                    for (new i = 0; i < sizeof(HOSPITAL_Player_POS); i++)
					if ((distance = GetDistance(x, y, z, HOSPITAL_Player_POS[i][0], HOSPITAL_Player_POS[i][1], HOSPITAL_Player_POS[i][2])) < smallestDistance) index = i, smallestDistance = distance;
					SetPlayerPos(playerid, HOSPITAL_Player_POS[index][0], HOSPITAL_Player_POS[index][1], HOSPITAL_Player_POS[index][2]);

					for (new i = 0; i < sizeof(HOSPITAL_CAMERA_POS); i++)
					if ((distance = GetDistance(x, y, z, HOSPITAL_CAMERA_POS[i][0], HOSPITAL_CAMERA_POS[i][1], HOSPITAL_CAMERA_POS[i][2])) < smallestDistance) index = i, smallestDistance = distance;
					SetPlayerCameraPos(playerid, HOSPITAL_CAMERA_POS[index][0], HOSPITAL_CAMERA_POS[index][1], HOSPITAL_CAMERA_POS[index][2]);

					for (new i = 0; i < sizeof(HOSPITAL); i++)
					if ((distance = GetDistance(x, y, z, HOSPITAL[i][0], HOSPITAL[i][1], HOSPITAL[i][2])) < smallestDistance) index = i, smallestDistance = distance;
                    SetPlayerCameraLookAt(playerid, HOSPITAL[index][0], HOSPITAL[index][1], HOSPITAL[index][2]);
					ShowPlayerDialog(playerid, DIALOG_REVIVE_SPAWN, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Spawnpunkt wählen", COLOR_HEX_WHITE"Gesetzter Spawnpunkt\nKrankenhaus", "Ausführen", "Abbrechen");
				}
			}
            Spieler[playerid][pTotTime] -= 1;
            if(Spieler[playerid][aufgenommen] == 0){
            	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0,1); // Dieing of Crack
           	}
        }
        else
        {
            SetPlayerHealth(playerid,100);
            Spieler[playerid][pTotTime] = 0;
            Spieler[playerid][pTot] = 0;
            isTotInGF[playerid] = 0;
            SpawnPlayerEx(playerid);
        }
    }
    return 1;
}

public OnPlayerMute(playerid)
{
    // if(IsPlayerConnected(playerid) && gPlayerLogged[playerid] == 1) Wird bereits in Haupttimer geprüft
    {
        if(Spieler[playerid][pMuted] > 0)
        {
            if(Spieler[playerid][pMuteTime] > 0)
            {
                Spieler[playerid][pMuteTime] -= 1;
            }
            else
            {
                Spieler[playerid][pMuted] = 0;
                SendClientMessage(playerid, COLOR_RED, "Du bist nun nicht mehr gemutet!");
            }
        }
    }
    return 1;
}

public OnPlayerJail(playerid)
{
	// if(IsPlayerConnected(playerid) && gPlayerLogged[playerid] == 1) Wird bereits in Haupttimer geprüft
	{
		if( ( 0 < Spieler[playerid][pJailed] <= 3 ) )
		{
			if(Spieler[playerid][pJailTime] > 0)

			   Spieler[playerid][pJailTime] -= 1;

			else
			{
			    Spieler[playerid][pJailed] = 0;
				AnwaltPreis[playerid] = 0;
				AnwaltID[playerid] = 999;
			    GameTextForPlayer(playerid, "~g~Freiheit! Benimm dich in Zukunft!", 4000, 1);
				NeedAWALT[playerid] = 0;
			    SetPlayerFacingAngle(playerid, LSPD_INTERIOR_ENTER_FACING);
			    SetCameraBehindPlayer(playerid);
			    SetPlayerPosEx(playerid, LSPD_INTERIOR_ENTER_COORDS, MAPS_LSPDEXTERIOR_INTERIOR, VW_MAIN);
				paydaywait[playerid]=0;
			}
		}
	}
	return 1;
}



public OnPlayerDeath(playerid, killerid, reason)
{
    RemovePlayerAttachedObject(playerid, 0);

    if (!PlayerIsPaintballing[playerid]) ClearPlayerChat(playerid);
    //RemovePlayerFromVehicle(playerid);
    if (reason == 255) return 0;

    //PB START
    new pID = paintballInfo[playerid][E_PB_INFO_PARTNER];
    switch (paintballInfo[playerid][E_PB_INFO_STATUS]) {
        //case PAINTBALL_STATUS_NONE: return 1;
        case PAINTBALL_STATUS_MENU: {
            new temp[E_PB_INFO];
            paintballInfo[playerid] = temp;
            ClosePlayerDialog(playerid);
        }
        case PAINTBALL_STATUS_1V1: {
            //if (killerid == INVALID_PLAYER_ID) return -1;

            //bPaintball = true;

            paintballInfo[playerid][E_PB_INFO_DEATHS]++;
            paintballInfo[pID][E_PB_INFO_KILLS]++;
            SpawnPlayer(playerid);
            GivePlayerPaintballWeapons(pID);
            SendDeathMessageToPlayer(pID, pID, playerid, reason);
            SendDeathMessageToPlayer(playerid, pID, playerid, reason);

            new tdString[128];
            format(tdString, sizeof(tdString), "~g~~h~%s ~w~~h~%i : %i ~r~~h~%s", GetName(pID), paintballInfo[pID][E_PB_INFO_KILLS], 
                paintballInfo[pID][E_PB_INFO_DEATHS], GetName(playerid));
            PlayerTextDrawSetString(pID, paintballInfo[pID][E_PB_INFO_TEXTDRAW], tdString);

            format(tdString, sizeof(tdString), "~g~~h~%s ~w~~h~%i : %i ~r~~h~%s", GetName(playerid), paintballInfo[playerid][E_PB_INFO_KILLS], 
                paintballInfo[playerid][E_PB_INFO_DEATHS], GetName(pID));
            PlayerTextDrawSetString(playerid, paintballInfo[playerid][E_PB_INFO_TEXTDRAW], tdString);
            return -1;
        }
        case PAINTBALL_STATUS_INVITE: {
            new temp[E_PB_INFO];
            paintballInfo[playerid] = temp;
            paintballInfo[pID] = temp;
            ClosePlayerDialog(playerid);
            ClosePlayerDialog(pID);
            SCMFormatted(pID, COLOR_RED, "[Paintball] {FFFFFF}%s hat die Anfrage zu einem 1v1-Match zurückgezogen.", GetName(playerid));
        }
        case PAINTBALL_STATUS_INVITED: {
            new temp[E_PB_INFO];
            paintballInfo[playerid] = temp;
            paintballInfo[pID] = temp;
            ClosePlayerDialog(playerid);
            ClosePlayerDialog(pID);
            SCMFormatted(pID, COLOR_RED, "[Paintball] {FFFFFF}%s hat die Anfrage zu einem 1v1-Match abgelehnt.", GetName(playerid));
        }
    }

    //PB ENDE

    new bGangfight = 0, bGangOnGangKill = 0, bool:bPaintball = false, bBizfight = 0;
    new string[128], Float:x, Float:y, Float:z, caller;

	if(bPurgeEvent) {
	    Spieler[playerid][pTotTime] = 10;
	}
	else {
    	Spieler[playerid][pTotTime] = IsMedicOnDuty() ? 120 : 60;
	}

    if(wtid == playerid){
        new String[128];
        format(String, sizeof(String), "[WT] Die Waffenteilmission ist gescheitert! Mitglied %s ist gestorben!", GetName(playerid));
        SendFraktionMessage(15, COLOR_RED, String);
        for(new i; i < MAX_VEHICLES; i++){
            new vehiclemodel = GetVehicleModel(i);
            if(vehiclemodel == 499 && FrakCarInfo[i][f_frak] == 15){
                bestand[i] = 0;
            }
        }
        Delete3DTextLabel(terrorVehLabel);
        Delete3DTextLabel(terrorBootLabel);
        bestand[speederID] = 0;
        DestroyVehicle(speederID);
        DisablePlayerCheckpointEx(playerid);
        wtstatus = false;
        wtid = -1;
    }

    //Robbing_OnPlayerDeath(playerid);
    GetPlayerPos(playerid, x, y, z);
    Spieler[playerid][pTot] = 1;
    Spieler[playerid][pTotX] = x;
    Spieler[playerid][pTotY] = y;
    Spieler[playerid][pTotZ] = z;
    SetPlayerHealth(playerid,20);

    KillTimer(Spieler[playerid][tKidnap]);
    Spieler[playerid][tKidnap] = INVALID_TIMER_ID;
    bBizfight = BF_OnPlayerDeath(playerid,killerid,reason);
    bGangfight = GZ_OnPlayerDeath(playerid,killerid,reason);
    if( bGangfight || bBizfight) {
        Spieler[playerid][pTotTime] = 20;

        isTotInGF[playerid] = 1;

        if(IsPlayerInAnyVehicle(playerid)){
            RemovePlayerFromVehicle(playerid);
        }

        SetPlayerPosEx(playerid, 1152.8165, -1341.2827, 13.9058, 0, 0);
        SetPlayerCameraPos(playerid, 1154.1194, -1381.8311, 18.5110);
        SetPlayerCameraLookAt(playerid, 1153.4645, -1347.6658, 19.4843);

    }else{
        isTotInGF[playerid] = 0;
    }
    if( IsAFightFaction( Spieler[playerid][pFraktion] ) ) {
        if( killerid != INVALID_PLAYER_ID ) {
            if( IsAFightFaction( Spieler[killerid][pFraktion] ) ) {
                bGangOnGangKill = 1;
            }
        }
    }
    /* if( IsPlayerInWantedKillZone(killerid) ) {
        bWantedKillZone = 1;
    } */

    if(GetPVarInt(playerid, "WAFFENDEALER")) {
		DeletePVar(playerid, "WAFFENDEALER");
        KillTimer(WTMeldung[playerid]);
        KillTimer(CheckWVehicle[playerid]);
        DisablePlayerCheckpointEx(playerid);
        
        format(string, sizeof(string),"HQ: AN ALLE EINHEITEN, %s ist während seiner Waffenteile-Tour gestorben - Die Jagd wird beendet.", GetName(playerid));
        SendFraktionMessage(1, COLOR_DARKRED, string);
        SendFraktionMessage(2, COLOR_DARKRED, string);
        SendFraktionMessage(16, COLOR_DARKRED, string);
    }
    
    if(GetPVarInt(playerid, "SPRITROB")) {
        format(string,sizeof(string),"Fraktionsmitglied %s ist bei dem Sprit-Raub gestorben und hat die Mission nicht geschafft!",GetName(playerid));
        SendFraktionMessage(15, COLOR_YELLOW, string);
        
		DeletePVar(playerid, "SPRITROB");
		DeletePVar(playerid, "STARTSPRIT");
		DeletePVar(playerid, "SPRITMENGE");
		KillTimer(SpritTimer[playerid]);
        KillTimer(SpritCheckTimer[playerid]);

        format(string, sizeof(string), "[EILMELDUNG] Räuber %s ist gestorben! Somit wurde der Sprit-Raub abgebrochen!", GetName(playerid), playerid);
        SendFraktionMessage(1, COLOR_GREEN, string);
        SendFraktionMessage(2, COLOR_GREEN, string);
        SendFraktionMessage(16, COLOR_GREEN, string);
        SendFraktionMessage(18, COLOR_GREEN, string);
        SendFraktionMessage(22, COLOR_GREEN, string);

        spritstatus = false;
    }
    
    if(GetPVarInt(playerid, "OPEN.AIRDROP")) {
        DeletePVar(playerid, "OPEN.AIRDROP");
        new stringin[128], name[MAX_PLAYER_NAME];
		GetPlayerName(playerid, name, sizeof(name));
		SendClientMessage(playerid,COLOR_RED,"Du bist gestorben! Der AirDrop wird nicht mehr geöffnet.");
		format(stringin,sizeof(stringin),"[AIRDROP] "COLOR_HEX_WHITE"%s hat es nicht geschafft, den AirDrop zu öffnen!", name);
		for(new i; i < MAX_PLAYERS; i++){
			if(IsAFightFaction(Spieler[playerid][pFraktion])) SendClientMessage(i, COLOR_YELLOW, stringin);
		}
		AirDropWirdGeoeffnet = false;
		KillTimer(Gewinn[playerid]);
	}
	if(GetPVarInt(playerid, "ROB.NINEDEMONS")) {
		new
		    String[128];
		SendClientMessage(playerid,COLOR_RED,"Du bist gestorben! Der Raub wurde abgebrochen.");
		format(String,sizeof(String),"Achtung! Eure Kammer wird nicht mehr ausgeraubt. %s ist gestorben.",GetName(playerid));
		SendFraktionMessage(15,COLOR_RED,String);
		KillTimer(g_tPulseRobPosition);
		g_tPulseRobPosition = INVALID_TIMER_ID;
		RemovePlayerAttachedObject(playerid,0);
		new Float:fX, Float:fY, Float:fZ;
		GetDynamicObjectPos(object_nineDemonsInterior_door, fX, fY, fZ);
		MoveDynamicObject(object_nineDemonsInterior_door, fX, NINEDEMONS_INTERIOR_SAFEBOX_ROOM_DOOR_CLOSED_Y, fZ, 1.0); // close ninedemons door
		Pulse_NDRob();
		ndrobspawn[15]=0;
		DeletePVar(playerid, "ROB.NINEDEMONS");
	}

    if( Spieler[playerid][tTankeUnix] != 0 ) {
        Tankstelle_Ueberfall_Stop(playerid,-1,2);
    }
    DropWeapon( playerid );
    ResetPlayerWeapons(playerid);

    if( IsPlayerConnected( g_PolizeiPartner[playerid][PP_iPartner] ) ) {
        if( g_PolizeiPartner[playerid][PP_iStatus] == PolizeiPartner_Active ) {
            new partner, String[128];
            partner = g_PolizeiPartner[playerid][PP_iPartner];
            format(String,sizeof(String),"Dein Streifenpartner %s ist tot!",GetName(playerid));
            SendClientMessage( partner , COLOR_RED, String);
            ClearPolizeiPartner( partner );
            ClearPolizeiPartner( playerid );
            SetPlayerMarkerForPlayer(playerid,partner,0xFFFFFF00);
            SetPlayerMarkerForPlayer(partner,playerid,0xFFFFFF00);
        }
    }

    if( killerid != INVALID_PLAYER_ID ) 
    {
        if( Spieler[killerid][pFraktion] == 14 ) 
        {
            new opfer, auftraggeber;
            auftraggeber = Spieler[killerid][pHitmenAuftragID];
            if( auftraggeber != INVALID_PLAYER_ID ) 
            {
                opfer = Spieler[auftraggeber][pKopfgeldID];
                if( opfer == playerid ) {
                    new kopfgeld, String[128];
                    kopfgeld = Spieler[auftraggeber][pKopfgeld];
                    KillSperre[opfer] ++;
                    format(String,sizeof(String),"Du hast die Zielperson %s erfolgreich getötet. Kopfgeld: $%s",GetName(playerid), AddDelimiters(kopfgeld));
                    SendClientMessage(killerid,COLOR_GREEN,String);
                    format(String,sizeof(String),"Ein Auftragskiller hat deinen Kill-Auftrag auf %s erfolgreich ausgeführt!",GetName(playerid));
                    SendClientMessage(auftraggeber,COLOR_GREEN,String);
                    SendClientMessage(opfer,COLOR_RED,"Ein Auftragskiller hat dich getötet. Jemand hat ein Kopfgeld gegen dich gesetzt.");
                    // Geld in Fraktionskasse schieben
                    Kasse[Hitman] += Spieler[auftraggeber][pKopfgeld];
                    Spieler[killerid][pCash] += 10000;
                    GameTextForPlayer(killerid, "~g~Provision $10.000", 2000, 1);
                    Spieler[killerid][pHitmenAuftragID] = INVALID_PLAYER_ID;
                    Spieler[auftraggeber][pKopfgeldStatus] = false;
                    Spieler[auftraggeber][pKopfgeldID] = INVALID_PLAYER_ID;
                    Spieler[auftraggeber][pKopfgeld] = 0;
                    Spieler[opfer][pTot] = 1;
                }
            }
        }
        if( PlayerIsPaintballing[killerid] == 1 ) {
            bPaintball = true;
            PKillstreak(playerid, killerid);
            for (new i = 0; i <= GetMaxPlayers(); i++) if (PlayerIsPaintballing[i]) SendDeathMessageToPlayer(i, killerid, playerid, reason);
        }
    }
    if( HasPlayerChecks(playerid) ) {
        SendClientMessage(playerid,COLOR_RED,"Du bist gestorben! Dein(e) Geldcheck(s) ist/sind dir bevor du ihn auslösen konntest verloren gegangen!");
        ResetPlayerCheck(playerid);
    }
    caller = CurrentPhone[playerid];
    if(caller != 999)
    {
        if(caller < 999)
        {
            SendClientMessage(caller, COLOR_GREY, "Die Leitung ist tot...");
            CurrentPhone[caller] = 999;
        }
        CurrentPhone[playerid] = 999;
    }

    if (reason != 255) SpawnPlayer(playerid);

    if(Spieler[playerid][pJailed] == 1)
    {
        Spieler[playerid][pTot] = 0;
        Spieler[playerid][pTotTime] = 0;
        return 1;
    }
    if( !PlayerIsPaintballing[playerid] ) {
        Store_PlayerWeapons(playerid);
    }

    if (killerid != INVALID_PLAYER_ID && !bPaintball)
        Spieler[killerid][pKills]++;

    if(killerid != INVALID_PLAYER_ID && !bPaintball && !bGangfight && !bBizfight)
    {
        new sWeapon[32], String[128];

        GetWeaponNameEx(reason,sWeapon,sizeof(sWeapon));

        format(String,sizeof(String),"%s wurde von %s ermordet! Tatwaffe: %s",GetName(playerid),GetName(killerid),sWeapon );
        SendAdminMessage(COLOR_RED,String);
        format(String,sizeof(String),"%s wurde von\n%s ermordet!",GetName(playerid),GetName(killerid));
        if(Spieler[killerid][bMaske]==true)
        {
            format(String,sizeof(String),"%s wurde von\n<Unbekannt> ermordet!",GetName(playerid));
        }
        else if(Spieler[playerid][bMaske]==true)
        {
            format(String,sizeof(String),"<Unbekannt> wurde von\n %s ermordet!",GetName(killerid));
            Spieler[playerid][pTot] = 0;
            Spieler[playerid][pTotTime] = 0;
            DisablePlayerCheckpointEx(playerid);
            UnfreezePlayer(playerid);
            SetCameraBehindPlayer(playerid);
            ResetPlayerWeapons(playerid);
            ReStore_PlayerWeapons(playerid);
            SpawnPlayer(playerid);
        }
        if( AddDeathIcon( String, x , y, z+0.1, GetPlayerInterior(playerid) , GetPlayerVirtualWorld(playerid) ) ) {
            format(String,sizeof(String),"[POLIZEIZENTRALE] %s wurde ermordet, eine Streife bitte zum Tatort!",GetName(playerid));
            SendFraktionMessage(16, COLOR_RED, String);
        }
        if( Spieler[killerid][pLevel] <= 2 ) {
            format(String,sizeof(String),"ACHTUNG! Neuling %s(ID:%d) hat Spieler %s ermordet",GetName(killerid),killerid,GetName(playerid));
            SendAdminMessage(COLOR_RED,String);
        }
       	if(Spieler[killerid][pFraktion] == 1 || Spieler[killerid][pFraktion] == 2 || Spieler[killerid][pFraktion] == 16 || Spieler[killerid][pFraktion] == 18 || Spieler[killerid][pFraktion] == 22 && !PlayerIsPaintballing[killerid])
        {
            if(Spieler[playerid][pWanteds] > 0)
            {
                Spieler[playerid][pTot] = 0;
                Spieler[playerid][pTotX] = 0.0;
                Spieler[playerid][pTotY] = 0.0;
                Spieler[playerid][pTotZ] = 0.0;
                Spieler[playerid][pTotTime] = 0;
                new pGehalt = (500*Spieler[playerid][pWanteds]);
                new pStaatGehalt = (3000*Spieler[playerid][pWanteds]);
                TreasuryDeposit(pStaatGehalt);
                Spieler[killerid][pPayCheck] += pGehalt;
                format(string, sizeof(string), "~r~Fluchttaeter ~g~getoetet~n~+$%s", AddDelimiters(pGehalt));
                GameTextForPlayer(killerid, string, 3000, 6);
                format(string, sizeof(string), "HQ: %s %s hat den Fluchttäter %s überführen können, over.", GetPlayerExecutiveName(killerid), GetName(killerid), Spieler[playerid][bMaske] ? "<Unbekannt>" : GetName(playerid));
                SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                format(string, sizeof(string), ">> %s %s hat den Verbrecher %s%s überführen können! <<", GetPlayerExecutiveName(killerid), GetName(killerid), Spieler[playerid][bMaske] ? "<Unbekannt>" : GetName(playerid), Spieler[playerid][pWanteds] > ALCATRAZ_WANTEDS ? " ins Alcatraz" : "");
                SendClientMessageToAll(COLOR_DARKRED, string);
                if( Spieler[playerid][pWanteds] >= ALCATRAZ_WANTEDS ) {
                    Spieler[playerid][pJailed] = 2;
                }
                else {
                    Spieler[playerid][pJailed] = 1;
                }
                Spieler[playerid][pJailTime] = 80*Spieler[playerid][pWanteds];
                Spieler[playerid][pWanteds] = 0;
                Spieler[playerid][pWantedDeaths] ++;
                GivePlayerCash(playerid, -pGehalt);
                return 1;
            }
        }
        if(!(Spieler[killerid][pFraktion] == 1 || Spieler[killerid][pFraktion] == 2 || Spieler[killerid][pFraktion] == 16 || Spieler[killerid][pFraktion] == 18 || Spieler[killerid][pFraktion] == 22))
        {
            new sOrt[MAX_ZONE_NAME];
            GetPlayer2DZone(playerid,sOrt,sizeof(sOrt));

            if(bPurgeEvent) {
                SendClientMessage(killerid,COLOR_RED,"[PURGE] "COLOR_HEX_WHITE"Aufgrund des Purge-Events erhältst du keine Wanteds für den Mord.");
            }
            else 
            {
                if( bGangOnGangKill ) 
                {
                    Spieler[killerid][pWanteds] += 1;
                    SendClientMessage(killerid, COLOR_DARKRED,"Du hast ein Verbrechen begangen! (Mord an einem Gangmitglied) Reporter: Polizeizentrale");
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[killerid][pWanteds]);
                    SendClientMessage(killerid, COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: %s (ID: %d) hat ein Verbrechen begangen: Mord an einem Gangmitglied in %s - Tatwaffe: %s, over.", GetName(killerid), killerid,sOrt,sWeapon);
                }
                else if( Spieler[killerid][bMaske] == true)
                {
                    Spieler[killerid][pWanteds] += 1;
                    SendClientMessage(killerid, COLOR_DARKRED,"Du hast ein Verbrechen begangen! (Beamten/Zivilisten Mord) Reporter: Polizeizentrale");
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[killerid][pWanteds]);
                    SendClientMessage(killerid, COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: Unbekannt hat ein Verbrechen begangen: Beamten-/Zivilisten Mord in %s - Tatwaffe: %s, over.", killerid,sOrt,sWeapon);
                }
                else 
                {
                    Spieler[killerid][pWanteds] += 3;
                    SendClientMessage(killerid, COLOR_DARKRED,"Du hast ein Verbrechen begangen! (Beamten/Zivilisten Mord) Reporter: Polizeizentrale");
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[killerid][pWanteds]);
                    SendClientMessage(killerid, COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: %s (ID: %d) hat ein Verbrechen begangen: Beamten-/Zivilisten Mord in %s - Tatwaffe: %s, over.", GetName(killerid), killerid,sOrt,sWeapon);
                }
                print(String);
                SendFraktionMessage(1, COLOR_LIGHTRED, string);
                SendFraktionMessage(2, COLOR_LIGHTRED, string);
                SendFraktionMessage(16, COLOR_LIGHTRED, string);
                SendFraktionMessage(18, COLOR_LIGHTRED, string);
                SendFraktionMessage(22, COLOR_LIGHTRED, string);
                format(string, sizeof(string), "HQ: Reporter: Polizeizentrale, Aktuelles Wantedlevel: %d, over.", Spieler[killerid][pWanteds]);
                SendFraktionMessage(1, COLOR_LIGHTRED, string);
                SendFraktionMessage(2, COLOR_LIGHTRED, string);
                SendFraktionMessage(16, COLOR_LIGHTRED, string);
                SendFraktionMessage(18, COLOR_LIGHTRED, string);
                SendFraktionMessage(22, COLOR_LIGHTRED, string);
            }
        }
    }
    if(!bPaintball) {
        GivePlayerCash(playerid, -500);
        Spieler[playerid][pDeaths]++;
        if(!bGangfight && !kampfzone[1] && !bBizfight) {
            if(GetPlayerVirtualWorld(playerid) == 0){
	            SendClientMessage(playerid,COLOR_YELLOW,"Du bist schwer verletzt! Die Sanitäter wurden bereits informiert.");
	            new
	            	String[128];
	            format(String,sizeof(String),"[NOTRUFZENTRALE] %s (ID: %d) ist sehr verletzt und benötigt dringende Hilfe. Benutze: /Sfinden!",GetName(playerid),playerid);
	            SendFraktionMessage(3, COLOR_LIGHTRED, String);
			}else{
			    Spieler[playerid][pTotTime] = 40;
				SendClientMessage(playerid, COLOR_RED, "Da du in einem Interior gestorben bist, wurde kein Notruf abgesetzt! (Totzeit: 40 Sekunden)");
			}
        }
        SetPlayerPos(playerid,Spieler[playerid][pTotX],Spieler[playerid][pTotY],Spieler[playerid][pTotZ]);
        SetPlayerCameraPos(playerid, Spieler[playerid][pTotX], Spieler[playerid][pTotY], Spieler[playerid][pTotZ]+5);
        SetPlayerCameraLookAt(playerid, Spieler[playerid][pTotX], Spieler[playerid][pTotY], Spieler[playerid][pTotZ]);
    }
    if(kampfzone[1])
	{
	    if(IsPlayerInDynamicArea(playerid, kampfzone[3]))
	    {
		    if(IsAFightFaction(Spieler[playerid][pFraktion]) && IsAFightFaction(Spieler[killerid][pFraktion]))
		    {
		        if(Spieler[killerid][pFraktion] == Spieler[playerid][pFraktion])
		        {
		           	kampfzonePoints[Spieler[killerid][pFraktion]]--;
		        }else{
		        	kampfzonePoints[Spieler[killerid][pFraktion]]++;
		        }
		    	Spieler[playerid][pTotTime] = 30;
		    	new killerfraktion;
		    	killerfraktion = Spieler[killerid][pFraktion];
				SCMFormatted(playerid, COLOR_YELLOW,"->KAMPFZONE<- {0088FF}%s der %s hat dich in der Kampfzone getötet.",GetName(killerid),GetFactionNameOfFaction(killerfraktion));
				SCMFormatted(killerid, COLOR_YELLOW,"->KAMPFZONE<- {0088FF}Du hast %s der %s in der Kampfzone getötet.",GetName(playerid),GetFactionNameOfFaction(Spieler[playerid][pFraktion]));
			}
		}
	}
    
    if(isTotInGF[playerid] == 1){

        if(IsPlayerInAnyVehicle(playerid)){
            RemovePlayerFromVehicle(playerid);
        }

        SetPlayerPosEx(playerid, 1152.8165, -1341.2827, 13.9058, 0, 0);
        SetPlayerCameraPos(playerid, 1154.1194, -1381.8311, 18.5110);
        SetPlayerCameraLookAt(playerid, 1153.4645, -1347.6658, 19.4843);             
    }

    if (Spieler[playerid][pFraktion] == Spieler[killerid][pFraktion] || g_fraktion[Spieler[killerid][pFraktion]][Fr_Partner] == Spieler[playerid][pFraktion]) return 1;
    if (PlayerIsPaintballing[playerid] || PlayerIsPaintballing[killerid]) return 1;
    if (IsAFightFaction(Spieler[playerid][pFraktion]) && IsAFightFaction(Spieler[killerid][pFraktion])) {
        new fightid = GetGangFight(Spieler[playerid][pFraktion]);
        new bizid = GetBizfightID(Spieler[playerid][pFraktion]);
        if ((fightid != GetGangFight(Spieler[killerid][pFraktion]) || fightid == -1) && (bizid != GetBizfightID(Spieler[killerid][pFraktion]) || bizid == -1)) {
            new message[128];
            format(message, sizeof(message), "[Streetwar] {FFFFFF}%s %s hat %s (%s) getötet.", GetRankName(Spieler[killerid][pFraktion], Spieler[killerid][pRank]), GetName(killerid), GetName(playerid), factionNames[Spieler[playerid][pFraktion]]);
            GameTextForPlayer(killerid, "+1 Streetwarkill", 3000, 4);
            SendFraktionMessage(Spieler[killerid][pFraktion], COLOR_DARKGREEN, message);
            format(message, sizeof(message), "[Streetwar] {FFFFFF}%s %s wurde von %s (%s) getötet.", GetRankName(Spieler[playerid][pFraktion], Spieler[playerid][pRank]), GetName(playerid), GetName(killerid), factionNames[Spieler[killerid][pFraktion]]);
            SendFraktionMessage(Spieler[playerid][pFraktion], COLOR_RED, message);
            SW_score[Spieler[killerid][pFraktion]]++;
            Spieler[killerid][pKillsStreetwar]++;
            GivePlayerCash(killerid, 450);
        }
    }
    
    return 1;
}

forward HITMAN_SKIN(playerid);
public HITMAN_SKIN(playerid) {
	SetPlayerSkin(playerid, oldskin[playerid]);
	SendClientMessage(playerid, COLOR_YELLOW, "[INFO] "COLOR_HEX_WHITE"Du hast deinen alten Skin zurück bekommen.");
	return 1;
}

forward NotrufDialog(playerid);
public NotrufDialog(playerid) {
    ShowPlayerDialog(playerid,DIALOG_NOTRUF,DIALOG_STYLE_MSGBOX,"Rettungsdienst-Notruf","Du bist schwer verletzt! Wenn du ein Notarzt benötigst, dann drücke auf \"Notruf\"","Notruf","Abbrechen");
    return 1;
}

public CREATEFRAKCAR(veh) {
    FrakCarInfo[veh][f_dbid] = cache_insert_id(gSQL);
	return 1;
}

public OnVehicleSpawn(vehicleid) {
    //printf("OnVehicleSpawn(%d)",vehicleid);
    vehicleRefueling[vehicleid] = 0;
    if( g_aiVehicleSirene[vehicleid][0] != INVALID_OBJECT_ID ) {
        DestroyDynamicObject(g_aiVehicleSirene[vehicleid][0]);
        g_aiVehicleSirene[vehicleid][0] = INVALID_OBJECT_ID;
        DestroyDynamicObject(g_aiVehicleSirene[vehicleid][1]);
        g_aiVehicleSirene[vehicleid][1] = INVALID_OBJECT_ID;
        DestroyDynamicObject(g_aiVehicleSirene[vehicleid][2]);
        g_aiVehicleSirene[vehicleid][2] = INVALID_OBJECT_ID;
        DestroyDynamicObject(g_aiVehicleSirene[vehicleid][3]);
        g_aiVehicleSirene[vehicleid][3] = INVALID_OBJECT_ID;
    }

	if( FrakCarInfo[vehicleid][f_sperre] == true ) {
	    SetVehiclePos(vehicleid, FrakCarInfo[vehicleid][fA_x], FrakCarInfo[vehicleid][fA_y], FrakCarInfo[vehicleid][fA_z]);
		SetTimerEx("SetVehicleZAngleEx",350,false,"df",vehicleid,FrakCarInfo[vehicleid][fA_angle]);
	}
    if(vehicleid == FrakCarInfo[vehicleid][f_veh]) SetTimerEx("FCarTuning", 700,0, "i",vehicleid);

    DestroyBlinker(vehicleid, 0);
    DestroyBlinker(vehicleid, 1);
    //Gears_OnVehicleSpawn(vehicleid);

    if( _:g_t3dPolizeiKontrolle[vehicleid] != INVALID_3DTEXT_ID ) {
        Delete3DTextLabel( g_t3dPolizeiKontrolle[vehicleid] );
        g_t3dPolizeiKontrolle[vehicleid] = Text3D:INVALID_3DTEXT_ID;
    }
    if( _:g_t3dTaxi[vehicleid] != INVALID_3DTEXT_ID ) {
        Delete3DTextLabel( g_t3dTaxi[vehicleid] );
        g_t3dTaxi[vehicleid] = Text3D:INVALID_3DTEXT_ID;
    }
    ResetKofferraum(vehicleid);
    g_fVehicleHealth[vehicleid] = 1000.0;
    //g_iVehicleFixNotification{vehicleid} = 0;
    //g_iVehicleBrokeNotification{vehicleid} = 0;
    g_iVehicleFixNotation{vehicleid} = 0;
    if( GetVehicleModel(vehicleid) == 432 ) {
        SetVehicleHealth(vehicleid,5000.0);// Panzer
    }

	if( FrakCarInfo[vehicleid][f_frak] == 1 ) {
	    if( GetVehicleModel(vehicleid) == 596 || GetVehicleModel(vehicleid) == 597 || GetVehicleModel(vehicleid) ==598 || GetVehicleModel(vehicleid) == 601 || GetVehicleModel(vehicleid) == 407
	    || GetVehicleModel(vehicleid) == 599 || GetVehicleModel(vehicleid) == 497 || GetVehicleModel(vehicleid) == 490 || GetVehicleModel(vehicleid) ==433 || GetVehicleModel(vehicleid) == 427
		|| GetVehicleModel(vehicleid) == 560 || GetVehicleModel(vehicleid) == 541) {
	        SetVehicleHealth(vehicleid, 2000.0); // LSPDcars
	    }
    }
    if( GetVehicleModel(vehicleid) == 520 ) {
        SetVehicleHealth(vehicleid,6000.0);// hydra
    }
    // Es ist ein Fahrzeug,welches aufgetankt werden muss
    if( VEH_DROGEN <= aiVehicles[vehicleid] <= VEH_KFZCARS ) {
        gGas[vehicleid] = GetMaxTank(vehicleid);
        gMaxGas[vehicleid] = GetMaxTank(vehicleid);
        UnLockCar(vehicleid);
    }
    if( aiVehicles[vehicleid] == VEH_BUS ) {
        new busIndex = GetBusIndex(vehicleid);
        if(busIndex != -1 ) {
            DestroyDynamic3DTextLabel(t3dBus[busIndex]);
            t3dBus[busIndex] = Text3D:INVALID_3DTEXT_ID;
        }
    }

    if( aiVehicles[vehicleid] == VEH_VERLEIH ) {
        UnLockCar(vehicleid);
    }
    if( aiVehicles[vehicleid] == VEH_PVERLEIH) {
        UnLockCar(vehicleid);
    }
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(JobVehicle[i] == vehicleid)
        {
            JobVehicle[i] = INVALID_VEHICLE_ID;
        }
    }


    bestand[vehicleid] = 0;
    Benzin[vehicleid] = 0;
    Waren[vehicleid] = 0;
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(vehicleid == pCar[i])
        {
            LockCar(vehicleid);
        }
    }
    for(new playerid = 0;playerid< MAX_PLAYERS ;playerid++)
    {
        if(IsPlayerConnected(playerid) )
        {
            for(new x = 0 , j = MaxVehicles(playerid) ; x < j;x++)
            {
                if(PlayerHaveCar[playerid][x])
                {
                    if(vehicleid == PlayerCar[playerid][x][CarId])
                    {
                        SetTimerEx("CarTuning", 700,0, "ii", playerid, x);
                    }
                }
            }
        }
    }
    // Erster Check: Es müsste ein Privatfahrzeug sein
    if( aiVehicles[vehicleid] == VEH_PRIVAT ) {
        //printf("OnVehicleSpawn(%d) VEH_PRIVAT",vehicleid);
        new owner;
        owner = GetCarOwner(vehicleid);
        if( IsPlayerConnected(owner) ) {
            new slot;
            slot = GetCarOwnerSlot(owner,vehicleid);
            if( slot != 555 ) {
                if( PlayerCar[owner][slot][CarState] == e_Vehicle_Status_Destroyed) {
                    DestroyVehicleEx(vehicleid);
                    printf("Vehicle zerstört! Status Destroyed");
                }
                else {
                    SetVehiclePos( vehicleid, PlayerCar[owner][slot][CarPos_x], PlayerCar[owner][slot][CarPos_y], PlayerCar[owner][slot][CarPos_z]);
                    SetVehicleZAngle( vehicleid, PlayerCar[owner][slot][CarRotate]);
                    ChangeVehicleColor( vehicleid , PlayerCar[owner][slot][CarC1] , PlayerCar[owner][slot][CarC2] );
                }
            }
        }
    }   
    for(new i ; i < sizeof(sireneobj[]) ; i++) {
        DestroyDynamicObject(sireneobj[vehicleid][i]);
        sireneobj[vehicleid][i] = INVALID_OBJECT_ID;
    }
    GetVehiclePos(vehicleid,g_OldVehiclePos[vehicleid][0],g_OldVehiclePos[vehicleid][1],g_OldVehiclePos[vehicleid][2]);
    return 1;
}

forward Anti_OnVehicleDeath(playerid);
public Anti_OnVehicleDeath(playerid) {
    if (g_aiDestroyedVehicles[playerid] != 0) g_aiDestroyedVehicles[playerid]--;
    return 1;
}

public OnVehicleDeath(vehicleid, killerid) {
    new string[128];
    format(string, sizeof(string), "Killer: %s (ID: %d) - Vehicle ID: %d", GetName(killerid), killerid, vehicleid);
    LogVehicleDeath(string);
    if (Spieler[killerid][pAdmin] < 3 && g_aiDestroyedVehicles[killerid] >= 5 ) {
        new String[128];
        format(String, sizeof(String), "[Anti-Cheat] Spieler %s Verdacht auf Vehicle-Spam: %d Fahrzeug(e)", GetName(killerid), g_aiDestroyedVehicles[killerid]);
        SendAdminMessage(COLOR_RED, String);
        if (g_aiDestroyedVehicles[killerid] > 10) {
            format(String, sizeof(String), "[KICK] Spieler %s wurde gekickt, Grund: Vehicle-Spam", GetName(killerid));
            SendAdminMessage(COLOR_RED, String);
            g_aiDestroyedVehicles[killerid] = 0;
            Kick(killerid);
            return 0;
        }
    }
    g_aiDestroyedVehicles[killerid]++;
    SetTimerEx("Anti_OnVehicleDeath",5003,false,"d",killerid);
    Blinker_OnVehicleDeath(vehicleid,killerid);

    DestroyDynamicObject(vSirene[vehicleid]);
    DestroyDynamicObject(vNeon[vehicleid]);
    DestroyDynamicObject(OAmtSirene[vehicleid]);
    DestroyVehicleBlitzer(vehicleid);

    DestroyBlinker(vehicleid,0);
    DestroyBlinker(vehicleid,1);

    for(new i ; i < sizeof(sireneobj[]) ; i++) {
        DestroyDynamicObject(sireneobj[vehicleid][i]);
        sireneobj[vehicleid][i] = INVALID_OBJECT_ID;
    }

    // if( g_aiVehicleSirene[vehicleid][0] != INVALID_OBJECT_ID ) {
    DestroyDynamicObject(g_aiVehicleSirene[vehicleid][0]);
    g_aiVehicleSirene[vehicleid][0] = INVALID_OBJECT_ID;
    DestroyDynamicObject(g_aiVehicleSirene[vehicleid][1]);
    g_aiVehicleSirene[vehicleid][1] = INVALID_OBJECT_ID;
    DestroyDynamicObject(g_aiVehicleSirene[vehicleid][2]);
    g_aiVehicleSirene[vehicleid][2] = INVALID_OBJECT_ID;
    DestroyDynamicObject(g_aiVehicleSirene[vehicleid][3]);
    g_aiVehicleSirene[vehicleid][3] = INVALID_OBJECT_ID;
    // }

    vSirene[vehicleid] = INVALID_OBJECT_ID;
    vNeon[vehicleid] = INVALID_OBJECT_ID;
    OAmtSirene[vehicleid] = INVALID_OBJECT_ID;
    if( aiVehicles[vehicleid] == VEH_PRIVAT ) {
        //printf("OnVehicleDeath(%d,%d) PrivatVehicle",vehicleid,killerid);
        for(new playerid = 0 ; playerid < MAX_PLAYERS ;playerid++)
        {
            if( IsPlayerConnected(playerid) )
            {
                for(new x = 0 , j = MaxVehicles(playerid) ; x < j;x++)
                {
                    if(PlayerHaveCar[playerid][x])
                    {
                        if(vehicleid == PlayerCar[playerid][x][CarId])
                        {
                            DestroyDynamicObject(PlayerCar[playerid][x][ObjectIDNeon1]);
                            DestroyDynamicObject(PlayerCar[playerid][x][ObjectIDNeon1]);
                            PlayerCar[playerid][x][ObjectIDNeon1] = INVALID_OBJECT_ID;
                            PlayerCar[playerid][x][ObjectIDNeon2] = INVALID_OBJECT_ID;

                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned1]);
                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned2]);
                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned3]);
                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned4]);
                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned5]);
                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned6]);
                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned7]);
                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned8]);
                            DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned9]);

                            DestroyVehicleEx( PlayerCar[playerid][x][CarId] );
                            aiVehicles[ PlayerCar[playerid][x][CarId] ] = VEH_INVALID;
                            PlayerHaveCar[playerid][x] = 0;

                            new String[128];
                            if( Spieler[playerid][pKFZVersicherung] > gettime() ) {
                                format(String,sizeof(String),"Dein %s ist explodiert und wird in der Werkstatt wieder repariert!", CarName[ PlayerCar[playerid][x][CarModel] - 400] );
                                SendClientMessage(playerid,COLOR_YELLOW,String);
                                SendClientMessage(playerid,COLOR_YELLOW,"Die Reparaturkosten übernimmt deine abgeschlossene KFZ-Versicherung.");
                            }
                            else {
                                format(String,sizeof(String),"Dein %s ist explodiert! Die Reparaturkosten in Höhe von $1.500 musst du manuell begleichen mit /Fahrzeugreparieren.", CarName[ PlayerCar[playerid][x][CarModel] - 400] );
                                SendClientMessage(playerid,COLOR_ORANGE,String);
                                PlayerCar[playerid][x][CarState] = e_Vehicle_Status_Destroyed;
                                PlayerCar[playerid][x][CarTank] = gGas[PlayerCar[playerid][x][CarId]];
                                PlayerCar[playerid][x][CarDistance] = g_VehicleDistance[ PlayerCar[playerid][x][CarId] ];
                                DestroyVehicleEx(vehicleid);
                                SavePlayerCar(playerid,x);
                            }
                            PlayerCar[playerid][x][CarId] = INVALID_VEHICLE_ID;
                            PlayerCarSpawn(playerid,x);
                        }
                    }
                }
            }
        }
    }
    else if( aiVehicles[vehicleid] == VEH_PRIVATVERLEIH ) {
        // Verleihvehicle gestorben.
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i) ) {
                if( vehicleid == Spieler[i][pVehicleVerleih] ) {
                    SendClientMessage(i,COLOR_RED,"Dein Mietfahrzeug ist explodiert und steht wieder am Fahrzeugverleih. Hol es ab!");
                }
            }
        }
    }
    else if( aiVehicles[vehicleid] == VEH_TAXICAR ) {
        // Taxi zerstört. Alle Kunden raus
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i)) {
                if( Spieler[i][pTaxiVehicle] == vehicleid ) {
                    // SendTaxiMessage(i,COLOR_RED,"Taxi-Fahrt abgebrochen! Fahrzeug wurde zerstört!");
                    CancelTaxi(i,vehicleid,1);
                    // Spieler[i][pTaxiVehicle] = INVALID_VEHICLE_ID;
                    break;
                }
            }
        }
    }


    
    new vehiclemodel = GetVehicleModel(vehicleid);
    if(vehiclemodel == 499 && FrakCarInfo[vehicleid][f_frak] == 15){
        if(wtstatus == true){
            bestand[vehicleid] = 0;
            Delete3DTextLabel(terrorVehLabel);
            Delete3DTextLabel(terrorBootLabel);
            bestand[speederID] = 0;
            DestroyVehicle(speederID);
            new String[128];
            format(String, sizeof(String), "[WT] Die Waffenteilmission wurde gestoppt, weil der Benson zerstört wurde!");
            SendFraktionMessage(15, COLOR_RED, String);
            wtstatus = false;
            DisablePlayerCheckpointEx(wtid);
            wtid = -1;
        }
        if(spritstatus == true){
            spritstatus = false;
            for(new i; i < MAX_PLAYERS; i++){
                if(GetPVarInt(i, "SPRITROB")){
                    new String[128];
                    //SendClientMessage(i, COLOR_RED, "Der Spritraub ist fehlgeschlagen! Das benötigte Fahrzeug wurde zerstört!");
                    SendFraktionMessage(15, COLOR_RED, "[SPRIT] {FFFFFF} Der Spritraub ist fehlgeschlagen! Das benötigte Fahrzeug wurde zerstört!");
                    format(String, sizeof(String), "[EILMELDUNG] Räuber %s hat den Sprit-Raub abgebrochen!", GetName(i), i);
                    SendFraktionMessage(1, COLOR_GREEN, String);
                    SendFraktionMessage(2, COLOR_GREEN, String);
                    SendFraktionMessage(16, COLOR_GREEN, String);
                    SendFraktionMessage(18, COLOR_GREEN, String);
                    SendFraktionMessage(22, COLOR_GREEN, String);
                    KillTimer(SpritTimer[i]);
                    KillTimer(SpritCheckTimer[i]);
                    DeletePVar(i, "SPRITROB");
                    DeletePVar(i, "STARTSPRIT");
                    DeletePVar(i, "SPRITMENGE");
                }
            }
        }
    }
    if(vehicleid == speederID){
        if(wtstatus == true){
            bestand[vehicleid] = 0;
            Delete3DTextLabel(terrorVehLabel);
            Delete3DTextLabel(terrorBootLabel);
            bestand[speederID] = 0;
            DestroyVehicle(speederID);
            new String[128];
            format(String, sizeof(String), "[WT] Die Waffenteilmission wurde gestoppt, weil der Speeder zerstört wurde!");
            SendFraktionMessage(15, COLOR_RED, String);
            wtstatus = false;
            DisablePlayerCheckpointEx(wtid);
            wtid = -1;
        }
    }

    return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
    new Float:x, Float:y, Float:z;
    GetVehiclePos(vehicleid, x, y, z);
    if (VectorSize(x - new_x, y - new_y, z - new_z) > 30.0) {
        SetVehicleToRespawn(vehicleid);
        return 0;
    }
	return 1;
}

/*public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z) {
    new
        Float:x,
        Float:y,
        Float:z;
    GetVehiclePos(vehicleid,x,y,z);
    if(VectorSize(x-new_x, y-new_y,z-new_z) > 30.0) {
    printf("OnUnoccupiedVehicleUpdate(%d,%d,%d,%.1f,%.1f,%.1f)",vehicleid, playerid, passenger_seat, new_x, new_y, new_z);
    Spieler[playerid][pVehiclePort]++;
    if( Spieler[playerid][pVehiclePort] >= 10 ) {
        new
            string[256];
        format(string, sizeof(string), "[BANNED] Spieler %s wurde vom Server-System gebannt, Grund: Vehicle-Port", GetName(playerid));
        SendAdminMessage(COLOR_RED, string);
        Spieler[playerid][pBanned] = 1;

        format(string,sizeof(string),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",GetName(playerid),("Server-System"),("Gebannt vom Server-System wegen Vehicle-Port!") );
        mysql_oquery(string,THREAD_AKTENEINTRAG,INVALID_PLAYER_ID,gWebSQL);

        format(string,sizeof(string),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' , `Banned` = 1 WHERE `Name` = '%s'",
           ("Server-System"),("Vehicle-Port"),GetName(playerid));
        mysql_oquery(string,THREAD_VEHICLEPORT_HACK, INVALID_PLAYER_ID,gSQL);

        KickDelay(playerid);
        //Ban(playerid);
        }
        return 0;
    }
    return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    new
        Float:fDiff,
        Float:fHealth;
    GetVehicleHealth(vehicleid,fHealth);
    fDiff = g_fVehicleHealth[vehicleid] - fHealth;
    g_fVehicleHealth[vehicleid] = fHealth;
    if( fDiff > 35.0 ) {
        new
            level;
        level = GetPlayerDrunkLevel(playerid);
        if( level < 2000 ) level = 2000;
        SetPlayerDrunkLevel(playerid, level + ( 4 * 50 ) );
    }
    if( !IsBicycle( GetVehicleModel(vehicleid)) ) {
        if( g_fVehicleHealth[vehicleid] <= 450.0 ) {
            if( g_iVehicleFixNotification{vehicleid} == 0 ) {
                g_iVehicleFixNotification{vehicleid} = 1;
                SendClientMessage(playerid,COLOR_ORANGE,"Dein Fahrzeug ist stark beschädigt! Rufe mit /Service -> KFZ-Mechaniker ein Mechaniker!");
            }
        }
        else if( g_fVehicleHealth[vehicleid] <= 350.0 ) {
            if( g_iVehicleBrokeNotification{vehicleid} == 0 ) {
                new engine, lights, alarm, doors, bonnet, boot, objective;
                GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
                SetVehicleParamsEx(vehicleid, VEHICLE_PARAMS_OFF, lights, alarm, doors, bonnet, boot, objective);
                g_iVehicleBrokeNotification{vehicleid} = 1;
                SendClientMessage(playerid,COLOR_RED,"Das Fahrzeug hat einen Motorschaden und muss repariert werden! Rufe mit /Service einen KFZ-Mechatroniker");
                GameTextForPlayer(playerid, "~r~Motorschaden", 3, 1);
            }
        }
    }
    return 1;
}*/

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
    new Float:fDiff, Float:fHealth;
    GetVehicleHealth(vehicleid,fHealth);
    fDiff = g_fVehicleHealth[vehicleid] - fHealth;
    g_fVehicleHealth[vehicleid] = fHealth;
    if( fDiff > 35.0 ) {
        new level;
        level = GetPlayerDrunkLevel(playerid);
        if( level < 2000 ) level = 2000;
        SetPlayerDrunkLevel(playerid, level + ( 4 * 50 ) );
    }
    if( g_fVehicleHealth[vehicleid] <= 400.0 ) {
        if( g_iVehicleFixNotation{vehicleid} == 0 ) {
            g_iVehicleFixNotation{vehicleid} = 1;
            SendClientMessage(playerid,COLOR_ORANGE,"Dein Fahrzeug ist stark beschädigt! Rufe mit '/Service -> ADAC Pannenhilfe' ein Mechaniker!");
        }
    }
    return 1;
}

public OnPlayerText(playerid, text[])
{
    new sName[MAX_PLAYER_NAME], String[180];
    GetPlayerName(playerid,sName,sizeof(sName));
    new k;
    for(;k<sizeof(word);k++)
    {
        if(strfind(text,word[k],true)!=-1)
        {
            SendClientMessage(playerid,COLOR_RED,"Beleidigungen dieser Art sind strengst verbotenen und werden mit einer dauerhaften Sperrung bestraft!");
            break;
        }
    }
    if(k<sizeof(word)-1)
    {
        return 0;
    }
    if(ReportCall[playerid] != 999)
    {
        format(String, sizeof(String), "> Ticket < - %s: %s", sName, text);
        SendClientMessage(playerid, COLOR_LIGHTGREEN, String);
        if(ReportCall[ReportCall[playerid]] == playerid)
        {
            SendClientMessage(ReportCall[playerid], COLOR_LIGHTGREEN, String);
        }
        return 0;
    }
    if(Spieler[playerid][bMundbinde]){
        SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du hast eine Mundbinde.");
        return 0;
    }
    if( Spieler[playerid][ibInterviewStat] != 0) {
        // Im Interview
        if( Spieler[playerid][ibInterviewStat] == 2 ) {
            format(String,sizeof(String),"Reporter ( %s ):{A020F0} %s",sName,text);
        }
        else {
            format(String,sizeof(String),"Interviewter ( %s ):{A020F0} %s",sName,text);
        }
        SendClientMessageToAll(COLOR_WHITE,String);
        return 0;
    }
    if(CurrentPhone[playerid] == 999)
    {
        if(Spieler[playerid][pMuted]== 1){
            SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
            return 0;
        }

        /*Spieler[playerid][pChatSpam]++;
        if( Spieler[playerid][pChatSpam] >= 7 ) {
            format(string, sizeof(string), "[KICK] Du wurdest soeben von dem Server-System gekickt. Grund: %s", ("Chat-Spam"));
            SendClientMessage(playerid, COLOR_RED, string);
            format(string, sizeof(string), "[KICK]: Spieler %s wurde von Server-System gekickt, Grund: %s", GetName(playerid), ("Chat-Spam"));
            SendAdminMessage(COLOR_RED, string);
            KickDelay(playerid);
            return 1;
        }
        else {
            SetTimerEx("Cooldown_ChatSpam",3001,false,"d",playerid);
        }*/

        if (PlayerIsPaintballing[playerid]) {
            format(String, sizeof(String), "[PAINTBALL] {FFFFFF}%s sagt: %s", sName, text);
            SendPaintballMessage(COLOR_YELLOW, String);
            return 0;
        }

        if(Spieler[playerid][bMaske])
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x,y,z);
			format(String, sizeof(String), "Maskierter sagt: %s", text);
			if(Spieler[playerid][pAdminDienst]>=1){format(String, sizeof(String),COLOR_HEX_RED"Maskierter"COLOR_HEX_WHITE" sagt: %s", text);}
			SendRoundMessage(x,y,z, COLOR_LIGHTGREY, String);
			format(String, sizeof(String), "Maskierter sagt: %s", text);
			if(Spieler[playerid][pAdminDienst]>=1){format(String, sizeof(String),COLOR_HEX_RED"Maskierter"COLOR_HEX_WHITE" sagt: %s", text);}
			SetPlayerChatBubble(playerid, String, COLOR_BLUE, 40.0, 12000);
		}
		else
		{
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x,y,z);
			format(String, sizeof(String), "%s sagt: %s", sName, text);
			if(Spieler[playerid][pAdminDienst]>=1){format(String, sizeof(String),COLOR_HEX_RED"%s"COLOR_HEX_WHITE" sagt: %s", sName, text);}
			SendRoundMessage(x,y,z, COLOR_LIGHTGREY, String);
			format(String, sizeof(String), "%s sagt: %s",sName, text);
			if(Spieler[playerid][pAdminDienst]>=1){format(String, sizeof(String),COLOR_HEX_RED"%s"COLOR_HEX_WHITE" sagt: %s", sName, text);}
			SetPlayerChatBubble(playerid, String, COLOR_BLUE, 40.0, 12000);
		}

        /*new lengthtime = strlen(text);
        new time = lengthtime*100;
        ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,time);*/
    }
    // Notruf POLIZEI
    else if(CurrentPhone[playerid] == INVALID_PLAYER_ID ) {
        if(Spieler[playerid][pMuted]== 1){
            SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
            return 0;
        }
        new Meldung[128];
        format(String,sizeof(String),"Notrufsteller: %s [ ID: %d ], Tel.: %d",sName,playerid,Spieler[playerid][pHandyNr]);
        format(Meldung,sizeof(Meldung),"Meldung: %s",text);
        NeedCop[playerid] = 1;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i)) {
                if( Spieler[i][pFraktion] == 1 || Spieler[i][pFraktion] == 2 || Spieler[i][pFraktion] == 16 ) {
                    SendClientMessage(i,COLOR_RED,"Einkommender Notruf:");
                    SendClientMessage(i,COLOR_WHITE,String);
                    SendClientMessage(i,COLOR_WHITE,Meldung);
                }
            }
        }
        if( SetRandomPoliceTask(playerid) ) {
        }
        else {
        }
        SendClientMessage(playerid,COLOR_YELLOW,"Danke! Ihr Notruf wird an eine verfügbare Polizeistreife weitergeleitet.");
        CurrentPhone[playerid] = 999;
        SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
    }
    // Anruf Mechaniker
    else if(CurrentPhone[playerid] == INVALID_PLAYER_ID + 4 ) 
    {
        if(strfind(text, "Ja", true) != -1)
        {            
            SendClientMessage(playerid, COLOR_YELLOW, "[SMS]: Ja, An: Mechaniker (Nr. 111)");
            new params[128];
            cmd_mechaniker(playerid, params);
        }
        else if(strfind(text, "Nein", true) != -1)
        {
            SendClientMessage(playerid, COLOR_YELLOW, "[SMS]: Nein, An: Mechaniker (Nr. 111)");
            PlayerPlaySound(playerid, 20600, 0.0, 0.0, 0.0);
            SendClientMessage(playerid, COLOR_YELLOW, "[SMS]: Alles Klar, wenn doch Meld dich einfach!, Von: Mechaniker (Nr. 111)");
        }
        SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
        CurrentPhone[playerid] = 999;
    }
    // Notruf RETTUNGSDIENST
    else if(CurrentPhone[playerid] == INVALID_PLAYER_ID + 1 ) {
        if(Spieler[playerid][pMuted]== 1){
            SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
            return 0;
        }
        new Meldung[128];
        format(String,sizeof(String),"Notrufsteller: %s [ ID: %d ], Tel.: %d",sName,playerid,Spieler[playerid][pHandyNr]);
        format(Meldung,sizeof(Meldung),"Meldung: %s",text);
        NeedMedic[playerid] = 1;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i)) {
                if( Spieler[i][pFraktion] == 3) {
                    SendClientMessage(i,COLOR_RED,"Einkommender Notruf:");
                    SendClientMessage(i,COLOR_WHITE,String);
                    SendClientMessage(i,COLOR_WHITE,Meldung);
                }
            }
        }
        if( SetRandomMedicTask(playerid) ) {
        }
        else {
        }
        SendClientMessage(playerid,COLOR_YELLOW,"Danke! Ihr Notruf wird an den Rettungsdienst weitergeleitet.");
        CurrentPhone[playerid] = 999;
        SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
    }
    // Notruf ORDNUNGSAMT
    else if(CurrentPhone[playerid] == INVALID_PLAYER_ID + 2 ) {
        if(Spieler[playerid][pMuted]== 1){
            SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
            return 0;
        }
        new Meldung[128];
        format(String,sizeof(String),"Melder: %s [ ID: %d ], Tel.: %d",sName,playerid,Spieler[playerid][pHandyNr]);
        format(Meldung,sizeof(Meldung),"Meldung: %s",text);
        NeedOAMT[playerid] = 1;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i)) {
                if( Spieler[i][pFraktion] == 5) {
                    SendClientMessage(i,COLOR_RED,"Einkommende Meldung:");
                    SendClientMessage(i,COLOR_WHITE,String);
                    SendClientMessage(i,COLOR_WHITE,Meldung);
                }
            }
        }
        if( SetRandomOAMTTask(playerid) ) {
        }
        else {
        }
        SendClientMessage(playerid,COLOR_YELLOW,"Danke! Ihr Serviceruf wird an das Ordnungsamt weitergeleitet.");
        CurrentPhone[playerid] = 999;
        SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
    }
    // Service Wheelmen
    else if(CurrentPhone[playerid] == INVALID_PLAYER_ID + 3 ) {
        if(Spieler[playerid][pMuted]== 1){
            SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
            return 0;
        }
        new Meldung[128];
        format(String,sizeof(String),"Auftraggeber: %s [ ID: %d ], Tel.: %d",sName,playerid,Spieler[playerid][pHandyNr]);
        format(Meldung,sizeof(Meldung),"Sachverhalt: %s",text);
        NeedWHEEL[playerid] = 1;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i)) {
                if( Spieler[i][pFraktion] == 17) {
                    SendClientMessage(i,COLOR_RED,"SERVICE-RUF:");
                    SendClientMessage(i,COLOR_WHITE,String);
                    SendClientMessage(i,COLOR_WHITE,Meldung);
                }
            }
        }
        SendClientMessage(playerid,COLOR_YELLOW,"Danke! Wir haben dein Serviceruf an einen Agency-Mitglied weitergeleitet.");
        CurrentPhone[playerid] = 999;
        SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
    }
    else
    {
        if(Spieler[playerid][pMuted]== 1)return SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
        if( IsPlayerConnected(TelefonzelleAn[playerid]) ) {
            format(String, sizeof(String), "%s (Telefonzelle)sagt: %s", sName, text);
        }
        else {
            format(String, sizeof(String), "%s (Handy)sagt: %s", sName, text);
        }
        new Float:x, Float:y, Float:z;
        GetPlayerPos(playerid, x,y,z);
        SendRoundMessage(x,y,z, COLOR_LIGHTGREY, String);
        if(IsPlayerConnected(CurrentPhone[playerid]))
        {
            if(CurrentPhone[CurrentPhone[playerid]] == playerid)
            {
                format(String, sizeof(String), "(Anruf) %s sagt: %s", sName, text);
                SendClientMessage(CurrentPhone[playerid], COLOR_YELLOW, String);
                SetPlayerChatBubble(playerid, String, COLOR_RED, 40.0, 12000);
                return 0;
            }
        }
    }
    return 0;
}

stock SendRoundMessage(Float:x, Float:y, Float:z, color, text[] , Float:distance = 20.0)
{
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerInRangeOfPoint(i, distance , x,y,z))
        {
            SendClientMessage(i, color, text);
        }
    }
    return 1;
}


forward Drogen_Clear(playerid);
public Drogen_Clear(playerid) {
    KillTimer(DrogenTimer[playerid]);
    SetPlayerDrunkLevel(playerid,0);
    SetPlayerWeather(playerid,GetWeather());
    return 1;
}

stock CreateBrief(briefabsendername[],briefempfangername[],absendertext[])
{
    SendClientMessage(GetPlayerIdFromName(briefempfangername),COLOR_YELLOW,"Du hast ungelesene Post erhalten! Gehe zum Postamt und öffne die Post.");
    new pfad[128];
    format(pfad,64,"/home/sampserver/samp/scriptfiles/Briefe/%s",briefabsendername);
    if(!dir_exists(pfad))
    {
        dir_create(pfad);
    }
    format(pfad,128,"/home/sampserver/samp/scriptfiles/Briefe/%s/Abgesendete Briefe",briefabsendername);
    if(!dir_exists(pfad))
    {
        dir_create(pfad);
    }
    format(pfad,128,"/home/sampserver/samp/scriptfiles/Briefe/%s",briefempfangername);
    if(!dir_exists(pfad))
    {
        dir_create(pfad);
    }
    format(pfad,128,"/home/sampserver/samp/scriptfiles/Briefe/%s/Empfangene Briefe",briefempfangername);
    if(!dir_exists(pfad))
    {
        dir_create(pfad);
    }
    for(new i;i<50;i++)
    {
        format(pfad,128,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",briefabsendername,i);
        if(fexist(pfad))
        {
        }
        else
        {
            break;
        }
    }
    new absendertext2[2048];
    format(absendertext2,2048,"%s",absendertext);
    for(new leerzeichen;leerzeichen<1000;leerzeichen++)
    {
        if(strfind(absendertext2," ",true)!=-1)
        {
            strins(absendertext2,"?",strfind(absendertext2," ",true));
            strdel(absendertext2,strfind(absendertext2," ",true),strfind(absendertext2," ",true)+1);
        }
        else
        {
            leerzeichen=1000;
        }
    }
    new string[1000],bjahr,btag,bmonat,bstunde,bminute,bsekunde,datumstring[20],uhrzeitstring[20];
    getdate(bjahr,bmonat,btag),gettime(bstunde,bminute,bsekunde);
    format(datumstring,20,"%i.%i.%i",btag,bmonat,bjahr),format(uhrzeitstring,20,"%i:%i:%i",bstunde,bminute,bsekunde);
    format(string, sizeof(string), "%s %s %s %s %s 0 0 0)",
    briefabsendername,briefempfangername,datumstring,uhrzeitstring,absendertext2);
    new File:datei=fopen(pfad,io_write);
    fwrite(datei,string);
    fclose(datei);
    for(new i;i<50;i++)
    {
        format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",briefempfangername,i);
        if(fexist(pfad))
        {
        }
        else
        {
            break;
        }
    }
    new File:datei3=fopen(pfad,io_write);
    fwrite(datei3,string);
    fclose(datei3);
    //Absender, Empfänger, Datum, Uhrzeit, Textinhalt, löschena, löschene, Klasse
}


forward GMXModeTimer();
public GMXModeTimer()
{
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(GMXMode == 1)
        {
            FreezePlayer(i);
            GameTextForPlayer(i, "~g~SERVER RESTART!!!", 1000, 6);
        }
    }
    SendRconCommand("gmx");
    return 1;
}


forward triggergotopos(playerid);
public triggergotopos(playerid)
{
    if (!GetPVarFloat(playerid, "MARKER.X")) return SendClientMessage(playerid, COLOR_DARKRED, "Du hast keinen Checkpoint auf der Karte.");
    new params[128];
    format(params, 128, "%f %f %f", GetPVarFloat(playerid, "MARKER.X"), GetPVarFloat(playerid, "MARKER.Y"), GetPVarFloat(playerid, "MARKER.Z"));
    return cmd_gotopos(playerid, params);
}



stock RemovePlayerFromFaction(playerid) {
    Spieler[playerid][pFraktion] = 0;
    Spieler[playerid][pFrakLohn] = 0;
    Spieler[playerid][pRank] = 0;
    Spieler[playerid][pfrakwarn] = 0;
    Spieler[playerid][pSpawnChange] = 0;
    RemovePlayerFromPlantArrayData(playerid);
    SetPlayerSkinEx(playerid, Spieler[playerid][pSex] == 1 ? 2 : 11);
    SaveAccount(playerid);

    return 1;
}

stock GetFactionIDByName(factionname[]) {
    for (new i = 0; i < sizeof(factionNames); i++) {
        if (strfind(factionNames[i], factionname, true, 0) == 0) {
            return i;
        }
    }

    return -1;
}

stock GetJobIDByName(jobname[]) {
    for (new i = 0; i < sizeof(jobNames); i++) {
        if (strfind(jobNames[i], jobname, true, 0) == 0) {
            return i;
        }
    }

    return -1;
}

stock ShowConfigPlayerInfo(playerid) {
    SendClientMessage(playerid, COLOR_BLUE, INFO_STRING" /Configplayer [SpielerID/Name] [Eingabe] [Wert]");
    SendClientMessage(playerid, COLOR_ORANGE, "* EINGABEN *: Level, Respektpunkte, Geld, Job, Fraktion, Fraktionsrank, Gehalt, NeonPremium, Spice, Drogen,");
    SendClientMessage(playerid, COLOR_ORANGE, "* EINGABEN *: Safewantedcodes, Waffenteile, Wantedcodes, SafeSpice, SafeDrogen, SafeWaffenteile, Waffensperre");
    SendClientMessage(playerid, COLOR_ORANGE, "* EINGABEN *: Bankpin, Bankkonto, Skin, Geschlecht, Premium, Spielstunden, Kekse, Pfand");
    SendClientMessage(playerid, COLOR_ORANGE, "* EINGABEN *: Alizsperre, Flizsperre, Glizsperre, Lkwlizsperre, Mlizsperre, Eventpunkte");
    if (Spieler[playerid][pAdmin] > 3)
        SendClientMessage(playerid, COLOR_ORANGE, "* EINGABEN (>= Adm.) *: mustuseac");
    if (Spieler[playerid][pAdmin] > 4)
        SendClientMessage(playerid, COLOR_ORANGE, "* EINGABEN (>= Dev.) *: adventmin, adventday");
    return 1;
}


/*forward Servername();
public Servername()
{
    new sName[128];
    format(sName, sizeof(sName), "hostname %sLyD ~ Roleplay%s", (serverhost = !serverhost) ? "[LyD] " : "", GetWeekDayNumber() == WEEKDAY_SATURDAY || GetWeekDayNumber() == WEEKDAY_SUNDAY ? " - [DOUBLE-EXP]" : "");
    SendRconCommand(sName);
    return 1;
}*/
/*forward Servername();
public Servername()
{
    new sName[128];
    #if defined HALLOWEEN_EVENT
    format(sName, sizeof(sName), "hostname .:: [LyD] ROLEPLAY | HALLOWEEN! [GER] ::.", (serverhost = !serverhost) ? "[LyD]::. " : "", GetWeekDayNumber() < 2 ? " - [DOUBLE-EXP]" : "");
    #else
    format(sName, sizeof(sName), "hostname .:: [LyD] ROLEPLAY [GER] ::.", (serverhost = !serverhost) ? "[LyD]::. " : "", GetWeekDayNumber() < 2 ? " - [DOUBLE-EXP]" : "");
    #endif
    SendRconCommand(sName);
    return 1;
}*/
#if defined WINTER_EVENT
#if defined OPENMP
forward Servername();
public Servername()
{
    new sName[128];
    if(serverhost == 1)
    {
        format(sName, sizeof(sName), "name [LyD] Live your Dream ~ Roleplay [ADVENTSKALENDER]");
        serverhost = 2;
    }
    else if(serverhost == 2)
    {
       format(sName, sizeof(sName), "name Live your Dream ~ Roleplay [WEIHNACHTSEVENT]");
       serverhost = 1;
    }
    SendRconCommand(sName);
    return 1;
}
#else
forward Servername();
public Servername()
{
    new sName[128];
    if(serverhost == 1)
    {
        format(sName, sizeof(sName), "hostname [LyD] Live your Dream ~ Roleplay [ADVENTSKALENDER]");
        serverhost = 2;
    }
    else if(serverhost == 2)
    {
       format(sName, sizeof(sName), "hostname Live your Dream ~ Roleplay [WEIHNACHTSEVENT]");
       serverhost = 1;
    }
    SendRconCommand(sName);
    return 1;
}
#endif
#else
#if defined OPENMP
forward Servername();
public Servername()
{
    new sName[128];
    #if defined HALLOWEEN_EVENT
    format(sName, sizeof(sName), "name %sRoleplay | HALLOWEEN%s", (serverhost = !serverhost) ? "[LyD] " : "Live your Dream ", GetWeekDayNumber() < 2 ? " - [DOUBLE-RP]" : "");//2
    #else
    format(sName, sizeof(sName), "name %sLive your Dream ~ Roleplay%s", (serverhost = !serverhost) ? "[LyD] " : "", GetWeekDayNumber() < 2 ? " - [DOUBLE-RP]" : "");
    #endif
    SendRconCommand(sName);
    return 1;
}
#else
forward Servername();
public Servername()
{
    new sName[128];
    #if defined HALLOWEEN_EVENT
    format(sName, sizeof(sName), "hostname %sRoleplay | HALLOWEEN%s", (serverhost = !serverhost) ? "[LyD] " : "Live your Dream ", GetWeekDayNumber() < 2 ? " - [DOUBLE-RP]" : "");//2
    #else
    format(sName, sizeof(sName), "hostname %sLive your Dream ~ Roleplay%s", (serverhost = !serverhost) ? "[LyD] " : "", GetWeekDayNumber() < 2 ? " - [DOUBLE-RP]" : "");
    #endif
    SendRconCommand(sName);
    return 1;
}
#endif
#endif
//=============================================================================//
stock FraktionsName(fraktid)
{
	new fraktname[50];
    switch(fraktid)
	{
	    case 0:{fraktname="Keine";}
	    case 1:{fraktname="Los Santos Police Department";}
	    case 2:{fraktname="Federal Bureau of Investigation";}
	    case 3:{fraktname="Los Santos Medical Department";}
	    case 4:{fraktname="San News";}
	    case 5:{fraktname="Ordnungsamt";}
	    case 6:{fraktname="Grove Street";}
	    case 7:{fraktname="Ballas";}
	    case 8:{fraktname="Fahrschule (Deleted)";}
        case 9:{fraktname="San Andreas Government";}
        case 10:{fraktname="Yakuza";}
        case 11:{fraktname="Aztecas";}
        case 12:{fraktname="Cali Kartell";}
        case 13:{fraktname="Los Santos Vagos";}
        case 14:{fraktname="Agency";}
        case 15:{fraktname="Nine Demons";}
        case 16:{fraktname="Las Venturas Police Department";}
        case 17:{fraktname="Wheelman (Deleted)";}
        case 18:{fraktname="United States Army";}
        case 19:{fraktname="Terroristen (Deleted)";}
        case 20:{fraktname="La Cosa Nostra";}
        case 21:{fraktname="Triaden";}
        case 22:{fraktname="Zollamt";}
		default:{fraktname="ERROR";}
    }
	return fraktname;
}
//=============================================================================//

stock RoundMessage(playerid, color, string[], Float:radius)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:pos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		for(new i=0;i<GetMaxPlayers();i++)
		{
			if(IsPlayerInRangeOfPoint(i, radius, pos[0], pos[1], pos[2]))
			{
				SendClientMessage(i, color, string);
			}
		}
	}
	return 1;
}


/*
stock mysql_CheckPlayerNameAccount(playername[MAX_PLAYER_NAME])
{
    new query[128], count;
    mysql_real_escape_string(playername, playername,gSQL,MAX_PLAYER_NAME);
    format(query, sizeof(query), "SELECT * FROM `accounts` WHERE `Name` = '%s'", playername);
    mysql_pquery(query,THREAD_CHECKPLAYERNAMEACCOUNT,INVALID_PLAYER_ID,gSQL,MySQLThreadOwner);
    mysql_store_result();
    count = mysql_num_rows();
    mysql_free_result();
    return count;
}*/


stock HasBankKonto(playerid) {
    if( Spieler[playerid][pBankKonto] == 0 ) {
        return 0;
    }
    return 1;
}

stock HasBankKontoPin(playerid) {
    if( Spieler[playerid][pBankKontoPin] == INVALID_BANK_PIN ) {
        return 0;
    }
    return 1;
}




stock CreatePlayerCar(playerid,Float:x,Float:y,Float:z,Float:rot,model,color1,color2) {
    new query[650];
    format(query,sizeof(query),"INSERT INTO `playercar` (`id`, `owner`, `model`, `posX`, `posY`, `posZ`, `rot`, `nitro`, `hyd`, `wheel`, `ausp`, `sideL`, `sideR`, `fb`, `rb`, `spoiler`, `roof`, `hood`, `vents`, `lamps`, `pj`, `c1`, `c2`, `preis`, `tank`, `state`, `neon1`, `neon2`, `specialtuned`, `numberplate`,`peilsender`,`distance`,`tuv`,`slot`) VALUES (NULL, '%s', %d, %.2f, %.2f, %.2f, %.2f, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d,'', %d, %d, %d, %d);",
        GetName(playerid),
        model,
        x,
        y,
        z,
        rot,
        0,0,0,0,0,0,0,0,0,0,0,0,0,
        -1,color1,color2,
        0,0,0,
        0,
        0,0,0,0,0,0,0, PlayerKey[playerid]);
    mysql_pquery(query,THREAD_CREATEPLAYERCAR,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

stock SavePlayerCar(playerid,slot) {
    new query[600];
    format(query,sizeof(query),"UPDATE `playercar` SET \
        `owner` = '%s',\
        `model` = %d,\
        `posX` = %.2f,\
        `posY` = %.2f,\
        `posZ` = %.2f,\
        `rot` = %.2f,\
        `nitro` = %d,\
        `hyd` = %d,\
        `wheel` = %d,\
        `ausp` = %d,\
        `sideL` = %d,\
        `sideR` = %d,\
        `fb` = %d,\
        `rb` = %d,\
        `spoiler` = %d,",
        PlayerCar[playerid][slot][CarOwner],
        PlayerCar[playerid][slot][CarModel],
        PlayerCar[playerid][slot][CarPos_x],
        PlayerCar[playerid][slot][CarPos_y],
        PlayerCar[playerid][slot][CarPos_z],
        PlayerCar[playerid][slot][CarRotate],
        PlayerCar[playerid][slot][CarNitro],
        PlayerCar[playerid][slot][CarHyd],
        PlayerCar[playerid][slot][CarWheel],
        PlayerCar[playerid][slot][CarAusp],
        PlayerCar[playerid][slot][CarSideL],
        PlayerCar[playerid][slot][CarSideR],
        PlayerCar[playerid][slot][CarFB],
        PlayerCar[playerid][slot][CarRB],
        PlayerCar[playerid][slot][CarSpoiler]);
    format(query,sizeof(query),"%s \
        `roof` = %d,\
        `hood` = %d,\
        `vents` = %d,\
        `lamps` = %d,\
        `pj` = %d,\
        `c1` = %d,\
        `c2` = %d,\
        `preis` = %d,\
        `tank` = %d,\
        `state` = %d,\
        `neon1` = %d,\
        `neon2` = %d,\
        `numberplate` = '%s',\
        `peilsender` = %d,\
        `specialtuned` = %d, \
        `tuv` = %d, \
        `slot` = %d, \
        `distance` = %d \
        WHERE `id` = %d",
        query,
        PlayerCar[playerid][slot][CarRoof],
        PlayerCar[playerid][slot][CarHood],
        PlayerCar[playerid][slot][CarVents],
        PlayerCar[playerid][slot][CarLamps],
        PlayerCar[playerid][slot][CarPJ],
        PlayerCar[playerid][slot][CarC1],
        PlayerCar[playerid][slot][CarC2],
        PlayerCar[playerid][slot][CarPreis],
        /*PlayerCar[playerid][slot][CarTank]*/ gGas[ PlayerCar[playerid][slot][CarId] ] ,
        PlayerCar[playerid][slot][CarState],
        PlayerCar[playerid][slot][CarNeon1],
        PlayerCar[playerid][slot][CarNeon2],
        PlayerCar[playerid][slot][CarNumberplate],
        PlayerCar[playerid][slot][CarPeilsender],
        PlayerCar[playerid][slot][isSpecialTuned],
        PlayerCar[playerid][slot][TUV],
        slot,
        g_VehicleDistance[ PlayerCar[playerid][slot][CarId] ],
        PlayerCar[playerid][slot][Id]);
    mysql_oquery(query,THREAD_SAVEPLAYERCAR,playerid,gSQL);
    return 1;
}


stock ShowPlayerCarkeys(playerid, type) {
    new dialogText[1024], statusText[128], numberPlate[32], hasLicence;
    dialogText = "{FFFFFF}Slot\t{FFFFFF}Fahrzeug\t{FFFFFF}Status\t{FFFFFF}Kennzeichen\n";
    for (new i = 0; i < MaxVehicles(playerid); i++) {
        if (PlayerHaveCar[playerid][i]) {
            switch (PlayerCar[playerid][i][CarState]) {
                case e_Vehicle_Status_Towed: statusText = COLOR_HEX_ORANGE "abgeschleppt";
                case e_Vehicle_Status_Destroyed: statusText = COLOR_HEX_RED "in Reparatur";
                case e_Vehicle_Status_Normal: statusText = COLOR_HEX_GREEN "fahrtüchtig";
            }

            hasLicence = HasVehicleLicence(playerid, i);
            format(numberPlate, sizeof(numberPlate), "[%s]", PlayerCar[playerid][i][CarNumberplate]);
            format(dialogText, sizeof(dialogText), "%s%d)\t%s\t%s\t%s%s\n", dialogText, i + 1, CarName[PlayerCar[playerid][i][CarModel] - 400], statusText,\
                !hasLicence ? COLOR_HEX_RED : COLOR_HEX_WHITE, !hasLicence ? "[Keine Zulassung]" : numberPlate);
        }
        else format(dialogText, sizeof(dialogText), "%s%d)\t{00AA00}- %sSchlüssel frei -\n", dialogText, i + 1, i == 5 ? "Premium " : "");
    }
    new dialogCaption[64];
    format(dialogCaption, sizeof(dialogCaption), "Privatfahrzeugübersicht%s", type == CARKEY_TYPE_NORMAL ? "" : " - Verschieben");
    ShowPlayerDialog(playerid, type == CARKEY_TYPE_NORMAL ? DIALOG_CARKEY : (type == CARKEY_TYPE_MOVE1 ? DIALOG_MOVECARKEY1 : DIALOG_MOVECARKEY2), 
        DIALOG_STYLE_TABLIST_HEADERS, dialogCaption, dialogText, "Auswählen", "Abbrechen");
    return 1;
}

stock IsValidVehicleModelID(vehid) {
    return vehid >= 400 && vehid <= 611 ? true : false;
}


stock GZ_OnPlayerSpawn(playerid) {
    new frak = Spieler[playerid][pFraktion];
    if( IsAFightFaction(frak) ) {
        if( IsGangInFight(frak)) {

        }
        return 1;
    }
    return 0;
}

stock GZ_OnPlayerDeath(playerid,killerid,reason) {
    #pragma unused reason
    if( killerid != INVALID_PLAYER_ID ) {
        new frak = Spieler[playerid][pFraktion];
        if(IsAFightFaction(frak)) {
            if( IsGangInFight(frak)) {
                new fightid, index = GetPlayerGangZone(playerid);
                if( index != -1 ) {
                    fightid = GetGangFight(frak);
                    if( fightid == index ) {
                        new cur_level, new_level, String[128], killerfraktion;
                        permissionleavegz[playerid]=0;
                        killerfraktion = Spieler[killerid][pFraktion];
                        if( killerfraktion == frak ) {
                            // teamkill
                            if( killerfraktion == g_GangZone[index][GZ_iAttacker]) {
                                g_GangZone[index][GZ_iOwnerScore] += 3;
                            }
                            else if( killerfraktion == g_GangZone[index][GZ_iOwner]) {
                                g_GangZone[index][GZ_iAttackerScore] += 3;
                            }
                            format(String,sizeof(String),"->TEAMKILL<- {FF8800}%s hat sein Partner %s im Gangfight getötet! {00CC00}(3P. an die gegnerische Gang)",GetName(killerid),GetName(playerid),GetFactionNameOfFaction(killerfraktion));
                            SendFraktionMessage( killerfraktion , COLOR_YELLOW,String);
                            GameTextForPlayer(killerid, "~r~TEAMKILL",1550,6);
                        }
                        else {
                            Spieler[killerid][pKillsGangFightSession]++;
                            cur_level = GetPlayerGangFightSkillLevel(killerid);
                            Spieler[killerid][pKillsGangFight]++;
                            new_level = GetPlayerGangFightSkillLevel(killerid);
                            if( new_level > cur_level ) {
                                // Skill Upgrade
                                format(String,sizeof(String),"Herzlichen Glückwunsch! "#COL_GREEN"Du hast %s-Skill %d erreicht!",("Gangfight"),new_level);
                                SendClientMessage(killerid,COLOR_YELLOW,String);
                                format(String,sizeof(String),"~y~GANGFIGHT-SKILL ~g~%d ~y~erreicht!",new_level);
                                SkillUpgrade(killerid,String);
                                format(String,sizeof(String),"%s hat %s-Skill %d erreicht",GetName(killerid),("Gangfight"),new_level);
                                SkillLog(String);
                            }

                            if( killerfraktion == g_GangZone[index][GZ_iAttacker]) {
                                g_GangZone[index][GZ_iAttackerScore] += 3;
                            }
                            else if( killerfraktion == g_GangZone[index][GZ_iOwner]) {
                                g_GangZone[index][GZ_iOwnerScore] += 3;
                            }
                            format(String,sizeof(String),"->GANGFIGHTKILL<- {0088FF}%s Gangfightkill an %s {00CC00}(3P. an die %s)",GetName(killerid),GetName(playerid),GetFactionNameOfFaction(killerfraktion));
                            SendFraktionMessage( killerfraktion , COLOR_YELLOW,String);
                            SendFraktionMessage( frak , COLOR_YELLOW,String);
                            GameTextForPlayer(killerid, "~g~GANGFIGHTKILL + 5000$",1550,6);
                            Spieler[killerid][pCash] += 5000;
                        }
                        if( g_GangZone[index][GZ_iFlaggePlayer] == playerid) {
                            g_GangZone[index][GZ_iFlaggeEnd] = 0;
                            g_GangZone[index][GZ_iFlaggePlayer] = INVALID_PLAYER_ID;
                        }
                        UpdateGangFightInfo(index);
                        return 1;
                    }
                }
            }
        }
    }
    return 0;
}

forward GFCheck(zone,attacker,owner);
public GFCheck(zone,attacker, owner)
{
    new playerzone = zone;
    if(playerzone != -1)
    {
        if(g_GangZone[playerzone][GZ_iStatus] == 1)
        {
            if(attacker == g_GangZone[playerzone][GZ_iAttacker])
            {
                for(new i; i < MAX_PLAYERS; i++)
                {
                    if(Spieler[i][pFraktion] == g_GangZone[playerzone][GZ_iOwner])
                    { 
                        new gegnetzone = GetPlayerGangZone(i);
                        if(playerzone == gegnetzone)
                        {
                            AStopGF[owner][agf_Owner] = 0;
                        }
                        else
                        {
                            if(AStopGF[owner][agf_Owner] < 20)
                            {
                                AStopGF[owner][agf_Owner] ++;
                            }
                            else
                            {
                                SendClientMessageToAll(COLOR_RED,"Der Gangfight wird aufgegeben. Owner");
                            }
                        }
                    }
                }
            }
            else if(owner == g_GangZone[playerzone][GZ_iOwner])
            {
                for(new i; i < MAX_PLAYERS; i++)
                {
                    if(Spieler[i][pFraktion] == g_GangZone[playerzone][GZ_iAttacker])
                    {
                        new gegnetzone = GetPlayerGangZone(i);
                        if(playerzone == gegnetzone)
                        {
                            AStopGF[attacker][agf_Attacker] = 0;
                        }
                        else
                        {
                            if(AStopGF[attacker][agf_Attacker] < 20)
                            {
                                AStopGF[attacker][agf_Attacker] ++;
                            }   
                            else
                            {
                                SendClientMessageToAll(COLOR_RED,"Der Gangfight wird aufgegeben. Attacker");
                            }
                        }
                    }
                }
            }
        }
    }
    return 1;
}


stock Gang_OnPlayerEnterDynamicArea(playerid,areaid)
{
    /*new val = Streamer_GetIntData(STREAMER_TYPE_AREA,areaid,E_STREAMER_EXTRA_ID);
    if( val == 1909 )
    {*/
    for(new i ; i < iGangZones ; i++)
    {
        if( areaid == g_GangZone[i][GZ_iAreaID] )
        {
            if( g_GangZone[i][GZ_iStatus] == 1 )
            {
                // In Diese Zone & gangfight
                new frak, String[256];
                frak = Spieler[playerid][pFraktion];
                if( frak == g_GangZone[i][GZ_iAttacker] || frak == g_GangZone[i][GZ_iOwner])
                {
                    TextDrawShowForPlayer(playerid,tdGangZoneHeader);
                    TextDrawShowForPlayer(playerid,g_GangZone[i][GZ_tdInfo]);
                    KillTimer(GFFlucht[playerid]);
                    permissionleavegz[playerid]=1;
                }
                else
                {
                    format(String,sizeof(String),"Achtung: {FFFFFF}Hier findet zur Zeit ein Gangfight zwischen %s und %s statt!",GetFactionNameOfFaction(g_GangZone[i][GZ_iOwner]),GetFactionNameOfFaction(g_GangZone[i][GZ_iAttacker]));
                    SendClientMessage(playerid,COLOR_RED,String);
                }
                break;
            }
        }
    }
//  }
    return 1;
}

stock Gang_OnPlayerLeaveDynamicArea(playerid,areaid)
{
/*  new val = Streamer_GetIntData(STREAMER_TYPE_AREA,areaid,E_STREAMER_EXTRA_ID);
    if( val == 1909 )
    {*/
    for(new i ; i < iGangZones ; i++)
    {
        if( areaid == g_GangZone[i][GZ_iAreaID] )
        {
            TextDrawHideForPlayer(playerid,tdGangZoneHeader);
            TextDrawHideForPlayer(playerid,g_GangZone[i][GZ_tdInfo]);
            if(permissionleavegz[playerid] == 1 && IsPlayerConnected(playerid) && !bIsSpectating[playerid])
            {
                if( g_GangZone[i][GZ_iStatus] == 1 )
                {
                    if(Spieler[playerid][pTotTime] <= 0){
                        GFFlucht[playerid] = SetTimerEx("gpermissionleave",5000,false,"ii",playerid,areaid);
                        permissionleavegz[playerid]=2;
                        new gfrakname[20];
                        if(Spieler[playerid][pFraktion]==g_GangZone[i][GZ_iOwner])
                        {
                            format(gfrakname,20,"%s",GetFactionNameOfFaction(g_GangZone[i][GZ_iAttacker]));
                        }
                        else if(Spieler[playerid][pFraktion]==g_GangZone[i][GZ_iAttacker])
                        {
                            format(gfrakname,20,"%s",GetFactionNameOfFaction(g_GangZone[i][GZ_iOwner]));
                        }
                        new string[250];
                        GameTextForPlayer(playerid,"~r~GANGFIGHT-FLUCHT",3000,3);
                        damagesperre[playerid] = 5;
                        format(string,250,"Solltest du dich länger als 5 Sekunden außerhalb des Gebiets befinden, gehen 5 Punkte an die %s.",gfrakname);
                        SendClientMessage(playerid,COLOR_RED,string);
                    }
                }
            }
            break;
        }
    }
//  }
    return 1;
}


forward gpermissionleave(playerid,areaid);
public gpermissionleave(playerid,areaid)
{
    for(new b ; b < iGangZones ; b++)
    {
        if(areaid == g_GangZone[b][GZ_iAreaID])
        {
            if(permissionleavegz[playerid]==2&&IsPlayerConnected(playerid))
            {
                if(Spieler[playerid][pFraktion]==g_GangZone[b][GZ_iOwner])
                {
                    g_GangZone[b][GZ_iAttackerScore] += 5;
                    new pname[MAX_PLAYER_NAME],string[200];
                    GetPlayerName(playerid,pname,MAX_PLAYER_NAME);
                    new gfrakname[20];
                    if(Spieler[playerid][pFraktion]==g_GangZone[b][GZ_iOwner])
                    {
                        format(gfrakname,20,"%s",GetFactionNameOfFaction(g_GangZone[b][GZ_iAttacker]));
                    }
                    else if(Spieler[playerid][pFraktion]==g_GangZone[b][GZ_iAttacker])
                    {
                        format(gfrakname,20,"%s",GetFactionNameOfFaction(g_GangZone[b][GZ_iOwner]));
                    }
                    format(string,200,"{FFFF00} --> GANGFIGHT-FLUCHT <-- {E05000}Gangfight-Flucht von (%s) - {00CC00}(5P. gehen an die %s)",
                    pname,gfrakname);
                    for(new i;i<MAX_PLAYERS;i++)
                    {
                        if(g_GangZone[b][GZ_iAttacker]==Spieler[i][pFraktion]||g_GangZone[b][GZ_iOwner]==Spieler[i][pFraktion])
                        {
                            SendClientMessage(i,COLOR_RED,string);
                        }
                    }
                }
                else if(Spieler[playerid][pFraktion]==g_GangZone[b][GZ_iAttacker])
                {
                    g_GangZone[b][GZ_iOwnerScore] += 5;
                    new pname[MAX_PLAYER_NAME],string[200];
                    GetPlayerName(playerid,pname,MAX_PLAYER_NAME);
                    new gfrakname[20];
                    if(Spieler[playerid][pFraktion]==g_GangZone[b][GZ_iOwner])
                    {
                        format(gfrakname,20,"%s",GetFactionNameOfFaction(g_GangZone[b][GZ_iAttacker]));
                    }
                    else if(Spieler[playerid][pFraktion]==g_GangZone[b][GZ_iAttacker])
                    {
                        format(gfrakname,20,"%s",GetFactionNameOfFaction(g_GangZone[b][GZ_iOwner]));
                    }
                    format(string,200,"{FFFF00} --> GANGFIGHT-FLUCHT <-- {E05000}Gangfight-Flucht von (%s) - {00CC00}(5P. gehen an die %s)",
                    pname,gfrakname);
                    for(new i;i<MAX_PLAYERS;i++)
                    {
                        if(g_GangZone[b][GZ_iAttacker]==Spieler[i][pFraktion]||g_GangZone[b][GZ_iOwner]==Spieler[i][pFraktion])
                        {
                            SendClientMessage(i,COLOR_RED,string);
                        }
                    }
                }
            }
        }
    }
    return 1;
}
stock GiveCopWeapons(playerid)
{
    GivePlayerWeapon(playerid, 3, 1);
    GivePlayerWeapon(playerid, 24, 200);
    GivePlayerWeapon(playerid, 25, 100);
    GivePlayerWeapon(playerid, 29, 300);
    SetPlayerHealth(playerid, 100);
    SetPlayerArmour(playerid, 100);
}
stock GiveArmyWeapons(playerid)
{
    GivePlayerWeapon(playerid, 39, 100);
    GivePlayerWeapon(playerid, 40, 100);
    GivePlayerWeapon(playerid, 24, 500);
    GivePlayerWeapon(playerid, 27, 100);
    GivePlayerWeapon(playerid, 29, 500);
    GivePlayerWeapon(playerid, 31, 500);
    SetPlayerHealth(playerid, 100);
    SetPlayerArmour(playerid, 100);
}






forward Pulse_Hure(hure,freier);
public Pulse_Hure(hure,freier) {
    new vehicleid = GetPlayerVehicleID(hure);
    //SetVehicleAngularVelocity(vehicleid,frandom( 0.1,0.0,4),frandom(0.1,0.0,4),frandom(0.1,0.0,4));
    SetVehicleAngularVelocity(vehicleid, frandom( 0.06,-0.06 , 4 ) , frandom( 0.04,-0.04 , 4 ) , 0.0);
    if( Spieler[hure][tickHure] <= gettime() ) {
        new extra_hp, Float:hp, String[128];
        format(String,sizeof(String),"Du hast deinen Freier %s befriedigt!",GetName(freier));
        GetPlayerHealth(freier,hp);
        extra_hp = GetPlayerHureSkillValue( hure );
        SendClientMessage(hure,COLOR_LIGHTRED2,String);
        format(String,sizeof(String),"Der Sex mit Prostituierter %s is vorbei! Deine Energie wurde um %d HP aufgefüllt",GetName(hure),extra_hp);
        SendClientMessage(freier,COLOR_LIGHTRED2,String);

        UnfreezePlayer(hure);
        UnfreezePlayer(freier);
        KillTimer( Spieler[hure][tHure] );
        RemovePlayerFromVehicle(freier);
        Spieler[hure][tickHure] = 0;
        hp += extra_hp;
        if(hp > 100.0 ) hp = 100.0;
        SetPlayerHealth( freier , hp );

        Spieler[hure][bHasSex] = false;
        Spieler[freier][bHasSex] = false;
        PlayerSkillUpgrade(hure,pHurePoints,0,1);
    }
    return 1;
}

forward Pulse_Kidnap(entfuehrer,opferid);
public Pulse_Kidnap(entfuehrer,opferid){
    new Float:x, Float:y, Float:z;
    GetPlayerPos(entfuehrer, x,y,z);
    // printf("Pulse_Kidnap(%s[%d],%s[%d]) %d tickKidnap %d",GetName(entfuehrer),entfuehrer,GetName(opferid),opferid, gettime(),Spieler[entfuehrer][tickKidnap] );
    if(!IsPlayerInRangeOfPoint(opferid, 5.0, x,y,z)) {
        KillTimer(Spieler[entfuehrer][tKidnap]);
        Spieler[entfuehrer][tKidnap] = INVALID_TIMER_ID;
        SendClientMessage(opferid, COLOR_GREEN, "Du bist deinem Entführer entkommen.");
        Spieler[opferid][bKidnapped] = false;
        return SendClientMessage(entfuehrer, COLOR_RED, "Das Opfer ist nicht mehr in deiner Nähe.");
    }
    if(!IsPlayerInAnyVehicle(entfuehrer)) {
        KillTimer(Spieler[entfuehrer][tKidnap]);
        Spieler[entfuehrer][tKidnap] = INVALID_TIMER_ID;
        SendClientMessage(opferid, COLOR_GREEN, "Du bist deinem Entführer entkommen.");
        Spieler[opferid][bKidnapped] = false;
        return SendClientMessage(entfuehrer, COLOR_RED, "Du bist nicht mehr in deinem Fahrzeug.");
    }
    if( Spieler[entfuehrer][tickKidnap] <= gettime() ) {
        // Zeit um
        new string[128];
        KillTimer(Spieler[entfuehrer][tKidnap]);
        Spieler[entfuehrer][tKidnap] = INVALID_TIMER_ID;
        new maxSeats = GetVehicleMaxPassengers(GetVehicleModel(GetPlayerVehicleID(entfuehrer)));
        if (!maxSeats || maxSeats == 0xF) {
            SendClientMessage(entfuehrer, COLOR_RED, "Dieses Fahrzeug hat keinen Beifahrersitz.");
            return SendClientMessage(opferid, COLOR_GREEN, "Du bist deinem Entführer entkommen.");
        }
        SendClientMessage(opferid, COLOR_GREEN, "Du bist deinem Entführer nicht entkommen.");
        PutPlayerInVehicle(opferid, GetPlayerVehicleID(entfuehrer), 1);
        FreezePlayer(opferid);
        // Spieler[entfuehrer][iKidnapID] = opferid;
       	format(string, sizeof(string), "* %s hat %s in sein Fahrzeug gezerrt und entführt ihn! ", GetName(entfuehrer), GetName(opferid));
        SendRoundMessage(x,y,z, COLOR_LIGHTRED2, string);
        Spieler[opferid][bKidnapped] = true;
    }
    return 1;
}


stock GiveGangWeapons(playerid)
{
    if(IsKatanaFaction(Spieler[playerid][pFraktion])) GivePlayerWeapon(playerid,8,1);
    if(IsGolfFaction(Spieler[playerid][pFraktion])) GivePlayerWeapon(playerid,2,1);
    if(IsBaseballFaction(Spieler[playerid][pFraktion])) GivePlayerWeapon(playerid,5,1);
    
    GivePlayerWeapon(playerid, 24, 100);
    GivePlayerWeapon(playerid, 29, 150);
    SendClientMessage(playerid, COLOR_GREEN, "Du hast dich ausgerüstet (Desert Eagle, MP5).");
    GameTextForPlayer(playerid, "~r~-$4000", 2000, 1);
    GivePlayerCash(playerid, -4000);
    return 1;
}


stock GiveHitmanWeapons(playerid)
{
    GivePlayerWeapon(playerid, 24, 300);
    GivePlayerWeapon(playerid, 29, 300);
    GivePlayerWeapon(playerid, 34, 50);
    GivePlayerWeapon(playerid, 4, 1);
    return 1;
}


stock GiveTerrorWeapons(playerid)
{
    GivePlayerWeapon(playerid, 24, 100);
    GivePlayerWeapon(playerid, 28, 200);
    GivePlayerWeapon(playerid, 30, 250);
    SendClientMessage(playerid, COLOR_GREEN, "Du hast dich ausgeruestet. (Desert Eagle, Uzi & AK-47)");
    GameTextForPlayer(playerid, "~r~-$5000", 2000, 1);
    GivePlayerCash(playerid, -5000);
    return 1;
}

public HeilReady(playerid)
{
    if(IsPlayerConnected(playerid) && gPlayerLogged[playerid])
    {
        Spieler[playerid][pHeilReady] = 1;
    }
    return 1;
}

stock GiveNewsWeapons(playerid)
{
    GivePlayerWeapon(playerid, 41, 2000);
    SetPlayerHealth(playerid, 100);
    return 1;
}

stock GiveOAmtWeapons(playerid)
{
    GivePlayerWeapon(playerid, 41, 2000);
    GivePlayerWeapon(playerid, 3, 1);
    //GivePlayerWeapon(playerid, 24, 100);
    GivePlayerWeapon(playerid, 23, 99999);
    GivePlayerWeapon(playerid, 41, 5000);
    SetPlayerHealth(playerid, 100);
    return 1;
}

stock GiveSaniWeapons(playerid)
{
    GivePlayerWeapon(playerid, 41, 99999);
    GivePlayerWeapon(playerid, 42, 99999);
    SetPlayerHealth(playerid, 100);
    return 1;
}

stock GiveFahrWeapons(playerid)
{
    GivePlayerWeapon(playerid, 41, 2000);
    SetPlayerHealth(playerid, 100);
    return 1;
}

stock RespawnJobCars(jobID) {
    switch (jobID) {
        case 1:     { for (new i = 0; i < sizeof(combines); i++) if (!IsVehicleOccupied(combines[i])) SetVehicleToRespawn(combines[i]); }
        case 2:     { for (new i = 0; i < sizeof(vehicle_busStation); i++) if (!IsVehicleOccupied(vehicle_busStation[i])) SetVehicleToRespawn(vehicle_busStation[i]); }
        case 3:     {
            new trailerid, bool:excludeVehicles[MAX_VEHICLES];
            for (new i = 0; i < sizeof(vehicle_truckerBase); i++) if (IsVehicleOccupied(vehicle_truckerBase[i]) && (trailerid = GetVehicleTrailer(vehicle_truckerBase[i]))) excludeVehicles[trailerid] = true;
            for (new i = 0; i < sizeof(vehicle_truckerBase); i++) if (!IsVehicleOccupied(vehicle_truckerBase[i]) && !excludeVehicles[vehicle_truckerBase[i]]) SetVehicleToRespawn(vehicle_truckerBase[i]);
        }
        case 4:     { for (new i = 0; i < sizeof(vehicle_airportLs); i++) if (!IsVehicleOccupied(vehicle_airportLs[i])) SetVehicleToRespawn(vehicle_airportLs[i]); }
        case 5:     { for (new i = 0; i < sizeof(kfzcars); i++) if (!IsVehicleOccupied(kfzcars[i])) SetVehicleToRespawn(kfzcars[i]); }
        case 7:     { for (new i = 0; i < sizeof(reinigung); i++) if (!IsVehicleOccupied(reinigung[i])) SetVehicleToRespawn(reinigung[i]); }
        case 8:     { for (new i = 0; i < sizeof(muell); i++) if (!IsVehicleOccupied(muell[i])) SetVehicleToRespawn(muell[i]); }
        case 9:     { for (new i = 0; i < sizeof(vehicle_gardenerBase); i++) if (!IsVehicleOccupied(vehicle_gardenerBase[i])) SetVehicleToRespawn(vehicle_gardenerBase[i]); }
        case 10:    { for (new i = 0; i < sizeof(bauarb); i++) if (!IsVehicleOccupied(bauarb[i])) SetVehicleToRespawn(bauarb[i]); }
        case 11:    { for (new i = 0; i < sizeof(vehicle_boatCargoJob); i++) if (!IsVehicleOccupied(vehicle_boatCargoJob[i])) SetVehicleToRespawn(vehicle_boatCargoJob[i]); }
        case 12:    { for (new i = 0; i < sizeof(geldt); i++) if (!IsVehicleOccupied(geldt[i])) SetVehicleToRespawn(geldt[i]); }
        case 13:    { for (new i = 0; i < sizeof(eismann); i++) if (!IsVehicleOccupied(eismann[i])) SetVehicleToRespawn(eismann[i]); }
        case 15:    { for (new i = 0; i < sizeof(pizzacar); i++) if (!IsVehicleOccupied(pizzacar[i])) SetVehicleToRespawn(pizzacar[i]); }
        case 16:    { for (new i = 0; i < sizeof(vehicle_taxiStations); i++) if (!IsVehicleOccupied(vehicle_taxiStations[i])) SetVehicleToRespawn(vehicle_taxiStations[i]); }
        case 17:    { for (new i = 0; i < sizeof(drogen); i++) if (!IsVehicleOccupied(drogen[i])) SetVehicleToRespawn(drogen[i]); }
        case 18:    { for (new i = 0; i < sizeof(wdealer); i++) if (!IsVehicleOccupied(wdealer[i])) SetVehicleToRespawn(wdealer[i]); }
        case 21:    { for (new i = 0; i < sizeof(vehicle_wantedHackerBase); i++) if (!IsVehicleOccupied(vehicle_wantedHackerBase[i])) SetVehicleToRespawn(vehicle_wantedHackerBase[i]); }
        //case 23:    { for (new i = 0; i < sizeof(zugb); i++) if (!IsVehicleOccupied(zugb[i])) SetVehicleToRespawn(zugb[i]); }
        case 23:    { for (new i = 0; i < sizeof(hotdogcar); i++) if (!IsVehicleOccupied(hotdogcar[i])) SetVehicleToRespawn(hotdogcar[i]); }
        default:    { return 0; }
    }

    return 1;
}









forward GetCarOwnerSlot(playerid,veh);
public GetCarOwnerSlot(playerid,veh)
{
    for(new x = 0 , j = MaxVehicles(playerid) ; x < j;x++)
    {
        if(PlayerCar[playerid][x][CarId] == veh)
        {
            return x;
        }
    }
    return 555;
}

forward GetCarOwner(veh);
public GetCarOwner(veh)
{
    new
        j,
        x;
    for(new i = 0; i < MAX_PLAYERS ;i++) {
        if( IsPlayerConnected(i)) {
            for(x = 0 , j = MaxVehicles(i) ; x < j;x++) {
                if(PlayerCar[i][x][CarId] == veh){
                    return i;
                }
            }
        }
    }
    return INVALID_PLAYER_ID;
}


forward Delay_Wiederbeleben(playerid, giveid);
public Delay_Wiederbeleben(playerid, giveid) {
    new string[128];
    Spieler[giveid][pTot] = 0;
    Spieler[giveid][pTotTime] = 0;
    format(string, sizeof(string), "Du wurdest von Sanitäter %s wiederbelebt.", GetName(playerid));
    SendClientMessage(giveid, COLOR_GREEN, string);
    format(string, sizeof(string), "[NOTRUFZENTRALE] Sanitäter %s hat den Verletzten %s wiederbelebt.", GetName(playerid), GetName(giveid));
    SendFraktionMessage(3, COLOR_YELLOW, string);
    DisablePlayerCheckpointEx(playerid);
    UnfreezePlayer(giveid);
    SetCameraBehindPlayer(giveid);

    ResetPlayerWeapons(giveid);
    ReStore_PlayerWeapons(giveid);
    Spieler[giveid][pAntiSpawnKillOn] = true;
    SetTimerEx("ASKTimer", 2000, 0, "i", playerid);
    Spieler[giveid][pWiederbelebung] = 0;
    Spieler[playerid][pWiederbelebung] = 0;
    SetPlayerHealth(giveid,100);
    ClearAnimations(giveid, 1);
    ClearAnimations(playerid, 1);
    if( Spieler[giveid][pSpawnWeste] > gettime() ) SetPlayerArmour(giveid, 100);
    return 1;
}

forward sprechen(playerid);
public sprechen(playerid) {
    ClearAnimations(playerid);
    return 1;
}


forward Pulse_SHeilen(arztid,giveid,vehicleid);
public Pulse_SHeilen(arztid,giveid,vehicleid) {
    new String[128];
    format(String,sizeof(String),"* Die Heilung durch %s wurde erfolgreich abgeschlossen",GetName(arztid));
    SendClientMessage(giveid,COLOR_GREEN,String);
    format(String,sizeof(String),"* Du hast Spieler %s erfolgreich geheilt",GetName(giveid));
    SendClientMessage(arztid,COLOR_YELLOW,String);
    SetPlayerHealth(giveid,100.0);
    TogglePlayerControllable(giveid,true);
    TogglePlayerControllable(arztid,true);
    return 1;
}

stock GetBusIndex(vehicleid){
    for(new i=0;i<sizeof(vehicle_busStation);i++) {
        if( vehicle_busStation[i] == vehicleid) {
            return i;
        }
    }
    return -1;
}

stock GetVehicleMaxPassengers(iModel)
{
    if(400 <= iModel <= 611)
    {
        static
            s_MaxPassengers[] =
            {
                271782163, 288428337, 288559891, -2146225407, 327282960, 271651075, 268443408, 286339857, 319894289, 823136512, 805311233,
                285414161, 286331697, 268513553, 18026752, 286331152, 286261297, 286458129, 856765201, 286331137, 856690995, 269484528, 
                51589393, -15658689, 322109713, -15527663, 65343    
            }
        ;
        return ((s_MaxPassengers[(iModel -= 400) >>> 3] >>> ((iModel & 7) << 2)) & 0xF);
    }
    return 0xF;
}



/*
public OnPlayerTachoShowHide()
{
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if( IsPlayerConnected(i) ) {
            if(IsPlayerInAnyVehicle(i))
            {
                PlayerTextDrawShow(i, TachoMessage[0][i]);
                PlayerTextDrawShow(i, TachoMessage[1][i]);
                PlayerTextDrawShow(i, TachoMessage[2][i]);
            }
            else
            {
                PlayerTextDrawHide(i, TachoMessage[0][i]);
                PlayerTextDrawHide(i, TachoMessage[1][i]);
                PlayerTextDrawHide(i, TachoMessage[2][i]);
            }
        }
    }
}
*/
forward fuelcounttimer(playerid);
public fuelcounttimer(playerid)
{
    if(IsPlayerInAnyVehicle(playerid)){fuelcountactive[playerid]=1;}
}
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    g_aiLastVehicle[playerid] = vehicleid;
    //ai_BlockGearshiftUpdate[playerid] = 0;
    if(ispassenger == 0)
    {
        new pjvar;
        for(new ju;ju<sizeof(hotdogcar);ju++)
        {
            if(vehicleid==hotdogcar[ju])
            {
                pjvar=1;
            }
        }
        for(new jt;jt<sizeof(eismann);jt++)
        {
            if(vehicleid==eismann[jt])
            {
                pjvar=1;
            }
        }
        for(new js;js<sizeof(muell);js++)
        {
            if(vehicleid==muell[js])
            {
                pjvar=1;
            }
        }
        for(new jr;jr<sizeof(geldt);jr++)
        {
            if(vehicleid==geldt[jr])
            {
                pjvar=1;
            }
        }
        for(new jq;jq<sizeof(reinigung);jq++)
        {
            if(vehicleid==reinigung[jq])
            {
                pjvar=1;
            }
        }
        for(new jp;jp<sizeof(vehicle_gardenerBase);jp++)
        {
            if(vehicleid==vehicle_gardenerBase[jp])
            {
                pjvar=1;
            }
        }
        for(new jo;jo<sizeof(vehicle_boatCargoJob);jo++)
        {
            if(vehicleid==vehicle_boatCargoJob[jo])
            {
                pjvar=1;
            }
        }
        for(new jn;jn<sizeof(bauarb);jn++)
        {
            if(vehicleid==bauarb[jn])
            {
                pjvar=1;
            }
        }
        for(new jm;jm<sizeof(kfzcars);jm++)
        {
            if(vehicleid==kfzcars[jm])
            {
                pjvar=1;
            }
        }
        for(new jl;jl<sizeof(vehicle_truckerBase);jl++)
        {
            if(vehicleid==vehicle_truckerBase[jl])
            {
                pjvar=1;
            }
        }
        for(new jk;jk<sizeof(vehicle_airportLs);jk++)
        {
            if(vehicleid==vehicle_airportLs[jk])
            {
                pjvar=1;
            }
        }
        for(new ji;ji<sizeof(vehicle_taxiStations);ji++)
        {
            if(vehicleid==vehicle_taxiStations[ji])
            {
                pjvar=1;
            }
        }
        for(new jh;jh<sizeof(vehicle_busStation);jh++)
        {
            if(vehicleid==vehicle_busStation[jh])
            {
                pjvar=1;
            }
        }
        for(new jg;jg<sizeof(pizzacar);jg++)
        {
            if(vehicleid==pizzacar[jg])
            {
                pjvar=1;
            }
        }
        /*for(new je;je<sizeof(zugb);je++)
        {
            if(vehicleid==zugb[je])
            {
                pjvar=1;
            }
        }*/
        for(new jd;jd<sizeof(combines);jd++)
        {
            if(vehicleid==combines[jd])
            {
                pjvar=1;
            }
        }
        for(new jc;jc<sizeof(vehicle_wantedHackerBase);jc++)
        {
            if(vehicleid==vehicle_wantedHackerBase[jc])
            {
                pjvar=1;
            }
        }
        for(new ja;ja<sizeof(drogen);ja++)
        {
            if(vehicleid==drogen[ja])
            {
                pjvar=1;
            }
        }
        for(new jb;jb<sizeof(wdealer);jb++)
        {
            if(vehicleid==wdealer[jb])
            {
                pjvar=1;
            }
        }
        if(pjvar==1)
        {
            SetTimerEx("fuelcounttimer",5000,false,"i",playerid);
        }
        else
        {
            fuelcountactive[playerid]=0;
        }
    }
    if(ispassenger == 1) {
        SetPlayerArmedWeapon(playerid, 0);
        SetTimerEx("CheckWeapon",2500,false,"i",playerid);
    }
    return 1;
}


forward CheckWeapon(playerid);
public CheckWeapon(playerid) {
	if(GetPlayerWeapon(playerid) != 29 || GetPlayerWeapon(playerid) != 30 || GetPlayerWeapon(playerid) != 31) SetPlayerArmedWeapon(playerid, 0);
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    /*
    new
        fraktion_vehicle;
    fraktion_vehicle = GetVehicleFraktion(vehicleid);
    if(fraktion_vehicle) {
        UnLockCar(vehicleid);
    }
    */
    
    if (Cuffed[playerid]) {
        new Float:pX, Float:pY, Float:pZ, seat = GetPlayerVehicleSeat(playerid);
        GetPlayerPos(playerid, pX, pY, pZ);
        SetPlayerPos(playerid, pX, pY, pZ);
        PutPlayerInVehicle(playerid, vehicleid, seat);
        return 1;
    }
    
    for(new i;i<MAX_VEHICLES;i++)
    {
        for(new t;t<sizeof(drogen);t++)
        {
            if(vehicleid==drogen[t])
            {
                UnLockCar(vehicleid);
            }
        }
        /*for(new s;s<sizeof(zugb);s++)
        {
            if(vehicleid==zugb[s])
            {
                UnLockCar(vehicleid);
            }
        }*/
        for(new r;r<sizeof(wdealer);r++){
            if(vehicleid==wdealer[r])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new q;q<sizeof(vehicle_wantedHackerBase);q++)
        {
            if(vehicleid==vehicle_wantedHackerBase[q])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new p;p<sizeof(combines);p++)
        {
            if(vehicleid==combines[p])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new o;o<sizeof(kfzcars);o++)
        {
            if(vehicleid==kfzcars[o])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new n;n<sizeof(pizzacar);n++)
        {
            if(vehicleid==pizzacar[n])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new m;m<sizeof(vehicle_taxiStations);m++)
        {
            if(vehicleid==vehicle_taxiStations[m])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new l;l<sizeof(vehicle_busStation);l++)
        {
            if(vehicleid==vehicle_busStation[l])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new k;k<sizeof(vehicle_airportLs);k++)
        {
            if(vehicleid==vehicle_airportLs[k])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new j;j<sizeof(vehicle_truckerBase);j++)
        {
            if(vehicleid==vehicle_truckerBase[j])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new h;h<sizeof(vehicle_boatCargoJob);h++)
        {
            if(vehicleid==vehicle_boatCargoJob[h])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new g;g<sizeof(reinigung);g++)
        {
            if(vehicleid==reinigung[g])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new f;f<sizeof(eismann);f++)
        {
            if(vehicleid==eismann[f])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new e;e<sizeof(hotdogcar);e++)
        {
            if(vehicleid==hotdogcar[e])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new d;d<sizeof(vehicle_gardenerBase);d++)
        {
            if(vehicleid==vehicle_gardenerBase[d])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new c;c<sizeof(bauarb);c++)
        {
            if(vehicleid==bauarb[c])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new b;b<sizeof(geldt);b++)
        {
            if(vehicleid==geldt[b])
            {
                UnLockCar(vehicleid);
            }
        }
        for(new a;a<sizeof(muell);a++)
        {
            if(vehicleid==muell[a])
            {
                UnLockCar(vehicleid);
            }
        }
    }
    if(fuelcountactive[playerid]==1)
    {
        GivePlayerCash(playerid,-100*fuelcount[playerid]);
        if(fuelcount[playerid]>=1)
        {
            new string[200];
            format(string,200,"Du hast %d Liter verbraucht. Kosten: $%s",fuelcount[playerid], AddDelimiters(100*fuelcount[playerid]));
            SendClientMessage(playerid,COLOR_ORANGE,string);
        }
        fuelcountactive[playerid]=0;
        fuelcount[playerid]=0;
   }
    if( pCheckpoint[playerid] == CP_FAHRSCHULE_OFFLINE ) {
        Spieler[playerid][unixFahrschuleFahrzeug] = gettime() + 15;
        SendClientMessage(playerid,COLOR_RED,"Steig sofort ins Fahrzeug wieder ein! Sonst wird die Fahrstunde beendet!");
    }
    if( aiVehicles[vehicleid] == VEH_AUTOSCOOTER ) {
        if( Spieler[playerid][pFahrgeschaeft] == 1 && g_AutoScooter[AS_ibStatus] == 2 ) {
            RemovePlayerAutoscooter(playerid);
        }
    }
    if( aiVehicles[vehicleid] == VEH_KARTBAHN ) {
        if( Spieler[playerid][pFahrgeschaeft] == 4 && g_Kartbahn[AS_ibStatus] == 2 ) {
            RemovePlayerKartbahn(playerid);
        }
    }
    if( aiVehicles[vehicleid] == VEH_WASSERSCOOTER ) {
        if( Spieler[playerid][pFahrgeschaeft] == 5 && g_WasserScooter[AS_ibStatus] == 2 ) {
            RemovePlayerWasserScooter(playerid);
        }
    }
    // Falls Taxi verlassen hat.
    if( _:g_t3dTaxi[vehicleid] != INVALID_3DTEXT_ID ) {
        new
            modelid;
        modelid = GetVehicleModel(vehicleid);
        if(  modelid == 420  ||  modelid == 438 ) {
            // War in einem Taxi fährend Dienst eingeschaltet war.
            new
                taxiDriver,
                String[128];
            // Ist der Spieler Fahrgast oder Fahrer gewesen???
            taxiDriver = IsPlayerAnyTaxiCustomer(playerid);
            //printf("OnPlayerExitVehicle(%s,%d) taxiDriver %s %d",GetName(playerid),vehicleid,GetName(taxiDriver),taxiDriver);
            if( taxiDriver != -1 ) {
                //printf("Kunde %s ist ausgestiegen aus dem Taxi von %s",GetName(playerid),GetName(taxiDriver));
                // Kunde ausgestiegen (playerid)
                // taxiDriver ist fahrer
                new
                    preis = GetPlayerTaxiCosts(taxiDriver,playerid);

                format(String,sizeof(String),"Die Taxifahrt hat dich $%s gekostet!", AddDelimiters(preis));
                SendClientMessage(playerid,COLOR_LIGHTRED2,String);

                if( Spieler[playerid][pCash] < preis ) {
                    SendClientMessage(playerid,COLOR_RED,"Du konntest deine Taxifahrt nicht bezahlen!");
                    format(String,sizeof(String),"Fahrgast %s konnte die Fahrtkosten in Höhe von $%s nicht bezahlen!",GetName(playerid), AddDelimiters(preis));
                    SendClientMessage(taxiDriver,COLOR_LIGHTRED2,String);
                }
                else {
                    GivePlayerCash(playerid,-preis);
                    GivePlayerCash(taxiDriver,preis);

                    format(String,sizeof(String),"Fahrgast %s ist ausgestiegen und hat seine Fahrtkosten in Höhe von $%s bezahlt!",GetName(playerid), AddDelimiters(preis));
                    SendClientMessage(taxiDriver,COLOR_LIGHTRED2,String);
                }
                RemovePlayerFromTaxi(taxiDriver,playerid);
            }
            else {
                // playerid ist gleichzeitig Fahrer
                taxiDriver = playerid;
                //printf("Fahrer %s ist ausgestiegen (%s)",GetName(taxiDriver),GetName(playerid));
                if( !HasPlayerTaxiCustomers(taxiDriver)) {
                    // Fahrer ist ausgestiegen OHNE aktive Kunden
                    if( Spieler[taxiDriver][pJob] == 16 ) {
                        // Fahrer einfach so ausgestiegen.
                        DestroyTaxiTextdraw(taxiDriver);
                        if( _:g_t3dTaxi[vehicleid] != INVALID_3DTEXT_ID ) {
                            Delete3DTextLabel( g_t3dTaxi[vehicleid] );
                            g_t3dTaxi[vehicleid] = Text3D:INVALID_3DTEXT_ID;
                        }
                    }
                }
                else {
                    format(String,sizeof(String),"Der Taxifahrer %s hat das Fahrzeug verlassen. ",GetName(taxiDriver));
                    Spieler[taxiDriver][tTaxiLeave] = SetTimerEx("CancelTaxi",20*1000,false,"ddd",taxiDriver,vehicleid,2);
                    SendClientMessage(taxiDriver,COLOR_LIGHTRED,"Steig sofort wieder ins Taxi ein, sonst ist die Fahrt beendet!");
                    SendTaxiMessage(taxiDriver,COLOR_LIGHTRED2,String);
                    SendTaxiMessage(taxiDriver,COLOR_LIGHTRED2,"Steigt er innerhalb von 20 Sekunden nicht wieder ein, wird die Fahrt automatisch abgebrochen");
                }
            }
        }
    }
    return 1;
}



public OnPlayerStateChange(playerid, newstate, oldstate)
{
    new vehicleid = GetPlayerVehicleID(playerid);
    if (newstate == PLAYER_STATE_ONFOOT)
    {
        if( Spieler[playerid][pHaustierSpawned] ) {
            if( !Haustier_OnFoot(playerid)) {
                Haustier_SetPlayer(playerid);
            }
        }

        if (Refueling[playerid]) vehicleRefueling[Refueling[playerid]] = 0;
    }
    else if(newstate == PLAYER_STATE_PASSENGER)
    {
        new weapon = GetPlayerWeapon(playerid);
        if(!(weapon == 29 || weapon == 30 || weapon == 31))
        {
            SetPlayerArmedWeapon(playerid, 0);
        }
        
        SetPVarInt(playerid, "WaffenID", weapon);
        iTempWeapon[playerid] = GetPlayerWeapon(playerid);
        DriveBy[playerid] = false;
             
        new
            modelid;
        vehicleid = GetPlayerVehicleID(playerid);
        if( _:g_t3dTaxi[vehicleid] != INVALID_3DTEXT_ID ) {
            modelid = GetVehicleModel(vehicleid);
            if(  modelid == 420  ||  modelid == 438 ) {
                new
                    driver,
                    String[128];
                driver = VehicleDriverID(vehicleid);
                if( IsPlayerConnected(driver) && Spieler[driver][pJob] == 16 ) {
                    /*
                    if( Spieler[driver][pTaxiKundenAktiv] == 1 ) {
                        RemovePlayerFromVehicle(playerid);
                        SendClientMessage(playerid,COLOR_LIGHTRED2,"In diesem Fahrzeug wird bereits mindestens ein Kunde befördert");
                        return 1;
                    }
                    */
                    format(String,sizeof(String),"Fahrgast %s ist in deinem Taxi eingestiegen. Die Fahrt beginnt, nachdem er diese bestätigt.",GetName(playerid));
                    SendClientMessage(driver,COLOR_YELLOW,String);
                    format(String,sizeof(String),"Taxi Informationen:\n\nFahrer: %s\nTaxikosten: $%s je 100m",GetName(driver), AddDelimiters(Spieler[driver][pTaxiPreis]));
                    ShowPlayerDialog(playerid,DIALOG_TAXI,DIALOG_STYLE_MSGBOX,"Taxifahrt",String,"Starten","Aussteigen");
                    FreezePlayer(playerid);
                    SetCameraBehindPlayer(playerid);
                    ShowPlayerTacho(playerid);
                    return 1;
                }
            }
        }
        if( aiVehicles[vehicleid] == VEH_BUS ) {
            new
                busIndex = GetBusIndex(vehicleid);
            if(busIndex != -1 ) {
                if( t3dBus[busIndex] != Text3D:INVALID_3DTEXT_ID) {
                    if(JobVehicle[playerid] != vehicleid) {
                        if( Spieler[playerid][pCash] < BUS_TICKET_PRICE ) {
                            new
                                String[128],
                                driver;
                            driver = VehicleDriverID(vehicleid);
                            SendClientMessage(playerid,COLOR_RED,"Du konntest dir kein Fahrtticket für "#BUS_TICKET_PRICE"$ kaufen und fährst somit Schwarz!");
                            format(String,sizeof(String),"Fahrgast %s konnte sein Fahrtticket nicht bezahlen und ist Schwarzfahrer!",GetName(playerid));
                            SendClientMessage(driver,COLOR_RED,String);
                        }
                        else {
                            new
                                firmenindex;
                            firmenindex = GetJobFirmaIndex(2);
                            Spieler[playerid][pCash] -= BUS_TICKET_PRICE;
                            g_Firma[firmenindex][F_iKasse] += BUS_TICKET_PRICE;
                            SendClientMessage(playerid,COLOR_YELLOW,"Dir wurden "#BUS_TICKET_PRICE"$ für das Fahrtticket berechnet");
                        }
                    }
                }
            }
        }
    }
    else if (newstate == PLAYER_STATE_DRIVER) {
        new typ, string[256], modelid;
        vehicleid = GetPlayerVehicleID(playerid);
        modelid = GetVehicleModel(vehicleid);
        if (!(Spieler[playerid][pFraktion] == 15 && Spieler[playerid][bMaske])) AddVehiclePassenger(vehicleid,playerid);
        if(!(Spieler[playerid][pFraktion] == 8 || pFahrStunde[playerid] == 1))
        {
            if(FrakCarInfo[vehicleid][f_frak] == 8)
			{
				FreezePlayer(playerid);
				GameTextForPlayer(playerid, "~w~Du bist kein ~r~Fahrlehrer", 4000, 3);
				RemovePlayerFromVehicle(playerid);
				UnfreezePlayer(playerid);
			}
        }
        SetPlayerArmedWeapon(playerid, 0);
        new mod = GetVehicleModel( vehicleid );
        if(IsBicycle(mod))
        {
            new engine, light, alarm, doors, bonnet, boot, objective;
            GetVehicleParamsEx( vehicleid , engine, light, alarm, doors, bonnet, boot, objective);
            SetVehicleParamsEx( vehicleid, VEHICLE_PARAMS_ON, light, alarm, doors, bonnet, boot, objective);
        }else if(IsACar(mod)) {
            //new v_name[128];
            //new debugtest[128];
            //GetVehicleNumberPlate(vehicleid, v_name, 128);
            //GetVehicleName(vehicleid, v_name, 128);
            //format(debugtest, sizeof(debugtest), "Kennzeichen: %s", v_name);
            //SendClientMessage(playerid, COLOR_BLUE, debugtest);
            if(aiVehicles[vehicleid] == VEH_SUPCAR && Spieler[playerid][pAdmin] < 1) {
                FreezePlayer(playerid);
                RemovePlayerFromVehicle(playerid);
                UnfreezePlayer(playerid);
                SendClientMessage(playerid, COLOR_RED, "Du darfst dieses Fahrzeug nicht fahren!");
            }
        }
        /*else if(IsACar(mod))
        {
            if(Spieler[playerid][pCarLic] == 0 && pFahrStunde[playerid] == 0&&pFahrschulCar[playerid]== INVALID_VEHICLE_ID)
            {

                FreezePlayer(playerid);
                RemovePlayerFromVehicle(playerid);
                UnfreezePlayer(playerid);
                SendClientMessage(playerid, COLOR_RED, "Du hast noch keinen Führerschein!");
            }
        }
        else if(IsAPlane(mod))
        {
            if(Spieler[playerid][pFlyLic] == 0 && pFahrStunde[playerid] == 0&&pFahrschulCar[playerid]== INVALID_VEHICLE_ID)
            {
                FreezePlayer(playerid);
                RemovePlayerFromVehicle(playerid);
                UnfreezePlayer(playerid);
                SendClientMessage(playerid, COLOR_RED, "Du hast noch keinen Flugschein!");
                return 1;
            }
        }
        else if(IsATruck(mod))
        {
            if(Spieler[playerid][pLKWLic] == 0 && pFahrStunde[playerid] == 0&&pFahrschulCar[playerid]== INVALID_VEHICLE_ID)
            {
                FreezePlayer(playerid);
                RemovePlayerFromVehicle(playerid);
                UnfreezePlayer(playerid);
                SendClientMessage(playerid, COLOR_RED, "Du hast noch keinen LKW-Schein!");
            }
        }
        else if(IsABike(mod))
        {
            if (!(mod == 462 || mod == 448)) {
                if(Spieler[playerid][pMotoLic] == 0 && pFahrStunde[playerid] == 0&&pFahrschulCar[playerid]== INVALID_VEHICLE_ID)
                {
                    FreezePlayer(playerid);
                    RemovePlayerFromVehicle(playerid);
                    UnfreezePlayer(playerid);
                    SendClientMessage(playerid, COLOR_RED, "Du hast noch keinen Motorradschein!");
                }
            }
        }*/
        if( !IsBicycle(modelid) )
        {
            if( aiVehicles[vehicleid] != VEH_VERLEIH ) {
                SendClientMessage(playerid, COLOR_WHITE, COLOR_HEX_WHITE"* Den Motor startest du mit "COLOR_HEX_BLUE"/Motor "COLOR_HEX_WHITE", mit "COLOR_HEX_BLUE"/Licht "COLOR_HEX_WHITE"schaltest du dein Licht ein!");
            }
        }
        if( Spieler[playerid][pJob] == 16 ) {
            if( _:g_t3dTaxi[vehicleid] != INVALID_3DTEXT_ID ) {
                if(  modelid == 420  ||  modelid == 438 ) {
                    if( HasPlayerTaxiCustomers(playerid) ) {
                        KillTimer(Spieler[playerid][tTaxiLeave]);
                        SendTaxiMessage(playerid,COLOR_YELLOW,"** Die Taxi-Fahrt geht weiter");
                        SendClientMessage(playerid,COLOR_YELLOW,"** Die Taxi-Fahrt geht weiter");
                    }
                }
            }
        }
        // Farmer darf fahrzeug nicht nachträglich bewegen
        if( Spieler[playerid][pJob] == 1 ) {
            if( CP_HARVEST15 <= pCheckpoint[playerid] <= CP_HARVEST18 ) {
                if( vehicleid == JobVehicle[playerid]) {
                    RemovePlayerFromVehicle(playerid);
                }
            }
        }
        if( Spieler[playerid][pJob] == 9 ) {
            if( CP_GARTEN15 <= pCheckpoint[playerid] <= CP_GARTEN19 ) {
                if( vehicleid == JobVehicle[playerid]) {
                    RemovePlayerFromVehicle(playerid);
                }
            }
        }
        typ = IsAutohausCar(vehicleid);
        if(!(typ==-1))
        {
            FreezePlayer(playerid);
            Spectating[playerid][0]=typ;
            new str[512];
            new kraftstoff = GetVehicleModelKraftstoff(modelid);
            format(str, sizeof(str), "{FFFFFF}Willkommen im Autohaus.\n{3F62DA}Informationen:\n{3F62DA}Name:{FFFFFF}\t%s\n{3F62DA}Preis:{FFFFFF}\t  $%s"\
                "\n{3F62DA}Tank:{FFFFFF}\t  %d\n{3F62DA}Kraftstoff:{FFFFFF}\t  %s\n\nWenn du dieses Fahrzeug wirklich kaufen möchtest,\ndann drücke auf "\
                "\"{3F62DA}Kaufen{FFFFFF}\".\nWenn nicht drücke auf \"{3F62DA}Abbrechen{FFFFFF}\".", Kaufliste[typ][Name], AddDelimiters(Kaufliste[typ][aPreis]), Kaufliste[typ][Tank],g_asKraftstoff[kraftstoff]);
            ShowPlayerDialog(playerid, DIALOG_SELLCAR , DIALOG_STYLE_MSGBOX, "{3F62DA}Autohaus", str, "Kaufen", "Abbrechen");
            return 1;
        }
        if( IsBicycle( modelid) ) {
            new engine,lights,alarm,doors,bonnet,boot,objective;
            GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
            SetVehicleParamsEx(vehicleid,true,lights,alarm,doors,bonnet,boot,objective);
        }
        new h,m;
        GetPlayerTime(playerid,h,m);
        if((h >= aiLichtpflicht[0] || h <= aiLichtpflicht[1]) && !IsBicycle(vehicleid)) {
            SendClientMessage(playerid,COLOR_ORANGE,"[VERKEHRSINFO] Bei Dunkelheit muss die Fahrzeugbeleuchtung angeschaltet sein! Befehl: /Licht");
        }
        if( aiVehicles[vehicleid] == VEH_COMBINES ) {
            for(new i=0;i<sizeof(combines);i++)
            {
                if(vehicleid == combines[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 1)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Farmer Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startbauer zum starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stopbauer zum stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Farmer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }/*
        if( aiVehicles[vehicleid] == VEH_ZUGB ) {
            for(new i=0;i<sizeof(zugb);i++)
            {
                if(vehicleid == zugb[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 23)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Zugfahrer Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startzug zum starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stopzug zum stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Zugfahrer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }*/
        else if( aiVehicles[vehicleid] == VEH_DROGEN ) {
            for(new i=0;i<sizeof(drogen);i++)
            {
                if(vehicleid == drogen[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 17)
                    {
                        JobVehicle[playerid] = vehicleid;
                        new str[128];
                        format(str, sizeof(str), "** Drogenbestand des Fahrzeugs: %d **", bestand[vehicleid]);
                        SendClientMessage(playerid, COLOR_GREEN, str);
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Paketeinladen zum aufladen der Pakete.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Paketentladen zum entladen der Pakete.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Drogendealer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_WDEALER ) {
            for(new i=0;i<sizeof(wdealer);i++)
            {
                if(vehicleid == wdealer[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 18)
                    {
                        JobVehicle[playerid] = vehicleid;
                        new str[128];
                        format(str, sizeof(str), "** Waffenbestand des Fahrzeugs: %d **", bestand[vehicleid]);
                        SendClientMessage(playerid, COLOR_GREEN, str);
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Paketeinladen zum aufladen der Pakete.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Paketentladen zum entladen der Pakete.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Waffendealer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_WANTEDCAR ) {
            for(new i=0;i<sizeof(vehicle_wantedHackerBase);i++)
            {
                if(vehicleid == vehicle_wantedHackerBase[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 21)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_WHITE, "Fahre in die Nähe des Los Santos Police Departments.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Wantedhacken um dich ins Polizeisystem einzuhacken.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Wantedhacker.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_BUS ) {
            for(new i=0;i<sizeof(vehicle_busStation);i++)
            {
                if(vehicleid == vehicle_busStation[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 2)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Busfahrer Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startlinie zum starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stoplinie zum stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Busfahrer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_FLUG ) {
            for(new i=0;i<sizeof(vehicle_airportLs);i++)
            {
                if(vehicleid == vehicle_airportLs[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 4)
                    {
						new skill = GetPlayerPilotSkillLevel(playerid);
						new model = GetVehicleModel(vehicleid);
                        if(model == 553 && skill < 2){
                            SendClientMessage(playerid, COLOR_RED, "Du brauchst Skill-Level 2 für dieses Flugzeug!");
                        	RemovePlayerFromVehicle(playerid);
                        	break;
						}else if(model == 519 && skill < 3){
                            SendClientMessage(playerid, COLOR_RED, "Du brauchst Skill-Level 3 für dieses Flugzeug!");
                        	RemovePlayerFromVehicle(playerid);
                        	break;
						}else if(model == 577 && skill < 4){
                            SendClientMessage(playerid, COLOR_RED, "Du brauchst Skill-Level 4 für dieses Flugzeug!");
                        	RemovePlayerFromVehicle(playerid);
                        	break;
						}else{
	                        JobVehicle[playerid] = vehicleid;
	                        SendClientMessage(playerid, COLOR_GREEN, "* Pilot Information *");
	                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startflug zum starten.");
	                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stopflug zum stoppen.");
	                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
	                        break;
						}
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Pilot.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_TRUCK ) {
            for(new i=0;i<sizeof(vehicle_truckerBase);i++)
            {
                if(vehicleid == vehicle_truckerBase[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 3)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Trucker Information *");
                        if(GetVehicleModel(vehicleid) == 514)
                        {
                            SendClientMessage(playerid, COLOR_ORANGE, "Wenn du Tank beliefern möchtest, verwende folgende Befehle:");
                            SendClientMessage(playerid, COLOR_WHITE, "Tippe /Loadbenzin um den Tanker mit Benzin zu beladen.");
                            SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startbenzin um das Benzin Auslieferungsort zu erfahren.");
                            SendClientMessage(playerid, COLOR_WHITE, "Unter /Navi -> Weitere Orte findest du die Öl-Raffinerie.");
                            break;
                        }
                        else if(GetVehicleModel(vehicleid) == 514)
                        {
                            SendClientMessage(playerid, COLOR_ORANGE, "Wenn du Waren ausliefern möchtest, verwende folgende Befehle:");
                            SendClientMessage(playerid, COLOR_WHITE, "Tippe /Loadwaren um den Transporter mit Waren zu beladen.");
                            SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startwaren um die Waren Auslieferungsort zu erfahren.");
                            SendClientMessage(playerid, COLOR_WHITE, "Unter /Navi -> Weitere Orte findest du die Waren-Vergabe.");
                            break;
                        }
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Trucker.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_KFZCARS ) {
            for(new i=0;i<sizeof(kfzcars);i++)
            {
                if(vehicleid == kfzcars[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 5)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* KFZ-Mechatroniker Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Reparieren [SpielerID/Name] [Preis] zum reparieren.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Nachtanken [SpielerID/Name] [Preis] zum auftanken.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein KFZ-Mechatroniker.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_REINIGUNG ) {
            for(new i=0;i<sizeof(reinigung);i++)
            {
                if(vehicleid == reinigung[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 7)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Straßenreiniger Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startreinigung um zu starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stopreinigung um zu stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Straßenreiniger.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_GARTENCARS ) {
            for(new i=0;i<sizeof(vehicle_gardenerBase);i++)
            {
                if(vehicleid == vehicle_gardenerBase[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 9)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Gärtner Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startgarten um zu starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stopgarten um zu stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Gärtner.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_MUELL ) {
            for(new i=0;i<sizeof(muell);i++)
            {
                if(vehicleid == muell[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 8)
                    {
                        JobVehicle[playerid] = vehicleid;
                        if( pCheckpoint[playerid] != CP_MUELL ) {
                            SendClientMessage(playerid, COLOR_GREEN, "* Müllmann Information *");
                            SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startmuell um zu starten.");
                            SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stopmuell um zu stoppen.");
                            SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        }
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Müllmann.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_GELDT ) {
            for(new i=0;i<sizeof(geldt);i++)
            {
                if(vehicleid == geldt[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            // Es wird gerade genutzt, möglich Raub!
                            // SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            // RemovePlayerFromVehicle(playerid);
                            if( Spieler[pID][pTransportActive] ) {
                                SendClientMessage(playerid, COLOR_GREEN, "Du kannst den Geldtransporter nun stehlen");
                                break;
                            }
                        }
                    }
                    if(Spieler[playerid][pJob] == 12)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Geld-Transporter Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Starttransport um zu starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stoptransport um zu stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Geldeinladen um Bankautomaten mit Geld zu beladen.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Geld-Transporter.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_SCHIFF ) {
            for(new i=0;i<sizeof(vehicle_boatCargoJob);i++)
            {
                if(vehicleid == vehicle_boatCargoJob[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 11)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Schifffahrer Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startschiff um zu starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stopschiff um zu stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Schiffsfahrer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_BAUARB ) {
            for(new i=0;i<sizeof(bauarb);i++)
            {
                if(vehicleid == bauarb[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 10)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Bauareiter Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Startbauarbeiter um zu starten.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Stopbauarbeiter um zu stoppen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Bauarbeiter.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_EISMANN ) {
            for(new i=0;i<sizeof(eismann);i++)
            {
                if(vehicleid == eismann[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 13)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Eismann Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Eisverkaufen um Eis zu verkaufen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Eisverkäufer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_PIZZACAR ) {
            for(new i=0;i<sizeof(pizzacar);i++)
            {
                if(vehicleid == pizzacar[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 15)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Pizza Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Pizzaverkaufen um Pizza zu verkaufen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Pizzaman.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_HOTDOGCAR ) {
            for(new i=0;i<sizeof(hotdogcar);i++)
            {
                if(vehicleid == hotdogcar[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 23)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Hotdog-Verkäufer Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Hotdogverkaufen um ein Hotdog zu verkaufen.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Hotdogverkäufer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        else if( aiVehicles[vehicleid] == VEH_TAXICAR ) {
            for(new i=0;i<sizeof(vehicle_taxiStations);i++)
            {
                if(vehicleid == vehicle_taxiStations[i])
                {
                    for(new pID=0;pID<MAX_PLAYERS;pID++)
                    {
                        if(JobVehicle[pID] == vehicleid && JobVehicle[playerid] != vehicleid)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird derzeit noch benutzt!");
                            RemovePlayerFromVehicle(playerid);
                            break;
                        }
                    }
                    if(Spieler[playerid][pJob] == 16)
                    {
                        JobVehicle[playerid] = vehicleid;
                        SendClientMessage(playerid, COLOR_GREEN, "* Taxi Information *");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Starttaxi um als Taxifahrer im Dienst zu sein.");
                        SendClientMessage(playerid, COLOR_WHITE, "Tippe /Joblock zum abschließen des Fahrzeugs.");
                        break;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist kein Taxifahrer.");
                        RemovePlayerFromVehicle(playerid);
                        break;
                    }
                }
            }
        }
        new besitzer = GetCarOwner(vehicleid);
        if( besitzer != INVALID_PLAYER_ID ) {
            new Slot = GetCarOwnerSlot(besitzer, vehicleid);
            if( !HasVehicleLicence( besitzer,Slot ) && !IsBicycle(GetVehicleModel(vehicleid))) {
                SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug besitzt kein Kennzeichen.");
                SendClientMessage(playerid, COLOR_ORANGE, "Melde dein Fahrzeug bei der Verkehrsbehörde an: /Navi -> Behörden -> Zulassungsstelle");
            }
            if(vehicleid == PlayerCar[besitzer][Slot][CarId])
            {
                if(PlayerCar[besitzer][Slot][CarState] == e_Vehicle_Status_Towed)
                {
                    FreezePlayer(playerid);
                    format(string, sizeof(string), COLOR_HEX_BLUE"Dieses Fahrzeug wurde aufgrund einer Ordnungswidrigkeit abgeschleppt!\n"COLOR_HEX_WHITE"Um das Fahrzeug freizukaufen, benötigst du "COLOR_HEX_ORANGE"$70.000"COLOR_HEX_WHITE"!\nKlicke nun auf \"Freikaufen\" um dein Fahrzeug zurück zu bekommen.");
                    ShowPlayerDialog(playerid, DIALOG_CAROAMT, DIALOG_STYLE_MSGBOX, COLOR_HEX_BLUE"Ordnungsamt", string, "Freikaufen", "Abbrechen");
                }
             }
        }
    }
    if(oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
    {
        if (!GetPVarInt(playerid, "MP3.PLAYER")) StopAudioStreamForPlayer(playerid);
        HidePlayerTacho(playerid);
        //PlayerTextDrawHide(playerid, TachoMessage[0][playerid]);
        //PlayerTextDrawHide(playerid, TachoMessage[1][playerid]);
        //PlayerTextDrawHide(playerid, TachoMessage[2][playerid]);
        /*
        if( IsPlayerAttachedObjectSlotUsed(playerid,ATTACHED_INDEX_HELM)) {
            RemovePlayerAttachedObject(playerid,ATTACHED_INDEX_HELM);
        }
        */
    }
    if (oldstate == PLAYER_STATE_PASSENGER) {
        new fraktion_vehicle = GetVehicleFraktion(g_aiLastVehicle[playerid]);
        if (fraktion_vehicle) {
            new bool:passengers = false;
            for (new i = 0; i <= GetPlayerPoolSize(); i++) {
                if (GetPlayerVehicleID(playerid) == g_aiLastVehicle[playerid]) passengers = true;
                break;
            }
            if (!passengers) UnLockCar(g_aiLastVehicle[playerid]);
        }
    }
    if(oldstate == PLAYER_STATE_DRIVER) {
        new fraktion_vehicle;
        fraktion_vehicle = GetVehicleFraktion( g_aiLastVehicle[playerid] );
        if(fraktion_vehicle) {
            // Fraktionsfahrzeuge automatisch aufschließen beim aussteigen
            UnLockCar( g_aiLastVehicle[playerid] );
        }
        vehicleid = g_aiLastVehicle[playerid];
        if(vehicleid && vehicleid != INVALID_VEHICLE_ID) {
            if( VEH_DROGEN <= aiVehicles[vehicleid] <= VEH_KFZCARS ) {
                UnLockCar(vehicleid);
            }
        }
    }
    if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
    {
        //PlayerTextDrawShow(playerid, TachoMessage[0][playerid]);
        //PlayerTextDrawShow(playerid, TachoMessage[1][playerid]);
        //PlayerTextDrawShow(playerid, TachoMessage[2][playerid]);
        new
            modelid;
        modelid = GetVehicleModel(vehicleid);
        if( !IsBicycle(modelid)) {
            ShowPlayerTacho(playerid);
        }

//      Gear_UpdateGearDraw(playerid,vehicleid);
        if( Spieler[playerid][pHaustierSpawned] ) {
            Haustier_RemovePlayer(playerid);
        }
        if (aiVehicles[vehicleid] == VEH_PVERLEIH) {
        	if( Spieler[playerid][pVehicleVerleih] != INVALID_VEHICLE_ID ) {
                RemovePlayerFromVehicle(playerid);
                SendClientMessage(playerid,COLOR_YELLOW,"Du hast bereits ein Fahrzeug ausgeliehen");
                return 1;
            }
            new
                index,
                price,
                String[128];
       		index = GetPurgeVerleihIndex(vehicleid);
         	price = g_PurgeVerleihFahrzeuge[index][FVF_iPrice];
         	format(String,sizeof(String),"{FFFFFF}Fahrzeug: %s\n\
         	Mietpreis: $%s, für 7 Stunden",CarName[modelid - 400], AddDelimiters(price));
         	ShowPlayerDialog(playerid,DIALOG_PURGEFVERLEIH,DIALOG_STYLE_MSGBOX,COLOR_HEX_LIGHTBLUE "Fahrzeugverleih",String,"Leihen","Abbruch");
         	LockCar( vehicleid );
         	miettimer[playerid]=1;
         	SetTimerEx("miettimercheck",10000,false,"i",playerid);
        }
        if( aiVehicles[vehicleid] == VEH_VERLEIH ) {
            if( Spieler[playerid][pVehicleVerleih] != INVALID_VEHICLE_ID ) {
                RemovePlayerFromVehicle(playerid);
                SendClientMessage(playerid,COLOR_YELLOW,"Du hast bereits ein Fahrzeug ausgeliehen");
                return 1;
            }
            new
                index,
                price,
                String[128];
            index = GetFahrzeugVerleihIndex(vehicleid);
            price = g_FahrzeugVerleihFahrzeuge[index][FVF_iPrice];
            format(String,sizeof(String),"{FFFFFF}Fahrzeug: %s\n\
            Mietpreis: $%s, für 3 Stunden",CarName[modelid - 400], AddDelimiters(price));
            ShowPlayerDialog(playerid,DIALOG_FAHRZEUGVERLEIH,DIALOG_STYLE_MSGBOX,COLOR_HEX_LIGHTBLUE "Fahrzeugverleih",String,"Leihen","Abbruch");
            LockCar( vehicleid );
            miettimer[playerid]=1;
            SetTimerEx("miettimercheck",10000,false,"i",playerid);
            return 1;
        }
        // Fraktionscar ?
        new fraktion = GetVehicleFraktion(vehicleid);
        if( fraktion ) {
            if( FrakCarInfo[vehicleid][f_sperre] == true ) {
				if( fraktion == Spieler[playerid][pFraktion]) {
			        FreezePlayer(playerid);
					ShowPlayerDialog(playerid, DIALOG_FCAROAMT, DIALOG_STYLE_MSGBOX, COLOR_HEX_BLUE"Ordnungsamt", COLOR_HEX_BLUE"Dieses Fahrzeug wurde aufgrund einer Ordnungswidrigkeit abgeschleppt!\n"COLOR_HEX_WHITE"Um das Fahrzeug freizukaufen, benötigst du "COLOR_HEX_ORANGE"$160.000"COLOR_HEX_WHITE"!\nKlicke nun auf \"Freikaufen\" um dein Fahrzeug zurück zu bekommen.", "Freikaufen", "Abbrechen");
				}
				else { // Ordnungsamtsperre und nicht richtige Fraktion -> Raus
				    SendClientMessage(playerid,COLOR_RED,"Das Fahrzeug ist vom Ordnungsamt beschlagnahmt!");
				    RemovePlayerFromVehicle(playerid);
				}
            }
        }
        if(RadioSender[vehicleid] > 0)
        {
            if(RadioSender[vehicleid] == 1)
            {
                PlayAudioStreamForPlayer(playerid, "http://www.wdr.de/wdrlive/media/einslive.m3u");
            }
            else if(RadioSender[vehicleid] == 2)
            {
                PlayAudioStreamForPlayer(playerid, "http://listen.technobase.fm/tunein-dsl-pls");
            }
            else if(RadioSender[vehicleid] == 3)
            {
                PlayAudioStreamForPlayer(playerid, "http://listen.hardbase.fm/tunein-mp3-pls");
            }
            else if(RadioSender[vehicleid] == 4)
            {
                PlayAudioStreamForPlayer(playerid, "https://streams.ilovemusic.de/iloveradio1.mp3");
            }
            else if(RadioSender[vehicleid] == 5)
            {
                PlayAudioStreamForPlayer(playerid, "http://breakz.us/radio/listen.m3u");
            }
            else if(RadioSender[vehicleid] == 6)
            {
                PlayAudioStreamForPlayer(playerid, "http://metafiles.gl-systemhaus.de/hr/youfm_2.m3u");
            }
            else if(RadioSender[vehicleid] == 7)
            {
                PlayAudioStreamForPlayer(playerid, "http://streams.planetradio.de/planetradio/mp3/hqlivestream.m3u");
            }
            else if(RadioSender[vehicleid] == 8)
            {
                PlayAudioStreamForPlayer(playerid, "http://streams.planetradio.de/plrchannels/mp3/hqtheclub.m3u");
            }
            else if(RadioSender[vehicleid] == 9)
            {
                PlayAudioStreamForPlayer(playerid, "http://streams.planetradio.de/plrchannels/mp3/hqnightwax.m3u");
            }
            else if(RadioSender[vehicleid] == 10)
            {
                PlayAudioStreamForPlayer(playerid, "https://streams.ilovemusic.de/iloveradio5.mp3");
            }
            else if(RadioSender[vehicleid] == 11)
            {
                PlayAudioStreamForPlayer(playerid, "http://skyserver5.skydisc.net:8000/listen.pls");
            }
            else if(RadioSender[vehicleid] == 12)
            {
                PlayAudioStreamForPlayer(playerid, "https://streams.ilovemusic.de/iloveradio3.mp3");
            }
            else if(RadioSender[vehicleid] == 13)
            {
                PlayAudioStreamForPlayer(playerid, "https://streams.ilovemusic.de/iloveradio2.mp3");
            }
            else if(RadioSender[vehicleid] == 14)
            {
                PlayAudioStreamForPlayer(playerid, URL_LOGINMUSIC);
            }
            else if(RadioSender[vehicleid] == 17){
                PlayAudioStreamForPlayer(playerid, "http://217.74.72.11:8000/rmf_maxxx");
            }
            else if(RadioSender[vehicleid] == 15)
            {
                PlayAudioStreamForPlayer(playerid, "http://mp3.planetradio.de/plrchannels/hqitunes.mp3");
            }else if(RadioSender[vehicleid] == 18)
            {
                PlayAudioStreamForPlayer(playerid, Vehicle_Custom_Stream[GetPlayerVehicleID(playerid)]);
			}
        }
    }
    return 1;
}

public OnPlayerWaitPilot(playerid)
{
    new stunde, minute, sekunde;
    gettime(stunde, minute, sekunde);
    if(IsPlayerConnected(playerid) && gPlayerLogged[playerid] == 1)
    {
        if(PilotTime[playerid] < 6)
        {
            PilotTime[playerid] ++;
            if(PilotTime[playerid] == 1)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~5 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 2)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~4 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 3)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~3 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 4)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~2 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 5)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~1 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 6)
            {
                PlayerTextDrawHide(playerid, BusMessage[playerid]);
                PilotTime[playerid] = 0;
            }
        }

        KillTimer(pilotwait[playerid]);
        pilotwait[playerid] = INVALID_TIMER_ID;

        for(new i=0;i<sizeof(vehicle_airportLs);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(!(GetPlayerState(playerid) == PLAYER_STATE_DRIVER))return SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Flugzeug!");
            if(vID == vehicle_airportLs[i])
            {
                new pilotlog[128];
                new ort[24];
                GetPlayer2DZone(playerid, ort, 24);
                if(pCheckpoint[playerid] == CP_PILOT1)
                {
                    SetPlayerCheckpointEx(playerid, -1650.4489,-157.8306,15.4847, 7.0, CP_PILOT2);
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nächster Flughafen: San Fierro Easter Bay Airport");
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s", GetName(playerid), ort);
                    LogPilot(pilotlog);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_PILOT2)
                {
                    SetPlayerCheckpointEx(playerid, 1476.7418,1694.5992,12.1470, 7.0, CP_PILOT3);
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nächster Flughafen: Las Venturas Airport");
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s", GetName(playerid), ort);
                    LogPilot(pilotlog);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_PILOT3)
                {
                    SetPlayerCheckpointEx(playerid, 2045.5306,-2593.0469,14.8793, 7.0, CP_PILOT4);
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast die Lieferungen geliefert! Fliege nun wieder zum LS-Airport");
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s", GetName(playerid), ort);
                    LogPilot(pilotlog);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_PILOT4)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(4);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];

                    DisablePlayerCheckpointEx(playerid);
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s - Geld: %d$", GetName(playerid), ort, g_Firma[firmenindex][F_iGehalt]);
                    LogPilot(pilotlog);
                    SetVehicleToRespawn(vID);
                    ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                    Spieler[playerid][pPilotPoints]++;
                    new skill = GetPlayerPilotSkillLevel(playerid);
                    if(skill == 2){
                        SendClientMessage(playerid, COLOR_GREEN, "Aufgrund deiner Erfahrung erhältst du einen Bonus in Höhe von $2.500!");
                        GivePlayerCash(playerid, 2500);
					}
					if(skill == 3){
                        SendClientMessage(playerid, COLOR_GREEN, "Aufgrund deiner Erfahrung erhältst du einen Bonus in Höhe von $3.000!");
                        GivePlayerCash(playerid, 3000);
					}
					if(skill == 4){
                        SendClientMessage(playerid, COLOR_GREEN, "Aufgrund deiner Erfahrung erhältst du einen Bonus in Höhe von $3.500!");
                        GivePlayerCash(playerid, 3500);
					}
					if(skill == 5){
                        SendClientMessage(playerid, COLOR_GREEN, "Aufgrund deiner Erfahrung erhältst du einen Bonus in Höhe von $4.000!");
                        GivePlayerCash(playerid, 4000);
					}
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Flugzeug.");
    }
    return 1;
}

public OnPlayerWaitLinie(playerid)
{
    new stunde, minute, sekunde;
    gettime(stunde, minute, sekunde);
    if(IsPlayerConnected(playerid) && gPlayerLogged[playerid] == 1)
    {
        if(BusTime[playerid] < 6)
        {
            BusTime[playerid] ++;
            if(BusTime[playerid] == 1)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~5 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(BusTime[playerid] == 2)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~4 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(BusTime[playerid] == 3)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~3 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(BusTime[playerid] == 4)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~2 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(BusTime[playerid] == 5)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~1 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }

            else if(BusTime[playerid] == 6)
            {
                PlayerTextDrawHide(playerid, BusMessage[playerid]);
                BusTime[playerid] = 0;
            }
        }

        KillTimer(buswait[playerid]);
        buswait[playerid] = INVALID_TIMER_ID;

        for(new i=0;i<sizeof(vehicle_busStation);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(!(GetPlayerState(playerid) == PLAYER_STATE_DRIVER))return SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bus!");
            if(vID == vehicle_busStation[i])
            {
                new ort[24], string[128];
                GetPlayer2DZone(playerid, ort, 24);
                new buslogstring[128];
                new Float:x, Float:y, Float:z;
                GetPlayerPos(playerid, x,y,z);
                if(IsPlayerInRangeOfPoint(playerid, 7.0, x,y,z))
                if(pCheckpoint[playerid] == CP_BUSLINIE2CP1)
                {
                    SetPlayerCheckpointEx(playerid, 1467.4915,-1163.5656,23.7634, 5.0, CP_BUSLINIE2CP2);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Burger Binco");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE2CP2)
                {
                    SetPlayerCheckpointEx(playerid, 1445.7449,-1031.4774,23.6563, 5.0, CP_BUSLINIE2CP3);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Zentralbank");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE2CP3)
                {
                    SetPlayerCheckpointEx(playerid, 1326.7566,-921.7914,36.9193, 5.0, CP_BUSLINIE2CP4);
                    format(string, sizeof(string), "Nächste Haltestelle: 24/7 Shop in Los Santos");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE2CP4)
                {
                    SetPlayerCheckpointEx(playerid, 1143.1387,-941.4471,42.7462, 5.0, CP_BUSLINIE2CP5);
                    format(string, sizeof(string), "Nächste Haltestelle: Subway in Los Santos");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE2CP5)
                {
                    SetPlayerCheckpointEx(playerid, 939.6364,-1237.1488,16.4456, 5.0, CP_BUSLINIE2CP6);
                    format(string, sizeof(string), "Nächste Haltestelle: das Ordnungsamt");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE2CP6)
                {
                    SetPlayerCheckpointEx(playerid, 1148.8563,-1408.9939,13.5536, 5.0, CP_BUSLINIE2CP7);
                    format(string, sizeof(string), "Nächste Haltestelle: Einkaufszentrum");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE2CP7)
                {
                    SetPlayerCheckpointEx(playerid, 1262.7012,-1346.5897,13.2076, 5.0, CP_BUSLINIE2CP8);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Busbahnhof");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE2CP8)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(2);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];

                    DisablePlayerCheckpointEx(playerid);
                    //KillTimer(buswait[playerid]);
                    UnfreezePlayer(playerid);
                    SetVehicleToRespawn(vID);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s - Geld: %d$", GetName(playerid), 2, ort,g_Firma[firmenindex][F_iGehalt]);
                    LogBus(buslogstring);
                    return 1;
                }

                //Linie 1
                else if(pCheckpoint[playerid] == CP_BUSLINIE1CP1)
                {
                    SetPlayerCheckpointEx(playerid, 1244.7290,-1849.5387,13.3828, 5.0, CP_BUSLINIE1CP2);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Fahrschule");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE1CP2)
                {
                    SetPlayerCheckpointEx(playerid, 430.7518,-1700.3645,9.9467, 5.0, CP_BUSLINIE1CP3);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Strand");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE1CP3)
                {
                    SetPlayerCheckpointEx(playerid, 439.0800,-1502.6467,30.9004, 5.0, CP_BUSLINIE1CP4);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Victim Kleidergeschäft");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE1CP4)
                {
                    SetPlayerCheckpointEx(playerid, 800.6288,-1355.1935,13.3828, 5.0, CP_BUSLINIE1CP5);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Hauptbahnhof (Neulingsspawn)");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE1CP5)
                {
                    SetPlayerCheckpointEx(playerid, 1283.5902,-1408.5476,13.1148, 5.0, CP_BUSLINIE1CP6);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Standesamt");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE1CP6)
                {
                    SetPlayerCheckpointEx(playerid, 1262.7012,-1346.5897,13.2076, 5.0, CP_BUSLINIE1CP7);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Busbahnhof");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE1CP7)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(2);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];

                    DisablePlayerCheckpointEx(playerid);
                    //KillTimer(buswait[playerid]);
                    UnfreezePlayer(playerid);
                    SetVehicleToRespawn(vID);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s - Geld: %d$", GetName(playerid), 1, ort , g_Firma[firmenindex][F_iGehalt]);
                    LogBus(buslogstring);
                    ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                    return 1;
                }
                //Linie 3
                else if(pCheckpoint[playerid] == CP_BUSLINIE3CP1)
                {
                    SetPlayerCheckpointEx(playerid, 1818.3822,-1873.9189,13.4141, 5.0, CP_BUSLINIE3CP2);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Autohaus Günstig");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE3CP2)
                {
                    SetPlayerCheckpointEx(playerid, 1981.3246,-2169.5681,13.3765, 5.0, CP_BUSLINIE3CP3);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Flughafen/Airport");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE3CP3)
                {
                    SetPlayerCheckpointEx(playerid, 2685.8232,-2466.1296,13.5261, 5.0, CP_BUSLINIE3CP4);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Hafen");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE3CP4)
                {
                    SetPlayerCheckpointEx(playerid, 2204.0122,-1629.6177,15.6174, 5.0, CP_BUSLINIE3CP5);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Binco Kleidergeschäft in Los Santos");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE3CP5)
                {
                    SetPlayerCheckpointEx(playerid, 2013.3904,-1458.8781,13.3906, 5.0, CP_BUSLINIE3CP6);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Krankenhaus");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE3CP6)
                {
                    SetPlayerCheckpointEx(playerid, 1818.7804,-1676.5504,13.3828, 5.0, CP_BUSLINIE3CP7);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Alhambra (Disco)");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE3CP7)
                {
                    SetPlayerCheckpointEx(playerid, 1262.7012,-1346.5897,13.2076, 5.0, CP_BUSLINIE3CP8);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Busbahnhof");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE3CP8)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(2);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];

                    DisablePlayerCheckpointEx(playerid);
                    //KillTimer(buswait[playerid]);
                    UnfreezePlayer(playerid);
                    SetVehicleToRespawn(vID);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s - Geld: %d$", GetName(playerid), 1, ort , g_Firma[firmenindex][F_iGehalt]);
                    LogBus(buslogstring);
                    ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                    return 1;
                }
                //Linie 4
                else if(pCheckpoint[playerid] == CP_BUSLINIE4CP1)
                {
                    SetPlayerCheckpointEx(playerid, -133.1354,-192.5380,1.8781, 5.0, CP_BUSLINIE4CP2);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Bauernfarm und Trucker GmbH");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE4CP2)
                {
                    SetPlayerCheckpointEx(playerid, 638.5032,-576.7302,16.1875, 5.0, CP_BUSLINIE4CP3);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: das Zollamt");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE4CP3)
                {
                    SetPlayerCheckpointEx(playerid, 927.5668,-981.8544,38.2044, 5.0, CP_BUSLINIE4CP4);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Posthaus");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE4CP4)
                {
                    SetPlayerCheckpointEx(playerid, 1020.6340,-1151.9069,23.6563, 5.0, CP_BUSLINIE4CP5);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Clubvilla in Los Santos");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE4CP5)
                {
                    SetPlayerCheckpointEx(playerid, 1550.7195,-1305.7834,16.4186, 5.0, CP_BUSLINIE4CP6);
                    UnfreezePlayer(playerid);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Startower");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 1, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE4CP6)
                {
                    SetPlayerCheckpointEx(playerid, 1262.7012,-1346.5897,13.2076, 5.0, CP_BUSLINIE4CP7);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Busbahnhof");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(buswait[playerid]);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s", GetName(playerid), 2, ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BUSLINIE4CP7)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(2);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];

                    DisablePlayerCheckpointEx(playerid);
                    //KillTimer(buswait[playerid]);
                    UnfreezePlayer(playerid);
                    SetVehicleToRespawn(vID);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: %d - Ort: %s - Geld: %d$", GetName(playerid), 1, ort , g_Firma[firmenindex][F_iGehalt]);
                    LogBus(buslogstring);
                    ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SEV1CP1) {
                    SetPlayerCheckpointEx(playerid, 1791.2203,-1926.6321,13.3893, 5.0, CP_SEV1CP2);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Busbahnhof");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: SEV SF - Ort: %s", GetName(playerid), ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SEV1CP2) {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(2);
                    g_Firma[firmenindex][F_iKasse] += 10000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];

                    DisablePlayerCheckpointEx(playerid);
                    //KillTimer(buswait[playerid]);
                    UnfreezePlayer(playerid);
                    SetVehicleToRespawn(vID);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: SEV SF - Ort: %s - Geld: %d$", GetName(playerid), ort , g_Firma[firmenindex][F_iGehalt]);
                    LogBus(buslogstring);
                    ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                }
                else if(pCheckpoint[playerid] == CP_SEV2CP1) {
                    SetPlayerCheckpointEx(playerid, 1791.2203,-1926.6321,13.3893, 5.0, CP_SEV2CP2);
                    format(string, sizeof(string), "Nächste Haltestelle: Los Santos Busbahnhof");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: SEV LV - Ort: %s", GetName(playerid), ort);
                    LogBus(buslogstring);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SEV2CP2) {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(2);
                    g_Firma[firmenindex][F_iKasse] += 10000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];

                    DisablePlayerCheckpointEx(playerid);
                    //KillTimer(buswait[playerid]);
                    UnfreezePlayer(playerid);
                    SetVehicleToRespawn(vID);
                    format(buslogstring, sizeof(buslogstring), "Name: %s - Linie: SEV LV - Ort: %s - Geld: %d$", GetName(playerid), ort , g_Firma[firmenindex][F_iGehalt]);
                    LogBus(buslogstring);
                    ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bus!");
    }
    return 1;
}

/*public OnPlayerWaitZug(playerid)
{
    new stunde, minute, sekunde;
    gettime(stunde, minute, sekunde);
    if(IsPlayerConnected(playerid) && gPlayerLogged[playerid] == 1)
    {
        if(PilotTime[playerid] < 6)
        {
            PilotTime[playerid] ++;
            if(PilotTime[playerid] == 1)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~5 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 2)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~4 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 3)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~3 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 4)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~2 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 5)
            {
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~1 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);
                return 1;
            }
            else if(PilotTime[playerid] == 6)
            {
                PlayerTextDrawHide(playerid, BusMessage[playerid]);
                PilotTime[playerid] = 0;
            }
        }

        KillTimer(pilotwait[playerid]);
        pilotwait[playerid] = INVALID_TIMER_ID;

        for(new i=0;i<sizeof(zugb);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(!(GetPlayerState(playerid) == PLAYER_STATE_DRIVER))return SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Flugzeug!");
            if(vID == zugb[i])
            {
                new pilotlog[128];
                new ort[24];
                new string[128];
                GetPlayer2DZone(playerid, ort, 24);
                new Float:x, Float:y, Float:z;
                GetPlayerPos(playerid, x,y,z);
                if(IsPlayerInRangeOfPoint(playerid, 7.0, x,y,z))
                if(pCheckpoint[playerid] == CP_ZUGB1)
                {
                    SetPlayerCheckpointEx(playerid, 1403.8307,2636.3823,10.8203, 7.0, CP_ZUGB2);
                    format(string, sizeof(string), "Nächste Haltestelle: Las Venturas Nord-Bahnhof");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s", GetName(playerid), ort);
                    LogPilot(pilotlog);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_ZUGB2)
                {
                    SetPlayerCheckpointEx(playerid, -1948.2856,99.1580,25.7186, 7.0, CP_ZUGB3);
                    format(string, sizeof(string), "Nächste Haltestelle: Hauptbahnhof San Fierro");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s", GetName(playerid), ort);
                    LogPilot(pilotlog);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_ZUGB3)
                {
                    SetPlayerCheckpointEx(playerid, 839.5412,-1389.2937,-1.6202, 7.0, CP_ZUGB4);
                    format(string, sizeof(string), "Nächste Haltestelle: Bahnhof Los Santos - Market Station");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s", GetName(playerid), ort);
                    LogPilot(pilotlog);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_ZUGB4)
                {
                    SetPlayerCheckpointEx(playerid, 1587.7872,-1953.6045,13.5469, 7.0, CP_ZUGB5);
                    format(string, sizeof(string), "Nächste Haltestelle: Hauptbahnhof Los Santos - Endstation");
                    SendRoundMessage(x, y, z, COLOR_PURPLE, string);
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s", GetName(playerid), ort);
                    LogPilot(pilotlog);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_ZUGB5)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(23);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];

                    DisablePlayerCheckpointEx(playerid);
                    Spieler[playerid][pPayCheck] += 8500;
                    UnfreezePlayer(playerid);
                    //KillTimer(pilotwait[playerid]);
                    format(pilotlog, sizeof(pilotlog), "Name: %s - Ort: %s - Geld: %d$", GetName(playerid), ort, g_Firma[firmenindex][F_iGehalt]);
                    LogPilot(pilotlog);
                    SetVehicleToRespawn(vID);
                    ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Flugzeug.");
    }
    return 1;
}*/

public OnPlayerEnterCheckpoint(playerid)
{
    if(IsPlayerInRangeOfPoint(playerid, 10.0, 1463.9080, -1063.1261, 23.8477)){//Medic Krankenhäuser
        DisablePlayerCheckpointEx(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 1185.7225,-1323.6067,13.5590)){
        DisablePlayerCheckpointEx(playerid);
	}
	if(IsPlayerInRangeOfPoint(playerid, 10.0, 2002.5291,-1445.5175,13.5615)){
        DisablePlayerCheckpointEx(playerid);
	}
    new mvID = GetPlayerVehicleID(playerid);
    if (pCheckpoint[playerid] == CP_TRUCKERTANK || pCheckpoint[playerid] == CP_TRUCKERTANK2) {
        SendClientMessage(playerid, COLOR_GREEN, "Benutze /Entladen um das geladene Benzin zu verkaufen.");
    }
    else if (pCheckpoint[playerid] == CP_TRUCKERWAREN || pCheckpoint[playerid] == CP_TRUCKERWAREN2) {
        SendClientMessage(playerid, COLOR_GREEN, "Benutze /Entladen um die geladenen Waren zu verkaufen.");
    }
    else if (pCheckpoint[playerid] == CP_TUTORIAL1)
    {
        SendClientMessage(playerid, COLOR_GREEN, "Du kannst dir hier per /Startbonus ein Startgeschenk sichern.");
        SendClientMessage(playerid, COLOR_GREEN, "Auf der anderen Straßenseite kannst du dir ein Fahrrad mieten und zur Stadthalle fahren.");
        DisablePlayerCheckpointEx(playerid);
        SetPlayerCheckpointEx(playerid,1479.9335,-1746.1074,13.5469,3.0, CP_TUTORIAL2);
    }
    else if(pCheckpoint[playerid] == CP_FINDCAR)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_FINDFCAR)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SPRITKLAUEN) {
        SendClientMessage(playerid,COLOR_BLUE, INFO_STRING"/Spritklauen [Liter]");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_ROBSPRIT)
    {
        SCMFormatted(playerid, COLOR_GREEN,"Du hast die Mission erfolgreich beendet! Die Safebox füllt sich um %d Sprit.",GetPVarInt(playerid, "SPRITMENGE"));

        g_fraktion[15][Fr_FSSprit] += GetPVarInt(playerid, "SPRITMENGE");
        
        DeletePVar(playerid, "SPRITROB");
		DeletePVar(playerid, "STARTSPRIT");
		DeletePVar(playerid, "SPRITMENGE");
        DisablePlayerCheckpointEx(playerid);

        new String[128];
        format(String, sizeof(String), "[EILMELDUNG] Räuber %s hat den erfolgreich abgeschlossen!", GetName(playerid), playerid);
        SendFraktionMessage(1, COLOR_ORANGE, String);
        SendFraktionMessage(2, COLOR_ORANGE, String);
        SendFraktionMessage(16, COLOR_ORANGE, String);
        SendFraktionMessage(18, COLOR_ORANGE, String);
        SendFraktionMessage(22, COLOR_ORANGE, String);

        spritstatus = false;
    }
    else if(pCheckpoint[playerid] == CP_WT_VEH) {
        DisablePlayerCheckpointEx(playerid);
        SendClientMessage(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Steige nun aus dem Fahrzeug und hole dir eine Kiste ab!");

        SetPlayerCheckpointEx(playerid, 2846.3262,983.5958,10.7500,3.0, CP_WT_EINLADE);
    }
    else if(pCheckpoint[playerid] == CP_WT_EINLADE) {
        DisablePlayerCheckpointEx(playerid);
        SendClientMessage(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Laufe nun zum Fahrzeug und belade es mit der Kiste!");

        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
        SetPlayerAttachedObject( playerid, 0, 1271, 6, 0.150000, 0.219999, -0.200000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );

        for(new i; i < MAX_VEHICLES; i++){
            new vehiclemodel = GetVehicleModel(i);
            if(vehiclemodel == 499 && FrakCarInfo[i][f_frak] == 15){
                new Float:X, Float:Y;
                new Float:PX, Float:PY, Float:PZ;
                GetPlayerPos(playerid, PX, PY, PZ); // To get Z Coordinate only. 
                GetXYBehindOfVehicle(i, X, Y, 4);
                SetPlayerCheckpointEx(playerid, X, Y, PZ, 2.0, CP_WT_FAHRZEUGHINTEN);
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_WT_FAHRZEUGHINTEN){
        for(new i; i < MAX_VEHICLES; i++){
            new vehiclemodel = GetVehicleModel(i);
            if(vehiclemodel == 499 && FrakCarInfo[i][f_frak] == 15){
                DisablePlayerCheckpointEx(playerid);

                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
                RemovePlayerAttachedObject(playerid,0);

                bestand[i] += 1;
                new string[128];
                format(string, sizeof(string), "{B18904}[TRANSPORTER]\n\n{FFFFFF}Beladene Kisten: %i von 15", bestand[i]);
                Update3DTextLabelText(terrorVehLabel, 0xFFFFFFFF, string);
                if(bestand[i] >= 15){
                    for(new e; e < MAX_PLAYERS; e++){
                        if(Spieler[e][pFraktion] == 15 && Spieler[e][pRank] >= 2){
                            SendClientMessage(e, COLOR_GREEN, "[INFO] {FFFFFF}Fahre von zum Steg und belade das Boot mit den Kisten!");
                            SetPlayerCheckpointEx(e, 266.2877,2904.2700,7.8635,3.0, CP_WT_STEG);
                            SetPlayerSpecialAction(e,SPECIAL_ACTION_NONE);
                            RemovePlayerAttachedObject(e,0);
                        }
                    }
                    new String[128];
                    new zoneText[MAX_ZONE_NAME];
                    GetPlayer2DZone(playerid, zoneText, sizeof(zoneText));
                    format(String, sizeof(String), "[WT] {FFFFFF}Ein Bürger meldet einen verdächtigen Transporter in %s in Richtung Toter Flughafen!", zoneText);
                    SendFraktionMessage(1, COLOR_DARKYELLOW, String);
                    SendFraktionMessage(2, COLOR_DARKYELLOW, String);
                    SendFraktionMessage(16, COLOR_DARKYELLOW, String);
                    SendFraktionMessage(18, COLOR_DARKYELLOW, String);
                    SendFraktionMessage(22, COLOR_DARKYELLOW, String);
                }else{
                    SendClientMessage(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Hole eine neue Kiste und verstaue sie in das Fahrzeug!");
                    SetPlayerCheckpointEx(playerid, 2846.3262,983.5958,10.7500,3.0, CP_WT_EINLADE);
                }
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_WT_STEG){
        DisablePlayerCheckpointEx(playerid);

        if(!IsValidVehicle(speederID)){
            speederID = CreateVehicle(452, 255.1756,2933.8511,-1.0131,3.5351, -1, -1, 0);

            gGas[speederID] = GetMaxTank(speederID);
            gMaxGas[speederID] = GetMaxTank(speederID);

            Delete3DTextLabel(terrorBootLabel);
            bestand[speederID] = 0;
            new string[128];
            format(string, sizeof(string), "{B18904}[BOOT]\n\n{FFFFFF}Beladene Kisten: %i von 15", bestand[speederID]);
            terrorBootLabel = Create3DTextLabel(string, 0xFF0000AA, 0.0, 0.0, 0.0, 50.0, 0, 1 );
            Attach3DTextLabelToVehicle(terrorBootLabel, speederID, 0.0, 0.0, 2.0);
        }

        /*for(new i; i < MAX_VEHICLES; i++){
            new vehiclemodel = GetVehicleModel(i);
            if(vehiclemodel == 499 && FrakCarInfo[i][f_frak] == 19){
                new Float:X, Float:Y;
                new Float:PX, Float:PY, Float:PZ;
                GetPlayerPos(playerid, PX, PY, PZ); // To get Z Coordinate only. 
                GetXYBehindOfVehicle(i, X, Y, 4);
                SetPlayerCheckpointEx(playerid, X, Y, PZ, 2.0, CP_WT_FAHRZEUGHINTEN2);
                SendClientMessage(playerid, COLOR_YELLOW, "[WT] Belade nun das Boot den den Paketen!");
            }
        }*/
        SetPlayerCheckpointEx(playerid, 266.2877,2904.2700,7.8635, 2.0, CP_WT_FAHRZEUGHINTEN2);
        SendClientMessage(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Belade nun das Boot den den Paketen!");
    }
    else if(pCheckpoint[playerid] == CP_WT_FAHRZEUGHINTEN2){
        DisablePlayerCheckpointEx(playerid);

        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
        SetPlayerAttachedObject( playerid, 0, 1271, 6, 0.150000, 0.219999, -0.200000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );

        for(new i; i < MAX_VEHICLES; i++){
            new vehiclemodel = GetVehicleModel(i);
            if(vehiclemodel == 499 && FrakCarInfo[i][f_frak] == 15){
                bestand[i] -= 1;
                new string[128];
                format(string, sizeof(string), "{B18904}[TRANSPORTER]\n\n{FFFFFF}Beladene Kisten: %i von 15", bestand[i]);
                Update3DTextLabelText(terrorVehLabel, 0xFFFFFFFF, string);
                Attach3DTextLabelToVehicle(terrorVehLabel, i, 0.0, 0.0, 2.0);
                SetPlayerCheckpointEx(playerid, 258.4050,2933.7964,1.7734, 3.0, CP_WT_BOOTEINLADE);
                SendClientMessage(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Gehe nun zum Boot und belade es mit der Kiste!");
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_WT_BOOTEINLADE){
        DisablePlayerCheckpointEx(playerid);
        bestand[speederID] += 1;
        new string[128];
        format(string, sizeof(string), "{B18904}[BOOT]\n\n{FFFFFF}Beladene Kisten: %i von 15", bestand[speederID]);
        Update3DTextLabelText(terrorBootLabel, 0xFFFFFFFF, string);
        Attach3DTextLabelToVehicle(terrorBootLabel, speederID, 0.0, 0.0, 2.0);

        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(playerid,0);

        if(bestand[speederID] >= 15){
            for(new i; i < MAX_PLAYERS; i++){
                if(Spieler[i][pFraktion] == 15 && Spieler[i][pRank] >= 2){
                    SendClientMessage(i, COLOR_GREEN, "[INFO] {FFFFFF}Das Boot ist nun vollständig beladen! Fahre nun zur Waffenfabrik.");
                    SetPlayerCheckpointEx(i, 251.3709,3277.9836,0.2690, 3.0, CP_WT_BOOTPLATFORM);
                    SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
                    RemovePlayerAttachedObject(i,0);
                }
            }
        }else{
            SendClientMessage(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Gehe zum Transporter und hole eine neue Kiste!");
            /*for(new i; i < MAX_VEHICLES; i++){
                new vehiclemodel = GetVehicleModel(i);
                if(vehiclemodel == 499 && FrakCarInfo[i][f_frak] == 19){
                    new Float:X, Float:Y;
                    new Float:PX, Float:PY, Float:PZ;
                    GetPlayerPos(playerid, PX, PY, PZ); // To get Z Coordinate only. 
                    GetXYBehindOfVehicle(i, X, Y, 4);
                    SetPlayerCheckpointEx(playerid, X, Y, PZ, 2.0, CP_WT_FAHRZEUGHINTEN2);
                }
            }*/
            SetPlayerCheckpointEx(playerid, 266.2877,2904.2700,7.8635, 3.0, CP_WT_FAHRZEUGHINTEN2);
        }
    }
    else if(pCheckpoint[playerid] == CP_WT_BOOTPLATFORM){
        DisablePlayerCheckpointEx(playerid);
        SendClientMessage(playerid, COLOR_GREEN, "[INFO] {FFFFFF}Steige aus dem Boot aus und bringe die Kisten zum Verarbeiter, damit er daraus Waffenteile herstellen kann!");
        SetPlayerCheckpointEx(playerid, 248.9509,3282.2927,2.8503, 3.0, CP_WT_BOOTPLATFORM_ENTLADEN);
    }
    else if(pCheckpoint[playerid] == CP_WT_BOOTPLATFORM_ENTLADEN){
        DisablePlayerCheckpointEx(playerid);
        bestand[speederID] -= 1;
        new string[128];
        format(string, sizeof(string), "{B18904}[BOOT]\n\n{FFFFFF}Beladene Kisten: %i von 15", bestand[speederID]);
        Update3DTextLabelText(terrorBootLabel, 0xFFFFFFFF, string);

        SendClientMessage(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Bringe die Kiste hoch zum Verarbeiter!");
        SetPlayerCheckpointEx(playerid, 252.2882,3295.4624,10.4789, 3.0, CP_WT_BOOTPLATFORM_VERARBEITER);

        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
        SetPlayerAttachedObject( playerid, 0, 1271, 6, 0.150000, 0.219999, -0.200000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
        //terrorVerarbeiter
    }
    else if(pCheckpoint[playerid] == CP_WT_BOOTPLATFORM_VERARBEITER){
        DisablePlayerCheckpointEx(playerid);
        terrorVerarbeiter += 1;

        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(playerid,0);

        if(terrorVerarbeiter >= 15){
            for(new i; i < MAX_PLAYERS; i++){
                if(Spieler[i][pFraktion] == 15 && Spieler[i][pRank] >= 2){
                    SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
                    RemovePlayerAttachedObject(i,0);
                    SendClientMessage(i, COLOR_GREEN, "[INFO] {FFFFFF}Bringe nun die Kisten mit Waffenteilen zurück zum Boot!");
                    SetPlayerCheckpointEx(i, 248.9509,3282.2927,2.8503, 3.0, CP_WT_BOOTPLATFORM_EINLADEN);
                }
            }
            //CP_WT_BOOTPLATFORM_EINLADEN
            terrorVerarbeiter -= 1;
            SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
            SetPlayerAttachedObject( playerid, 0, 1271, 6, 0.150000, 0.219999, -0.200000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
        }else{
            SendClientMessage(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Hole weitere Kisten und bringe diese nach Oben!");
            SetPlayerCheckpointEx(playerid, 248.9509,3282.2927,2.8503, 3.0, CP_WT_BOOTPLATFORM_ENTLADEN);
        }
    }
    else if(pCheckpoint[playerid] == CP_WT_BOOTPLATFORM_EINLADEN){
        DisablePlayerCheckpointEx(playerid);

        bestand[speederID] += 1;
        new string[128];
        format(string, sizeof(string), "{B18904}[BOOT]\n\n{FFFFFF}Beladene Kisten: %i von 15", bestand[speederID]);
        Update3DTextLabelText(terrorBootLabel, 0xFFFFFFFF, string);

        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(playerid,0);

        if(bestand[speederID] >= 15){
            for(new i; i < MAX_PLAYERS; i++){
                if(Spieler[i][pFraktion] == 15 && Spieler[i][pRank] >= 2){
                    SendClientMessage(i, COLOR_GREEN, "[INFO] {FFFFFF}Fahre wieder zurück zum Steg um den Benson zu beladen!");
                    SetPlayerCheckpointEx(i, 255.1756,2933.8511,-1.0131, 3.0, CP_WT_GOBACK_STEGBOOT);
                    SetPlayerSpecialAction(i,SPECIAL_ACTION_NONE);
                    RemovePlayerAttachedObject(i,0);
                }
            }
        }else{
            SendClientMessage(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Gehe wieder hoch und hole eine neue Kiste mit Waffenteilen!");
            SetPlayerCheckpointEx(playerid, 252.2882,3295.4624,10.4789, 3.0, CP_WT_BOOTPLATFORM_VERARABHOLEN);
        }
    }
    else if(pCheckpoint[playerid] == CP_WT_BOOTPLATFORM_VERARABHOLEN){
        DisablePlayerCheckpointEx(playerid);
        SendClientMessage(playerid, COLOR_GREEN, "[INFO] {FFFFFF}Bringe nun die Kisten mit Waffenteilen zurück zum Boot!");
        //CP_WT_BOOTPLATFORM_EINLADEN
        terrorVerarbeiter -= 1;
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
        SetPlayerAttachedObject( playerid, 0, 1271, 6, 0.150000, 0.219999, -0.200000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
        SetPlayerCheckpointEx(playerid, 248.9509,3282.2927,2.8503, 3.0, CP_WT_BOOTPLATFORM_EINLADEN);
    }
    else if(pCheckpoint[playerid] == CP_WT_GOBACK_STEGBOOT){
        DisablePlayerCheckpointEx(playerid);
        SendClientMessage(playerid, COLOR_GREEN, "[INFO] {FFFFFF}Entnimm die Kisten aus dem Boot und belade den Benson!");
        SetPlayerCheckpointEx(playerid, 258.4050,2933.7964,1.7734, 3.0, CP_WT_GOBACK_ENTLADEN);
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(playerid,0);
    }
    else if(pCheckpoint[playerid] == CP_WT_GOBACK_ENTLADEN){
        DisablePlayerCheckpointEx(playerid);
        bestand[speederID] -= 1;
        new string[128];
        format(string, sizeof(string), "{B18904}[BOOT]\n\n{FFFFFF}Beladene Kisten: %i von 15", bestand[speederID]);
        Update3DTextLabelText(terrorBootLabel, 0xFFFFFFFF, string);
        SendClientMessage(playerid, COLOR_GREEN, "[INFO] {FFFFFF}Bringe die Kiste zum Benson und hole dann eine neue Kiste ab!");
        SetPlayerCheckpointEx(playerid, 266.2877,2904.2700,7.8635, 3.0, CP_WT_GOBACK_EINLADEN);
        SetPlayerAttachedObject( playerid, 0, 1271, 6, 0.150000, 0.219999, -0.200000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
        //SetPlayerCheckpointEx(playerid, 248.9509,3282.2927,2.8503, 3.0, CP_WT_BOOTPLATFORM_EINLADEN);
    }
    else if(pCheckpoint[playerid] == CP_WT_GOBACK_EINLADEN){
        DisablePlayerCheckpointEx(playerid);
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
        RemovePlayerAttachedObject(playerid,0);
        for(new i; i < MAX_VEHICLES; i++){
            new vehiclemodel = GetVehicleModel(i);
            if(vehiclemodel == 499 && FrakCarInfo[i][f_frak] == 15){
                bestand[i] += 1;
                new string[128];
                format(string, sizeof(string), "{B18904}[TRANSPORTER]\n\n{FFFFFF}Beladene Kisten: %i von 15", bestand[i]);
                Update3DTextLabelText(terrorVehLabel, 0xFFFFFFFF, string);
                if(bestand[i] >= 15){
                    bestand[speederID] = 0;
                    Delete3DTextLabel(terrorBootLabel);
                    DestroyVehicle(speederID);
                    //CP_WT_GOBACK_BASE
                    for(new e; e < MAX_PLAYERS; e++){
                        if(Spieler[e][pFraktion] == 15 && Spieler[e][pRank] >= 2){
                            SetPlayerSpecialAction(e,SPECIAL_ACTION_NONE);
                            RemovePlayerAttachedObject(e,0);
                            SendClientMessage(e, COLOR_GREEN, "[INFO] {FFFFFF}Das Fahrzeug ist voll beladen! Fahre zurück zu deiner Base, um die Pakete abzuliefern!");
                        }
                    }
                    SetPlayerCheckpointEx(playerid, 966.6749,2071.1108,10.8203, 3.0, CP_WT_GOBACK_BASE);
                    new String[128];
                    new zoneText[MAX_ZONE_NAME];
                    GetPlayer2DZone(playerid, zoneText, sizeof(zoneText));
                    format(String, sizeof(String), "[WT] {FFFFFF}Ein Bürger meldet einen verdächtigen Transporter in %s in Richtung Las Venturas Norden!", zoneText);
                    SendFraktionMessage(1, COLOR_DARKYELLOW, String);
                    SendFraktionMessage(2, COLOR_DARKYELLOW, String);
                    SendFraktionMessage(16, COLOR_DARKYELLOW, String);
                    SendFraktionMessage(18, COLOR_DARKYELLOW, String);
                    SendFraktionMessage(22, COLOR_DARKYELLOW, String);
                }else{
                    SendClientMessage(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Hole nun eine neue Kiste aus dem Boot!");
                    SetPlayerCheckpointEx(playerid, 258.4050,2933.7964,1.7734, 3.0, CP_WT_GOBACK_ENTLADEN);
                }
            }
        }
    }else if(pCheckpoint[playerid] == CP_WT_GOBACK_BASE){
        DisablePlayerCheckpointEx(playerid);
        for(new i; i < MAX_VEHICLES; i++){
            new vehiclemodel = GetVehicleModel(i);
            if(vehiclemodel == 499 && FrakCarInfo[i][f_frak] == 15){
                if(wtid == playerid){
                    bestand[i] = 0;
                    Delete3DTextLabel(terrorVehLabel);

                    #if defined NEUE_WIRTSCHAFT
                        new randombelohnung = 15000;
                    #else
                        new randombelohnung = RandomEx(30000, 50000);
                    #endif
                    g_fraktion[15][Fr_FSWaffenteile] += randombelohnung;
                    new String[128];
                    format(String, sizeof(String), "{3ADF00}[WT] Das Mitglied %s hat die Waffenteilmission abgeschlossen. (+ %i Waffenteile)", GetName(playerid), randombelohnung);
                    SendFraktionMessage(15, COLOR_YELLOW, String);
                    Delete3DTextLabel(terrorVehLabel);
                    Delete3DTextLabel(terrorBootLabel);
                    bestand[speederID] = 0;
                    DestroyVehicle(speederID);
                    wtstatus = false;
                    wtid = -1;
                }
            }
        }
    }
    else if(CP_NAVI1 <= pCheckpoint[playerid] <= CP_NAVI87)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if( CP_TRUCKERWAREN == pCheckpoint[playerid] ) {
        SendClientMessage(playerid, COLOR_SAMP, "Du kannst die Waren hier mit /Entladen entladen.");
    }
    else if( CP_HAUSSUCHEN == pCheckpoint[playerid] ) {
        SendClientMessage(playerid, COLOR_SAMP, "Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if( CP_COW_FINISH == pCheckpoint[playerid] ) {
        new
            firmenindex;
        firmenindex = GetJobFirmaIndex(1);
        g_Firma[firmenindex][F_iKasse] += 5000;
        new farmerlog[128];
        lagerbestand += 20;
        format(farmerlog, sizeof(farmerlog), "Name: %s - Geld: %d", GetName(playerid), g_Firma[firmenindex][F_iGehalt]);
        LogFarmer(farmerlog);
        g_Firma[firmenindex][F_iKasse] += 8000;
        Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
        new string[128];
        format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));
        GameTextForPlayer(playerid, string, 5000, 1);
        DisablePlayerCheckpointEx(playerid);
        SendClientMessage(playerid, COLOR_GREEN, "Deine Arbeit ist erledigt! Dein Gehalt erhältst du beim PayDay!");
        RemovePlayerAttachedObject(playerid, ATTACHED_INDEX_JOB );
        Spieler[playerid][pCowJob] = 0;
        Spieler[playerid][pCow][2] = 0;
        //Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
    }
    else if( CP_COW == pCheckpoint[playerid] ) {
        switch(random(4)) {
            case 0: ApplyAnimation(playerid, "CAR", "FIXN_CAR_LOOP", 4.0, 1, 0, 0, 0, 0,1); // cow1
            case 1: ApplyAnimation(playerid, "COP_AMBIENT", "COPBROWSE_SHAKE", 4.0, 1, 0, 0, 0, 0,1); // cow2
            case 2: ApplyAnimation(playerid, "MISC", "PLUNGER_01", 4.0, 1, 0, 0, 0, 0,1); // cow3
            case 3: ApplyAnimation(playerid, "ROB_BANK", "CAT_SAFE_ROB", 4.0, 1, 0, 0, 0, 0,1); // cow4
        }
        RemovePlayerAttachedObject(playerid, ATTACHED_INDEX_JOB );
        SetTimerEx("Cow_ShowNext",3011,false,"d",playerid);
        SetCameraBehindPlayer(playerid);
        GameTextForPlayer(playerid,"~w~~y~Kuh ~w~wird gemolken!",2500,5);
    }
    else if( CP_PRISONRUN == pCheckpoint[playerid] ) {
        Spieler[playerid][pPrisonRunCount]++;
        DisablePlayerCheckpointEx(playerid);
        if( Spieler[playerid][pPrisonRunCount] >= Spieler[playerid][pPrisonRun] ) {
            Spieler[playerid][pPrisonRunCount] = 0;
            Spieler[playerid][pPrisonRun] = 0;
            SetPlayerFacingAngle(playerid, LSPD_INTERIOR_ENTER_FACING);
            SetCameraBehindPlayer(playerid);
            SetPlayerPosEx(playerid, 960.7043, -1580.0457, 13.5469, MAPS_LSPDEXTERIOR_INTERIOR, VW_MAIN);
            SendClientMessage(playerid,COLOR_GREEN,"Du hast alle Checkpoints durchlaufen. Hoffentlich war das eine Lehre für dich!");
        }
        else {
            new
                String[64];
            format(String,sizeof(String),"[PRISON] {FF00FF}Checkpoints: %d/%d",Spieler[playerid][pPrisonRunCount],Spieler[playerid][pPrisonRun]);
            SendClientMessage(playerid,COLOR_RED,String);
            SetPlayerPrisonRunCheckpoint(playerid);
            CheckTeleHack(playerid,4000);
        }
    }
    /*
    else if(pCheckpoint[playerid] == CP_NAVI2)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI3)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI4)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI5)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI6)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI7)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI8)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI9)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI10)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid]== CP_NAVI11)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI12)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI13)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI14)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI15)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI16)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI17)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI18)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI19)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI20)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI21)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI22)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI23)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI24)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI25)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI26)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI27)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI28)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI29)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI30)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI31)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI32)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI33)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_NAVI34)
    {
        SendClientMessage(playerid, COLOR_SAMP, "GPS: Sie haben ihr Ziel erreicht.");
        DisablePlayerCheckpointEx(playerid);
    }
    */
    else if(pCheckpoint[playerid] == CP_TUTORIAL2)
    {
        SendClientMessage(playerid, COLOR_GREEN, "Steige nun vom Fahrzeug ab und gehe in die Stadthalle hinein.");
        SetPlayerCheckpointEx(playerid, 1480.7660,-1805.3538,15.3578, 5.0, CP_TUTORIAL3);
    }
    else if(pCheckpoint[playerid] == CP_TUTORIAL6)
    {
        SendClientMessage(playerid, COLOR_GREEN, "Fahre jetzt zur Fahrschule!");
        SetPlayerCheckpointEx(playerid, 1270.0138,-1846.0366,13.3906, 5.0, CP_TUTORIAL7);
    }
    else if(pCheckpoint[playerid] == CP_TUTORIAL7)
    {
        SendClientMessage(playerid, COLOR_GREEN, "Sollte ein Fahrlehrer anwesend sein, mache mit ihm eine Fahrprüfung. Mit /Liste -> Fahrschule siehst du alle Fahrlehrer.");
        SendClientMessage(playerid, COLOR_GREEN, "Wenn kein Fahrlehrer anwesend ist, kannst du an der Fahrschule auch eine automatische Fahrstunde starten.");
        SendClientMessage(playerid, COLOR_ORANGE, "INFO: Mit /HELP und /NAVI findest du dich hier auf dem Server zurecht!");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_BACKUP)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_DIEBSTAHL_GT ) {
        new
            vID;
        vID = GetPlayerVehicleID(playerid);
        for(new i=0;i<sizeof(geldt);i++)
        {
            if(vID == geldt[i])
            {
                if( JobVehicle[playerid] == vID ) {
                    RemovePlayerFromVehicle(playerid);
                    SendClientMessage(playerid, COLOR_GREEN, "+30.000$");
                    GivePlayerCash(playerid,30000);
                    DisablePlayerCheckpointEx(playerid);
                    JobVehicle[playerid] = INVALID_VEHICLE_ID;
                    SetVehicleToRespawn(vID);
                    SetPlayerPos(playerid,162.6819,-25.6529,1.5781);
                    SetPlayerFacingAngle(playerid,270.8931);
                    break;
                }
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE_OFFLINE) {
        new
            String[64],
            cp;
        pFahrschuleCP[playerid]++;
        cp = pFahrschuleCP[playerid];
        Spieler[playerid][unixFahrschuleZeit] = gettime() + 25;
        DisablePlayerCheckpointEx(playerid);
        format(String,sizeof(String),"%d/%d",cp,sizeof(g_FahrpruefungCP));
        SendClientMessage(playerid,COLOR_WHITE,String);
        if( cp >= sizeof( g_FahrpruefungCP ) ) {
            new
                vehicleid,
                modelid;
            vehicleid = GetPlayerVehicleID(playerid);
            modelid = GetVehicleModel(vehicleid);
            SendClientMessage(playerid,COLOR_YELLOW , "Glückwunsch, du hast die Führerscheinprüfung bestanden!" );
            SetPlayerInterior(playerid,3);
            SetPlayerPos(playerid,-2033.2031,-117.3853,1035.1719);
            SetPlayerFacingAngle(playerid,89.9276);
            if( modelid == 445 ) {
                SendClientMessage(playerid,COLOR_YELLOW,"Du hast den Auto-Führerschein bestanden!");
                Spieler[playerid][pCarLic] = 1;
            }
            else if( modelid == 461 ) {
                SendClientMessage(playerid,COLOR_YELLOW,"Du hast den Motorrad-Führerschein bestanden!");
                Spieler[playerid][pMotoLic] = 1;
            }
            else if( modelid == 515 ) {
                SendClientMessage(playerid,COLOR_YELLOW,"Du hast den LKW-Führerschein bestanden!");
                Spieler[playerid][pLKWLic] = 1;
            }
            FahrschuleAbbruch(playerid);
        }
        else {
            SetPlayerCheckpointEx(playerid, g_FahrpruefungCP[ cp ][F_fX] , g_FahrpruefungCP[ cp ][F_fY] , g_FahrpruefungCP[ cp ][F_fZ] ,5.0, CP_FAHRSCHULE_OFFLINE );
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE1)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1427.3734,-1721.5665,13.2578, 5.0, CP_FAHRSCHULE2);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE2)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1513.7784,-1734.6387,13.2577, 5.0, CP_FAHRSCHULE3);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE3)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1531.9985,-1607.7494,13.2577, 5.0, CP_FAHRSCHULE4);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE4)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1647.6162,-1594.5996,13.2730, 5.0, CP_FAHRSCHULE5);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE5)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1660.4186,-1449.8710,13.2624, 5.0, CP_FAHRSCHULE6);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE6)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1618.2543,-1438.7881,13.2577, 5.0, CP_FAHRSCHULE7);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE7)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1468.1348,-1438.7880,13.2578, 5.0, CP_FAHRSCHULE8);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE8)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1416.2992,-1399.0945,13.2572, 5.0, CP_FAHRSCHULE9);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE9)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1373.0175,-1397.9915,13.2633, 5.0, CP_FAHRSCHULE10);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE10)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1273.8141,-1398.1047,12.9125, 5.0, CP_FAHRSCHULE11);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE11)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1219.6558,-1398.0142,13.0678, 5.0, CP_FAHRSCHULE12);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE12)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1193.8879,-1557.7451,13.2578, 5.0, CP_FAHRSCHULE13);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE13)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1164.7354,-1569.3726,13.1682, 5.0, CP_FAHRSCHULE14);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE14)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1147.9781,-1698.9581,13.6562, 5.0, CP_FAHRSCHULE15);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE15)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1283.7072,-1714.6350,13.2579, 5.0, CP_FAHRSCHULE16);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE16)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1299.0903,-1840.0605,13.2578, 5.0, CP_FAHRSCHULE17);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE17)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1377.8132,-1874.0347,13.2577, 5.0, CP_FAHRSCHULE18);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE18)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1391.3584,-1741.5569,13.2578, 5.0, CP_FAHRSCHULE19);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE19)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1420.2920,-1734.8915,13.2615, 5.0, CP_FAHRSCHULE20);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE20)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1431.5961,-1659.6328,13.2578, 5.0, CP_FAHRSCHULE21);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE21)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SetPlayerCheckpointEx(playerid, 1357.5104,-1665.4655,13.4834, 5.0, CP_FAHRSCHULE22);
        }
        else
        {
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
            if(pFahrschulCar[playerid] != INVALID_VEHICLE_ID)
            {
                DestroyVehicleEx(mvID);
                aiVehicles[ mvID ] = VEH_INVALID;
            }
        }
    }
    else if(pCheckpoint[playerid] == CP_FAHRSCHULE22)
    {
        if(mvID == pFahrschulCar[playerid])
        {
            SendClientMessage(playerid, COLOR_GREEN, "Herzlichen Glückwunsch, Du hast den Führerschein erfolgreich erhalten!");
            SendClientMessage(playerid, COLOR_GREEN, "Falls du Berufe wie Trucker oder Pilot ausführen möchtest, musst du die entsprechenden Scheine");
            SendClientMessage(playerid, COLOR_GREEN, "bei einem Fahrlehrer machen. Ob ein Fahrlehrer online ist, kannst du unter /Liste sehen.");
            SendClientMessage(playerid, COLOR_GREEN, "Viel Spaß wünscht dir das LyD - Roleplay Team!");
            DestroyVehicleEx(pFahrschulCar[playerid]);
            aiVehicles[ pFahrschulCar[playerid] ] = VEH_INVALID;
            pFahrschulCar[playerid] = INVALID_VEHICLE_ID;
            DisablePlayerCheckpointEx(playerid);
            Spieler[playerid][pCarLic] = 1;
            pMakeTutorial[playerid] = 0;
        }
        else
        {
            pMakeTutorial[playerid] = 0;
            SendClientMessage(playerid, COLOR_RED, "Du bist durchgefallen, da du die Stunde mit einem anderen Fahrzeug fortsetzen wolltest!");
            DisablePlayerCheckpointEx(playerid);
        }
    }
    else if(CP_SHOWJOB1 <= pCheckpoint[playerid] <= CP_SHOWJOB13 )
    {
        DisablePlayerCheckpointEx(playerid);
    }
    if(IsPlayerInRangeOfPoint(playerid,10,-258.9534,-2181.9905,29.0150)||IsPlayerInRangeOfPoint(playerid,10,-1518.8336,2558.5051,55.8403))
    {
        CheckTeleHack(playerid,50000);
//      printf("waffendealer check aufgerufen");
        DisablePlayerCheckpointEx(playerid);
    }
    /*
    else if(pCheckpoint[playerid] == CP_SHOWJOB2)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB3)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB4)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB5)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB6)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB7)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB7)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB8)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB9)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB10)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB11)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_SHOWJOB13)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    */
    else if(pCheckpoint[playerid] == CP_TRUCK_RAFFINERIE)
    {
        SendClientMessage(playerid, COLOR_WHITE, "Du bist an der Ölrafinnerie angekommen. Tippe nun /Loadbenzin.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_TRUCK_BELADUNG)
    {
        SendClientMessage(playerid, COLOR_WHITE, "Du bist an der Warenbeladung angekommen. Tippe nun /Loadwaren.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_HOME)
    {
        GameTextForPlayer(playerid, "~w~Willkommen ~g~Zuhause", 3000, 6);
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_EVENTPOINT ) {
        SendClientMessage(playerid, COLOR_WHITE, "Du bist am Event angekommen.");
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_FINDEN)
    {
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_ACCEPTCOP)
    {
        GameTextForPlayer(playerid, "~w~Ziel ~g~Erreicht", 3000, 6);
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_ACCEPTSANI)
    {
        GameTextForPlayer(playerid, "~w~Ziel ~g~Erreicht", 3000, 6);
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_ACCEPTKFZ)
    {
        GameTextForPlayer(playerid, "~w~Ziel ~g~Erreicht", 3000, 6);
        DisablePlayerCheckpointEx(playerid);
    }
    else if(pCheckpoint[playerid] == CP_ACCEPTOAMT)
    {
        GameTextForPlayer(playerid, "~w~Ziel ~g~Erreicht", 3000, 6);
        DisablePlayerCheckpointEx(playerid);
    }
    //Pilot
    else if(CP_PILOT1 <= pCheckpoint[playerid] <= CP_PILOT4)
    {
        for(new i=0;i<sizeof(vehicle_airportLs);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_airportLs[i])
            {
                PilotTime[playerid] = 0;
                FreezePlayer(playerid);
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~6 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);

                KillTimer(pilotwait[playerid]);
                pilotwait[playerid] = SetTimerEx("OnPlayerWaitPilot", 1000, 1, "i", playerid);
                return 1;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Flugzeug!");
        return 1;
    }
    /*else if(CP_ZUGB1 <= pCheckpoint[playerid] <= CP_ZUGB5)
    {
        for(new i=0;i<sizeof(zugb);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == zugb[i])
            {
                PilotTime[playerid] = 0;
                FreezePlayer(playerid);
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~6 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);

                KillTimer(pilotwait[playerid]);
                pilotwait[playerid] = SetTimerEx("OnPlayerWaitZug", 1000, 1, "i", playerid);
                return 1;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Zug!");
        return 1;
    }*/
    else if( CP_BUSLINIE1CP1 <= pCheckpoint[playerid] <= CP_BUSLINIE1CP7)
    {
        for(new i=0;i<sizeof(vehicle_busStation);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_busStation[i])
            {
                BusTime[playerid] = 0;
                FreezePlayer(playerid);
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~6 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);

                KillTimer(buswait[playerid]);
                buswait[playerid] = SetTimerEx("OnPlayerWaitLinie", 1000, 1, "i", playerid);
                return 1;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bus!");
        return 1;
    }
    else if(CP_BUSLINIE2CP1 <= pCheckpoint[playerid] <= CP_BUSLINIE2CP8)
    {
        for(new i=0;i<sizeof(vehicle_busStation);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_busStation[i])
            {
                BusTime[playerid] = 0;
                FreezePlayer(playerid);
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~6 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);

                KillTimer(buswait[playerid]);
                buswait[playerid]=SetTimerEx("OnPlayerWaitLinie", 1000, 1, "i", playerid);
                return 1;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bus!");
        return 1;
    }
    else if(CP_BUSLINIE3CP1 <= pCheckpoint[playerid] <= CP_BUSLINIE3CP8)
    {
        for(new i=0;i<sizeof(vehicle_busStation);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_busStation[i])
            {
                BusTime[playerid] = 0;
                FreezePlayer(playerid);
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~6 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);

                KillTimer(buswait[playerid]);
                buswait[playerid]=SetTimerEx("OnPlayerWaitLinie", 1000, 1, "i", playerid);
                return 1;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bus!");
        return 1;
    }
    else if(CP_BUSLINIE4CP1 <= pCheckpoint[playerid] <= CP_BUSLINIE4CP7)
    {
        for(new i=0;i<sizeof(vehicle_busStation);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_busStation[i])
            {
                BusTime[playerid] = 0;
                FreezePlayer(playerid);
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~6 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);

                KillTimer(buswait[playerid]);
                buswait[playerid]=SetTimerEx("OnPlayerWaitLinie", 1000, 1, "i", playerid);
                return 1;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bus!");
        return 1;
    }
    // Schienenersatzverkehr
    else if(CP_SEV1CP1 <= pCheckpoint[playerid] <= CP_SEV1CP2) {
        for(new i=0;i<sizeof(vehicle_busStation);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_busStation[i])
            {
                BusTime[playerid] = 0;
                FreezePlayer(playerid);
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~6 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);

                KillTimer(buswait[playerid]);
                buswait[playerid]=SetTimerEx("OnPlayerWaitLinie", 1000, 1, "i", playerid);
                return 1;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bus!");
    }
    else if(CP_SEV2CP1 <= pCheckpoint[playerid] <= CP_SEV2CP2) {
        for(new i=0;i<sizeof(vehicle_busStation);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_busStation[i])
            {
                BusTime[playerid] = 0;
                FreezePlayer(playerid);
                PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~6 ~w~Sekunden");
                PlayerTextDrawShow(playerid, BusMessage[playerid]);

                KillTimer(buswait[playerid]);
                buswait[playerid]=SetTimerEx("OnPlayerWaitLinie", 1000, 1, "i", playerid);
                return 1;
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bus!");
    }
    //Straßenreinigung
    else if(CP_REINI1 <= pCheckpoint[playerid] <= CP_REINI14)
    {
        for(new i=0;i<sizeof(reinigung);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == reinigung[i])
            {
                if(pCheckpoint[playerid] == CP_REINI1)
                {
                    SetPlayerCheckpointEx(playerid, 2060.6467,-1930.0806,13.3428, 5.0, CP_REINI2);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI2)
                {
                    SetPlayerCheckpointEx(playerid, 1823.8677,-1829.8912,13.4141, 5.0, CP_REINI3);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI3)
                {
                    SetPlayerCheckpointEx(playerid, 1573.1659,-1869.9642,13.3828, 5.0, CP_REINI4);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI4)
                {
                    SetPlayerCheckpointEx(playerid, 1499.3264,-1729.5050,13.3828, 5.0, CP_REINI5);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI5)
                {
                    SetPlayerCheckpointEx(playerid, 1315.2017,-1715.5406,13.3828, 5.0, CP_REINI6);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI6)
                {
                    SetPlayerCheckpointEx(playerid, 1358.8210,-1419.3829,13.3828, 5.0, CP_REINI7);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI7)
                {
                    SetPlayerCheckpointEx(playerid, 1370.0029,-1059.6665,26.6386, 5.0, CP_REINI8);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI8)
                {
                    SetPlayerCheckpointEx(playerid, 1523.9775,-1042.9404,23.6289, 5.0, CP_REINI9);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI9)
                {
                    SetPlayerCheckpointEx(playerid, 1749.3524,-1166.4718,23.6349, 5.0, CP_REINI10);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI10)
                {
                    SetPlayerCheckpointEx(playerid, 1845.8475,-1442.1245,13.4007, 5.0, CP_REINI11);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI11)
                {
                    SetPlayerCheckpointEx(playerid, 1818.7308,-1844.2803,13.4141, 5.0, CP_REINI12);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI12)
                {
                    SetPlayerCheckpointEx(playerid, 1951.9484,-1935.0249,13.3828, 5.0, CP_REINI13);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI13)
                {
                    SetPlayerCheckpointEx(playerid, 2060.4966,-1913.4055,13.5469, 5.0, CP_REINI14);
                    SendClientMessage(playerid, COLOR_YELLOW, "Arbeit ausgeführt! Fahre bitte nun wieder zurück zur Station und park das Fahrzeug zurück.");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_REINI14)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(7);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
                    new string[128];
                    format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));
                    GameTextForPlayer(playerid, string, 5000, 1);
                    DisablePlayerCheckpointEx(playerid);
                    SendClientMessage(playerid, COLOR_GREEN, "Du hast die Straßen gereinigt! Dein Gehalt erhältst du beim PayDay!");
                    SetVehicleToRespawn(vID);
                    ShowBuyInformation(playerid,"~y~Die Straßen sind sauber! ~w~Feierabend!");
                    //Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Reinigungsfahrzeug.");
        return 1;
    }

    //Schiff
    else if(CP_SCHIFF1 <= pCheckpoint[playerid] <= CP_SCHIFF8)
    {
        for(new i=0;i<sizeof(vehicle_boatCargoJob);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_boatCargoJob[i])
            {
                if(pCheckpoint[playerid] == CP_SCHIFF1)
                {
                    SetPlayerCheckpointEx(playerid, 2777.1758,-2298.5298,0.1046, 5.0, CP_SCHIFF2);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF2)
                {
                    SetPlayerCheckpointEx(playerid, 2867.0911,-2459.2363,-0.6575, 5.0, CP_SCHIFF3);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF3)
                {
                    SetPlayerCheckpointEx(playerid, 2702.5842,-2617.2432,-0.9744, 5.0, CP_SCHIFF4);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF4)
                {
                    SetPlayerCheckpointEx(playerid, 2517.8804,-2719.8296,0.6559, 5.0, CP_SCHIFF5);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF5)
                {
                    SetPlayerCheckpointEx(playerid, 2344.5002,-2647.9712,0.1132, 5.0, CP_SCHIFF6);
                    SendClientMessage(playerid,COLOR_ORANGE,"Das Schiff wird beladen, warte ein paar Sekunden.");
                    FreezePlayer(playerid);
                    SetTimerEx("BeladeSchiff", 5000, false, "i", playerid);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF6)
                {
                    SetPlayerCheckpointEx(playerid, 2388.0242,-2396.9143,-0.7216, 5.0, CP_SCHIFF7);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF7)
                {
                    SetPlayerCheckpointEx(playerid, 2519.0413,-2290.8799,-0.7085, 5.0, CP_SCHIFF8);
                    SendClientMessage(playerid, COLOR_ORANGE, "Bitte parke nun das Fahrzeug zurück!");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF8)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(11);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
                    new string[128];
                    format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));
                    GameTextForPlayer(playerid, string, 5000, 1);
                    DisablePlayerCheckpointEx(playerid);
                    SendClientMessage(playerid, COLOR_GREEN, "Du hast die Fracht abgeliefert! Dein Gehalt erhältst du beim PayDay!");
                    SetVehicleToRespawn(vID);
                    SetPlayerPosEx(playerid,BOATCARGOJOB_JOBSKIN_POINT,MAPS_BOATCARGOJOB_INTERIOR,VW_MAIN);
                    //Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich auf keinem Schiff.");
        return 1;
    }
    else if(CP_SCHIFF_FISH1 <= pCheckpoint[playerid] <= CP_SCHIFF_FISH11)
    {
        for(new i=0;i<sizeof(vehicle_boatCargoJob);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_boatCargoJob[i])
            {
                if(pCheckpoint[playerid] == CP_SCHIFF_FISH1)
                {
                    SetPlayerCheckpointEx(playerid, 2339.2324,-2493.5034,-0.4512, 5.0, CP_SCHIFF_FISH2);
                    FreezePlayer(playerid);
                    SetTimerEx("SchiffFische", 5000, false, "i", playerid);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF_FISH2)
                {
                    SetPlayerCheckpointEx(playerid, 2105.7512,-2812.7639,0.2630, 5.0, CP_SCHIFF_FISH3);
                    FreezePlayer(playerid);
                    SetTimerEx("SchiffFische", 5000, false, "i", playerid);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF_FISH3)
                {
                    SetPlayerCheckpointEx(playerid, 1645.0071,-2903.6633,-0.4597, 5.0, CP_SCHIFF_FISH4);
                    FreezePlayer(playerid);
                    SetTimerEx("SchiffFische", 5000, false, "i", playerid);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF_FISH4)
                {
                    SetPlayerCheckpointEx(playerid, 1030.9033,-2456.5122,0.6451, 5.0, CP_SCHIFF_FISH5);
                    FreezePlayer(playerid);
                    SetTimerEx("SchiffFische", 5000, false, "i", playerid);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF_FISH5)
                {
                    SetPlayerCheckpointEx(playerid, 782.6017,-2065.0051,0.2658, 5.0, CP_SCHIFF_FISH6);
                    FreezePlayer(playerid);
                    SetTimerEx("SchiffFische", 5000, false, "i", playerid);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF_FISH6)
                {
                    SetPlayerCheckpointEx(playerid, 734.4969,-2420.6785,0.0938, 5.0, CP_SCHIFF_FISH7);
                    FreezePlayer(playerid);
                    SetTimerEx("SchiffFische", 5000, false, "i", playerid);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF_FISH7)
                {
                    SetPlayerCheckpointEx(playerid, 1056.4220,-2699.7454,1.1654, 5.0, CP_SCHIFF_FISH8);
                    FreezePlayer(playerid);
                    SetTimerEx("SchiffFische", 5000, false, "i", playerid);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF_FISH8)
                {
                    SetPlayerCheckpointEx(playerid, 1821.5258,-2871.8557,0.2626, 5.0, CP_SCHIFF_FISH9);
                    FreezePlayer(playerid);
                    SetTimerEx("SchiffFische", 5000, false, "i", playerid);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF_FISH9)
                {
                    SetPlayerCheckpointEx(playerid, 2218.5757,-2801.0981,0.6510, 5.0, CP_SCHIFF_FISH10);
                    FreezePlayer(playerid);
                    SetTimerEx("SchiffFische", 5000, false, "i", playerid);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF_FISH10)
                {
                    SetPlayerCheckpointEx(playerid, 2519.0413,-2290.8799,-0.7085, 5.0, CP_SCHIFF_FISH11);
                    FreezePlayer(playerid);
                    SetTimerEx("SchiffFische", 5000, false, "i", playerid);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_SCHIFF_FISH11)
                {
                    new firmenindex;
                    firmenindex = GetJobFirmaIndex(11);
                    g_Firma[firmenindex][F_iKasse] += 12000;
                    new string[128];
                    DisablePlayerCheckpointEx(playerid);
                    new GehaltFische = Spieler[playerid][pFische] * 1000;
                    new GehaltFinish = GehaltFische + (g_Firma[firmenindex][F_iGehalt] / 2);
                    Spieler[playerid][pPayCheck] += GehaltFinish;
                    format(string, sizeof(string), "~g~+$%s", AddDelimiters(GehaltFinish));
                    GameTextForPlayer(playerid, string, 5000, 1);
                    SCMFormatted(playerid, COLOR_GREEN, "Du hast %d Fische abgeliefert! Dein Gehalt in Höhe von %d erhältst du beim PayDay!",Spieler[playerid][pFische],GehaltFinish);
                    Spieler[playerid][pFische] = 0;
                    SetVehicleToRespawn(vID);
                    SetPlayerPosEx(playerid,BOATCARGOJOB_JOBSKIN_POINT,MAPS_BOATCARGOJOB_INTERIOR,VW_MAIN);
                    //Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich auf keinem Schiff.");
        return 1;
    }
    //GELDTRANSPORTFAHRER
    else if(CP_GELDT == pCheckpoint[playerid]) {
        new
            vehicleid = GetPlayerVehicleID(playerid);
        if( GetPlayerState(playerid) == PLAYER_STATE_DRIVER && aiVehicles[vehicleid] & VEH_GELDT ) {
            new
                cp = Spieler[playerid][pGeldTCP];
            SendClientMessage(playerid,COLOR_WHITE,"Steig aus und befülle den Geldautomaten mit /Geldeinladen");
            SetPlayerCheckpointEx(playerid,GT_GELDT[cp][GT_fPosX],GT_GELDT[cp][GT_fPosY],GT_GELDT[cp][GT_fPosZ],2.0,CP_GELDT_ENTLEEREN);
        }
    }
    else if(CP_GELDTFINISH == pCheckpoint[playerid]) {
        new
            vehicleid = GetPlayerVehicleID(playerid);
        if( GetPlayerState(playerid) == PLAYER_STATE_DRIVER && aiVehicles[vehicleid] & VEH_GELDT ) {
            new
                string[128],
                firmenindex;
            firmenindex = GetJobFirmaIndex(12);
            g_Firma[firmenindex][F_iKasse] += 8000;
            Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
            RemovePlayerFromVehicle(playerid);
            SetVehicleToRespawn(vehicleid);
            DisablePlayerCheckpointEx(playerid);
            format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));
            GameTextForPlayer(playerid, string, 5000, 1);
            SendClientMessage(playerid, COLOR_GREEN, "Deine Arbeit ist erledigt! Dein Gehalt erhältst du beim PayDay!");
            ShowBuyInformation(playerid,"~y~Alle Bankautomaten aufgefüllt! ~w~Feierabend!");
            //Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
            Spieler[playerid][pTransportActive] = false;
            return 1;
        }
    }
    //Müllmann
    else if(CP_MUELL == pCheckpoint[playerid]) {
        new
            vehicleid = GetPlayerVehicleID(playerid);
        if( GetPlayerState(playerid) == PLAYER_STATE_DRIVER && aiVehicles[vehicleid] & VEH_MUELL ) {
            new
                cp = Spieler[playerid][pMuellCP];
            SendClientMessage(playerid,COLOR_WHITE,"Steig aus und mache /Entleeren");
            SetPlayerCheckpointEx(playerid,g_Muell[cp][M_fPosX],g_Muell[cp][M_fPosY],g_Muell[cp][M_fPosZ],2.0,CP_MUELL_ENTLEEREN);
        }
    }
    else if(CP_MUELL_CARRY == pCheckpoint[playerid]) {
        new
            c;
        c += GetBitCount(Spieler[playerid][pMuell][0]);
        c += GetBitCount(Spieler[playerid][pMuell][1]);
        if( c >= 6 ) {
            SendClientMessage(playerid,COLOR_YELLOW,"Du hast alle 6 Mülltonnen geleert! Fahr zurück zur Station");
            SetPlayerCheckpointEx(playerid,2113.7583,-2098.0005,13.5469,5.0,CP_MUELLFINISH);
        }
        else {
            new
                String[128];
            format(String,sizeof(String),"Du hast die Mülltonne geleert! Steig ein und fahr zur nächsten (%d/6)",c);
            SendClientMessage(playerid,COLOR_YELLOW,String);
            ShowNextMuellStation(playerid);
        }
        RemovePlayerAttachedObject(playerid, 0);
        SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
    }
    else if(CP_MUELLFINISH == pCheckpoint[playerid]) {
        new
            vehicleid = GetPlayerVehicleID(playerid);
        if( GetPlayerState(playerid) == PLAYER_STATE_DRIVER && aiVehicles[vehicleid] & VEH_MUELL ) {
            new
                string[128],
                firmenindex;
            firmenindex = GetJobFirmaIndex(8);
            g_Firma[firmenindex][F_iKasse] += 8000;
            Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
            RemovePlayerFromVehicle(playerid);
            SetVehicleToRespawn(vehicleid);
            DisablePlayerCheckpointEx(playerid);
            format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));
            GameTextForPlayer(playerid, string, 5000, 1);
            SendClientMessage(playerid, COLOR_GREEN, "Deine Arbeit ist erledigt! Dein Gehalt erhältst du beim PayDay!");
            ShowBuyInformation(playerid,"~y~Müll abgeholt und entsorgt! ~w~Feierabend!");
            //Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
        }
    }
    /*
    else if(CP_MUELL1 <= pCheckpoint[playerid] <= CP_MUELL20)
    {
        for(new i=0;i<sizeof(muell);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == muell[i])
            {
                if(pCheckpoint[playerid] == CP_MUELL1)
                {
                    SetPlayerCheckpointEx(playerid, 1998.7909,-2107.2979,13.3496, 5.0, CP_MUELL2);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL2)
                {
                    SetPlayerCheckpointEx(playerid, 1963.2606,-1942.6835,13.3970, 5.0, CP_MUELL3);
                    SendClientMessage(playerid, COLOR_ORANGE, "Sammel nun die Müllsäcke auf. Fahre die Markers ab!");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL3)
                {
                    SetPlayerCheckpointEx(playerid, 1924.0662,-1749.1938,13.3828, 5.0, CP_MUELL4);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL4)
                {
                    SetPlayerCheckpointEx(playerid, 1666.4025,-1728.9388,13.3828, 5.0, CP_MUELL5);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL5)
                {
                    SetPlayerCheckpointEx(playerid, 1532.9117,-1721.6056,13.3828, 5.0, CP_MUELL6);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL6)
                {
                    SetPlayerCheckpointEx(playerid, 1475.0117,-1589.7338,13.3828, 5.0, CP_MUELL7);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL7)
                {
                    SetPlayerCheckpointEx(playerid, 1325.8937,-1569.8595,13.3690, 5.0, CP_MUELL8);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL8)
                {
                    SetPlayerCheckpointEx(playerid, 1359.4690,-1418.9095,13.3828, 5.0, CP_MUELL9);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL9)
                {
                    SetPlayerCheckpointEx(playerid, 1360.1733,-1168.4264,23.7215, 5.0, CP_MUELL10);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL10)
                {
                    SetPlayerCheckpointEx(playerid, 1370.2086,-1063.4838,26.4413, 5.0, CP_MUELL11);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL11)
                {
                    SetPlayerCheckpointEx(playerid, 1275.0173,-1036.0787,31.5611, 5.0, CP_MUELL12);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL12)
                {
                    SetPlayerCheckpointEx(playerid, 1258.5132,-1076.1464,27.7118, 5.0, CP_MUELL13);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL13)
                {
                    SetPlayerCheckpointEx(playerid, 1168.0930,-1097.0586,25.3393, 5.0, CP_MUELL14);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL14)
                {
                    SetPlayerCheckpointEx(playerid, 1132.6324,-1032.8380,31.9016, 5.0, CP_MUELL15);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL15)
                {
                    SetPlayerCheckpointEx(playerid, 1076.4883,-1088.9136,26.0361, 5.0, CP_MUELL16);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL16)
                {
                    SetPlayerCheckpointEx(playerid, 1049.2565,-1255.4100,14.6669, 5.0, CP_MUELL17);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL17)
                {
                    SetPlayerCheckpointEx(playerid, 1176.4523,-1410.9448,13.4452, 5.0, CP_MUELL18);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL18)
                {
                    SetPlayerCheckpointEx(playerid, 2106.1296,-2011.5781,13.5469, 5.0, CP_MUELL19);
                    SendClientMessage(playerid, COLOR_ORANGE, "Fahre zum Mülldepo zurück und lasse den Müll verbrennen.");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL19)
                {
                    SetPlayerCheckpointEx(playerid, 2122.5459,-2096.3967,13.5469, 5.0, CP_MUELL20);
                    SendClientMessage(playerid, COLOR_ORANGE, "Bitte parke das Fahrzeug nun wieder so wie es war ein!");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_MUELL20)
                {
                    new rand = minrand(3700,4000);
                    Spieler[playerid][pPayCheck] +=rand;
                    new string[128];
                    format(string, sizeof(string), "~g~+$%d", rand);
                    GameTextForPlayer(playerid, string, 5000, 1);
                    DisablePlayerCheckpointEx(playerid);
                    SendClientMessage(playerid, COLOR_GREEN, "Deine Arbeit ist erledigt! Dein Gehalt erhältst du beim PayDay!");
                    SetVehicleToRespawn(vID);
                    ShowBuyInformation(playerid,"~y~Müll abgeholt und entsorgt! ~w~Feierabend!");
                    Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Müllwagen.");
        return 1;
    }
    */
    //Bauerbeiter
    else if(CP_BAUARBEITER1 <= pCheckpoint[playerid] <= CP_BAUARBEITER17)
    {
        for(new i=0;i<sizeof(bauarb);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == bauarb[i])
            {
                if(pCheckpoint[playerid] == CP_BAUARBEITER1)
                {
                    SetPlayerCheckpointEx(playerid, 799.1427,836.5533,8.1336, 5.0, CP_BAUARBEITER2);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER2)
                {
                    SetPlayerCheckpointEx(playerid, 756.7701,899.0582,-1.2382, 5.0, CP_BAUARBEITER3);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER3)
                {
                    SetPlayerCheckpointEx(playerid, 694.2874,955.6836,-15.8628, 5.0, CP_BAUARBEITER4);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER4)
                {
                    SetPlayerCheckpointEx(playerid, 700.7612,913.5161,-30.4612, 5.0, CP_BAUARBEITER5);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER5)
                {
                    SetPlayerCheckpointEx(playerid, 648.9686,906.4146,-41.7512, 5.0, CP_BAUARBEITER6);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER6)
                {
                    SetPlayerCheckpointEx(playerid, 635.8752,862.5970,-42.6892, 5.0, CP_BAUARBEITER7);
                    SendClientMessage(playerid, COLOR_ORANGE, "Lade die Steine auf (/Steineladen)!");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER7)
                {
                    SetPlayerCheckpointEx(playerid, 607.7939,863.4465,-42.0452, 5.0, CP_BAUARBEITER8);
                    SendClientMessage(playerid, COLOR_ORANGE, "Lade die Steine auf (/Steineladen)!");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER8)
                {
                    SetPlayerCheckpointEx(playerid, 513.8612,870.7057,-39.3272, 5.0, CP_BAUARBEITER9);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER9)
                {
                    SetPlayerCheckpointEx(playerid, 525.7652,945.3519,-23.7328, 5.0, CP_BAUARBEITER10);
                    SendClientMessage(playerid, COLOR_ORANGE, "Fahre deine geladenen Steine nun nach oben!");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER10)
                {
                    SetPlayerCheckpointEx(playerid, 713.5145,962.6615,-7.4000, 5.0, CP_BAUARBEITER11);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER11)
                {
                    SetPlayerCheckpointEx(playerid, 834.3851,851.1645,12.2650, 5.0, CP_BAUARBEITER12);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER12)
                {
                    SetPlayerCheckpointEx(playerid, 832.6885,1120.3729,29.9069, 5.0, CP_BAUARBEITER13);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER13)
                {
                    SetPlayerCheckpointEx(playerid, 570.8690,1068.5115,28.3436, 5.0, CP_BAUARBEITER14);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER14)
                {
                    SetPlayerCheckpointEx(playerid, 373.4708,978.8013,29.5814, 5.0, CP_BAUARBEITER15);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER15)
                {
                    SetPlayerCheckpointEx(playerid, 382.3929,871.6203,21.9523, 5.0, CP_BAUARBEITER16);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER16)
                {
                    SetPlayerCheckpointEx(playerid, 832.2355,891.7194,13.3516, 5.0, CP_BAUARBEITER17);
                    SendClientMessage(playerid, COLOR_YELLOW, "Arbeit ausgeführt! Fahre bitte nun wieder zur Station und park das Fahrzeug zurück.");
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_BAUARBEITER17)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(10);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
                    new string[128];
                    format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));
                    GameTextForPlayer(playerid, string, 5000, 1);
                    DisablePlayerCheckpointEx(playerid);
                    SendClientMessage(playerid, COLOR_GREEN, "Deine Arbeit ist erledigt! Dein Gehalt erhältst du beim PayDay!");
                    SetVehicleToRespawn(vID);
                    ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                    //Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Bauarbeiterfahrzeug.");
        return 1;
    }
    //Farmer
    else if(CP_HARVEST1 <= pCheckpoint[playerid] <= CP_HARVEST18)
    {
        new vID = GetPlayerVehicleID(playerid);
        if(vID) {
            if( aiVehicles[vID] == VEH_COMBINES) {
                for(new i=0;i<sizeof(combines);i++)
                {
                    if(vID == combines[i])
                    {
                        new farmerlog[128];
                        if(pCheckpoint[playerid] == CP_HARVEST1)
                        {
                            format(farmerlog, sizeof(farmerlog), "Name: %s - Erster Checkpoint", GetName(playerid));
                            LogFarmer(farmerlog);
                            SetPlayerCheckpointEx(playerid, 21.7957,62.7240,4.0902, 5.0, CP_HARVEST2);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST2)
                        {
                            SetPlayerCheckpointEx(playerid, 62.1695,30.2543,1.6882, 5.0, CP_HARVEST3);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST3)
                        {
                            SetPlayerCheckpointEx(playerid, 72.4068,-16.7726,1.8534, 5.0, CP_HARVEST4);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST4)
                        {
                            SetPlayerCheckpointEx(playerid, 32.9849,-69.0399,2.3693, 5.0, CP_HARVEST5);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST5)
                        {
                            SetPlayerCheckpointEx(playerid, -22.5727,-71.6361,4.0950, 5.0, CP_HARVEST6);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST6)
                        {
                            SetPlayerCheckpointEx(playerid, 8.4761,-113.9747,1.8918, 5.0, CP_HARVEST7);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST7)
                        {
                            SetPlayerCheckpointEx(playerid, 23.1533,-144.0073,1.5902, 5.0, CP_HARVEST8);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST8)
                        {
                            SetPlayerCheckpointEx(playerid, -71.7287,-134.2719,4.0992, 5.0, CP_HARVEST9);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST9)
                        {
                            SetPlayerCheckpointEx(playerid, -112.1627,-69.7551,4.0957, 5.0, CP_HARVEST10);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST10)
                        {
                            SetPlayerCheckpointEx(playerid, -79.2461,72.5799,4.0954, 5.0, CP_HARVEST11);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST11)
                        {
                            SetPlayerCheckpointEx(playerid, -38.3087,72.4932,4.0946, 5.0, CP_HARVEST12);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_HARVEST12)
                        {
                            new
                                Float:x,
                                Float:y,
                                Float:z,
                                Float:face,
                                vehicleid;
                            vehicleid = JobVehicle[playerid];
                            GetVehiclePos(vehicleid,x,y,z);
                            GetVehicleZAngle(vehicleid,face);
                            GetXYInFrontOfPosition(x, y, face, -4.0 );
                            SetVehicleVelocity(vehicleid,0.0,0.0,0.0);
                            SetPlayerCheckpointEx(playerid, x,y,z, 1.0, CP_HARVEST13);
                            SendClientMessage(playerid, COLOR_YELLOW, "Steige aus und gehe hinter den Mähdrescher");
                            RemovePlayerFromVehicle(playerid);
                            return 1;
                        }
                    }
                }
            }
        }
        else {
            // Kein Fahrzeug mehr benötigt
            if(pCheckpoint[playerid] == CP_HARVEST14 || pCheckpoint[playerid] == CP_HARVEST16)
            {
                new
                    Float:x,
                    Float:y,
                    Float:z,
                    Float:face,
                    vehicleid;
                vehicleid = JobVehicle[playerid];
                GetVehiclePos(vehicleid,x,y,z);
                GetVehicleZAngle(vehicleid,face);
                GetXYInFrontOfPosition(x, y, face, -4.0 );
                SetPlayerCheckpointEx(playerid, x, y,z, 1.0, pCheckpoint[playerid] + 1 );
                SendClientMessage(playerid, COLOR_YELLOW, "Gehe zurück zum Mähdrescher und hole weitere Ernte.");
                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
                RemovePlayerAttachedObject(playerid,0);
                return 1;
            }
            else if(pCheckpoint[playerid] == CP_HARVEST13 || pCheckpoint[playerid] == CP_HARVEST15 || pCheckpoint[playerid] == CP_HARVEST17)
            {
                SetPlayerCheckpointEx(playerid, -38.4621,56.3233,3.1172, 1.0, pCheckpoint[playerid] + 1 );
                SendClientMessage(playerid, COLOR_YELLOW, "Du hast die Ernte. Jetzt bringe diese zur Scheune.");
                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
                SetPlayerAttachedObject( playerid, 0, 1454, 6, 0.150000, 0.219999, -0.200000, 0.000000, 0.000000, 0.000000, 0.400000, 0.400000, 0.400000 ); // DYN_H_BALE2 - hay                return 1;
                return 1;
            }
            else if(pCheckpoint[playerid] == CP_HARVEST18)
            {
                new
                    firmenindex;
                new farmerlog[128];
                vID = JobVehicle[playerid];
                firmenindex = GetJobFirmaIndex(1);
                lagerbestand += 20;
                format(farmerlog, sizeof(farmerlog), "Name: %s - Geld: %d", GetName(playerid), g_Firma[firmenindex][F_iGehalt]);
                LogFarmer(farmerlog);
                g_Firma[firmenindex][F_iKasse] += 8000;
                Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
                new string[128];
                format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));
                GameTextForPlayer(playerid, string, 5000, 1);
                DisablePlayerCheckpointEx(playerid);
                SendClientMessage(playerid, COLOR_GREEN, "Deine Arbeit ist erledigt! Dein Gehalt erhältst du beim PayDay!");
                SetVehicleToRespawn(vID);
                ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                UpdateInfos(); // lagerbestand
                //Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                Spieler[playerid][pCow][1] = 0;
                Spieler[playerid][pCowJob] = 0;
                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
                RemovePlayerAttachedObject(playerid,0);
                return 1;
            }
            SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Mähdrescher.");
            return 1;
        }
    }
    //Garten
    else if(CP_GARTEN1 <= pCheckpoint[playerid] <= CP_GARTEN19)
    {
        new vID = GetPlayerVehicleID(playerid);
        if(vID) {
            if( aiVehicles[vID] == VEH_GARTENCARS) {
                for(new i=0;i<sizeof(vehicle_gardenerBase);i++)
                {
                    if(vID == vehicle_gardenerBase[i])
                    {
                        if(pCheckpoint[playerid] == CP_GARTEN1)
                        {
                            SetPlayerCheckpointEx(playerid, 1487.7969,-135.5734,20.2611, 5.0, CP_GARTEN2);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN2)
                        {
                            SetPlayerCheckpointEx(playerid, 1437.4023,-127.0120,21.8157, 5.0, CP_GARTEN3);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN3)
                        {
                            SetPlayerCheckpointEx(playerid, 1468.9374,-70.1820,20.0426, 5.0, CP_GARTEN4);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN4)
                        {
                            SetPlayerCheckpointEx(playerid, 1495.5052,-15.1224,24.0091, 5.0, CP_GARTEN5);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN5)
                        {
                            SetPlayerCheckpointEx(playerid, 1426.9447,-36.2039,26.8482, 5.0, CP_GARTEN6);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN6)
                        {
                            SetPlayerCheckpointEx(playerid, 1454.4276,-55.6280,21.7093, 5.0, CP_GARTEN7);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN7)
                        {
                            SetPlayerCheckpointEx(playerid, 1488.0676,-63.9454,20.5155, 5.0, CP_GARTEN8);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN8)
                        {
                            SetPlayerCheckpointEx(playerid, 1498.8956,-34.1370,22.3406, 5.0, CP_GARTEN9);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN9)
                        {
                            SetPlayerCheckpointEx(playerid, 1432.9546,-74.0522,20.7133, 5.0, CP_GARTEN10);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN10)
                        {
                            SetPlayerCheckpointEx(playerid, 1472.0958,-110.5212,19.6172, 5.0, CP_GARTEN11);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN11)
                        {
                            SetPlayerCheckpointEx(playerid, 1528.9442,-61.3342,20.2440, 5.0, CP_GARTEN12);
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN12)
                        {
                            SetPlayerCheckpointEx(playerid, 1554.9900,33.2357,24.1579, 5.0, CP_GARTEN13);
                            SendClientMessage(playerid, COLOR_ORANGE, "Der Rasen ist gemäht! Das abgesägte Gras ist zum Essen für die Kühe. Bringe es zur Scheune!");
                            return 1;
                        }
                        else if(pCheckpoint[playerid] == CP_GARTEN13)
                        {
                            new
                                Float:x,
                                Float:y,
                                Float:z,
                                Float:face,
                                vehicleid;
                            vehicleid = JobVehicle[playerid];
                            GetVehiclePos(vehicleid,x,y,z);
                            GetVehicleZAngle(vehicleid,face);
                            GetXYInFrontOfPosition(x, y, face, -4.0 );
                            SetVehicleVelocity(vehicleid,0.0,0.0,0.0);
                            SetPlayerCheckpointEx(playerid, x,y,z, 1.0, CP_GARTEN14);
                            SendClientMessage(playerid, COLOR_YELLOW, "Steige aus und gehe hinter das Fahrzeug.");
                            RemovePlayerFromVehicle(playerid);
                            return 1;
                        }
                    }
                }
            }
        }
        else {
            // Kein Fahrzeug mehr benötigt
            if(pCheckpoint[playerid] == CP_GARTEN15 || pCheckpoint[playerid] == CP_GARTEN17)
            {
                new
                    Float:x,
                    Float:y,
                    Float:z,
                    Float:face,
                    vehicleid;
                vehicleid = JobVehicle[playerid];
                GetVehiclePos(vehicleid,x,y,z);
                GetVehicleZAngle(vehicleid,face);
                GetXYInFrontOfPosition(x, y, face, -4.0 );
                SetPlayerCheckpointEx(playerid, x, y,z, 1.2, pCheckpoint[playerid] + 1 );
                SendClientMessage(playerid, COLOR_YELLOW, "Du hast die Ernte. Jetzt bringe diese zur Scheune.");
                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
                RemovePlayerAttachedObject(playerid,0);
                return 1;
            }

            else if(pCheckpoint[playerid] == CP_GARTEN14 || pCheckpoint[playerid] == CP_GARTEN16 || pCheckpoint[playerid] == CP_GARTEN18)
            {
                SetPlayerCheckpointEx(playerid, 1547.9395,30.0051,24.1406, 1.0, pCheckpoint[playerid] + 1 );
                SendClientMessage(playerid, COLOR_YELLOW, "Gehe zurück zum Rasenmäher und hole weitere Ernte.");
                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_CARRY);
                SetPlayerAttachedObject( playerid, 0, 1454, 6, 0.150000, 0.219999, -0.200000, 0.000000, 0.000000, 0.000000, 0.400000, 0.400000, 0.400000 ); // DYN_H_BALE2 - hay                return 1;
                return 1;
            }
            else if(pCheckpoint[playerid] == CP_GARTEN19)
            {
                new
                    firmenindex;
                vID = JobVehicle[playerid];
                firmenindex = GetJobFirmaIndex(9);
                g_Firma[firmenindex][F_iKasse] += 8000;
                Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
                new string[128];
                format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));
                GameTextForPlayer(playerid, string, 5000, 1);
                DisablePlayerCheckpointEx(playerid);
                SendClientMessage(playerid, COLOR_GREEN, "Deine Arbeit ist erledigt! Dein Gehalt erhältst du beim PayDay!");
                SetVehicleToRespawn(vID);
                ShowBuyInformation(playerid,"~y~Route abgefahren! ~w~Feierabend!");
                //Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
                RemovePlayerAttachedObject(playerid,0);
                return 1;
            }
            SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Gartenfahrzeug.");
            return 1;
        }
    }
    //Trucker
    else if(pCheckpoint[playerid] == CP_TRUCK1 || pCheckpoint[playerid] == CP_TRUCK2)
    {
        for(new i=0;i<sizeof(vehicle_truckerBase);i++)
        {
            new vID = GetPlayerVehicleID(playerid);
            if(vID == vehicle_truckerBase[i])
            {
                if(pCheckpoint[playerid] == CP_TRUCK1)
                {
                    FreezePlayer(playerid);
                    truckwait[playerid] = SetTimerEx("OnPlayerTruckerWait", 1000, 1, "i", playerid);
                    TruckTime[playerid] = 0;
                    PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~20 ~w~Sekunden");
                    PlayerTextDrawShow(playerid, BusMessage[playerid]);
                    return 1;
                }
                else if(pCheckpoint[playerid] == CP_TRUCK2)
                {
                    new
                        firmenindex;
                    firmenindex = GetJobFirmaIndex(3);
                    g_Firma[firmenindex][F_iKasse] += 8000;
                    Spieler[playerid][pPayCheck] += g_Firma[firmenindex][F_iGehalt];
                    new string[128];
                    format(string, sizeof(string), "~g~+$%s", AddDelimiters(g_Firma[firmenindex][F_iGehalt]));

                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast die Lieferung erfolgreich abgeladen. +$1650");
                    KillTimer(truckwait[playerid]);
                    TruckTime[playerid] = 0;
                    Spieler[playerid][pPayCheck] += 7600;
                    DisablePlayerCheckpointEx(playerid);
                    new ort[24];
                    GetPlayer2DZone(playerid, ort, 24);
                    new truckerlog[128];
                    format(truckerlog, sizeof(truckerlog), "Name: %s - Ort: %s - Geld: 7600", GetName(playerid), ort);
                    LogTrucker(truckerlog);
                    SetVehicleToRespawn(vID);
                    ShowBuyInformation(playerid,"~y~Lieferung ~w~entladen!");
                    //Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                    return 1;
                }
            }
        }
        SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht im Laster.");
        return 1;
    }
    else if(pCheckpoint[playerid] == CP_SFKRAN ) {
        if(Spieler[playerid][pJob] == 22 ) {
            new
                vehicleid,
                owner;
            vehicleid = GetPlayerVehicleID(playerid);
            if( Spieler[playerid][pAutoknackerVehicleID] != vehicleid ) {
                SendClientMessage(playerid, COLOR_RED, "Du hast dieses Fahrzeug nicht geknackt.");
                return 1;
            }
            owner = GetCarOwner( vehicleid);
            if( IsPlayerConnected(owner) ) {
                new
                    slot;
                slot = GetCarOwnerSlot(owner,vehicleid);
                if( slot != 555 ) {
                    for(new i = _:CarNitro ; i < _:CarLamps ; i++ ) {
                        PlayerCar[owner][slot][cInfo:i] = 0;
                    }
                    SavePlayerCar(owner,slot);

                    DestroyDynamicObject(PlayerCar[owner][slot][ObjectIDNeon1]);
                    DestroyDynamicObject(PlayerCar[owner][slot][ObjectIDNeon1]);

                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned1]);
                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned2]);
                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned3]);
                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned4]);
                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned5]);
                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned6]);
                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned7]);
                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned8]);
                    DestroyDynamicObject(PlayerCar[owner][slot][SpecialTuned9]);

                    SetVehicleToRespawn(vehicleid);

                }
                Spieler[playerid][pAutoknackerExtraLohn] += 720;
                SendClientMessage(playerid,COLOR_GREEN,"Du hast das Fahrzeug erfolgreich abgeliefert ( +720$ bei PayDay )");
                ShowBuyInformation(playerid,"~y~Fahrzeug wurde ~w~verfrachtet!");
            }
            else {
                SendClientMessage(playerid,COLOR_RED,"Dies ist kein privates Fahrzeug");
            }
        }
        else {
            SendClientMessage(playerid,COLOR_RED,"Du bist hier falsch.");
        }
        DisablePlayerCheckpointEx(playerid);
    }
    return 1;
}

forward BeladeSchiff(playerid);
public BeladeSchiff(playerid)
{
    SendClientMessage(playerid,COLOR_ORANGE,"Das Schiff wurde beladen, bringe die Fracht nun zurück.");
    UnfreezePlayer(playerid);
    return 1;
}

forward SchiffFische(playerid);
public SchiffFische(playerid)
{
    new RandomFOP = RandomEx(0,135);
    new RandomFisch = RandomEx(2,5);
    if((RandomFOP > 0 && RandomFOP < 15) || (RandomFOP > 60 && RandomFOP < 75) || (RandomFOP > 90 && RandomFOP < 105))
    {
        SCMFormatted(playerid,COLOR_ORANGE,"[Fischer-Netz]{FFFFFF} Du hast %d Fische aus dem Wasser gezogen.",RandomFisch);
        Spieler[playerid][pFische] += RandomFisch;
    }
    else if((RandomFOP > 15 && RandomFOP < 30) || (RandomFOP > 45 && RandomFOP < 60) || (RandomFOP > 105 && RandomFOP < 120))
    {
        SendClientMessage(playerid,COLOR_ORANGE,"[Fischer-Netz]{FFFFFF} Du hast eine Pfandflasche aus dem Wasser gezogen.");
        Spieler[playerid][pPfand] += 1;
    }
    else if((RandomFOP > 30 && RandomFOP < 45) || (RandomFOP > 75 && RandomFOP < 90) || (RandomFOP > 120 && RandomFOP < 135))
    {
        SendClientMessage(playerid,COLOR_ORANGE,"[Fischer-Netz]{FFFFFF} Du hast einen alten Schuh aus dem Wasser gezogen.");
    }
    UnfreezePlayer(playerid);
    return 1;
}

forward OnPlayerTruckerWait(playerid);
public OnPlayerTruckerWait(playerid)
{
    if(IsPlayerConnected(playerid) && gPlayerLogged[playerid] == 1)
    {
        if(pCheckpoint[playerid] == CP_TRUCK1)
        {
            if(TruckTime[playerid] < 20)
            {
                TruckTime[playerid] ++;
                if(TruckTime[playerid] == 1){PlayerTextDrawSetString(playerid, BusMessage[playerid], "~g~Warte ~w~... ~r~19 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 2){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~18 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 3){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~17 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 4){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~16 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 5){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~15 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 6){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~14 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 7){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~13 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 8){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~12 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 9){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~11 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 10){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~10 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 11){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~9 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 12){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~8 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 13){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~7 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 14){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~6 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 15){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~5 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 16){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~4 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 17){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~3 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 18){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~2 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 19){PlayerTextDrawSetString(playerid,BusMessage[playerid], "~g~Warte ~w~... ~r~1 ~w~Sekunden"); return 1;}
                else if(TruckTime[playerid] == 20){PlayerTextDrawHide(playerid, BusMessage[playerid]); TruckTime[playerid] = 0;}
                TruckTime[playerid] = 0;
                KillTimer(truckwait[playerid]);
                SetPlayerCheckpointEx(playerid, 2486.6838,1879.4843,10.9174, 7.0, CP_TRUCK2);
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "Fahre nun nach Las Venturas zur Baustelle!");
                UnfreezePlayer(playerid);
                new ort[24];
                GetPlayer2DZone(playerid, ort, 24);
                new truckerlog[128];
                format(truckerlog, sizeof(truckerlog), "Name: %s - Ort: %s", GetName(playerid), ort);
                LogTrucker(truckerlog);
            }
        }
    }
    return 1;
}


public OnPlayerLeaveCheckpoint(playerid)
{
    return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
    new cp;
    EventCP[playerid]++;
    cp = EventCP[playerid];
    DisablePlayerRaceCheckpoint(playerid);
    if (cp == g_EventMarker[EV_iCheckpoints] ) {
        new String[128];
        format(String,sizeof(String),"%s hat das Event gewonnen, er war der ERSTE am Ziel!",GetName(playerid));
        SendClientMessageToAll(COLOR_GREEN,String);

        g_EventMarker[EV_iState] = 0;
        g_EventMarker[EV_iPlayerID] = INVALID_PLAYER_ID;
        g_EventMarker[EV_iCheckpoints] = 0;
        for(new i ; i < MAX_PLAYERS ; i++) {
            DisablePlayerRaceCheckpoint(i);
            EventCP[playerid] = 0;
        }

    }
    else if ( cp == ( g_EventMarker[EV_iCheckpoints] - 1 ) ) {
        SetPlayerRaceCheckpoint(playerid,1,
            g_EventMarkerCheckpoints[cp][0],
            g_EventMarkerCheckpoints[cp][1],
            g_EventMarkerCheckpoints[cp][2],
            g_EventMarkerCheckpoints[cp+1][0],
            g_EventMarkerCheckpoints[cp+1][1],
            g_EventMarkerCheckpoints[cp+1][2],
            5.0)
        ;
    }
    else {
        SetPlayerRaceCheckpoint(playerid,0,
            g_EventMarkerCheckpoints[cp][0],
            g_EventMarkerCheckpoints[cp][1],
            g_EventMarkerCheckpoints[cp][2],
            g_EventMarkerCheckpoints[cp+1][0],
            g_EventMarkerCheckpoints[cp+1][1],
            g_EventMarkerCheckpoints[cp+1][2],
            5.0)
        ;
    }
    return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
    return 1;
}

public OnRconCommand(cmd[])
{
    if (!strcmp(cmd, "saveandrestart", true)) {
        print("STOPPING THE SERVER THROUGH RCON - saveandrestart");

        SendClientMessageToAll(COLOR_ORANGE, "[SERVER-UPDATE] {FFFFFF}Der Server wird zwecks eines Updates nun neugestartet.");
        SendClientMessageToAll(COLOR_ORANGE, "[SERVER-UPDATE] {FFFFFF}Im Forum könnt ihr im Update-Thread die Neuerungen nachlesen.");
        for(new i = 0 ; i <= GetPlayerPoolSize() ; i++)
        {
            SetPlayerInterior(i, 0);
            SetPlayerVirtualWorld(i, 0);
            SetPlayerPos(i, 381.1510, -1881.4520, 3.7626);
            InterpolateCameraPos(i, 369.837097, -2046.207153, 7.430351, 370.996215, -1818.170532, 8.961493, 60000);
            InterpolateCameraLookAt(i, 370.090270, -2041.220214, 7.687465, 371.139587, -1813.225585, 9.687144, 60000);
            SendClientMessage(i, COLOR_RED, "Speichere Daten...");
        }

        CallLocalFunction("SaveAll", ""); // y_hooks
        SetTimer("GMXModeTimer", 5000, 1);
        return 1;
    }

    return 1;
}

public OnPlayerRequestSpawn(playerid)
{
    //#if defined USE_NPCS
    if( IsPlayerNPC(playerid) ) return 1;
    //#endif
    return 0;
}

public OnDynamicObjectMoved(objectid)
{
	if( Riesenrad_OnObjectMoved(objectid)) return 1;
	#if defined SILVESTER_EVENT
 	if( xFireworks_OnObjectMoved(objectid)) return 1;
	#endif
	if( g_Schiff[S_iObject] == objectid ) {
		//printf("OnDynamicObjectMoved() OBJECT_SCHIFF differenz %d",GetTickCount() - t );
	    if( g_Schiff[S_ibStatus] == 1 ) {
	        g_Schiff[S_ibStatus] = 2;
	        SetTimer("Pulse_Schiff",10,false);
	    }
	    else if(g_Schiff[S_ibStatus] == 3 ) {
	        new
	            time = gettime();
	        for(new i ; i < MAX_PLAYERS ; i++) {
			    if( GetPlayerSurfingObjectID(i) == objectid ) {
					if( Spieler[i][pFahrgeschaeft] == 3 ) {
				        if( Spieler[i][pFahrgeschaeftData] < time ) {
						    SendClientMessage(i,COLOR_ORANGE,"Ticketverkäufer sagt: Deine Zeit ist um. Wir hoffen,dass es dir Spaß gemacht hat");
					        SetPlayerPos(i,382.1528,-2166.6685,7.8510);
					        Spieler[i][pFahrgeschaeft] = -1;
				        }
				    }
				    else {
				        // Darf nicht drauf
				        SetPlayerPos(i,382.1528,-2166.6685,7.8510);
				        SendClientMessage(i,COLOR_RED,"Ticketverkäufer sagt: So nicht! Du musst dafür schon bezahlen");
				    }
				}
				else {
					if( Spieler[i][pFahrgeschaeft] == 3 ) {
				        if( Spieler[i][pFahrgeschaeftData] < time ) {
						    SendClientMessage(i,COLOR_ORANGE,"Ticketverkäufer sagt: Deine Zeit ist um. Wir hoffen, dass es dir Spaß gemacht hat");
					        Spieler[i][pFahrgeschaeft] = -1;
				        }
					}
				}
	        }
			MoveDynamicObject( g_Schiff[S_iObject] , g_Schiff[S_fX] + g_Schiff[S_fOffsetX], g_Schiff[S_fY] - g_Schiff[S_fOffsetY], g_Schiff[S_fZ] + g_Schiff[S_fOffsetZ], g_Schiff[S_fSpeed], frandom(-33.0,-37.0,3) , 0.0 , 86.0 );
	        g_Schiff[S_ibStatus] = 4;
	    }
	    else if( g_Schiff[S_ibStatus] == 4 ) {
	        SetTimer("Pulse_Schiff",200 + random(150),false);
	        g_Schiff[S_ibStatus] = 5;
	    }
	    else if( g_Schiff[S_ibStatus] == 6 ) {
			MoveDynamicObject( g_Schiff[S_iObject] , g_Schiff[S_fX] - g_Schiff[S_fOffsetX], g_Schiff[S_fY] - g_Schiff[S_fOffsetY], g_Schiff[S_fZ] + g_Schiff[S_fOffsetZ], g_Schiff[S_fSpeed], frandom(37.0,33.0,3) , 0.0 , 86.0 );
	        g_Schiff[S_ibStatus] = 1;
	    }
	    return 1;
	}
	if( g_BreakDancer[BD_ibStatus] != 0 ) {
		for(new i = 0 ; i < sizeof(g_BreakDancerSlot) ; i++) {
		    if( g_BreakDancerSlot[i][BDS_iObject] == objectid ) {
		        MoveBreakdancer();
				return 1;
		    }
		}
	}
	#if defined WEIHNACHTS_EVENT
	for(new i ; i < sizeof(g_Geschenk) ; i++) {
	    if( objectid == g_Geschenk[i][G_iObjectID] ) {
	        new
	            Float:x,
	            Float:y,
	            Float:z,
	            Float:rx,
	            Float:ry,
	            Float:rz;
			GetDynamicObjectRot( objectid,rx,ry,rz);
			GetDynamicObjectPos( objectid,x,y,z);
			if( z > g_Geschenk[i][G_fZ] ) z = g_Geschenk[i][G_fZ];
			else z += 0.5;
			ry = float(random(361));
			rx = float(random(361));
			rz = float(random(361));
			MoveDynamicObject( objectid , g_Geschenk[i][G_fX],g_Geschenk[i][G_fY], z  , 0.25 , 0.0 , 0.0 , rz );
	    }
	}
	#endif//if( Gate_OnDynamicObjectMoved(objectid)) return 1;
	if( objectid == g_BallonConfig[BC_iObject] ) {
	    MoveBallon();
	}
	new e_streamer_extra_id = Streamer_GetIntData(STREAMER_TYPE_OBJECT,objectid,E_STREAMER_EXTRA_ID);
	if( e_streamer_extra_id == OBJECT_ZOLL ) {
	    //printf("OnDynamicObjectMoved %d OBJECT_ZOLL",objectid);
		for(new i ; i < sizeof(g_Zoll); i++) {
		    if( objectid == g_Zoll[i][Z_iObject] ) {
		        if( g_Zoll[i][Z_iStatus] == 1 ) {
		            g_Zoll[i][Z_iStatus] = 2;
		        }
		        else {
		            g_Zoll[i][Z_iStatus] = 0;
		        }
		        break;
		    }
		}
	}
	else if( e_streamer_extra_id == OBJECT_FALLTURM_PLATTE ) {
	    //printf("OnDynamicObjectMoved %d",g_FallTurm[FT_ibStatus]);
        KillTimer(g_FallTurm[FT_tTimer]);
	    if( g_FallTurm[FT_ibStatus] == 2 ) {
			g_FallTurm[FT_tTimer] = SetTimer("Pulse_Fallturm",5000,false);
			//SendFahrgeschaeftMessage(0,COLOR_YELLOW,"Gleich geht es abwärts");
			g_FallTurm[FT_ibStatus] = 3;
	    }
		else if( g_FallTurm[FT_ibStatus] == 4 ) {
		    new
		        Float:x,
		        Float:y,
		        Float:z;
		    g_FallTurm[FT_ibStatus] = 5;
			//SendFahrgeschaeftMessage(0,COLOR_YELLOW,"Der Turm fährt gleich wieder hoch");
			for(new i ; i < MAX_PLAYERS ; i++) {
			    if( Spieler[i][pFahrgeschaeft] == 0 ) {
			        if( GetPlayerPos(i,x,y,z)) {
				        SetPlayerPos(i,x,y,7.85);
				        //TogglePlayerControllable(i,true);
			        }
			    }
			}
			g_FallTurm[FT_tTimer] = SetTimer("Pulse_Fallturm",5000,false);
		}
		else if( g_FallTurm[FT_ibStatus] == 6 ) {
		    g_FallTurm[FT_ibStatus] = 7;
			//SendFahrgeschaeftMessage(0,COLOR_YELLOW,"Oben angekommen. Nochmal runter!");
			g_FallTurm[FT_tTimer] = SetTimer("Pulse_Fallturm",5000,false);
		}
		else if( g_FallTurm[FT_ibStatus] == 8 ) {
		    new
		        Float:x,
		        Float:y,
		        Float:z;
		    g_FallTurm[FT_ibStatus] = 9;
			for(new i ; i < MAX_PLAYERS ; i++) {
			    if( Spieler[i][pFahrgeschaeft] == 0 ) {
			        if( GetPlayerPos(i,x,y,z)) {
				        SetPlayerPos(i,x,y,7.85);
				        TogglePlayerControllable(i,true);
			        }
			    }
			}
			g_FallTurm[FT_tTimer] = SetTimer("Pulse_Fallturm",2500,false);
		}
	}
	else if(e_streamer_extra_id == OBJECT_BREAKDANCER) {
	    MoveBreakdancer();
	}
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
    return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
    return 1;
}
public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
    //if( Spikes_OnPlayerPickUpPickup(playerid,pickupid) ) return 1;
    return 1;
}

public OnVehicleMod(playerid,vehicleid,componentid)
{
    for(new x = 0 , j = MaxVehicles(playerid) ; x < j;x++)
    {
        if (vehicleid == PlayerCar[playerid][x][CarId] && PlayerHaveCar[playerid][x])
        {
            if((componentid >= 1008) && (componentid <= 1010)) {PlayerCar[playerid][x][CarNitro] = componentid;}
            if((componentid >= 1142) && (componentid <= 1145)) {PlayerCar[playerid][x][CarVents] = componentid;}
            if((componentid == 1013) || (componentid == 1024)) {PlayerCar[playerid][x][CarLamps] = componentid;}
            if((componentid >= 1004) && (componentid <= 1005)||(componentid >= 1011) && (componentid <= 1012)) {PlayerCar[playerid][x][CarHood] = componentid;}
            if(componentid == 1087) {PlayerCar[playerid][x][CarHyd] = componentid;}
            if(componentid == 1086) {PlayerCar[playerid][x][CarHyd] = componentid;}
            if(IsAWheel(componentid)) {PlayerCar[playerid][x][CarWheel] = componentid;}
            if(IsAExhaust(componentid)) {PlayerCar[playerid][x][CarAusp] = componentid;}
            if(IsASideL(componentid)) {PlayerCar[playerid][x][CarSideL] = componentid; PlayerCar[playerid][x][CarSideR] = SideR;}
            if(IsASideR(componentid)) {PlayerCar[playerid][x][CarSideR] = componentid; PlayerCar[playerid][x][CarSideL] = SideL;}
            if(IsAFB(componentid)) {PlayerCar[playerid][x][CarFB] = componentid;}
            if(IsARB(componentid)) {PlayerCar[playerid][x][CarRB] = componentid;}
            if(IsASpoiler(componentid)) {PlayerCar[playerid][x][CarSpoiler] = componentid;}
            if(IsARoof(componentid)) {PlayerCar[playerid][x][CarRoof] = componentid;}
        }
    }
    for(new f; f < MAX_VEHICLES; f++)
    {
        if (vehicleid == FrakCarInfo[f][f_veh])
        {
            if((componentid >= 1008) && (componentid <= 1010)) {FrakCarInfo[f][f_Nitro] = componentid;}
            if((componentid >= 1142) && (componentid <= 1145)) {FrakCarInfo[f][f_Vents] = componentid;}
            if((componentid == 1013) || (componentid == 1024)) {FrakCarInfo[f][f_Lamps] = componentid;}
            if((componentid >= 1004) && (componentid <= 1005)||(componentid >= 1011) && (componentid <= 1012)) {FrakCarInfo[f][f_Hood] = componentid;}
            if(componentid == 1087) {FrakCarInfo[f][f_Hyd] = componentid;}
            if(componentid == 1086) {FrakCarInfo[f][f_Hyd] = componentid;}
            if(IsAWheel(componentid)) {FrakCarInfo[f][f_Wheel] = componentid;}
            if(IsAExhaust(componentid)) {FrakCarInfo[f][f_Ausp] = componentid;}
            if(IsASideL(componentid)) {FrakCarInfo[f][f_SideL] = componentid; FrakCarInfo[f][f_SideR] = SideR;}
            if(IsASideR(componentid)) {FrakCarInfo[f][f_SideR] = componentid; FrakCarInfo[f][f_SideL] = SideL;}
            if(IsAFB(componentid)) {FrakCarInfo[f][f_FB] = componentid;}
            if(IsARB(componentid)) {FrakCarInfo[f][f_RB] = componentid;}
            if(IsASpoiler(componentid)) {FrakCarInfo[f][f_Spoiler] = componentid;}
            if(IsARoof(componentid)) {FrakCarInfo[f][f_Roof] = componentid;}
        }
    }
    return 1;
}


public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
    for(new x = 0 , j = MaxVehicles(playerid) ; x < j;x++)
    {
        if(vehicleid == PlayerCar[playerid][x][CarId] && PlayerHaveCar[playerid][x])
        {
            PlayerCar[playerid][x][CarPJ] = paintjobid;
            PlayerCar[playerid][x][CarC1] = 1;
            PlayerCar[playerid][x][CarC2] = 1;
        }
    }
    return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
    for(new x = 0 , j = MaxVehicles(playerid) ; x < j;x++)
    {
        if(vehicleid == PlayerCar[playerid][x][CarId] && PlayerHaveCar[playerid][x])
        {
            PlayerCar[playerid][x][CarC1] = color1;
            PlayerCar[playerid][x][CarC2] = color2;
        }
    }
    return 1;
}


forward CarTuning(playerid, slot);
public CarTuning(playerid, slot)
{
    ChangeVehicleColor(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarC1],PlayerCar[playerid][slot][CarC2]);
    if(PlayerCar[playerid][slot][CarPJ] >= 0) {ChangeVehiclePaintjob(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarPJ]);}
    if(PlayerCar[playerid][slot][CarNitro] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarNitro]);}
    if(PlayerCar[playerid][slot][CarHyd] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarHyd]);}
    if(PlayerCar[playerid][slot][CarWheel] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarWheel]);}
    if(PlayerCar[playerid][slot][CarAusp] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarAusp]);}
    if(PlayerCar[playerid][slot][CarSideL] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarSideL]);}
    if(PlayerCar[playerid][slot][CarSideR] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarSideR]);}
    if(PlayerCar[playerid][slot][CarFB] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarFB]);}
    if(PlayerCar[playerid][slot][CarRB] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarRB]);}
    if(PlayerCar[playerid][slot][CarSpoiler] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarSpoiler]);}
    if(PlayerCar[playerid][slot][CarRoof] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarRoof]);}
    if(PlayerCar[playerid][slot][CarHood] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarHood]);}
    if(PlayerCar[playerid][slot][CarVents] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarVents]);}
    if(PlayerCar[playerid][slot][CarLamps] != 0) {AddVehicleComponent(PlayerCar[playerid][slot][CarId],PlayerCar[playerid][slot][CarLamps]);}
    LockCar(PlayerCar[playerid][slot][CarId]);
}

forward FCarTuning(veh);
public FCarTuning(veh)
{
    if(FrakCarInfo[veh][f_Nitro] != 0) {AddVehicleComponent(FrakCarInfo[veh][f_veh],FrakCarInfo[veh][f_Nitro]);}
    if(FrakCarInfo[veh][f_Hyd] != 0) {AddVehicleComponent(FrakCarInfo[veh][f_veh],FrakCarInfo[veh][f_Hyd]);}
    if(FrakCarInfo[veh][f_Wheel] != 0) {AddVehicleComponent(FrakCarInfo[veh][f_veh],FrakCarInfo[veh][f_Wheel]);}
    if(FrakCarInfo[veh][f_Ausp] != 0) {AddVehicleComponent(FrakCarInfo[veh][f_veh],FrakCarInfo[veh][f_Ausp]);}
    if(FrakCarInfo[veh][f_SideL] != 0) {AddVehicleComponent(FrakCarInfo[veh][f_veh],FrakCarInfo[veh][f_SideL]);}
    if(FrakCarInfo[veh][f_SideR] != 0) {AddVehicleComponent(FrakCarInfo[veh][f_veh],FrakCarInfo[veh][f_SideR]);}
    if(FrakCarInfo[veh][f_FB] != 0) {AddVehicleComponent(FrakCarInfo[veh][f_veh],FrakCarInfo[veh][f_FB]);}
    if(FrakCarInfo[veh][f_RB] != 0) {AddVehicleComponent(FrakCarInfo[veh][f_veh],FrakCarInfo[veh][f_RB]);}
    if(FrakCarInfo[veh][f_Spoiler] != 0) {AddVehicleComponent(FrakCarInfo[veh][f_veh],FrakCarInfo[veh][f_Spoiler]);}
    if(FrakCarInfo[veh][f_Roof] != 0) {AddVehicleComponent(FrakCarInfo[veh][f_veh],FrakCarInfo[veh][f_Roof]);}
    if(FrakCarInfo[veh][f_Hood] != 0) {AddVehicleComponent(FrakCarInfo[veh][f_veh],FrakCarInfo[veh][f_Hood]);}
    if(FrakCarInfo[veh][f_Vents] != 0) {AddVehicleComponent(FrakCarInfo[veh][f_veh],FrakCarInfo[veh][f_Vents]);}
    if(FrakCarInfo[veh][f_Lamps] != 0) {AddVehicleComponent(FrakCarInfo[veh][f_veh],FrakCarInfo[veh][f_Lamps]);}
}

public OnPlayerSelectedMenuRow(playerid, row)
{
    return 1;
}

public OnPlayerExitedMenu(playerid)
{
    return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
    return 1;
}

forward TazerReady(playerid);
public TazerReady(playerid)
{
    TazerTime[playerid] = 1;
}

forward JailFreeze(playerid);
public JailFreeze(playerid)
{
    SendClientMessage(playerid, COLOR_YELLOW, "Du bist nun wieder entfreezed.");
    UnfreezePlayer(playerid);
}

forward KnastUnfreeze(playerid);
public KnastUnfreeze(playerid)
{
    knastunfreezetimer[playerid] = INVALID_TIMER_ID;
    if(IsPlayerConnected(playerid) && gPlayerLogged[playerid] == 1)
    {
        UnfreezePlayer(playerid);
        SendClientMessage(playerid, COLOR_RED, "Bitte lass das Knast-DM in Zukunft!");
    }
    return 1;
}


public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if(OAB_OnPlayerKeyStateChange(playerid, newkeys, oldkeys)) {
        return 0; //Handschellen
    }
    new vehicleid = GetPlayerVehicleID(playerid);

    if( IsPlayerAttachedObjectSlotUsed(playerid,ATTACHED_INDEX_HANDSCHELLE) ) {
        if(newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
    }
	if(PRESSED(KEY_NO))
	{
	    if(IsPlayerAtATM(playerid))
	    {
	        SetPlayerAutomatAnim(playerid);
	        if( !HasBankKonto(playerid) ) {
	            ShowPlayerDialog(playerid, DIALOG_BANKKONTO, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Sie haben noch kein Bankkonto eingerichtet,\n um ein Bankkonto für einmalige 1.200$ einzurichten, \nklicken Sie auf \"einrichten\"", "Einrichten", "Abbrechen");
	            return 1;
	        }
	        if( !HasBankKontoPin(playerid) ) {
	            ShowPlayerDialog(playerid, DIALOG_BANKKONTO_PIN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Du musst für dein Bankkonto noch einen Pin festlegen.", "Absenden", "Abbrechen");
	            return 1;
	        }
	        ShowPlayerDialog(playerid, DIALOG_ATM, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Geld abheben\nGeld anlegen\nKontostand\nOnlineBanking\nAutomat hacken", "Ausführen", "Abbrechen");
	    }
	}
	if(PRESSED(KEY_NO))
	{
		for(new i=0;i<MAX_VEHICLES;i++)
	    {
		    if(IsValidVehicle(i))
		    {
			    new Float:Pos[3];
		     	GetVehiclePos(i, Pos[0], Pos[1], Pos[2]);
				if(IsPlayerInRangeOfPoint(playerid, 3.0, Pos[0], Pos[1], Pos[2]))
				{
                    if(Spieler[playerid][pFraktion] != 3) return 1;
			    	if(GetVehicleModel(i) != 407 && GetVehicleModel(i) != 544)return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}Du kannst dich nur an einem Firetruck und an einem Firetruck LA ausrüsten!");
					if(Spieler[playerid][pFraktion] != 3)return SendClientMessage(playerid, COLOR_WHITE, ERROR_FRAKTION);//Diese Abfrage macht irgendwie keinen Sinn...
					if(Spieler[playerid][pDuty] != 1)return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}Du bist nicht im Dienst.");
					if(IsPlayerInAnyVehicle(playerid))return SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}Du bist in einem Fahrzeug!");
		            ShowPlayerDialog(playerid, DIALOG_AUSRUESTEN_FEUERWEHR, DIALOG_STYLE_LIST, "{AA3333}Los Santos Rettungsdienst {FFFFFF}| Einsatzfahrzeug","{247BA6}1. {FFFFFF}Feuerloescher\n{247BA6}2. {FFFFFF}Schaufel\n{247BA6}3. {FFFFFF}Kettensaege", "OK", "Abbrechen");
					return 1;
				}
			}
		}
	}
	if((PRESSED(KEY_NO)))
	{
	    for (new i; i < MAX_FACTIONS; i++) {
			if (IsPlayerInRangeOfPoint(playerid, 3.0, g_fraktion[i][Fr_WaffenlagerX], g_fraktion[i][Fr_WaffenlagerY], g_fraktion[i][Fr_WaffenlagerZ]))
			{
				if (!Spieler[playerid][pFraktion]) return SendClientMessage(playerid, COLOR_WHITE, "{AA3333}Du befindest dich in keiner Fraktion!");
				if (HasWeaponBlock(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "{AA3333}Du hast eine Waffensperre darum kannst du diese Aktion nicht ausführen!");
				if (Spieler[playerid][pFraktion] != g_fraktion[i][Fr_FrakID]) return SendClientMessage(playerid, COLOR_WHITE, "{AA3333}Das ist nicht das Waffenlager deiner Fraktion.");
                if (Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2) {
                    ShowPlayerDialog(playerid, DIALOG_WLAGERCOP, DIALOG_STYLE_LIST, "Waffenspind", "Deagle - Schuss: 100\nM4 - Schuss: 150\nShotgun - Schuss: 200\nSniper - Schuss: 200\nRauchbombe - Anzahl: 10\nKamera - Anzahl: 30\nFallschirm", "Annehmen", "Abbruch");
                } else {
                    ShowWaffenLager(playerid, 0);
                }
			}
		}
	    return 1;
	}

    if(PRESSED(KEY_LOOK_BEHIND))
	{
        new Float:fX, Float:fY, Float:fZ;
        GetDynamicObjectPos(TOR_LSPD[0], fX, fY, fZ);
        if(IsPlayerInRangeOfPoint(playerid,20.0, 1544.45618, -1622.11987, 12.93280))
        {
            if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 9 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22 || Spieler[playerid][pAdmin] >= 2))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist!");
            if(SERVER_GATE[0] == 0)
            {
                SERVER_GATE[0] = 1; MoveDynamicObject(TOR_LSPD[0],1544.45618, -1622.11987, LSPD_GATE_OPEN_Z,4.0);
            }
            else
            {
                SERVER_GATE[0] = 0; MoveDynamicObject(TOR_LSPD[0],1544.45618, -1622.11987, LSPD_GATE_CLOSED_Z,4.0);
            }
        }
        GetDynamicObjectPos(TOR_LSPD[1], fX, fY, fZ);
        if(IsPlayerInRangeOfPoint(playerid,20.0, 1596.02783, -1638.10132, 14.59349))
        {
            if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 9 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22 || Spieler[playerid][pAdmin] >= 2))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist!");
            if(SERVER_GATE[1] == 0)
            {
                SERVER_GATE[1] = 1; MoveDynamicObject(TOR_LSPD[1],1596.02783, -1638.10132, LSPD_GATE2_OPEN_Z,4.0, 0.0000, 0.0000, 0.0000);
            }
            else
            {
                SERVER_GATE[1] = 0; MoveDynamicObject(TOR_LSPD[1],1596.02783, -1638.10132, LSPD_GATE2_CLOSED_Z,4.0, 0.0000, 0.0000, 0.0000);
            }
        }
        // Bei Maps\OrdnungsamtBase einfügen.
		if(IsPlayerInRangeOfPoint(playerid, 10.0, 1750.2025, -1141.5572, 23.2500) && !IsPlayerInAnyVehicle(playerid) || IsPlayerInRangeOfPoint(playerid, 10.0, 1750.2025, -1141.5572, 23.2500) && IsPlayerInAnyVehicle(playerid)) //Los Santos Ordnungsamt
		{
		    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22 || Spieler[playerid][pAdmin] >= 2))return SendClientMessage(playerid, COLOR_WHITE, ERROR_FRAKTION);
			if(SERVER_GATE[2] == 0)
			{
				SERVER_GATE[2] = 1; MoveDynamicObject(ORDNUNGSAMT_TOR[0], 1750.2025, -1141.5572, 23.2500, 4.0, 0.0000, 0.0000, 135.0000);
			}
			else
			{
				SERVER_GATE[2] = 0; MoveDynamicObject(ORDNUNGSAMT_TOR[0], 1756.3326, -1147.6872, 23.2500, 4.0, 0.0000, 0.0000, 135.0000);
			}
		}
        if(IsPlayerInRangeOfPoint(playerid, 10.0, 1748.0399, -1094.2713, 23.2500) && !IsPlayerInAnyVehicle(playerid) || IsPlayerInRangeOfPoint(playerid, 10.0, 1748.0399, -1094.2713, 23.2500) && IsPlayerInAnyVehicle(playerid)) //Los Santos Ordnungsamt
		{
		    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22 || Spieler[playerid][pAdmin] >= 2))return SendClientMessage(playerid, COLOR_WHITE, ERROR_FRAKTION);
			if(SERVER_GATE[3] == 0)
			{
				SERVER_GATE[3] = 1; MoveDynamicObject(ORDNUNGSAMT_TOR[1], 1739.0877, -1094.2713, 23.2500, 4.0, 0.0000, 0.0000, 180.0000);
			}
			else
			{
				SERVER_GATE[3] = 0; MoveDynamicObject(ORDNUNGSAMT_TOR[1], 1748.0399, -1094.2713, 23.2500, 4.0, 0.0000, 0.0000, 180.0000);
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 10.0, 1727.9434, -1126.2966, 21.1888) && !IsPlayerInAnyVehicle(playerid) || IsPlayerInRangeOfPoint(playerid, 10.0, 1727.9434, -1126.2966, 21.1888) && IsPlayerInAnyVehicle(playerid)) //Los Santos Ordnungsamt TÜV
		{
		    if(!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22))return SendClientMessage(playerid, COLOR_WHITE, ERROR_FRAKTION);
		    if(SERVER_GATE[4] == 0)
            {	
                SERVER_GATE[4] = 1; MoveDynamicObject(ORDNUNGSAMT_TOR[2], 1727.9434, -1126.2966, 23.0489, 4.0, 0.0000, 0.0000, 0.0000);
            }
			else
            {					
                SERVER_GATE[4] = 0; MoveDynamicObject(ORDNUNGSAMT_TOR[2], 1727.9434, -1126.2966, 21.1888, 4.0, 0.0000, 0.0000, 0.0000);
            }
        }
        /////////////////////////////////////////
		if(IsPlayerInRangeOfPoint(playerid, 5.0, 1534.8059, -1451.2822, 12.6244) && !IsPlayerInAnyVehicle(playerid) || IsPlayerInRangeOfPoint(playerid, 5.0, 1534.8059, -1451.2822, 12.6244) && IsPlayerInAnyVehicle(playerid)) //Los Santos Ordnungsamt TÜV
		{
		    if(!(Spieler[playerid][pFraktion] == 14 || Spieler[playerid][pAdmin] >= 2))return SendClientMessage(playerid, COLOR_WHITE, ERROR_FRAKTION);
		    if(SERVER_GATE[5] == 0)
            {	
                SERVER_GATE[5] = 1; MoveDynamicObject(object_hitmanBase[70], 1534.8059, -1451.2822, 12.6244, 4.0, 90.0000, 0.0000, 90.0000);
            }
			else
            {					
                SERVER_GATE[5] = 0; MoveDynamicObject(object_hitmanBase[70], 1534.8059, -1451.2822, 2.6244, 4.0, 90.0000, 0.0000, 90.0000);
            }
        }
        GetDynamicObjectPos(object_aBase_gate[0], fX, fY, fZ);
		if(IsPlayerInRangeOfPoint(playerid, 5.0, aBase_RANGE_COORDS) && !IsPlayerInAnyVehicle(playerid) || IsPlayerInRangeOfPoint(playerid, 5.0, aBase_RANGE_COORDS) && IsPlayerInAnyVehicle(playerid)) //Los Santos Ordnungsamt TÜV
		{
            new index = GetPlayerHouse(playerid);
		    if(!(Haus[index][hID] == 911 || Spieler[playerid][pAdmin] >= 2))return SendClientMessage(playerid, COLOR_WHITE, "Du bist nicht der Besitzer vom Haus: 911!");
            if(SERVER_GATE[6] == 0)
            {	
                SERVER_GATE[6] = 1; MoveDynamicObject(object_aBase_gate[0], fX, fY, aBase_GATE_CLOSED_Z,3.25);
            }
			else
            {					
                SERVER_GATE[6] = 0; MoveDynamicObject(object_aBase_gate[0], fX, fY, aBase_GATE_OPEN_Z, 3.25);
            }
        }
        GetDynamicObjectPos(object_samdExteriortor[0], fX, fY, fZ);
		if(IsPlayerInRangeOfPoint(playerid, 8.0, fX, fY, fZ) && !IsPlayerInAnyVehicle(playerid) || IsPlayerInRangeOfPoint(playerid, 8.0, fX, fY, fZ) && IsPlayerInAnyVehicle(playerid)) //Los Santos Ordnungsamt TÜV
		{
		    if(!(Spieler[playerid][pFraktion] == 3 || Spieler[playerid][pAdmin] >= 2))return SendClientMessage(playerid, COLOR_WHITE, ERROR_FRAKTION);
            if(SERVER_GATE[7] == 0)
            {	
                SERVER_GATE[7] = 1; MoveDynamicObject(object_samdExteriortor[0], fX, fY,SAMD_CLOSED,3.25);
            }
			else
            {					
                SERVER_GATE[7] = 0; MoveDynamicObject(object_samdExteriortor[0], fX, fY,SAMD_OPEN, 3.25);
            }
        }
        GetDynamicObjectPos(object_samdExteriortor[1], fX, fY, fZ);
		if(IsPlayerInRangeOfPoint(playerid, 8.0, fX, fY, fZ) && !IsPlayerInAnyVehicle(playerid) || IsPlayerInRangeOfPoint(playerid, 8.0, fX, fY, fZ) && IsPlayerInAnyVehicle(playerid)) //Los Santos Ordnungsamt TÜV
		{
		    if(!(Spieler[playerid][pFraktion] == 3 || Spieler[playerid][pAdmin] >= 2))return SendClientMessage(playerid, COLOR_WHITE, ERROR_FRAKTION);
            if(SERVER_GATE[8] == 0)
            {	
                SERVER_GATE[8] = 1; MoveDynamicObject(object_samdExteriortor[1], fX, fY, SAMD_CLOSED,3.25);
            }
			else
            {					
                SERVER_GATE[8] = 0; MoveDynamicObject(object_samdExteriortor[1], fX, fY, SAMD_OPEN, 3.25);
            }
        }
        GetDynamicObjectPos(object_samdExteriortor[2], fX, fY, fZ);
		if(IsPlayerInRangeOfPoint(playerid, 8.0, fX, fY, fZ) && !IsPlayerInAnyVehicle(playerid) || IsPlayerInRangeOfPoint(playerid, 8.0, fX, fY, fZ) && IsPlayerInAnyVehicle(playerid)) //Los Santos Ordnungsamt TÜV
		{
		    if(!(Spieler[playerid][pFraktion] == 3 || Spieler[playerid][pAdmin] >= 2))return SendClientMessage(playerid, COLOR_WHITE, ERROR_FRAKTION);
            if(SERVER_GATE[9] == 0)
            {	
                SERVER_GATE[9] = 1; MoveDynamicObject(object_samdExteriortor[2], fX, fY,SAMD_CLOSED,3.25);
            }
			else
            {					
                SERVER_GATE[9] = 0; MoveDynamicObject(object_samdExteriortor[2], fX, fY, SAMD_OPEN, 3.25);
            }
        }
        GetDynamicObjectPos(object_samdExteriortor[3], fX, fY, fZ);
		if(IsPlayerInRangeOfPoint(playerid, 8.0, fX, fY, fZ) && !IsPlayerInAnyVehicle(playerid) || IsPlayerInRangeOfPoint(playerid, 8.0, fX, fY, fZ) && IsPlayerInAnyVehicle(playerid)) //Los Santos Ordnungsamt TÜV
		{
		    if(!(Spieler[playerid][pFraktion] == 3 || Spieler[playerid][pAdmin] >= 2))return SendClientMessage(playerid, COLOR_WHITE, ERROR_FRAKTION);
            if(SERVER_GATE[10] == 0)
            {	
                SERVER_GATE[10] = 1; MoveDynamicObject(object_samdExteriortor[3], fX, fY, SAMD_CLOSED,3.25);
            }
			else
            {					
                SERVER_GATE[10] = 0; MoveDynamicObject(object_samdExteriortor[3], fX, fY, SAMD_OPEN, 3.25);
            }
        }
        GetDynamicObjectPos(object_samdExteriortor[4], fX, fY, fZ);
		if(IsPlayerInRangeOfPoint(playerid, 8.0, fX, fY, fZ) && !IsPlayerInAnyVehicle(playerid) || IsPlayerInRangeOfPoint(playerid, 8.0, fX, fY, fZ) && IsPlayerInAnyVehicle(playerid)) //Los Santos Ordnungsamt TÜV
		{
		    if(!(Spieler[playerid][pFraktion] == 3 || Spieler[playerid][pAdmin] >= 2))return SendClientMessage(playerid, COLOR_WHITE, ERROR_FRAKTION);
            if(SERVER_GATE[11] == 0)
            {	
                SERVER_GATE[11] = 1; MoveDynamicObject(object_samdExteriortor[4], fX, fY, SAMD_CLOSED,3.25);
            }
			else
            {					
                SERVER_GATE[11] = 0; MoveDynamicObject(object_samdExteriortor[4], fX, fY, SAMD_OPEN, 3.25);
            }
        }
        GetDynamicObjectPos(object_samdExteriortor[5], fX, fY, fZ);
		if(IsPlayerInRangeOfPoint(playerid, 8.0, fX, fY, fZ) && !IsPlayerInAnyVehicle(playerid) || IsPlayerInRangeOfPoint(playerid, 8.0, fX, fY, fZ) && IsPlayerInAnyVehicle(playerid)) //Los Santos Ordnungsamt TÜV
		{
		    if(!(Spieler[playerid][pFraktion] == 3 || Spieler[playerid][pAdmin] >= 2))return SendClientMessage(playerid, COLOR_WHITE, ERROR_FRAKTION);
            if(SERVER_GATE[12] == 0)
            {	
                SERVER_GATE[12] = 1; MoveDynamicObject(object_samdExteriortor[5], fX, fY, SAMD_CLOSED,3.25);
            }
			else
            {					
                SERVER_GATE[12] = 0; MoveDynamicObject(object_samdExteriortor[5], fX, fY, SAMD_OPEN, 3.25);
            }
        }
	}
    if(PRESSED(KEY_CTRL_BACK))
    {
        if(HOLDING(KEY_HANDBRAKE))
        {
            if(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 22)
            {
                new model = GetVehicleModel(vehicleid);
                if(model == 560)
                {
                    if(vSirene[vehicleid] == INVALID_OBJECT_ID)
                    {
                        vSirene[vehicleid] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                        AttachDynamicObjectToVehicle(vSirene[vehicleid],vehicleid, 0.549999, 0.274999, 0.864999, 0.000000, 0.000000, 0.000000);
                    }
                    else
                    {
                        DestroyDynamicObject(vSirene[vehicleid]);
                        vSirene[vehicleid] = INVALID_OBJECT_ID;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Dazu musst du in einem Sultan sitzen.");
                }
            }
            else if(Spieler[playerid][pFraktion] == 5)
            {
                new model = GetVehicleModel(vehicleid);
                if(model == 525)
                {
                    if(OAmtSirene[vehicleid] == INVALID_VEHICLE_ID)
                    {
                        OAmtSirene[vehicleid] = CreateDynamicObject(19294, 0, 0, 0, 0, 0, 0, 0);
                        AttachDynamicObjectToVehicle(OAmtSirene[vehicleid], vehicleid, 0.029999, -0.544999, 1.594998, 0.000000, 0.000000, 0.000000);
                    }
                    else
                    {
                        DestroyDynamicObject(OAmtSirene[vehicleid]);
                        OAmtSirene[vehicleid] = INVALID_OBJECT_ID;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Dazu musst du in einem Abschlepper sitzen.");
                }
            }
        }
    }
    if(PRESSED(KEY_ANALOG_RIGHT))
    {
        if(HOLDING(KEY_HANDBRAKE))
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new mod = GetVehicleModel( vehicleid );
                if(IsBicycle(mod))return 1;
                return cmd_motor(playerid);
            }
        }
    }
    if(PRESSED(KEY_ANALOG_LEFT))
    {
        if(HOLDING(KEY_HANDBRAKE))
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new mod = GetVehicleModel( vehicleid );
                if(IsBicycle(mod))return 1;
                return cmd_licht(playerid);
            }
        }
    }
    if(PRESSED(KEY_ANALOG_UP))
    {
        if(HOLDING(KEY_HANDBRAKE))
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new mod = GetVehicleModel( vehicleid );
                if(IsBicycle(mod))return 1;
                return cmd_kofferraum(playerid, "");
            }
        }
    }
    if(PRESSED(KEY_ANALOG_DOWN))
    {
        if(HOLDING(KEY_HANDBRAKE))
        {
            if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
            {
                new mod = GetVehicleModel( vehicleid );
                if(IsBicycle(mod))return 1;
                return cmd_haube(playerid);
            }
        }
    }
    if(newkeys & KEY_SECONDARY_ATTACK)
	{
		if(pSkinSelection[playerid] == 1)
		{
		    new iBiz;
		    for(new i; i<MAX_BIZES;i++)
		    {
		        if(pCurrentBiz[playerid] == Biz[i][bID])
		        {
		            iBiz = i;
		        }
			}
			new iSkin = pChoosedSkin[playerid];
			pCurrentBiz[playerid] = 0;
			pSkinSelection[playerid] = 0;
			pChoosedSkin[playerid] = 0;
			UnfreezePlayer(playerid);

			if (GetPVarInt(playerid, "SELECT.FRAK.SKIN")) {
                DeletePVar(playerid, "SELECT.FRAK.SKIN");
                SetPlayerSkinEx(playerid, iSkin);
                SpawnPlayerEx(playerid);
                return 1;
            }
			if(Biz[iBiz][bWaren] < 1)
			{
                SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren.");
                SetPlayerInterior(playerid, Biz[iBiz][bInterior]);
                SetPlayerVirtualWorld(playerid, Biz[iBiz][bID]);
                SetPlayerPos(playerid, Biz[iBiz][EnterX], Biz[iBiz][EnterY], Biz[iBiz][EnterZ]);
                SetCameraBehindPlayer(playerid);
                return 1;
			}
			if(iSkin == Spieler[playerid][pSkin])
			{
				SendClientMessage(playerid, COLOR_WHITE, "Du musstest kein Geld bezahlen, da du den Skin bereits hattest.");
				SetPlayerInterior(playerid, Biz[iBiz][bInterior]);
				SetPlayerVirtualWorld(playerid, Biz[iBiz][bID]);
				SetPlayerPos(playerid, Biz[iBiz][EnterX], Biz[iBiz][EnterY], Biz[iBiz][EnterZ]);
				SetCameraBehindPlayer(playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Du hast $500 für den neuen Skin bezahlt.");
				SetPlayerInterior(playerid, Biz[iBiz][bInterior]);
				SetPlayerVirtualWorld(playerid, Biz[iBiz][bID]);
				SetPlayerPos(playerid, Biz[iBiz][EnterX], Biz[iBiz][EnterY], Biz[iBiz][EnterZ]);
				SetCameraBehindPlayer(playerid);
				GivePlayerCash(playerid, -500);
				Biz[iBiz][bKasse] += 500;
				Biz[iBiz][bWaren] -= 2;
				SetPlayerSkinEx(playerid, iSkin);
			}
		}
	}
   	if(newkeys & KEY_SPRINT)
    {
        if(pSkinSelection[playerid] == 1)
        {
            new
                skin = GetPlayerSkin(playerid);
            if(Spieler[playerid][pFraktion] == 0 || Spieler[playerid][pFraktion] == 14)
            {
                if(Spieler[playerid][pSex] == 1)
                {
                    if(skin == 2){
                        pChoosedSkin[playerid] = 7;
                    }else if(skin == 7){
                        pChoosedSkin[playerid] = 18;
                    }else if(skin == 18){
                        pChoosedSkin[playerid] = 19;
                    }else if(skin == 19){
                        pChoosedSkin[playerid] = 21;
                    }else if(skin == 21){
                        pChoosedSkin[playerid] = 22;
                    }else if(skin == 22){
                        pChoosedSkin[playerid] = 23;
                    }else if(skin == 23){
                        pChoosedSkin[playerid] = 101;
                    }else if(skin == 101){
                        pChoosedSkin[playerid] = 154;
                    }else if(skin == 154){
                        pChoosedSkin[playerid] = 170;
                    }else if(skin == 170){
                        pChoosedSkin[playerid] = 230;
                    }else{
                        pChoosedSkin[playerid] = 2;
                    }
                    SetPlayerSkin(playerid, pChoosedSkin[playerid]);
                }
                else if(Spieler[playerid][pSex] == 2)
                {
                    if(skin == 56){
                        pChoosedSkin[playerid] = 192;
                    }else if(skin == 192){
                        pChoosedSkin[playerid] = 211;
                    }else if(skin == 211){
                        pChoosedSkin[playerid] = 233;
                    }else if(skin == 233){
                        pChoosedSkin[playerid] = 56;
                    }else{
                        pChoosedSkin[playerid] = 56;
                    }
                    SetPlayerSkin(playerid, pChoosedSkin[playerid]);
                }
            }
            else if(Spieler[playerid][pFraktion] == 1)
            {
                if(skin == 265){
                    pChoosedSkin[playerid] = 266;
                }else if(skin == 266){
                    pChoosedSkin[playerid] = 267;
                }else if(skin == 267){
                    pChoosedSkin[playerid] = 280;
                }else if(skin == 280){
                    pChoosedSkin[playerid] = 284;
                }else if(skin == 284){
                    pChoosedSkin[playerid] = 285;
                }else if(skin == 285){
                    pChoosedSkin[playerid] = 300;
                }else if(skin == 300){
                    pChoosedSkin[playerid] = 303;
                }else if(skin == 303){
                    pChoosedSkin[playerid] = 304;
                }else if(skin == 304){
                    pChoosedSkin[playerid] = 306;
                }else if(skin == 306){
                    pChoosedSkin[playerid] = 12;
                }else if(skin == 12){
                    pChoosedSkin[playerid] = 93;
                }else if(skin == 93){
                    pChoosedSkin[playerid] = 170;
                }else if(skin == 170){
                    pChoosedSkin[playerid] = 188;
                }else if(skin == 188){
                    pChoosedSkin[playerid] = 265;
                }else{
                    pChoosedSkin[playerid] = 265;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 2)
            {
                if(skin == 286){
                    pChoosedSkin[playerid] = 59;
                }else if(skin == 59){
                    pChoosedSkin[playerid] = 150;
                }else if(skin == 150){
                    pChoosedSkin[playerid] = 285;
                }else if(skin == 285){
                    pChoosedSkin[playerid] = 281;
                }else if(skin == 281){
                    pChoosedSkin[playerid] = 60;
                }else if(skin == 60){
                    pChoosedSkin[playerid] = 141;
                }else if(skin == 141){
                    pChoosedSkin[playerid] = 2;
                }else if(skin == 2){
                    pChoosedSkin[playerid] = 7;
                }else if(skin == 7){
                    pChoosedSkin[playerid] = 25;
                }else if(skin == 25){
                    pChoosedSkin[playerid] = 72;
                }else if(skin == 72){
                    pChoosedSkin[playerid] = 192;
                }else if(skin == 192){
                    pChoosedSkin[playerid] = 211;
                }else if(skin == 211){
                    pChoosedSkin[playerid] = 93;
                }else if(skin==93){
                    pChoosedSkin[playerid] = 286;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 3)
            {
                if(skin == 70){
                    pChoosedSkin[playerid] = 274;
                }else if(skin == 274){
                    pChoosedSkin[playerid] = 275;
                }else if(skin == 275){
                    pChoosedSkin[playerid] = 276;
                }else if(skin == 276){
                    pChoosedSkin[playerid] = 277;
                }else if(skin == 277){
                    pChoosedSkin[playerid] = 278;
                }else if(skin == 278){
                    pChoosedSkin[playerid] = 279;
                }else if(skin == 279){
                    pChoosedSkin[playerid] = 308;
                }else if(skin == 308){
                    pChoosedSkin[playerid] = 12;
                }else if(skin == 12){
                    pChoosedSkin[playerid] = 93;
                }else if(skin == 93){
                    pChoosedSkin[playerid] = 170;
                }else if(skin == 170){
                    pChoosedSkin[playerid] = 188;
                }else if(skin == 188){
                    pChoosedSkin[playerid] = 265;
                }else{
                    pChoosedSkin[playerid] = 274;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 4)
            {
                if(skin == 57){
                    pChoosedSkin[playerid] = 187;
                }else if(skin == 187){
                    pChoosedSkin[playerid] = 147;
                }else if(skin == 147){
                    pChoosedSkin[playerid] = 192;
                }else if(skin == 192){
                    pChoosedSkin[playerid] = 40;
                }else if(skin == 40){
                    pChoosedSkin[playerid] = 91;
                }else if(skin == 91){
                    pChoosedSkin[playerid] = 2;
                }else if(skin == 2){
                    pChoosedSkin[playerid] = 66;
                }else if(skin == 66){
                    pChoosedSkin[playerid] = 1;
                }else if(skin == 1){
                    pChoosedSkin[playerid] = 15;
                }else if(skin == 15){
                    pChoosedSkin[playerid] = 23;
                }else if(skin == 23){
                    pChoosedSkin[playerid] = 29;
                }else if(skin == 29){
                    pChoosedSkin[playerid] = 72;
                }else if(skin == 72){
                    pChoosedSkin[playerid] = 57;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 5)
            {
                if(skin == 71){
                    pChoosedSkin[playerid] = 305;
                }else if(skin == 305){
                    pChoosedSkin[playerid] = 12;
                }else if(skin == 12){
                    pChoosedSkin[playerid] = 93;
                }else if(skin == 93){
                    pChoosedSkin[playerid] = 170;
                }else if(skin == 170){
                    pChoosedSkin[playerid] = 188;
                }else if(skin == 188){
                    pChoosedSkin[playerid] = 265;
                }else{
                    pChoosedSkin[playerid] = 71;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 6)
            {
                if(skin == 65){
                    pChoosedSkin[playerid] = 105;
                }else if(skin == 105){
                    pChoosedSkin[playerid] = 106;
                }else if(skin == 106){
                    pChoosedSkin[playerid] = 107;
                }else if(skin == 107){
                    pChoosedSkin[playerid] = 269;
                }else if(skin == 269){
                    pChoosedSkin[playerid] = 270;
                }else if(skin == 270){
                    pChoosedSkin[playerid] = 271;
                }else if(skin == 271){
                    pChoosedSkin[playerid] = 65;
                }else{
                    pChoosedSkin[playerid] = 65;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 7)
            {
                if(skin == 13){
                    pChoosedSkin[playerid] = 102;
                }else if(skin == 102){
                    pChoosedSkin[playerid] = 103;
                }else if(skin == 103){
                    pChoosedSkin[playerid] = 104;
                }else if(skin == 104){
                    pChoosedSkin[playerid] = 293;
                }else if(skin == 293){
                    pChoosedSkin[playerid] = 13;
                }else{
                    pChoosedSkin[playerid] = 13;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 8)
            {
                if(skin == 240){
                    pChoosedSkin[playerid] = 194;
                }else if(skin == 194){
                    pChoosedSkin[playerid] = 240;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 9)
            {
                if(skin == 163){
                    pChoosedSkin[playerid] = 164;
                }else if(skin == 164){
                    pChoosedSkin[playerid] = 165;
                }else if(skin == 165){
                    pChoosedSkin[playerid] = 166;
                }else if(skin == 166){
                    pChoosedSkin[playerid] = 295;
                }else if(skin == 295){
                    pChoosedSkin[playerid] = 163;
                }else{
                    pChoosedSkin[playerid] = 163;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 10)
            {
                if(skin == 122){
                    pChoosedSkin[playerid] = 123;
                }else if(skin == 123){
                    pChoosedSkin[playerid] = 169;
                }else if(skin == 169){
                    pChoosedSkin[playerid] = 186;
                }else if(skin == 186){
                    pChoosedSkin[playerid] = 203;
                }else if(skin == 203){
                    pChoosedSkin[playerid] = 228;
                }else if(skin == 228){
                    pChoosedSkin[playerid] = 122;
                }else{
                    pChoosedSkin[playerid] = 122;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 11)
            {
                if(skin == 114){
                    pChoosedSkin[playerid] = 115;
                }else if(skin == 115){
                    pChoosedSkin[playerid] = 116;
                }else if(skin == 116){
                    pChoosedSkin[playerid] = 172;
                }else if(skin == 172){
                    pChoosedSkin[playerid] = 173;
                }else if(skin == 173){
                    pChoosedSkin[playerid] = 174;
                }else if(skin == 174){
                    pChoosedSkin[playerid] = 114;
                }else{
                    pChoosedSkin[playerid] = 114;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 12)
            {
                if(skin == 46){
                    pChoosedSkin[playerid] = 184;
                }else if(skin == 184){
                    pChoosedSkin[playerid] = 185;
                }else if(skin == 185){
                    pChoosedSkin[playerid] = 223;
                }else if(skin == 223){
                    pChoosedSkin[playerid] = 273;
                }else if(skin == 273){
                    pChoosedSkin[playerid] = 46;
                }else{
                    pChoosedSkin[playerid] = 46;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 13)
            {
                if(skin == 47){
                    pChoosedSkin[playerid] = 108;
                }else if(skin == 108){
                    pChoosedSkin[playerid] = 109;
                }else if(skin == 109){
                    pChoosedSkin[playerid] = 110;
                }else if(skin == 110){
                    pChoosedSkin[playerid] = 292;
                }else if(skin == 292){
                    pChoosedSkin[playerid] = 47;
                }else{
                    pChoosedSkin[playerid] = 47;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 15)
            {
                if(skin == 32){
                    pChoosedSkin[playerid] = 100;
                }else if(skin == 100){
                    pChoosedSkin[playerid] = 158;
                }else if(skin == 158){
                    pChoosedSkin[playerid] = 247;
                }else if(skin == 247){
                    pChoosedSkin[playerid] = 248;
                }else if(skin == 248){
                    pChoosedSkin[playerid] = 254;
                }else if(skin == 254){
                    pChoosedSkin[playerid] = 32;
                }else{
                    pChoosedSkin[playerid] = 32;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 16)
            {
                if(skin == 282){
                    pChoosedSkin[playerid] = 281;
                }else if(skin == 281){
                    pChoosedSkin[playerid] = 59;
                }else if(skin == 59){
                    pChoosedSkin[playerid] = 60;
                }else if(skin == 60){
                    pChoosedSkin[playerid] = 141;
                }else if(skin == 141){
                    pChoosedSkin[playerid] = 148;
                }else if(skin == 148){
                    pChoosedSkin[playerid] = 150;
                }else if(skin == 150){
                    pChoosedSkin[playerid] = 2;
                }else if(skin == 2){
                    pChoosedSkin[playerid] = 7;
                }else if(skin == 7){
                    pChoosedSkin[playerid] = 25;
                }else if(skin == 25){
                    pChoosedSkin[playerid] = 72;
                }else if(skin == 72){
                    pChoosedSkin[playerid] = 192;
                }else if(skin == 192){
                    pChoosedSkin[playerid] = 211;
                }else if(skin == 211){
                    pChoosedSkin[playerid] = 93;
                }else if(skin==93){
                    pChoosedSkin[playerid] = 282;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 17)
            {
                if(skin == 202){
                    pChoosedSkin[playerid] = 217;
                }else if(skin == 217){
                    pChoosedSkin[playerid] = 89;
                }else if(skin == 89){
                    pChoosedSkin[playerid] = 242;
                }else if(skin==242){
                    pChoosedSkin[playerid] = 202;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 18)
            {
                if(skin == 287){
                    pChoosedSkin[playerid] = 59;
                }else if(skin == 59){
                    pChoosedSkin[playerid] = 191;
                }else if(skin==191){
                    pChoosedSkin[playerid] = 287;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 15)
            {
                if(skin == 142){
                    pChoosedSkin[playerid] = 143;
                }else if(skin == 143){
                    pChoosedSkin[playerid] = 144;
                }else if(skin == 144){
                    pChoosedSkin[playerid] = 220;
                }else if(skin == 220){
                    pChoosedSkin[playerid] = 221;
                }else if(skin == 221){
                    pChoosedSkin[playerid] = 222;
                }else if(skin == 222){
                    pChoosedSkin[playerid] = 142;
                }else{
                    pChoosedSkin[playerid] = 142;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 20)
            {
                if(skin == 113){
                    pChoosedSkin[playerid] = 124;
                }else if(skin == 124){
                    pChoosedSkin[playerid] = 125;
                }else if(skin == 125){
                    pChoosedSkin[playerid] = 126;
                }else if(skin == 126){
                    pChoosedSkin[playerid] = 263;
                }else if(skin == 263){
                    pChoosedSkin[playerid] = 272;
                }else if(skin == 272){
                    pChoosedSkin[playerid] = 113;
                }else{
                    pChoosedSkin[playerid] = 113;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
            else if(Spieler[playerid][pFraktion] == 21)
            {
                if(skin == 117){
                    pChoosedSkin[playerid] = 118;
                }else if(skin == 118){
                    pChoosedSkin[playerid] = 120;
                }else if(skin == 120){
                    pChoosedSkin[playerid] = 208;
                }else if(skin == 208){
                    pChoosedSkin[playerid] = 244;
                }else if(skin == 244){
                    pChoosedSkin[playerid] = 117;
                }else{
                    pChoosedSkin[playerid] = 117;
                }
                SetPlayerSkin(playerid, pChoosedSkin[playerid]);
            }
        }
    }
    if(newkeys & KEY_FIRE && ForbiddenGun(playerid) && Spieler[playerid][pAdmin] < 5)
    {
        new string[128];
        format(string, sizeof(string), "[BANNED] Spieler %s wurde vom Server-System gebannt, Grund: Waffenhack", GetName(playerid));
        SendAdminMessage(COLOR_RED, string);
        print(string);
        Spieler[playerid][pBanned] = 1;
        Ban(playerid);
        return 1;
    }
    if((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE))
    {
        if(Spieler[playerid][pLevel] < 2)
        ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
        return 1;
    }

    if ((newkeys & KEY_ACTION) && !(oldkeys & KEY_ACTION) && vehicleid && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && GetVehicleModel(vehicleid) == 525)
    {
        if (IsTrailerAttachedToVehicle(vehicleid)) return DetachTrailerFromVehicle(vehicleid);
        if (GetPlayerVehicleSpeed(playerid) > 5.0) return 1;
        new Float:pX, Float:pY, Float:pZ, Float:angle;
        GetVehicleZAngle(vehicleid, angle);
        GetVehiclePos(vehicleid, pX, pY, pZ);
        GetXYInFrontOfPosition(pX, pY, angle - 180.0, 3.5);
        new Float:vX, Float:vY, Float:vZ, Float: oX, Float: oY, Float: oZ, Float:distance, Float:closestDistance = 10.0;
        new closestVehicle = 0;
        for (new i = 1; i <= MAX_VEHICLES; i++) {
            if (i == vehicleid) continue;
            GetVehicleModelInfo(GetVehicleModel(i), VEHICLE_MODEL_INFO_WHEELSFRONT, oX, oY, oZ);
            GetVehicleRelativePos(i, vX, vY, vZ, oX, oY, oZ);
            distance = GetDistance(vX, vY, vZ, pX, pY, pZ);
            if (distance > 4.0) continue;

            if (distance < closestDistance) {
                closestVehicle = i;
                closestDistance = distance;
            }
        }

        if (closestVehicle) return AttachTrailerToVehicle(closestVehicle, vehicleid);
    }

    if(newkeys == KEY_SECONDARY_ATTACK)
    {
        if(MakeAnimation[playerid] == 1)
        {
            TextDrawHideForPlayer(playerid, Leer);
            ClearAnimations(playerid);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
            MakeAnimation[playerid] = 0;
        }
        for(new i=1;i<MAX_FACTIONS;i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, g_fraktion[i][Fr_EnterX], g_fraktion[i][Fr_EnterY], g_fraktion[i][Fr_EnterZ]))
            {
                if(IsAFightFaction( g_fraktion[i][Fr_FrakID] ) && Spieler[playerid][pFraktion] != g_fraktion[i][Fr_FrakID])return SCMFormatted(playerid, COLOR_RED, "Du bist kein %s Mitglied.",GetFactionName(g_fraktion[i][Fr_FrakID]));
                SetPlayerInterior(playerid, g_fraktion[i][Fr_Interior]);
                SetPlayerVirtualWorld(playerid, g_fraktion[i][Fr_VW]);
                SetPlayerPos(playerid, g_fraktion[i][Fr_ExitX], g_fraktion[i][Fr_ExitY], g_fraktion[i][Fr_ExitZ]);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0, g_fraktion[i][Fr_ExitX], g_fraktion[i][Fr_ExitY], g_fraktion[i][Fr_ExitZ]))
            {
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                SetPlayerPos(playerid, g_fraktion[i][Fr_EnterX], g_fraktion[i][Fr_EnterY], g_fraktion[i][Fr_EnterZ]);
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0, g_fraktion[i][Fr_AufzugOX], g_fraktion[i][Fr_AufzugOY], g_fraktion[i][Fr_AufzugOZ]))
            {
                if(Spieler[playerid][pFraktion] == g_fraktion[i][Fr_FrakID])
                {
                    SetPlayerPos(playerid, g_fraktion[i][Fr_AufzugUX], g_fraktion[i][Fr_AufzugUY], g_fraktion[i][Fr_AufzugUZ]);
                }
            }
            else if(IsPlayerInRangeOfPoint(playerid, 2.0, g_fraktion[i][Fr_AufzugUX], g_fraktion[i][Fr_AufzugUY], g_fraktion[i][Fr_AufzugUZ]))
            {
                if(Spieler[playerid][pFraktion] == g_fraktion[i][Fr_FrakID])
                {
                    SetPlayerPos(playerid, g_fraktion[i][Fr_AufzugOX], g_fraktion[i][Fr_AufzugOY], g_fraktion[i][Fr_AufzugOZ]);
                }
            }
        }

        for(new i=0;i<MAX_BIZES;i++)
        {
            if(IsPlayerInRangeOfPoint(playerid, 2.0, Biz[i][EnterX], Biz[i][EnterY], Biz[i][EnterZ]))
            {
                new c = GetBizfightID(Spieler[playerid][pFraktion]);
                if(i == c) {
                    if(Bizfight[i][BF_BizStatus] == 1 && HasBizfight(Spieler[playerid][pFraktion])) {
                        new interior,Float:Pos[3];
	                    GetBizInterior(c,interior, Pos[0], Pos[1], Pos[2]);
                        SetPlayerPosEx(playerid, Pos[0],Pos[1],Pos[2], interior, Bizfight[i][BF_VW]);
                        InBiz[playerid] = c;
                    }
                } else {
                    if(!IsBizOpened(i)) {
                        new String[128];
                        format(String,sizeof(String),"Das Geschäft ist geschlossen! Bitte beachtet die Öffnungszeiten ( %d Uhr bis %d Uhr ).",Biz[i][bLadenAuf],Biz[i][bLadenZu]);
                        SendClientMessage(playerid, COLOR_RED,String);
                        return 1;
                    }
                    if(CheckMoney(playerid) < Biz[i][bEintritt]) return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld um den Eintritt zu bezahlen.");
                    if(Biz[i][bInterior] == 0)return 1;
                    if(Biz[i][bLock] == 0)
                    {
                        SetPlayerInterior(playerid, Biz[i][bInterior]);
                        SetPlayerVirtualWorld(playerid, Biz[i][bID]);
                        SetPlayerPos(playerid, Biz[i][ExitX], Biz[i][ExitY], Biz[i][ExitZ]);
                        Biz[i][bKasse] += Biz[i][bEintritt];
                        GivePlayerCash(playerid, -Biz[i][bEintritt]);
                        return 1;
                    }
                    else
                    {
                        GameTextForPlayer(playerid, "~w~Geschaeft ist ~r~zu", 4000, 6);
                        return 1;
                    }
                }
            }
            else if(IsPlayerInRangeOfPoint(playerid, 4.0, Biz[i][ExitX], Biz[i][ExitY], Biz[i][ExitZ]) && GetPlayerVirtualWorld(playerid) == Biz[i][bID])
            {
                SetPlayerPosEx(playerid, Biz[i][EnterX], Biz[i][EnterY], Biz[i][EnterZ], 0, 0);
                return 1;
            }
        }
        new
            vw = GetPlayerVirtualWorld(playerid),
            interior = GetPlayerInterior(playerid),
            index;
        if( interior == 0 && vw == 0 ) {
            for(new i=0 ; i < iHaus ; i++) {
                if(IsPlayerInRangeOfPoint(playerid, 2.0, Haus[i][EnterX], Haus[i][EnterY], Haus[i][EnterZ]))
                {
                    if(Haus[i][hLock] == 0)
                    {
                        index = GetHouseInteriorIndexByID( Haus[i][HouseInteriorID] );
                        if( index == 999 ) break;
                        SetPlayerInterior(playerid, g_HouseInterior[index][HI_iInterior]);
						SetPlayerVirtualWorld(playerid, i);
						SetPlayerPos(playerid, g_HouseInterior[index][HI_fExitX], g_HouseInterior[index][HI_fExitY], g_HouseInterior[index][HI_fExitZ]);
						return 1;
					}
					else
					{
						GameTextForPlayer(playerid, "~w~Haus ist ~r~zu", 4000, 6);
						return 1;
					}
				}
			}
		}
		else  {
			for(new i=0 ; i < iHaus ; i++)
			{
				if( vw == i ) {
					index = GetHouseInteriorIndexByID( Haus[i][HouseInteriorID] );
				    if( index == 999 ) continue;
					if(IsPlayerInRangeOfPoint(playerid, 4.0, g_HouseInterior[index][HI_fExitX], g_HouseInterior[index][HI_fExitY], g_HouseInterior[index][HI_fExitZ]) ) {
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerPos(playerid, Haus[i][EnterX], Haus[i][EnterY], Haus[i][EnterZ]);
						return 1;
					}
				}
			}
		}
		for(new i=0 ; i < iHotel ; i++)
		{
		    if( interior == Hotel[i][hEnterInterior] && vw == Hotel[i][hEnterVirtualWorld] ) {
				if(IsPlayerInRangeOfPoint(playerid, 2.0, Hotel[i][EnterX], Hotel[i][EnterY], Hotel[i][EnterZ]))
				{
					if(Hotel[i][hLock] == 0)
					{
						SetPlayerInterior(playerid, Hotel[i][hExitInterior]);
						SetPlayerVirtualWorld(playerid, i + HOTEL_OFFSET_VW );
						SetPlayerPos(playerid, Hotel[i][ExitX], Hotel[i][ExitY], Hotel[i][ExitZ]);
						return 1;
					}
					else
					{
						GameTextForPlayer(playerid, "~w~Hotel ist ~r~zu", 4000, 6);
						return 1;
					}
				}
		    }
		    else if( vw == ( i + HOTEL_OFFSET_VW ) ) {
				if(IsPlayerInRangeOfPoint(playerid, 4.0, Hotel[i][ExitX], Hotel[i][ExitY], Hotel[i][ExitZ]) ) {
					SetPlayerInterior(playerid, Hotel[i][hEnterInterior]);
					SetPlayerVirtualWorld(playerid, Hotel[i][hEnterVirtualWorld]);
					SetPlayerPos(playerid, Hotel[i][EnterX], Hotel[i][EnterY], Hotel[i][EnterZ]);
					return 1;
				}
			}
		}
		if(IsPlayerInRangeOfPoint(playerid, 2.0, 914.0884,-1004.0160,37.9917))//NORMALE Bank außen ENTER
		{
		    SetPlayerInterior(playerid, 3);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerPos(playerid, 834.0222,7.2621,1004.1870);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 834.0222,7.2621,1004.1870))//NORMALE Bank innen EXIT
		{
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerPos(playerid, 914.0884,-1004.0160,37.9917);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1038.3171,-1339.7793,13.7266))//donatladen außen enter
		{
		    SetPlayerInterior(playerid, 17);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerPos(playerid, 377.2652,-192.6817,1000.6401);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 377.2652,-192.6817,1000.6401))//Donatladen innen exit
		{
		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerPos(playerid, 1038.3171,-1339.7793,13.7266);
		}
		//EINGANG
		else if(IsPlayerInRangeOfPoint(playerid, 2.0,2127.5486,2378.9626,10.8203))//Clubvilla in Las Venturas
		{
		    if(Spieler[playerid][pDonateRank] == 0)return SendClientMessage(playerid, COLOR_RED, "Der Zutritt ist dir untersagt, weil du kein CLUBMITGLIED bist.");
		    SetPlayerInterior(playerid, 3);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerPos(playerid, -2636.6230,1403.3202,906.4609);
		    StopAudioStreamForPlayer(playerid);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2636.6230,1403.3202,906.4609))//Clubvilla in Las Venturas
		{
		    if(Spieler[playerid][pDonateRank] == 0)return SendClientMessage(playerid, COLOR_RED, "Der Zutritt ist dir untersagt, weil du kein CLUBMITGLIED bist.");
		    SetPlayerInterior(playerid,0);
		    SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerPos(playerid, 2127.5486,2378.9626,10.8203);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1571.2114,-1336.6027,16.4844))//startower unten
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 1548.4880,-1364.1744,326.2183);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1548.4880,-1364.1744,326.2183))//startower oben
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 1571.2114,-1336.6027,16.4844);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 361.7136,-2107.5913,7.8340))//Sprungbrett unten
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 359.5758,-2107.5520,74.8357);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 359.5758,-2107.5520,74.8357))//Sprungbrett oben
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 361.7136,-2107.5913,7.8340);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1221.9672,-1812.2772,16.5938))//fahrschule flugprüfung unten
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 1234.1289,-1784.0337,33.6312);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1234.1289,-1784.0337,33.6312))//fahrschule flugprüfung oben
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 1221.9672,-1812.2772,16.5938);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2026.8407,-104.1143,1035.1719))//fahrschule waffenpüfung - Eingang
		{
		    SetPlayerInterior(playerid, 6);
			SetPlayerVirtualWorld(playerid, 40);
			SetPlayerPos(playerid, 305.3869,-158.9812,999.5938);
			SetPVarInt(playerid, "FS.WP.EG", 1);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 305.3869,-158.9812,999.5938))//fahrschule waffenpüfung - Drin
		{
		    if(GetPVarInt(playerid, "FS.WP.EG")) {
			    SetPlayerInterior(playerid, 3);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerPos(playerid, -2026.8407,-104.1143,1035.1719);
				DeletePVar(playerid, "FS.WP.EG");
			}
			else
			    SendClientMessage(playerid,COLOR_RED,"Vorgang nicht möglich");
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1489.0573,-1771.7749,18.7958))//Fahrschule Int  - Eingang //FahrschuleMap
		{
		    SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, -2029.8124,-119.0646,1035.1719);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, -2029.8124,-119.0646,1035.1719))//Fahrschule Int  - Ausgang //FahrschuleMap
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid, 1489.0573,-1771.7749,18.7958);
		}
	}

    if (!PRESSED(KEY_ANALOG_LEFT) && !PRESSED(KEY_ANALOG_RIGHT)) return 1;
    if (!vehicleid || GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	new _gettime = gettime();
	if (_gettime <= Spieler[playerid][unixBlinkerCooldown]) return 1;

	new modelid = GetVehicleModel(vehicleid);
    if (!IsACar(modelid)) return 1;

    if (GetVehicleIndicator(vehicleid) == 3) return 1;
    new String[128], Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);
    if (PRESSED(KEY_ANALOG_LEFT)) {
        format(String, sizeof(String), "%s blinkt nach links", GetName(playerid));
        DestroyBlinker(vehicleid, 1);
		SetVehicleIndicator(vehicleid, 1, 0);
    }
    else {
        format(String, sizeof(String), "%s blinkt nach rechts", GetName(playerid));
        DestroyBlinker(vehicleid, 0);
		SetVehicleIndicator(vehicleid, 0, 1);
    }

	SendRoundMessage(x, y, z, COLOR_BLINKER, String, 30.0);
    Spieler[playerid][unixBlinkerCooldown] = _gettime + 2;
	return 1;
}

forward UnFreeze(playerid);
public UnFreeze(playerid)
{
    if(Cuffed[playerid] == 0)
    {
        UnfreezePlayer(playerid);
    }
    KillTimer(unfreezewait[playerid]);
    Tazered[playerid] = 0;
    TextDrawHideForPlayer(playerid, TazerBox);
    ClearAnimations(playerid);
    return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
    return 1;
}

public OnPlayerPause(playerid) {

}

public OnPlayerResume(playerid, pausedtime) {

}

public OnPlayerUpdate(playerid)
{
    Spieler[playerid][unixUpdate] = gettime();
    new drunknew = GetPlayerDrunkLevel(playerid);
    if (drunknew < 100) { // go back up, keep cycling.
        SetPlayerDrunkLevel(playerid, 2000);
    } else {
        if (pDrunkLevelLast[playerid] != drunknew) {
            new wfps = pDrunkLevelLast[playerid] - drunknew;
            if ((wfps > 0) && (wfps < 200)) pFPS[playerid] = wfps;

            pDrunkLevelLast[playerid] = drunknew;
        }

    }
    return 1;
}


public OnPlayerStreamIn(playerid, forplayerid)
{
/*
    new
        str[64];
    format(str,sizeof(str),"OnPlayerStreamIn(%d,%d)",playerid,forplayerid);
    SendClientMessage(playerid,COLOR_YELLOW,str);
*/
    if(Spieler[forplayerid][bMaske]) {
        ShowPlayerNameTagForPlayer(playerid,forplayerid,0);
    }
    if(Spieler[forplayerid][wbMaske]) {
        ShowPlayerNameTagForPlayer(playerid,forplayerid,0);
    }
    if(Spieler[forplayerid][abMaske]) {
        ShowPlayerNameTagForPlayer(playerid,forplayerid,0);
    }
    if( g_PolizeiPartner[forplayerid][PP_iStatus] == PolizeiPartner_Active ) {
        if( g_PolizeiPartner[forplayerid][PP_iPartner] == playerid ) {
            //new
            //    String[128];
            //format(String,sizeof(String),"SetPlayerMarkerForPlayer(%s,%s)",GetName(forplayerid),GetName(playerid));
            SetPlayerMarkerForPlayer(forplayerid,playerid,COLOR_COPPARTNER);
            //SendClientMessage(playerid,COLOR_YELLOW,String);
        }
    }
    /*
    if( Spieler[forplayerid][bShowMarker] ) {
        if( !IsPlayerNPC(playerid)) {
            SetPlayerMarkerForPlayer(forplayerid,playerid,playerColors[playerid]);
        }
    }
    */
//Für Custom Nametags
    /*if(IsPlayerSpectating[forplayerid] == 1)
    {
        ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
        CreatePlayerTextDraw(playerid, 0.0, 0.0, GetName(forplayer));
    }*/
    return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
    return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
    if( aiVehicles[vehicleid] == VEH_AUTOSCOOTER ||
        aiVehicles[vehicleid] == VEH_KARTBAHN ||
        aiVehicles[vehicleid] == VEH_WASSERSCOOTER ) {
        SetVehicleParamsForPlayer(vehicleid,forplayerid,false,true);
    }
    return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
    return 1;
}

forward WHEELMAN_escaping_pulse(customer, wheelman, unixtime);
public WHEELMAN_escaping_pulse(customer, wheelman, unixtime) {
    if (gettime() >= unixtime) {
        SetPVarInt(customer, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
        Spieler[customer][pJailed] = 0;
        Spieler[customer][pJailTime] = 0;
        SetPlayerPos(customer, ALCATRAZ_FREED_COORDS);
        SetPlayerFacingAngle(customer, ALCATRAZ_FREED_FACING);
        GivePlayerCash(customer, -50000);

        new message[128];
        format(message, sizeof(message), "Ein Agency-Agent konnte dich befreien. Verlasse das Gebiet schnellstmöglich.");
        SendClientMessage(customer, COLOR_GREEN, message);

        format(message, sizeof(message), "Du hast es geschafft, %s zu befreien. Bringe ihn in Sicherheit.", GetName(customer));
        return SendClientMessage(wheelman, COLOR_GREEN, message);
    }

    if (Spieler[wheelman][pJailed] > 0) {
        SetPVarInt(customer, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
        SendClientMessage(customer, COLOR_RED, "Dein Agency-Agent wurde eingeknastet und konnte dich deshalb nicht befreien.");
        return SendClientMessage(wheelman, COLOR_RED, "Du wurdest eingeknastet und konntest deshalb deinen Kunden nicht befreien.");
    }

    if (Spieler[wheelman][pTot] > 0) {
        SetPVarInt(customer, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
        SendClientMessage(customer, COLOR_RED, "Dein Agency-Agent ist gestorben und konnte dich deshalb nicht befreien.");
        return SendClientMessage(wheelman, COLOR_RED, "Du bist gestorben und konntest deshalb deinen Kunden nicht befreien.");
    }

    if (!(IsPlayerInRangeOfPoint(customer, 10.0, ALCATRAZ_JAILEDGATE_COORDS) && IsPlayerInRangeOfPoint(wheelman, 10.0, ALCATRAZ_JAILEDGATE_COORDS))) {
        SetPVarInt(customer, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
        SendClientMessage(customer, COLOR_RED, "Ihr seid beide nicht mehr in der Nähe des Tores. Die Befreiung wurde abgebrochen.");
        return SendClientMessage(wheelman, COLOR_RED, "Ihr seid beide nicht mehr in der Nähe des Tores. Die Befreiung wurde abgebrochen.");
    }

    return SetTimerEx("WHEELMAN_escaping_pulse", 2000, false, "ddd", customer, wheelman, unixtime);
}

ShowSellGunDialog(playerid, dialogid) {
    new dialogText[128], ammoString[16], gID = GetPVarInt(playerid, "SELL.GUN.ID");
    if (g_sellGuns[gID][SELL_GUN_AMMO] == 1) ammoString = "";
    else format(ammoString, sizeof(ammoString), " mit %i Schuss", g_sellGuns[gID][SELL_GUN_AMMO]);

    if (dialogid == DIALOG_SELLGUN_CLIENT) {
        format(dialogText, sizeof(dialogText), "{FF9900}Waffe: {FFFFFF}%s%s\n\nGebe den Namen oder die ID deines Kunden ein:",
            g_sellGuns[gID][SELL_GUN_NAME], ammoString);

        return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{BDBDBD}Waffenverkauf - Kunde", dialogText, "Weiter", "Abbrechen");
    }
    else if (dialogid == DIALOG_SELLGUN_PRICE) {
        format(dialogText, sizeof(dialogText), "{FF9900}Waffe: {FFFFFF}%s%s\n{FF9900}Kunde: {FFFFFF}%s\n\nGebe den Preis für das Waffenangebot ein:",
            g_sellGuns[gID][SELL_GUN_NAME], ammoString, GetName(GetPVarInt(playerid, "SELL.GUN.CLIENT")));

        return ShowPlayerDialog(playerid, dialogid, DIALOG_STYLE_INPUT, "{BDBDBD}Waffenverkauf - Preis", dialogText, "Anbieten", "Abbrechen");
    }

    return 1;
}

stock IsCbugWeapon(playerid)
{
    new weaponID = GetPlayerWeapon(playerid);
    if(weaponID == 34 || weaponID == 24 || weaponID == 25 || weaponID == 27 || weaponID == 33 || weaponID == 27 || weaponID == 23)
    {
        return 1;
    }
    return 0;
}

stock DestroyVehicleEx(vehicleid) {
    if (vehicleid == INVALID_VEHICLE_ID) return 1;
    DestroyBlinker(vehicleid, 0);
    DestroyBlinker(vehicleid, 1);
    if (g_aiVehicleSirene[CarId][0] != INVALID_OBJECT_ID) {
        DestroyDynamicObject(g_aiVehicleSirene[vehicleid][0]);
        g_aiVehicleSirene[vehicleid][0] = INVALID_OBJECT_ID;
        DestroyDynamicObject(g_aiVehicleSirene[vehicleid][1]);
        g_aiVehicleSirene[vehicleid][1] = INVALID_OBJECT_ID;
        DestroyDynamicObject(g_aiVehicleSirene[vehicleid][2]);
        g_aiVehicleSirene[vehicleid][2] = INVALID_OBJECT_ID;
        DestroyDynamicObject(g_aiVehicleSirene[vehicleid][3]);
        g_aiVehicleSirene[vehicleid][3] = INVALID_OBJECT_ID;
    }
    return DestroyVehicle(vehicleid);
}

stock ToggleASetting(playerid, index, showDialog = false) {
    g_aSettings[index][ASETTING_TOGGLE] = !g_aSettings[index][ASETTING_TOGGLE];

    new message[144];
    switch (index) {
        case ASETTING_GLOBALCHAT: {
            if(Spieler[playerid][pAdmin] < g_aSettings[index][ASETTING_RANK]) return ERROR_RANG_MSG(playerid);
            format(message, sizeof(message), "[SERVER] {FFFFFF}Der Globale Chat wurde von %s %s %s.", GetPlayerAdminRang(playerid), GetName(playerid), 
                g_aSettings[index][ASETTING_TOGGLE] ? "aktiviert" : "deaktiviert");
            SendClientMessageToAll(g_aSettings[index][ASETTING_TOGGLE] ? COLOR_GREEN : COLOR_RED, message);
        }
        case ASETTING_GANGFIGHTBLOCK: {
            if(Spieler[playerid][pAdmin] < g_aSettings[index][ASETTING_RANK]) return ERROR_RANG_MSG(playerid);
            format(message, sizeof(message), "[SERVER] {FFFFFF}Die Gangfightsperre wurde von %s %s %s.", GetPlayerAdminRang(playerid), GetName(playerid), 
                g_aSettings[index][ASETTING_TOGGLE] ? "aktiviert" : "deaktiviert");
            SendClientMessageToAll(g_aSettings[index][ASETTING_TOGGLE] ? COLOR_RED : COLOR_GREEN, message);
        }
        case ASETTING_ROBBLOCK: {
            if(Spieler[playerid][pAdmin] < g_aSettings[index][ASETTING_RANK]) return ERROR_RANG_MSG(playerid);
            format(message, sizeof(message), "[SERVER] {FFFFFF}Die Überfallsperre wurde von %s %s %s.", GetPlayerAdminRang(playerid), GetName(playerid), 
                g_aSettings[index][ASETTING_TOGGLE] ? "aktiviert" : "deaktiviert");
            SendClientMessageToAll(g_aSettings[index][ASETTING_TOGGLE] ? COLOR_RED : COLOR_GREEN, message);
        }
        case ASETTING_REGBLOCK: {
            if(Spieler[playerid][pAdmin] < g_aSettings[index][ASETTING_RANK]) return ERROR_RANG_MSG(playerid);
            format(message, sizeof(message), "[ADMIN] {FFFFFF}Die Regsperre wurde von %s %s %s.", GetPlayerAdminRang(playerid), GetName(playerid), 
                g_aSettings[index][ASETTING_TOGGLE] ? "aktiviert" : "deaktiviert");
            SendAdminMessage(g_aSettings[index][ASETTING_TOGGLE] ? COLOR_RED : COLOR_GREEN, message);
        }
        case ASETTING_EINLOGBLOCK: {
            if(Spieler[playerid][pAdmin] < g_aSettings[index][ASETTING_RANK]) return ERROR_RANG_MSG(playerid);
            format(message, sizeof(message), "[ADMIN] {FFFFFF}Die Einlogsperre wurde von %s %s %s.", GetPlayerAdminRang(playerid), GetName(playerid), 
                g_aSettings[index][ASETTING_TOGGLE] ? "aktiviert" : "deaktiviert");
            SendAdminMessage(g_aSettings[index][ASETTING_TOGGLE] ? COLOR_GREEN : COLOR_RED, message);
        }
        case ASETTING_CLUBCHAT: {
            if(Spieler[playerid][pAdmin] < g_aSettings[index][ASETTING_RANK]) return ERROR_RANG_MSG(playerid);
            format(message, sizeof(message), "[ADMIN] {FFFFFF}Der Clubchat wurde von %s %s %s.", GetPlayerAdminRang(playerid), GetName(playerid), 
                g_aSettings[index][ASETTING_TOGGLE] ? "aktiviert" : "deaktiviert");
            SendClientMessageToAll(g_aSettings[index][ASETTING_TOGGLE] ? COLOR_RED : COLOR_GREEN, message);
        }
    }

    if (showDialog)
        return cmd_asettings(playerid);

    return 1;
}



public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    for(new i , len = strlen(inputtext) ; i < len ; i++) {
        if( inputtext[i] == '%' ) inputtext[i] = ' ';
    }
    if(Werbebanner_OnDialogResponse(playerid, dialogid, response, listitem, inputtext)) return 1;
    if (dialogid == DIALOG_DURCHSUCHEN ){
        if(response){
            new pID = GetPVarInt(playerid, "DURCHSUCHENID"), string[1024];
            new Float:x, Float:y, Float:z;
            GetPlayerPos(pID, x,y,z);
            new weapons[13][2];
            new wpName1[32], wpName2[32], wpName3[32], wpName4[32], wpName5[32], wpName6[32], wpName7[32];
            new wpName8[32], wpName9[32], wpName10[32], wpName11[32], wpName12[32], wpName13[32];
            for(new i=0;i<13;i++){
                GetPlayerWeaponData(pID, i, weapons[i][0], weapons[i][1]);
            }
            GetWeaponNameEx(weapons[0][0], wpName1, 32);
            GetWeaponNameEx(weapons[1][0], wpName2, 32);
            GetWeaponNameEx(weapons[2][0], wpName3, 32);
            GetWeaponNameEx(weapons[3][0], wpName4, 32);
            GetWeaponNameEx(weapons[4][0], wpName5, 32);
            GetWeaponNameEx(weapons[5][0], wpName6, 32);
            GetWeaponNameEx(weapons[6][0], wpName7, 32);
            GetWeaponNameEx(weapons[7][0], wpName8, 32);
            GetWeaponNameEx(weapons[8][0], wpName9, 32);
            GetWeaponNameEx(weapons[9][0], wpName10, 32);
            GetWeaponNameEx(weapons[10][0], wpName11, 32);
            GetWeaponNameEx(weapons[11][0], wpName12, 32);
            GetWeaponNameEx(weapons[12][0], wpName13, 32);
            switch(listitem) {
                case 0: {
                    if(Spieler[pID][pDrugs] == 0) return SendClientMessage(playerid, COLOR_RED, "[DURCHSUCHEN] {FFFFFF}Der Spieler besitzt keine Drogen!");
                    Spieler[pID][pDrugs] = 0;
                    format(string, sizeof(string), "* %s nahm Drogen von %s ab.", GetName(playerid), GetName(pID));
                    SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                }
                case 1: {
                    if(Spieler[pID][pSpice] == 0) return SendClientMessage(playerid, COLOR_RED, "[DURCHSUCHEN] {FFFFFF}Der Spieler besitzt kein Spice!");
                    Spieler[pID][pSpice] = 0;
                    format(string, sizeof(string), "* %s nahm Spice von %s ab.", GetName(playerid), GetName(pID));
                    SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                }
                case 2: {
                    if(Spieler[pID][pDrogenSamen] == 0) return SendClientMessage(playerid, COLOR_RED, "[DURCHSUCHEN] {FFFFFF}Der Spieler besitzt keine Spicesamen!");
                    Spieler[pID][pDrogenSamen] = 0;
                    format(string, sizeof(string), "* %s nahm Spicesamen von %s ab.", GetName(playerid), GetName(pID));
                    SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                }
                /*case 3: {
                    if(Spieler[pID][pKrauterMische] == 0) return SendClientMessage(playerid, COLOR_RED, "[DURCHSUCHEN] {FFFFFF}Der Spieler besitzt keine Kräuter!");
                    Spieler[pID][pKrauterMische] = 0;
                    format(string, sizeof(string), "* %s nahm Kräuter von %s ab.", GetName(playerid), GetName(pID));
                    SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                }*/
                case 3: {
                    if(Spieler[pID][pGangDrogenSamen] == 0) return SendClientMessage(playerid, COLOR_RED, "[DURCHSUCHEN] {FFFFFF}Der Spieler besitzt keine Drogensamen!");
                    Spieler[pID][pGangDrogenSamen] = 0;
                    format(string, sizeof(string), "* %s nahm Drogensamen von %s ab.", GetName(playerid), GetName(pID));
                    SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                }
                case 4: {
                    if(Spieler[pID][pWaffenteile] == 0) return SendClientMessage(playerid, COLOR_RED, "[DURCHSUCHEN] {FFFFFF}Der Spieler besitzt keine Waffenteile!");
                    Spieler[pID][pWaffenteile] = 0;
                    format(string, sizeof(string), "* %s nahm Waffenteile von %s ab.", GetName(playerid), GetName(pID));
                    SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                }
                case 5: {
                    if(Spieler[pID][pWantedCodes] == 0) return SendClientMessage(playerid, COLOR_RED, "[DURCHSUCHEN] {FFFFFF}Der Spieler besitzt keine Wantedcodes!");
                    Spieler[pID][pWantedCodes] = 0;
                    format(string, sizeof(string), "* %s nahm Wantedcodes von %s ab.", GetName(playerid), GetName(pID));
                    SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                }
                case 6: {
                    if(Spieler[pID][pBrecheisen] == 0) return SendClientMessage(playerid, COLOR_RED, "[DURCHSUCHEN] {FFFFFF}Der Spieler besitzt kein Brecheisen!");
                    Spieler[pID][pBrecheisen] = 0;
                    format(string, sizeof(string), "* %s nahm Brecheisen von %s ab.", GetName(playerid), GetName(pID));
                    SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                }
                case 7: {
                    if(Spieler[pID][pC4] == 0) return SendClientMessage(playerid, COLOR_RED, "[DURCHSUCHEN] {FFFFFF}Der Spieler besitzt kein C4!");
                    Spieler[pID][pC4] = 0;
                    format(string, sizeof(string), "* %s nahm C4 von %s ab.", GetName(playerid), GetName(pID));
                    SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                }
                case 8: {
                    if(Spieler[pID][pSchaufel] == 0) return SendClientMessage(playerid, COLOR_RED, "[DURCHSUCHEN] {FFFFFF}Der Spieler besitzt keine Schaufel!");
                    format(string, sizeof(string), "* %s nahm Schaufel von %s ab.", GetName(playerid), GetName(pID));
                    SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                    Spieler[pID][pSchaufel] = 0;
                    if(Spieler[pID][pJailed] == 1 && brichtaus[pID] == 1) {
                        SendClientMessage(pID,COLOR_RED,"Deine Schaufel wurde abgenommen, der Ausbruch ist fehlgeschlagen.");
                        SendClientMessage(pID,COLOR_RED,"Deine Knastzeit wurde um 10 Minuten erhöht.");
                        Spieler[pID][pJailTime] += 600;
                        brichtaus[pID] = 0;
                        RemovePlayerAttachedObject(pID, 9);
                        ClearAnimations(pID);
                        KillTimer(AusbruchTimer[pID]);
                    }
                }
                case 9: {
                    if (strcmp(wpName1, "Fist", true) == 0) {
                        SCMFormatted(playerid,COLOR_RED,"%s hat keine Waffe auf dem Slot.",GetName(pID));
                    } else {
                        ResetPlayerWeapons(pID);
                        format(string, sizeof(string), "* %s nahm Waffen von %s ab.", GetName(playerid), GetName(pID));
                        SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                    }
                }
                case 10: {
                    if (strcmp(wpName2, "Fist", true) == 0) {
                        SCMFormatted(playerid,COLOR_RED,"%s hat keine Waffe auf dem Slot.",GetName(pID));
                    } else {
                        ResetPlayerWeapons(pID);
                        format(string, sizeof(string), "* %s nahm Waffen von %s ab.", GetName(playerid), GetName(pID));
                        SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                    }
                }
                case 11: {
                    if (strcmp(wpName3, "Fist", true) == 0) {
                        SCMFormatted(playerid,COLOR_RED,"%s hat keine Waffe auf dem Slot.",GetName(pID));
                    } else {
                        ResetPlayerWeapons(pID);
                        format(string, sizeof(string), "* %s nahm Waffen von %s ab.", GetName(playerid), GetName(pID));
                        SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                    }
                }
                case 12: {
                    if (strcmp(wpName4, "Fist", true) == 0) {
                        SCMFormatted(playerid,COLOR_RED,"%s hat keine Waffe auf dem Slot.",GetName(pID));
                    } else {
                        ResetPlayerWeapons(pID);
                        format(string, sizeof(string), "* %s nahm Waffen von %s ab.", GetName(playerid), GetName(pID));
                        SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                    }
                }
                case 13: {
                    if (strcmp(wpName5, "Fist", true) == 0) {
                        SCMFormatted(playerid,COLOR_RED,"%s hat keine Waffe auf dem Slot.",GetName(pID));
                    } else {
                        ResetPlayerWeapons(pID);
                        format(string, sizeof(string), "* %s nahm Waffen von %s ab.", GetName(playerid), GetName(pID));
                        SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                    }
                }
                case 14: {
                    if (strcmp(wpName6, "Fist", true) == 0) {
                        SCMFormatted(playerid,COLOR_RED,"%s hat keine Waffe auf dem Slot.",GetName(pID));
                    } else {
                        ResetPlayerWeapons(pID);
                        format(string, sizeof(string), "* %s nahm Waffen von %s ab.", GetName(playerid), GetName(pID));
                        SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                    }
                }
                case 15: {
                    if (strcmp(wpName7, "Fist", true) == 0) {
                        SCMFormatted(playerid,COLOR_RED,"%s hat keine Waffe auf dem Slot.",GetName(pID));
                    } else {
                        ResetPlayerWeapons(pID);
                        format(string, sizeof(string), "* %s nahm Waffen von %s ab.", GetName(playerid), GetName(pID));
                        SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                    }
                }
                case 16: {
                    if (strcmp(wpName8, "Fist", true) == 0) {
                        SCMFormatted(playerid,COLOR_RED,"%s hat keine Waffe auf dem Slot.",GetName(pID));
                    } else {
                        ResetPlayerWeapons(pID);
                        format(string, sizeof(string), "* %s nahm Waffen von %s ab.", GetName(playerid), GetName(pID));
                        SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                    }
                }
                case 17: {
                    if (strcmp(wpName9, "Fist", true) == 0) {
                        SCMFormatted(playerid,COLOR_RED,"%s hat keine Waffe auf dem Slot.",GetName(pID));
                    } else {
                        ResetPlayerWeapons(pID);
                        format(string, sizeof(string), "* %s nahm Waffen von %s ab.", GetName(playerid), GetName(pID));
                        SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                    }
                }
                case 18: {
                    if (strcmp(wpName10, "Fist", true) == 0) {
                        SCMFormatted(playerid,COLOR_RED,"%s hat keine Waffe auf dem Slot.",GetName(pID));
                    } else {
                        ResetPlayerWeapons(pID);
                        format(string, sizeof(string), "* %s nahm Waffen von %s ab.", GetName(playerid), GetName(pID));
                        SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                    }
                }
                case 19: {
                    if (strcmp(wpName11, "Fist", true) == 0) {
                        SCMFormatted(playerid,COLOR_RED,"%s hat keine Waffe auf dem Slot.",GetName(pID));
                    } else {
                        ResetPlayerWeapons(pID);
                        format(string, sizeof(string), "* %s nahm Waffen von %s ab.", GetName(playerid), GetName(pID));
                        SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                    }
                }
                case 20: {
                    if (strcmp(wpName12, "Fist", true) == 0) {
                        SCMFormatted(playerid,COLOR_RED,"%s hat keine Waffe auf dem Slot.",GetName(pID));
                    } else {
                        ResetPlayerWeapons(pID);
                        format(string, sizeof(string), "* %s nahm Waffen von %s ab.", GetName(playerid), GetName(pID));
                        SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                    }
                }
                case 21: {
                    if (strcmp(wpName13, "Fist", true) == 0) {
                        SCMFormatted(playerid,COLOR_RED,"%s hat keine Waffe auf dem Slot.",GetName(pID));
                    } else {
                        ResetPlayerWeapons(pID);
                        format(string, sizeof(string), "* %s nahm Waffen von %s ab.", GetName(playerid), GetName(pID));
                        SendRoundMessage(x,y,z, COLOR_PURPLE, string);
                    }
                }
            }
            //Dialog erstellen
            new /*string[256], */ueberschrift[128];
            format(string, sizeof(string), "Drogen: %i", Spieler[pID][pDrugs]);
            format(string, sizeof(string), "%s\nSpice: %i", string, Spieler[pID][pSpice]);
            format(string, sizeof(string), "%s\nSpicesamen: %i", string, Spieler[pID][pDrogenSamen]);
            //format(string, sizeof(string), "%s\nKräutermischung: %i", string, Spieler[pID][pKrauterMische]);
            format(string, sizeof(string), "%s\nDrogensamen: %i", string, Spieler[pID][pGangDrogenSamen]);
            format(string, sizeof(string), "%s\nWaffenteile: %i", string, Spieler[pID][pWaffenteile]);
            format(string, sizeof(string), "%s\nWanted-Codes: %i", string, Spieler[pID][pWantedCodes]);
            format(string, sizeof(string), "%s\nBrecheisen: %i", string, Spieler[pID][pBrecheisen]);
            format(string, sizeof(string), "%s\nC4: %i", string, Spieler[pID][pC4]);
            format(string, sizeof(string), "%s\nSchaufel: %i", string, Spieler[pID][pSchaufel]);
            //Waffen anzeigen
            format(string, sizeof(string), "%s\nWaffen-Slot 1: %s [%d]", string, wpName1, weapons[0][1]);
            format(string, sizeof(string), "%s\nWaffen-Slot 2: %s [%d]", string, wpName2, weapons[1][1]);
            format(string, sizeof(string), "%s\nWaffen-Slot 3: %s [%d]", string, wpName3, weapons[2][1]);
            format(string, sizeof(string), "%s\nWaffen-Slot 4: %s [%d]", string, wpName4, weapons[3][1]);
            format(string, sizeof(string), "%s\nWaffen-Slot 5: %s [%d]", string, wpName5, weapons[4][1]);
            format(string, sizeof(string), "%s\nWaffen-Slot 6: %s [%d]", string, wpName6, weapons[5][1]);
            format(string, sizeof(string), "%s\nWaffen-Slot 7: %s [%d]", string, wpName7, weapons[6][1]);
            format(string, sizeof(string), "%s\nWaffen-Slot 8: %s [%d]", string, wpName8, weapons[7][1]);
            format(string, sizeof(string), "%s\nWaffen-Slot 9: %s [%d]", string, wpName9, weapons[8][1]);
            format(string, sizeof(string), "%s\nWaffen-Slot 10: %s [%d]", string, wpName10, weapons[9][1]);
            format(string, sizeof(string), "%s\nWaffen-Slot 11: %s [%d]", string, wpName11, weapons[10][1]);
            format(string, sizeof(string), "%s\nWaffen-Slot 12: %s [%d]", string, wpName12, weapons[11][1]);
            format(string, sizeof(string), "%s\nWaffen-Slot 13: %s [%d]", string, wpName13, weapons[12][1]);
            format(ueberschrift, sizeof(ueberschrift), "Durchsuchung von: %s", GetName(pID));
            SetPVarInt(playerid, "DURCHSUCHENID", pID);
            ShowPlayerDialog(playerid, DIALOG_DURCHSUCHEN, DIALOG_STYLE_LIST, ueberschrift, string, "OK", "");
            return 1;
        }
        DeletePVar(playerid, "DURCHSUCHENID");
        return 1;
    }
    if(dialogid == DIALOG_CONFIGRANK)
	{
		if(response)
		{
			if(!(Spieler[playerid][pRank] == RANG_LEADER))return 1;
			pconfigRank[playerid] = listitem;
			new string[32], frakID = Spieler[playerid][pFraktion];
			if(listitem == 0)format(string, sizeof(string), "%s", fRang[frakID][fRangName0]);
			else if(listitem == 1)format(string, sizeof(string), "%s", fRang[frakID][fRangName1]);
			else if(listitem == 2)format(string, sizeof(string), "%s", fRang[frakID][fRangName2]);
			else if(listitem == 3)format(string, sizeof(string), "%s", fRang[frakID][fRangName3]);
			else if(listitem == 4)format(string, sizeof(string), "%s", fRang[frakID][fRangName4]);
			else if(listitem == 5)format(string, sizeof(string), "%s", fRang[frakID][fRangName5]);
			else if(listitem == 6)format(string, sizeof(string), "%s", fRang[frakID][fRangName6]);
			strdel(DialogString, 0, sizeof(DialogString));
			format(DialogString, sizeof(DialogString), "{FFFF00}Aktueller Rang Name: {33AA33}%s\n\n", string);
			strcat(DialogString, "Bitte gebe nun eine Namen für diesen Rang ein.\nDie Zeichen sind maximal 32.");
			ShowPlayerDialog(playerid, DIALOG_CONFIGRANK_NAME, DIALOG_STYLE_INPUT, "{247BA6}Fraktion {FFFFFF}| Ränge Verwaltung", DialogString, "OK", "Zurück");
			return 1;
		}
	}
	if(dialogid == DIALOG_CONFIGRANK_NAME)
	{
		new string[128], rangString[32];
		if(response)
		{
			new frakID = Spieler[playerid][pFraktion];
			if(!(Spieler[playerid][pRank] == RANG_LEADER))return 1;
			if(!strlen(inputtext))
			{
				SendClientMessage(playerid, COLOR_WHITE, "{AFAFAF}Fehlerhafte Eingabe.");
				OnDialogResponse(playerid, DIALOG_CONFIGRANK, response, pconfigRank[playerid], "");
				return 1;
			}
			if(pconfigRank[playerid] == 0)format(rangString, sizeof(rangString), "%s", fRang[frakID][fRangName0]);
			else if(pconfigRank[playerid] == 1)format(rangString, sizeof(rangString), "%s", fRang[frakID][fRangName1]);
			else if(pconfigRank[playerid] == 2)format(rangString, sizeof(rangString), "%s", fRang[frakID][fRangName2]);
			else if(pconfigRank[playerid] == 3)format(rangString, sizeof(rangString), "%s", fRang[frakID][fRangName3]);
			else if(pconfigRank[playerid] == 4)format(rangString, sizeof(rangString), "%s", fRang[frakID][fRangName4]);
			else if(pconfigRank[playerid] == 5)format(rangString, sizeof(rangString), "%s", fRang[frakID][fRangName5]);
			else if(pconfigRank[playerid] == 6)format(rangString, sizeof(rangString), "%s", fRang[frakID][fRangName6]);
			format(string, sizeof(string), "{FFFF00}Du hast Rang {33AA33}%s {FFFF00}in {33AA33}%s {FFFF00}umbenannt!", rangString, inputtext);
			SendClientMessage(playerid, COLOR_WHITE, string);
			switch(pconfigRank[playerid])
			{
				case 0: format(fRang[frakID][fRangName0], 32, inputtext);
				case 1: format(fRang[frakID][fRangName1], 32, inputtext);
				case 2: format(fRang[frakID][fRangName2], 32, inputtext);
				case 3: format(fRang[frakID][fRangName3], 32, inputtext);
				case 4: format(fRang[frakID][fRangName4], 32, inputtext);
				case 5: format(fRang[frakID][fRangName5], 32, inputtext);
				case 6: format(fRang[frakID][fRangName6], 32, inputtext);
			}
			SaveFRank(frakID);
			return cmd_configrank(playerid);
		}
		if(!response)return cmd_configrank(playerid);
	}
 	if(dialogid == DIALOG_CHANGEPW)
	{
		if(response)
		{
			if(strlen(inputtext) < 6)
			{
				SendClientMessage(playerid, COLOR_GREY, "Das Passwort muss mindestens eine Länge von 6 Zeichen haben.");
				return ocmd_changepw(playerid);
			}
			new query[256];
			mysql_format(gSQL, query, sizeof(query), "UPDATE `accounts` SET `Passwort`=SHA2(CONCAT('%s',`SaltKey`),256) WHERE `Name` = '%s'", inputtext, GetName(playerid));
			mysql_tquery(gSQL, query, "", "");

			SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du hast dein Passwort erfolgreich geändert. Dein Account wurde gespeichert.");
			SaveAccount(playerid);
		}
	}
    if(dialogid == DIALOG_AUSRUESTEN_FEUERWEHR)
	{
	    if(response)
		{
		    new string[256];
			if(listitem == 0)
			{
				format(string, sizeof(string), "{C2A2DA}* %s hat sich am Einsatzfahrzeug ausgerüstet.", GetName(playerid));
				RoundMessage(playerid, COLOR_WHITE, string, 20.0);
			    GivePlayerWeapon(playerid, 42, 2500);
			    SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}Du hast dir einen Feuerlöscher aus dem Einsatzfahrzeug genommen.");
                ShowPlayerDialog(playerid, DIALOG_AUSRUESTEN_FEUERWEHR, DIALOG_STYLE_LIST, "{AA3333}Los Santos Rettungsdienst {FFFFFF}| Einsatzfahrzeug", "{247BA6}1. {FFFFFF}Feuerlöscher\n{247BA6}2. {FFFFFF}Schaufel\n{247BA6}3. {FFFFFF}Kettensäge", "OK", "Abbrechen");
			}
			if(listitem == 1)
			{
				format(string, sizeof(string), "{C2A2DA}* %s hat sich am Einsatzfahrzeug ausgerüstet.", GetName(playerid));
				RoundMessage(playerid, COLOR_WHITE, string, 20.0);
			    GivePlayerWeapon(playerid, 6, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}Du hast dir eine Schaufel aus dem Einsatzfahrzeug genommen.");
				ShowPlayerDialog(playerid, DIALOG_AUSRUESTEN_FEUERWEHR, DIALOG_STYLE_LIST, "{AA3333}Los Santos Rettungsdienst {FFFFFF}| Einsatzfahrzeug","{247BA6}1. {FFFFFF}Feuerlöscher\n{247BA6}2. {FFFFFF}Schaufel\n{247BA6}3. {FFFFFF}Kettensäge", "OK", "Abbrechen");
			}
			if(listitem == 2)
			{
				format(string, sizeof(string), "{C2A2DA}* %s hat sich am Einsatzfahrzeug ausgerüstet.", GetName(playerid));
				RoundMessage(playerid, COLOR_WHITE, string, 20.0);
			    GivePlayerWeapon(playerid, 9, 1);
			    SendClientMessage(playerid, COLOR_WHITE, "{FFFF00}Du hast dir eine Kettensäge aus dem Einsatzfahrzeug genommen.");
				ShowPlayerDialog(playerid, DIALOG_AUSRUESTEN_FEUERWEHR, DIALOG_STYLE_LIST, "{AA3333}Los Santos Rettungsdienst {FFFFFF}| Einsatzfahrzeug","{247BA6}1. {FFFFFF}Feuerlöscher\n{247BA6}2. {FFFFFF}Schaufel\n{247BA6}3. {FFFFFF}Kettensäge", "OK", "Abbrechen");
			}
        }
	}
    if (dialogid == DIALOG_SETTINGS) {
        if (response){
            if(listitem == 0){
                new spawnid = Spieler[playerid][pSpawnChange];
                if(spawnid == 0){
                    spawnid = 1;
                    SendClientMessage(playerid, COLOR_YELLOW, "[EINSTELLUNGEN] {FFFFFF}Du hast deinen Spawn auf dein Haus verlegt!");
                }else if(spawnid == 1){
                    spawnid = 2;
                    SendClientMessage(playerid, COLOR_YELLOW, "[EINSTELLUNGEN] {FFFFFF}Du hast deinen Spawn auf deine Fraktion gelegt!");
                }else if(spawnid == 2){
                    if(Spieler[playerid][pFraktion] == 14){
                        spawnid = 3;
                        SendClientMessage(playerid, COLOR_YELLOW, "[EINSTELLUNGEN] {FFFFFF}Du hast deinen Spawn auf deine Fraktion (2. Base) gelegt!");
                    }else{
                        spawnid = 0;
                        SendClientMessage(playerid, COLOR_YELLOW, "[EINSTELLUNGEN] {FFFFFF}Du hast deinen Spawn auf den Neulingsspawn gelegt!");
                    }
                }else if(spawnid == 3){
                    spawnid = 0;
                    SendClientMessage(playerid, COLOR_YELLOW, "[EINSTELLUNGEN] {FFFFFF}Du hast deinen Spawn auf den Neulingsspawn gelegt!");
                }else{
                    spawnid = 0;
                    SendClientMessage(playerid, COLOR_YELLOW, "[EINSTELLUNGEN] {FFFFFF}Du hast deinen Spawn auf den Neulingsspawn gelegt!");
                }
                Spieler[playerid][pSpawnChange] = spawnid;
            }
            else if(listitem == 1){
                cmd_fradar(playerid, "");
            }
            else if(listitem == 2){
                if(Spieler[playerid][DmgTog] == 0){
                    Spieler[playerid][DmgTog] = 1;
                    SendClientMessage(playerid, COLOR_YELLOW, "[EINTELLUNGEN] {FFFFFF}Du hast den Damage-Sound eingeschaltet!");
                }else if(Spieler[playerid][DmgTog] == 1){
                    Spieler[playerid][DmgTog] = 0;
                    SendClientMessage(playerid, COLOR_YELLOW, "[EINTELLUNGEN] {FFFFFF}Du hast den Damage-Sound ausgeschaltet!");
                }else{
                    Spieler[playerid][DmgTog] = 0;
                    SendClientMessage(playerid, COLOR_YELLOW, "[EINTELLUNGEN] {FFFFFF}Du hast den Damage-Sound ausgeschaltet!");
                }
            }
            cmd_einstellungen(playerid);
        }
    }
    if (dialogid == DIALOG_ASETTINGS) {
        if (!response) return 1;
        if (listitem < 0 || listitem >= sizeof(g_aSettings)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Ungültige Auswahl.");
        if (Spieler[playerid][pAdmin] < 1) return ERROR_RANG_MSG(playerid);
        if (Spieler[playerid][pAdmin] < g_aSettings[listitem][ASETTING_RANK]) {
            ERROR_RANG_MSG(playerid);
            return cmd_asettings(playerid);
        }

        return ToggleASetting(playerid, listitem, true);
    }
    if (dialogid == DIALOG_AWAFFENLAGER_CHANGE) {
        new amount, index = SelectedPlayer[playerid];
        if (sscanf(inputtext, "d", amount) || amount < 0) {
            new dialogCaption[64], dialogText[256];
            format(dialogCaption, sizeof(dialogCaption), "{FFFF00}Waffenlager - %s", GetFactionName(g_fraktion[index][Fr_FrakID]));
            format(dialogText, sizeof(dialogText), "{FF0099}Im Lager: {FFFFFF}%s Waffenteile\nGebe an, wieviele Waffenteile das Lager haben soll:", AddDelimiters(g_fraktion[index][Fr_WaffenlagerTeile]));
            return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du musst einen gültigen Wert angeben.");
        }
        new message[145];
        g_fraktion[index][Fr_WaffenlagerTeile] = amount;
        format(message, sizeof(message), "%s %s hat die Waffenteile im Waffenlager der Fraktion %s auf %s Stück gesetzt.", GetPlayerAdminRang(playerid), 
        GetName(playerid), GetFactionName(g_fraktion[index][Fr_FrakID]), AddDelimiters(amount));
        SendAdminMessage(COLOR_YELLOW, message);
    }
    if (dialogid == DIALOG_NEON) {
        if (!response) return 1;
        if (listitem < 0 || listitem >= sizeof(g_NeonLights)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Ungültige Auswahl.");
        if (Spieler[playerid][pPremiumNeon] != 1) return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du besitzt kein Premium-Neon.");
        if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du musst der Fahrer eines Fahrzeugs sein.");
        new vehicleid = GetPlayerVehicleID(playerid);
        if (!IsACar(GetVehicleModel(vehicleid))) return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Neon kann nur an Autos angebracht werden.");
        if (g_aiVehicleSirene[vehicleid][0] != INVALID_OBJECT_ID) return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}An dem Auto ist bereits Neon angebracht.");

        g_aiVehicleSirene[vehicleid][0] = CreateDynamicObject(g_NeonLights[listitem][NEON_OBJECT_ID], 0.0, 0.0, 0.0, 0.0, 0.0, 0.80 );
        AttachDynamicObjectToVehicle(g_aiVehicleSirene[vehicleid][0], vehicleid, -0.899999, 0.100000, -0.500000, 0.000000, 0.000000, 0.000000);
        g_aiVehicleSirene[vehicleid][1] = CreateDynamicObject(g_NeonLights[listitem][NEON_OBJECT_ID], 0.0, 0.0, 0.0, 0.0, 0.0, 0.80 );
        AttachDynamicObjectToVehicle(g_aiVehicleSirene[vehicleid][1], vehicleid, 0.900000, 0.100000, -0.499999, 0.000000, 0.000000, 0.000000);
        Streamer_Update(playerid);
        return SCMFormatted(playerid, COLOR_ORANGE, "[INFO] %s%se {FFFFFF}Neonlichter aktiviert.", g_NeonLights[listitem][NEON_HEX_COLOR], g_NeonLights[listitem][NEON_NAME]);
    }
    if (dialogid == DIALOG_FINDMPARK) {
        if (!response || Spieler[playerid][pFraktion] == 0) return 1;
        if (listitem < 0) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Keine gültige Auswahl.");
        new count = 0;
        for (new i = 0; i < sizeof(g_FraktionAbschleppen); i++) {
            if (g_FraktionAbschleppen[i][FA_bAbgeschleppt] && g_FraktionAbschleppen[i][FA_fraktion] == Spieler[playerid][pFraktion]) {
                if (count == listitem) {
                    SetPlayerCheckpointEx(playerid, g_FraktionAbschleppen[i][FA_fX], g_FraktionAbschleppen[i][FA_fY], g_FraktionAbschleppen[i][FA_fZ], 2.0, CP_NAVI4);
                    return SCMFormatted(playerid, COLOR_SAMP, "GPS: Das Motorrad (%s) wurde auf der Karte markiert.", CarName[GetVehicleModel(i) - 400]);
                }
                
                count++;
            }
        }

        return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Das Motorrad ist nicht mehr abgeschleppt.");
    }
    if (dialogid == DIALOG_SAFEBOX_MENU) {
        if (!response) return 1;
        if (listitem < 0 || listitem > sizeof(g_SafeboxItems)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Keine gültige Auswahl.");
        SetPVarInt(playerid, "SAFEBOX.ITEM", listitem);
        return ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_ACTION, listitem);
    }
    if (dialogid == DIALOG_SAFEBOX_ACTION) {
        if (!response) return ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_MENU);
        if (listitem < 0 || listitem > 1) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Keine gültige Auswahl.");
        return ShowSafeboxDialog(playerid, listitem ? DIALOG_SAFEBOX_TAKE : DIALOG_SAFEBOX_STORE, GetPVarInt(playerid, "SAFEBOX.ITEM"));
    }
    if (dialogid == DIALOG_SAFEBOX_NOITEMS) {
        return ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_ACTION, GetPVarInt(playerid, "SAFEBOX.ITEM"));
    }
    if (dialogid == DIALOG_SAFEBOX_STORE) {
        if (!response) return ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_ACTION, GetPVarInt(playerid, "SAFEBOX.ITEM"));
        new amount;
        if (sscanf(inputtext, "i", amount) || amount < 0) {
            SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du hast keine gültige Menge angegeben.");
            return ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_STORE, GetPVarInt(playerid, "SAFEBOX.ITEM"));
        }

        return SafeboxInteraction(playerid, SAFEBOX_ACTION_STORE, GetPVarInt(playerid, "SAFEBOX.ITEM"), amount, true);
    }
    if (dialogid == DIALOG_SAFEBOX_TAKE) {
        if (!response) return ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_ACTION, GetPVarInt(playerid, "SAFEBOX.ITEM"));
        new amount;
        if (sscanf(inputtext, "i", amount) || amount < 0) {
            SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du hast keine gültige Menge angegeben.");
            return ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_TAKE, GetPVarInt(playerid, "SAFEBOX.ITEM"));
        }

        return SafeboxInteraction(playerid, SAFEBOX_ACTION_TAKE, GetPVarInt(playerid, "SAFEBOX.ITEM"), amount, true);
    }
    if (dialogid == DIALOG_FSAFEBOX_MENU) {
        if (!response) return 1;
        if (listitem < 0 || listitem > sizeof(g_SafeboxItems)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Keine gültige Auswahl.");
        SetPVarInt(playerid, "FSAFEBOX.ITEM", listitem);
        return ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_ACTION, listitem);
    }
    if (dialogid == DIALOG_FSAFEBOX_ACTION) {
        if (!response) return ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_MENU);
        if (listitem < 0 || listitem > 1) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Keine gültige Auswahl.");
        return ShowFSafeboxDialog(playerid, listitem ? DIALOG_FSAFEBOX_TAKE : DIALOG_FSAFEBOX_STORE, GetPVarInt(playerid, "FSAFEBOX.ITEM"));
    }
    if (dialogid == DIALOG_FSAFEBOX_NOITEMS) {
        return ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_ACTION, GetPVarInt(playerid, "FSAFEBOX.ITEM"));
    }
    if (dialogid == DIALOG_FSAFEBOX_STORE) {
        if (!response) return ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_ACTION, GetPVarInt(playerid, "FSAFEBOX.ITEM"));
        new amount;
        if (sscanf(inputtext, "i", amount) || amount < 0) {
            SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du hast keine gültige Menge angegeben.");
            return ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_STORE, GetPVarInt(playerid, "FSAFEBOX.ITEM"));
        }

        return FSafeboxInteraction(playerid, SAFEBOX_ACTION_STORE, GetPVarInt(playerid, "FSAFEBOX.ITEM"), amount, true);
    }
    if (dialogid == DIALOG_FSAFEBOX_TAKE) {
        if (!response) return ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_ACTION, GetPVarInt(playerid, "FSAFEBOX.ITEM"));
        new amount;
        if (sscanf(inputtext, "i", amount) || amount < 0) {
            SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du hast keine gültige Menge angegeben.");
            return ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_TAKE, GetPVarInt(playerid, "FSAFEBOX.ITEM"));
        }

        return FSafeboxInteraction(playerid, SAFEBOX_ACTION_TAKE, GetPVarInt(playerid, "FSAFEBOX.ITEM"), amount, true);
    }
    if (dialogid == DIALOG_EVENT_ITEM_MENU) {
        if (!response || listitem < 0) return 1;
        new message[145];
        switch (listitem) {
            case 0: {
                gEventItem = !gEventItem;
                format(message, sizeof(message), "%s %s hat die Eventitems %s", GetPlayerAdminRang(playerid), GetName(playerid), gEventItem ? "aktiviert (/Eventitem)!" : "deaktiviert!");
                SendClientMessageToAll(gEventItem ? COLOR_GREEN : COLOR_ORANGE, message);
                return ShowEventItemDialog(playerid);
            }
            case 1: {
                gEventItemType = !gEventItemType;
                return ShowEventItemDialog(playerid);
            }
            case 2: { // Reactivate Items for one player
                return ShowEventItemDialog(playerid, DIALOG_EVENT_ITEM_REACTIVATE);
            }
            case 3: { // Reactivate Items for all players
                for (new i = 0; i <= GetPlayerPoolSize(); i++) DeletePVar(i, "EVENTITEM");
                format(message, sizeof(message), "%s %s hat die Eventitems für alle erneut freigeschaltet!", GetPlayerAdminRang(playerid), GetName(playerid));
                return SendClientMessageToAll(COLOR_GREEN, message);
            }
            case 4: {
                if (gEventItem) {
                    format(message, sizeof(message), "%s %s hat die Eventitems deaktiviert!", GetPlayerAdminRang(playerid), GetName(playerid));
                    SendClientMessageToAll(COLOR_ORANGE, message);
                }

                gEventItem = false;
                gEventItemType = false;
                new temp[12][E_AEVENT_ITEM];
                aEventItems = temp;
                return ShowEventItemDialog(playerid);
            }
            case 5, 9: return ShowEventItemDialog(playerid);
            case 6, 7, 8: { // Show weapon menu
                return ShowEventItemDialog(playerid, DIALOG_EVENT_ITEM_WEAPONS, listitem == 6 ? WEAPON_GUN : (listitem == 7 ? WEAPON_MELEE : WEAPON_OTHER));
            }
            default: { // Change added weapon
                new index;
                for (new i = 0; i < sizeof(aEventItems); i++) {
                    if (!aEventItems[i][AEVENT_ITEM_INDEX]) continue;
                    if (listitem - 10 == index) {
                        SetPVarInt(playerid, "EVENTITEM_INDEX", aEventItems[i][AEVENT_ITEM_INDEX] - 1);
                        return ShowEventItemDialog(playerid, DIALOG_EVENT_ITEM_CHANGE, i);
                    }

                    index++;
                }

                return ShowEventItemDialog(playerid);
            }
        }
    }
    if (dialogid == DIALOG_EVENT_ITEM_REACTIVATE) {
        if (!response) return ShowEventItemDialog(playerid);
        new pID;
        if (sscanf(inputtext, "u", pID) || pID == INVALID_PLAYER_ID) {
            SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du hast keinen gültigen Spieler angegeben.");
            return ShowEventItemDialog(playerid, DIALOG_EVENT_ITEM_REACTIVATE);
        }

        DeletePVar(pID, "EVENTITEM");
        SCMFormatted(playerid, COLOR_GREEN, "[INFO] {FFFFFF}Du hast die Eventitems für %s wieder freigeschaltet.", GetName(pID));
        return SCMFormatted(pID, COLOR_GREEN, "[INFO] {FFFFFF}%s %s hat die Eventitems für dich wieder freigeschaltet.", GetPlayerAdminRang(playerid), GetName(playerid));
    }
    if (dialogid == DIALOG_EVENT_ITEM_WEAPONS) {
        if (!response) return ShowEventItemDialog(playerid);
        if (listitem < 0 || listitem > sizeof(g_EventItems)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Ungültige Auswahl.");

        new index, slot = -1, type = GetPVarInt(playerid, "EVENTITEM_TYPE");
        for (new i = 0; i < sizeof(g_EventItems); i++) {
            if (g_EventItems[i][EVENT_ITEM_TYPE] != type && !(type == WEAPON_MELEE && g_EventItems[i][EVENT_ITEM_TYPE] == WEAPON_SPRAY)) continue;

            if (index == listitem) {
                index = i;
                slot = g_EventItems[i][EVENT_ITEM_SLOT];
                type = g_EventItems[i][EVENT_ITEM_TYPE];
                break;
            }

            index++;
        }

        if (slot == -1) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Ungültige Auswahl.");
        if (type == WEAPON_MELEE || !strcmp(g_EventItems[index][EVENT_ITEM_NAME], "Fallschirm")) {
            aEventItems[slot][AEVENT_ITEM_INDEX] = index + 1;
            aEventItems[slot][AEVENT_ITEM_AMMO] = 1;
            return ShowEventItemDialog(playerid);
        }

        SetPVarInt(playerid, "EVENTITEM_INDEX", index);
        return ShowEventItemDialog(playerid, DIALOG_EVENT_ITEM_AMMO, slot);
    }
    if (dialogid == DIALOG_EVENT_ITEM_CHANGE) {
        if (!response || listitem < 0 || listitem > 1) return ShowEventItemDialog(playerid);
        new slot = g_EventItems[GetPVarInt(playerid, "EVENTITEM_INDEX")][EVENT_ITEM_SLOT];
        if (listitem) return ShowEventItemDialog(playerid, DIALOG_EVENT_ITEM_AMMO, slot);

        aEventItems[slot][AEVENT_ITEM_INDEX] = 0;
        aEventItems[slot][AEVENT_ITEM_AMMO] = 0;
        return ShowEventItemDialog(playerid);
    }
    if (dialogid == DIALOG_EVENT_ITEM_AMMO) {
        if (!response) return ShowEventItemDialog(playerid, DIALOG_EVENT_ITEM_WEAPONS, GetPVarInt(playerid, "EVENTITEM_TYPE"));
        new ammo;
        if (sscanf(inputtext, "d", ammo) || ammo < 1 || ammo > 100000) {
            SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Gebe einen Wert zwischen 1 und 100.000 an.");
            return ShowEventItemDialog(playerid, DIALOG_EVENT_ITEM_AMMO, g_EventItems[GetPVarInt(playerid, "EVENTITEM_INDEX")][EVENT_ITEM_SLOT]);
        }

        new index = GetPVarInt(playerid, "EVENTITEM_INDEX");
        aEventItems[g_EventItems[index][EVENT_ITEM_SLOT]][AEVENT_ITEM_AMMO] = ammo;
        aEventItems[g_EventItems[index][EVENT_ITEM_SLOT]][AEVENT_ITEM_INDEX] = index + 1;
        return ShowEventItemDialog(playerid);
    }
    if (dialogid == DIALOG_BWSTRAFEN) {
        if (!response) return ClosePlayerDialog(playerid);

        if (GetPVarInt(playerid, "BW.PAGES.END")) return ClosePlayerDialog(playerid);
        new bwPage = GetPVarInt(playerid, "BW.PAGE") + 1;
        SetPVarInt(playerid, "BW.PAGE", bwPage);
        new query[256];
        format(query, sizeof(query), "SELECT `Name`, `BWStrafe`, `BWStrafeGrund` FROM `accounts` WHERE `BWStrafe` > 0 ORDER BY `BWStrafe` DESC LIMIT %i,21", bwPage * 20);
        mysql_pquery(query, THREAD_BWSTRAFEN, playerid, gSQL,MySQLThreadOwner);
        return 1;
    }
    if (dialogid == DIALOG_SELLGUN_MAIN) {
        if (!response) return 1;
        if (Spieler[playerid][pJob] != 18) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist kein Waffendealer mehr.");
        if (sizeof(g_sellGuns) <= listitem < 0) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast keine gültige Auswahl getroffen.");
        if (Spieler[playerid][pWaffenteile] < g_sellGuns[listitem][SELL_GUN_MATS])
            return SCMFormatted(playerid, COLOR_ORANGE, "[INFO] {FFFFFF}Du brauchst %d Waffenteile für %s %s.", g_sellGuns[listitem][SELL_GUN_MATS],\
                g_sellGuns[listitem][SELL_GUN_INDEF_ARTICLE], g_sellGuns[listitem][SELL_GUN_NAME]);

        SetPVarInt(playerid, "SELL.GUN.ID", listitem);
        return ShowSellGunDialog(playerid, DIALOG_SELLGUN_CLIENT);
    }
    if (dialogid == DIALOG_SELLGUN_CLIENT) {
        if (Spieler[playerid][pJob] != 18) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist kein Waffendealer mehr.");
        if (!response) return cmd_sellgun(playerid, "");
        new pID;
        if (sscanf(inputtext, "u", pID) || pID == INVALID_PLAYER_ID) {
            SendClientMessage(playerid, COLOR_ORANGE, "[INFO] {FFFFFF}Gebe einen gültigen Spielernamen oder eine gültige Spieler-ID ein.");
            return ShowSellGunDialog(playerid, DIALOG_SELLGUN_CLIENT);
        }

        if (!gPlayerLogged[pID]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler ist nicht eingeloggt.");
        if (Spieler[pID][pLevel] < 3) return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Der Spieler muss mindestens Level 3 sein.");
        if (!IsPlayerInRangeOfPlayer(playerid, pID, 8.0)) return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du bist nicht in der Nähe des Spielers.");
        if (HasWeaponBlock(pID)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler hat eine Waffensperre.");

        SetPVarString(playerid, "SELL.GUN.CLIENT", GetName(pID));
        return ShowSellGunDialog(playerid, DIALOG_SELLGUN_PRICE);
    }
    if (dialogid == DIALOG_SELLGUN_PRICE) {
        if (Spieler[playerid][pJob] != 18) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du bist kein Waffendealer mehr.");
        if (!response) return cmd_sellgun(playerid, "");
        new price;
        if (sscanf(inputtext, "i", price) || price > 20000 || price < 1) {
            SendClientMessage(playerid, COLOR_ORANGE, "[INFO] {FFFFFF}Der Preis muss zwischen $1 und $20.000 liegen.");
            return ShowSellGunDialog(playerid, DIALOG_SELLGUN_PRICE);
        }

        new pID, playerName[MAX_PLAYER_NAME];
        GetPVarString(playerid, "SELL.GUN.CLIENT", playerName, sizeof(playerName));
        if (sscanf(playerName, "k<playername>", pID) || pID == INVALID_PLAYER_ID) return SCMFormatted(playerid, COLOR_RED, "[FEHLER] {FFFFFF}%s ist nicht mehr online."\
            , playerName);

        if (!gPlayerLogged[pID]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler ist nicht eingeloggt.");
        if (!IsPlayerInRangeOfPlayer(playerid, pID, 8.0)) return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du bist nicht mehr in der Nähe des Spielers.");
        if (HasWeaponBlock(pID)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler hat eine Waffensperre.");

        new gID = GetPVarInt(playerid, "SELL.GUN.ID");
        if (Spieler[playerid][pWaffenteile] < g_sellGuns[gID][SELL_GUN_MATS]) return SendClientMessage(playerid, COLOR_RED,
            "[FEHLER] {FFFFFF}Du hast nicht mehr genügend Waffenteile.");

        new offerString[64], ammoString[16], myName[MAX_PLAYER_NAME];
        if (g_sellGuns[gID][SELL_GUN_AMMO] == 1) ammoString = "";
        else format(ammoString, sizeof(ammoString), " mit %d Schuss", g_sellGuns[gID][SELL_GUN_AMMO]);
        myName = GetName(playerid);
        format(offerString, sizeof(offerString), "%s %i %i %i", myName, Spieler[playerid][pLoginTimestamp], gID, price);
        SetPVarString(pID, "SELL.GUN.OFFER", offerString);
        SCMFormatted(playerid, COLOR_LIGHTBLUE, "[ANGEBOT] {FFFFFF}Du hast %s %s %s%s für $%s angeboten.", GetName(pID), g_sellGuns[gID][SELL_GUN_INDEF_ARTICLE],\
            g_sellGuns[gID][SELL_GUN_NAME], ammoString, AddDelimiters(price));

        SCMFormatted(pID, COLOR_LIGHTBLUE, "[ANGEBOT] {FFFFFF}%s hat dir %s %s für $%s angeboten.", myName, g_sellGuns[gID][SELL_GUN_INDEF_ARTICLE],\
            g_sellGuns[gID][SELL_GUN_NAME], AddDelimiters(price));

        return SendClientMessage(pID, COLOR_LIGHTBLUE, "[ANGEBOT] {FFFFFF}Tippe '/Accept Waffen' um das Angebot anzunehmen.");
    }
    if (dialogid == DIALOG_SHISHA) {
        if (response) {
            if (listitem < 0 || listitem > sizeof(g_shishaPipes)) return SendClientMessage(playerid, COLOR_RED, "Ungültige Shisha-Sorte.");
            if (CheckMoney(playerid) < g_shishaPipes[listitem][SHISHA_PIPE_COST]) return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld.");

            GivePlayerCash(playerid, g_shishaPipes[listitem][SHISHA_PIPE_COST] * -1);
            Biz[GetBizIndexByID(11)][bKasse] += g_shishaPipes[listitem][SHISHA_PIPE_COST];
            ShowBuyInformation(playerid,"~y~Shisha ~w~bestellt!");
            SetPlayerAttachedObject(playerid, 0, 18736, 18, 0.112000, 0.028000, -1.589002, 0.000000, 0.000000, -127.399963, 0.668000, 0.638000, 1.000000);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
            SetPVarInt(playerid, "SHISHA.SMOKING", 1);
            new message[128], Float:x, Float:y, Float:z;
            GetPlayerPos(playerid, x, y, z);
            format(message, sizeof(message), "%s** %s raucht jetzt %s **", g_shishaPipes[listitem][SHISHA_PIPE_HEX_COLOR], GetName(playerid), g_shishaPipes[listitem][SHISHA_PIPE_NAME]);
            SendRoundMessage(x, y, z, COLOR_WHITE, message);
            return SendClientMessage(playerid, COLOR_YELLOW, "Tippe '/Shisha Aus' um mit dem Shisharauchen aufzuhören.");
        }
    }
    if (dialogid == DIALOG_SEEDPOINTS) {
        if (!response) return 1;
        if (listitem < 0 || listitem > sizeof(seedPoints)) return SendClientMessage(playerid, COLOR_RED, "Ungültige Auswahl.");

        SetPlayerCheckpointEx(playerid, seedPoints[listitem][SEED_POINT_fX], seedPoints[listitem][SEED_POINT_fY], seedPoints[listitem][SEED_POINT_fZ], 3.0, CP_NAVI4);
        return SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Samenpunkt wurde auf der Karte Rot markiert.");
    }
    if (dialogid == DIALOG_CARSELL) {
        if (!response) return SendClientMessage(playerid, COLOR_RED, "Du hast den Fahrzeugverkauf abgebrochen.");
        if (!PlayerHaveCar[playerid][PlayerKey[playerid]])
            return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast auf dem Schlüssel kein Fahrzeug mehr.");

        if (PlayerCar[playerid][PlayerKey[playerid]][CarState] != e_Vehicle_Status_Normal)
            return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Dein Fahrzeug wurde zerstört oder abgeschleppt.");

        new price = PlayerCar[playerid][PlayerKey[playerid]][CarPreis];
        GivePlayerCash(playerid, price);
        UnLockCar(PlayerCar[playerid][PlayerKey[playerid]][CarId]);
        if(PlayerCar[playerid][PlayerKey[playerid]][CarNeon1] > 0 || PlayerCar[playerid][PlayerKey[playerid]][CarNeon2] > 0)
        {
            PlayerCar[playerid][PlayerKey[playerid]][CarNeon1] = 0;
            PlayerCar[playerid][PlayerKey[playerid]][CarNeon2] = 0;
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][ObjectIDNeon1]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][ObjectIDNeon2]);
            PlayerCar[playerid][PlayerKey[playerid]][ObjectIDNeon1] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][ObjectIDNeon2] = INVALID_OBJECT_ID;
        }
        if(PlayerCar[playerid][PlayerKey[playerid]][isSpecialTuned] > 0)
        {
            PlayerCar[playerid][PlayerKey[playerid]][isSpecialTuned] = 0;
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned1]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned2]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned3]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned4]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned5]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned6]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned7]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned8]);
            DestroyDynamicObject(PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned9]);
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned1] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned2] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned3] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned4] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned5] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned6] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned7] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned8] = INVALID_OBJECT_ID;
            PlayerCar[playerid][PlayerKey[playerid]][SpecialTuned9] = INVALID_OBJECT_ID;
        }
        if(vSirene[PlayerCar[playerid][PlayerKey[playerid]][CarId]] != INVALID_OBJECT_ID)
        {
            DestroyDynamicObject(vSirene[PlayerCar[playerid][PlayerKey[playerid]][CarId]]);
        }
        if(vNeon[PlayerCar[playerid][PlayerKey[playerid]][CarId]] != INVALID_OBJECT_ID)
        {
            DestroyDynamicObject(vNeon[PlayerCar[playerid][PlayerKey[playerid]][CarId]]);
        }
        if(OAmtSirene[PlayerCar[playerid][PlayerKey[playerid]][CarId]] != INVALID_OBJECT_ID)
        {
            DestroyDynamicObject(OAmtSirene[PlayerCar[playerid][PlayerKey[playerid]][CarId]]);
        }

        if( g_aiVehicleSirene[CarId][0] != INVALID_OBJECT_ID ) {
            DestroyDynamicObject(g_aiVehicleSirene[CarId][0]);
            g_aiVehicleSirene[CarId][0] = INVALID_OBJECT_ID;
            DestroyDynamicObject(g_aiVehicleSirene[CarId][1]);
            g_aiVehicleSirene[CarId][1] = INVALID_OBJECT_ID;
            DestroyDynamicObject(g_aiVehicleSirene[CarId][2]);
            g_aiVehicleSirene[CarId][2] = INVALID_OBJECT_ID;
            DestroyDynamicObject(g_aiVehicleSirene[CarId][3]);
            g_aiVehicleSirene[CarId][3] = INVALID_OBJECT_ID;
        }

        DestroyBlinker(CarId,0);
        DestroyBlinker(CarId,1);
        DestroyVehicleEx(PlayerCar[playerid][PlayerKey[playerid]][CarId]);
        //DestroyPeilsender(playerid, PlayerKey[playerid] );
        aiVehicles[ PlayerCar[playerid][PlayerKey[playerid]][CarId] ] = VEH_INVALID;
        new string[80];
        //new playername3[MAX_PLAYER_NAME];
        //GetPlayerName(playerid, playername3, sizeof(playername3));
        format(string,sizeof(string),"DELETE FROM `playercar` WHERE `id` = %d", PlayerCar[playerid][PlayerKey[playerid]][Id] );
        mysql_pquery(string,THREAD_CARSELL,playerid,gSQL,MySQLThreadOwner);
        // format(string3, sizeof(string3), "/Autos/%s_Car_%d.ini", playername3, PlayerKey[playerid]);
        // fremove(string3);
        PlayerHaveCar[playerid][PlayerKey[playerid]] = 0;
        return SCMFormatted(playerid, COLOR_GREEN, "Du hast dein Fahrzeug '%s' verkauft. Du erhältst noch $%s dafür.", CarName[PlayerCar[playerid][PlayerKey[playerid]][CarModel] - 400], AddDelimiters(price));
    }
    if (dialogid == DIALOG_WHEELMAN_OFFER) {
        if (response) {
            if (GetPVarInt(playerid, "WHEELMAN.STATUS") == WHEELMAN_STATUS_NONE) return SendClientMessage(playerid, COLOR_RED, "Jaja, Dialog Repeater am Werk wa. Ist geloggt, mein Freund!");

            new myWheelman = GetPVarInt(playerid, "WHEELMAN.WHEELMAN"),
                myWheelmansCustomer = GetPVarInt(myWheelman, "WHEELMAN.CUSTOMER"),
                myWheelmansCustomerStatus = GetPVarInt(myWheelmansCustomer, "WHEELMAN.STATUS");

            if (Spieler[myWheelman][pFraktion] != 14) {
                SetPVarInt(playerid, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
                return SendClientMessage(playerid, COLOR_RED, "Das Agency-Mitglied ist kein Agency-Mitglied mehr, sowas aber auch...");
            }

            if (Spieler[playerid][pJailed] != 2) {
                SetPVarInt(playerid, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
                return SendClientMessage(playerid, COLOR_RED, "Na jetzt ist's auch zu spät!");
            }

            if (Spieler[myWheelman][pJailed] == 2) {
                SetPVarInt(playerid, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
                return SendClientMessage(playerid, COLOR_RED, "Das Agency-Mitglied ist jetzt dein Zellengenosse, daher kann er dir nicht mehr helfen.");
            }

            if (!(IsPlayerInRangeOfPoint(playerid, 10.0, ALCATRAZ_JAILEDGATE_COORDS) && IsPlayerInRangeOfPoint(myWheelman, 10.0, ALCATRAZ_JAILEDGATE_COORDS))) {
                SetPVarInt(playerid, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
                return SendClientMessage(playerid, COLOR_RED, "Ihr seid nicht beide nahe genug am Alcatraz-Tor.");
            }

            if (myWheelmansCustomerStatus == WHEELMAN_STATUS_ESCAPING) {
                SetPVarInt(playerid, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
                return SendClientMessage(playerid, COLOR_RED, "Dein Agency-Mitglied befreit bereits jemand anderes.");
            }

            SetPVarInt(myWheelman, "WHEELMAN.CUSTOMER", playerid);
            SetPVarInt(playerid, "WHEELMAN.STATUS", WHEELMAN_STATUS_ESCAPING);

            new message[128], Float:x, Float:y, Float:z;
            GetPlayerPos(myWheelman, x, y, z);
            format(message, sizeof(message), "%s hat deine Befreiung angenommen. Bleibe am Tor stehen!", GetName(playerid));
            SendClientMessage(myWheelman, COLOR_YELLOW, message);
            format(message, sizeof(message), "Ein Agency-Agent versucht dich nun zu befreien. Bleibe am Tor stehen!");
            SendClientMessage(playerid, COLOR_YELLOW, message);
            format(message, sizeof(message), "Ein Agency-Agent versucht %s aus dem Alcatraz zu befreien!", GetName(playerid));
            SendRoundMessage(x, y, z, COLOR_ORANGE, message, 30.0);

            SendFraktionMessage(1, COLOR_LIGHTRED, "[HOCHSICHERHEITSTRAKT] Ein Agency-Agent versucht einen Gefangenen aus dem Alcatraz zu befreien!");
            SendFraktionMessage(2, COLOR_LIGHTRED, "[HOCHSICHERHEITSTRAKT] Ein Agency-Agent versucht einen Gefangenen aus dem Alcatraz zu befreien!");
            SendFraktionMessage(16, COLOR_LIGHTRED, "[HOCHSICHERHEITSTRAKT] Ein Agency-Agent versucht einen Gefangenen aus dem Alcatraz zu befreien!");
            SendFraktionMessage(18, COLOR_LIGHTRED, "[HOCHSICHERHEITSTRAKT] Ein Agency-Agent versucht einen Gefangenen aus dem Alcatraz zu befreien!");
            SendFraktionMessage(22, COLOR_LIGHTRED, "[HOCHSICHERHEITSTRAKT] Ein Agency-Agent versucht einen Gefangenen aus dem Alcatraz zu befreien!");

            return SetTimerEx("WHEELMAN_escaping_pulse", 2000, false, "ddd", playerid, myWheelman, gettime() + 240); // 4 Minutes
        } else {
            new message[128];
            SetPVarInt(playerid, "WHEELMAN.STATUS", WHEELMAN_STATUS_NONE);
            format(message, sizeof(message), "%s hat deine Alcatrazbefreiung abgelehnt.", GetName(playerid));
            SendClientMessage(GetPVarInt(playerid, "WHEELMAN.WHEELMAN"), COLOR_RED, message);
            format(message, sizeof(message), "Du hast das Befreiungsangebot vom Agency-Agent abgelehnt.", GetName(GetPVarInt(playerid, "WHEELMAN.WHEELMAN")));
            return SendClientMessage(playerid, COLOR_RED, message);
        }
    }
    if (dialogid == DIALOG_RB) {
        if (response) {
            new Float:pX, Float:pY, Float:pZ, Float:rZ;
            GetPlayerPos(playerid, pX, pY, pZ);
            GetPlayerFacingAngle(playerid, rZ);

            switch (listitem) {
                case 0: { // Kleine Sperre
                    CreateRoadblock(1459, pX, pY, pZ - 0.42, rZ);
                }

                case 1: 
                { // Große Sperre
                    if(Spieler[playerid][pFraktion] == 4) DeleteClosestRoadblock(playerid);
                    else CreateRoadblock(981, pX, pY, pZ - 0.22, rZ);
                }

                case 2: { // Verkehrskegel
                    CreateRoadblock(1238, pX, pY, pZ - 0.69, rZ);
                }

                case 3: { // Umleitung
                    CreateRoadblock(1425, pX, pY, pZ - 0.56, rZ);
                }

                case 4: { // Grosse gelbe Barriere
                    CreateRoadblock(3578, pX, pY, pZ - 0.25, rZ);
                }

                case 5: { // Eine Sperre in der Nähe entfernen
                    DeleteClosestRoadblock(playerid);
                }

                case 6: { // Alle Sperren entfernen
                    if (Spieler[playerid][pFraktion] != 3 && Spieler[playerid][pFraktion] != 5) RemoveAllNagelBand();
                    DeleteAllRoadblocks(playerid);
                }

                case 7: { // Nagelband setzen
                    if (Spieler[playerid][pFraktion] == 3 || Spieler[playerid][pFraktion] == 5) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist.");
                    AddNagelBand(playerid);
                }

                case 8: { // Nagelband in der Nähe entfernen
                    if (Spieler[playerid][pFraktion] == 3 || Spieler[playerid][pFraktion] == 5) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist.");
                    RemoveNagelBand(playerid);
                }

                case 9: { // Alle Nagelbänder entfernen
                    if (Spieler[playerid][pFraktion] == 3 || Spieler[playerid][pFraktion] == 5) return SendClientMessage(playerid, COLOR_RED, "Du bist kein Polizist.");
                    RemoveAllNagelBand();
                }

                default: {

                }
            }
        }
    }
    if(dialogid==DIALOG_YSTREAM)
    {
        if(response)
        {
            if(GetPlayerState(playerid)!=PLAYER_STATE_DRIVER){
				PlayAudioStreamForPlayer(playerid,inputtext);
			}else{
            for(new i = 0 ; i < MAX_PLAYERS ; i++)
	            {
	                if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
	                {
	                    PlayAudioStreamForPlayer(i,inputtext);
	                    new String[128];
	                    format(String, sizeof(String), "%s", inputtext);
	                    Vehicle_Custom_Stream[GetPlayerVehicleID(playerid)] = String;
	                }
	            }
			}
        }
        else
        {
            RemovePlayerAttachedObject(playerid,ATTACHED_INDEX_MUSIK);
        }
    }
    else if(dialogid==DIALOG_CREATE_FRAKCAR)
	{
	    if(!response)return 1;
	    Spieler[playerid][create_fcar] = listitem+1;
	    ShowPlayerDialog(playerid,DIALOG_CREATE_FRAKCAR2,DIALOG_STYLE_INPUT,""COLOR_HEX_ORANGE"Fraktionsfahrzeug erstellen","Bitte gebe nun das Fahrzeug-Modell an (ID):","Ok","Abbrechen");
	}
	else if(dialogid==DIALOG_CREATE_FRAKCAR2)
	{
        if(!response)return 1;
        new num = strval(inputtext);
        if(611>num<400) return ShowPlayerDialog(playerid,DIALOG_CREATE_FRAKCAR2,DIALOG_STYLE_INPUT,""COLOR_HEX_ORANGE"Fraktionsfahrzeug erstellen","Bitte gebe die Fahrzeug Model an:\nDas Model muss zwischen 400 & 611 sein.","Ok","Abbrechen");
        new Float:x,Float:y,Float:z,Float:r;
        GetPlayerPos(playerid,x,y,z);
		GetPlayerFacingAngle(playerid,r);

        new e = 1;
		for(; e<MAX_VEHICLES;e++)
		{
            new farbe1,farbe2;
		    if(IsValidVehicle(e)) continue;
            GetFCarColor(Spieler[playerid][create_fcar],farbe1, farbe2);
		    FrakCarInfo[e][f_veh] = AddStaticVehicleEx(num,x,y,z,r,farbe1,farbe2,-1,0);
		    FrakCarInfo[e][f_frak] = Spieler[playerid][create_fcar];
		    FrakCarInfo[e][f_world] = GetPlayerVirtualWorld(playerid);
            
		    SetVehicleVirtualWorld(FrakCarInfo[e][f_veh],FrakCarInfo[e][f_world]);
		    PutPlayerInVehicle(playerid, FrakCarInfo[e][f_veh], 0); // insert into car
		    new string[256];
            format(string,sizeof(string),"INSERT INTO `"#SERVERFRAKCARS_DB"` (`fraktion`, `modelid`, `X`, `Y`, `Z`, `R`, `world`, `ersteller`, `c1`, `c2`) \
											VALUES ('%i', '%i', '%.3f', '%.3f', '%.3f', '%.3f', '%i', '%s', '%i', '%i')",
											FrakCarInfo[e][f_frak],num,x,y,z,r,FrakCarInfo[e][f_world],GetName(playerid),farbe1,farbe2);
		 	mysql_tquery(gSQL,string, "CREATEFRAKCAR","i",FrakCarInfo[e][f_veh]);
            //gGas[FrakCarInfo[e][f_veh]] = GetMaxTank(FrakCarInfo[e][f_veh]);
            new veh = GetPlayerVehicleID(playerid);
            gGas[veh] = GetMaxTank(veh);
    		gMaxGas[veh] = GetMaxTank(veh);

            if(FrakCarInfo[e][f_frak] == 1 && (num == 560 || num == 541 || num == 415 || num == 426 || num == 445 || num == 579)){
                format(string,sizeof(string),"%s%s",#COLOR_HEX_BLACK, "LS-4826");
                SetVehicleNumberPlate(FrakCarInfo[e][f_veh], string);
            }else{
                format(string,sizeof(string),"%s%s",#COLOR_HEX_BLACK,NumberPlates[FrakCarInfo[e][f_frak]]);
                SetVehicleNumberPlate(FrakCarInfo[e][f_veh], string);
            }
        	

			switch (FrakCarInfo[e][f_frak])
        	{
        	    case 1: {aiVehicles[e] = VEH_LSPDCARS;}
        	    case 2: {aiVehicles[e] = VEH_FBICARS;}
        	    case 3: {aiVehicles[e] = VEH_SANICARS;}
        	    case 4: {aiVehicles[e] = VEH_NEWSCARS;}
        	    case 5: {aiVehicles[e] = VEH_OAMTCARS;}
        	    case 6: {aiVehicles[e] = VEH_GROVECARS;}
        	    case 7: {aiVehicles[e] = VEH_BALLASCARS;}
        	    case 8: {aiVehicles[e] = VEH_FSCARS;}
        	    case 9: {aiVehicles[e] = VEH_STAATCARS;}
        	    case 10: {aiVehicles[e] = VEH_YAKUCARS;}
        	    case 11: {aiVehicles[e] = VEH_AZTCARS;}
        	    case 12: {aiVehicles[e] = VEH_LCNCARS;}
        	    case 13: {aiVehicles[e] = VEH_VAGOSCARS;}
        	    case 14: {aiVehicles[e] = VEH_HITMANC;}
        	    case 15: {aiVehicles[e] = VEH_BIKERCARS;}
        	    case 16: {aiVehicles[e] = VEH_LVPDCARS;}
        	    case 17: {aiVehicles[e] = VEH_WHEELCARS;}
        	    case 18: {aiVehicles[e] = VEH_ARMYCARS;}
        	    case 19: {aiVehicles[e] = VEH_TERRORCARS;}
                case 20: {aiVehicles[e] = VEH_OUTLAWZSCARS;}
				case 21: {aiVehicles[e] = VEH_TRIADENCARS;}
				case 22: {aiVehicles[e] = VEH_ZOLLCARS;}
				default:{aiVehicles[e] = 0;}
        	}
        	break;
		}
	}
    else if(dialogid==DIALOG_BESTAETIGEN)
    {
        if(response)
        {
            if(sichervar[playerid][0]==1)
            {
                sichervar[playerid][0]=0;
                new h = IsPlayerAtHouse(playerid);
                new pHouse = GetPlayerHouse(playerid);
                new
                    erstattung,
                    String[128];
                erstattung = (Haus[pHouse][hPreis] / 4);
                // Alle Mieter raus
                new query[256];
                format(query, sizeof(query), "\
                    UPDATE `accounts` SET \
                    `HouseMieteKey` = '999', \
                    `UpgradeWaffenlager` = '0',\
                    `UpgradeSafebox` = '0',\
                    `HausWaffenlager` = '0',\
                    `HausSafeboxSpice` = '0',\
                    `HausSafeboxDrogen` = '0'\
                    WHERE `HouseMieteKey` = %d", Spieler[playerid][pPlayerHouse]);
                mysql_pquery(query,THREAD_HAUSVERSTAATLICHEN,playerid,gSQL,MySQLThreadOwner);
                SendClientMessage(playerid, COLOR_LIGHTBLUE,query);
                Haus[h][hMieterAnzahl] = 0;
                Haus[h][hKasse] = 0;
                for(new i = 0 ; i < MAX_PLAYERS ; i++)
                {
                    if(i != playerid)
                    {
                        if(IsPlayerConnected(i))
                        {
                            if(Spieler[i][pHouseMieteKey] == Haus[h][hID])
                            {
                                Spieler[i][pHouseMieteKey] = 999;
                                SendClientMessage(i, COLOR_LIGHTBLUE, "Der Besitzer des Hauses in dem du eingemietet bist, hat sein Haus an den Staat verkauft!");
                            }
                        }
                    }
                }
                // Alle Möbel löschen
                for(new i ; i < MAX_HAUS_MOEBEL ; i++) {
                    String[0] = '\0';
                    format(String,sizeof(String),"DELETE FROM `hausmoebel` WHERE `id` = %d", g_HausMoebelObjekt[pHouse][i][HMO_iID]);
                    mysql_oquery( String , THREAD_DELETEHAUSMOEBEL , playerid ,gSQL);
                    Hausmoebel_ResetHausMoebel(pHouse,i);
                }
                // Haus reseten
                format(Haus[pHouse][hBesitzer],MAX_PLAYER_NAME,"Niemand");
                Haus[pHouse][hMieterMax] = 10;
                Haus[pHouse][hMieterAnzahl] = 0;
                Haus[pHouse][hMieten] = 0;
                if(Haus[pHouse][hKasse] > 0 ) {
                    format(String,sizeof(String),"In deiner Hauskasse waren noch $%s. Du erhältst diese noch vor dem Verkauf zurück.", AddDelimiters(Haus[pHouse][hKasse]));
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                    Spieler[playerid][pBank] += Haus[pHouse][hKasse];
                }
                Spieler[playerid][pBank] += erstattung;
                Haus[pHouse][hKasse] = 0;
                format(String,sizeof(String),"Du hast dein Haus '%s' (%d) an den Staat für $%s verkauft. Alle Mieter und Möbel wurden entfernt!",Haus[pHouse][hName],Haus[pHouse][hID], AddDelimiters(erstattung));
                SendClientMessage(playerid,COLOR_WHITE,String);
                Spieler[playerid][pPlayerHouse] = 999;
                CheckPlayerHouse(playerid);
                UpdateHouseText(h);
            }
            else if(sichervar[playerid][1]==1)
            {
                sichervar[playerid][1]=0;
                new giveid=sichervar[playerid][2],price=sichervar[playerid][3],pHouse = GetPlayerHouse(playerid);
                new
                    string[128];
                format(string,sizeof(string),"%s bietet dir sein Haus '%s' für einen Kaufpreis von $%s an!",GetName(playerid),Haus[pHouse][hName], AddDelimiters(price));
                SendClientMessage(giveid,COLOR_GREEN,string);
                SendClientMessage(giveid,COLOR_GREEN,"Dieses Angebot nimmst du mit /Hausankaufen [ID] an.");
                format(string,sizeof(string),"Du hast %s dein Haus für $%s zum Ankauf angeboten! ",GetName(giveid), AddDelimiters(price));
                SendClientMessage(playerid,COLOR_GREEN,string);
                Spieler[playerid][pHouseAngebot][0] = giveid;
                Spieler[playerid][pHouseAngebot][1] = price;
            }
            else if(sichervar[playerid][4]==1)
            {
                sichervar[playerid][4]=0;
                new giveid=sichervar[playerid][5],price=sichervar[playerid][6],indexbiz = Spieler[playerid][pPlayerBiz];
                new
                    string[128];
                format(string,sizeof(string),"[VERKAUF] %s bietet dir sein Geschäft '%s' für einen Kaufpreis von $%s an!",GetName(playerid),Biz[indexbiz][bName], AddDelimiters(price));
                SendClientMessage(giveid,COLOR_GREEN,string);
                SendClientMessage(giveid,COLOR_GREEN,"Dieses Angebot nimmst du mit /Bizankaufen [ID] an.");
                format(string,sizeof(string),"Du hast %s dein Geschäft für $%s zum Ankauf angeboten! ",GetName(giveid), AddDelimiters(price));
                SendClientMessage(playerid,COLOR_GREEN,string);
                Spieler[playerid][pBizAngebot][0] = giveid;
                Spieler[playerid][pBizAngebot][1] = price;
            }
            else if(sichervar[playerid][7]==1)
            {
                sichervar[playerid][7]=0;
                new giveid=sichervar[playerid][8],price=sichervar[playerid][9],indextanke = Spieler[playerid][pPlayerTank];
                new
                    Float:x,
                    Float:y,
                    Float:z;
                GetPlayerPos(playerid,x,y,z);
                if( !IsPlayerInRangeOfPoint(playerid,5.0,x,y,z)) {
                    return SendClientMessage(playerid, COLOR_RED, "Der Spieler muss sich in deiner nähe befinden");
                }
                new
                    string[128];
                format(string,sizeof(string),"[VERKAUF] %s bietet dir seine Tankstelle '%s' für einen Kaufpreis von $%s an!",GetName(playerid),Tanke[indextanke][tName], AddDelimiters(price));
                SendClientMessage(giveid,COLOR_GREEN,string);
                SendClientMessage(giveid,COLOR_GREEN,"Dieses Angebot nimmst du mit /Tankstelleankaufen [ID] an.");
                format(string,sizeof(string),"Du hast %s deine Tankstelle für $%s zum Ankauf angeboten! ",GetName(giveid), AddDelimiters(price));
                SendClientMessage(playerid,COLOR_GREEN,string);

                Spieler[playerid][pTankeAngebot][0] = giveid;
                Spieler[playerid][pTankeAngebot][1] = price;
            }
        }
    }
    else if(dialogid==DIALOG_GUP)
    {
        if(response)
        {
            listitem++;
            for(new index;index<MAX_GANGZONES;index++)
            {
                if(IsPlayerInRangeOfPoint(playerid , 6.0 , g_GangZone[index][GZ_fIconX],g_GangZone[index][GZ_fIconY],g_GangZone[index][GZ_fIconZ])/* &&
                Spieler[playerid][pFraktion]==g_GangZone[index][GZ_iOwner]&&Spieler[playerid][pRank] > 4*/)
                {
                    if(g_GangZone[index][GZ_igupgrade]!=listitem)
                    {
                        g_GangZone[index][GZ_igbestand]=0;
                    }
                    else
                    {
                        return SendClientMessage(playerid,COLOR_RED,"Dieses Upgrade ist bereits aktiv.");
                    }
                    g_GangZone[index][GZ_igupgrade]=listitem;
                    SaveGangZones();
                    if(listitem==1)
                    {
                        SendClientMessage(playerid,COLOR_GREEN,"Du hast eine Maschine für Waffenteile gekauft.");
                        //GivePlayerCash(playerid,-450000);
                    }
                    else if(listitem==2)
                    {
                        SendClientMessage(playerid,COLOR_GREEN,"Du hast eine Maschine für Drogen gekauft.");
                        //GivePlayerCash(playerid,-300000);
                    }
                    else if(listitem==3)
                    {
                        SendClientMessage(playerid,COLOR_GREEN,"Du verpachtest ab jetzt dein Gangfight Gebiet.");
                    }
                    break;
                }
                else if(index==MAX_GANGZONES-1)
                {
                    SendClientMessage(playerid,COLOR_RED,"Die Zone gehört deiner Fraktion nicht, du bist nicht mehr am Icon oder du bist kein Leader der Fraktion.");
                }
            }
        }
    }
    else if(dialogid==DIALOG_WANTEDCODES3)
    {
        if(response)
        {
            if(strval(inputtext)>=1)
            {
                if(Spieler[playerid][pWantedCodes]>=strval(inputtext))
                {
                    new
                        String[128];
                    format(String,sizeof(String),"Du hast für Spieler %s %d Wanted(s) gehackt",GetName(wantedcodename[playerid]),strval(inputtext));
                    SendClientMessage(playerid,COLOR_LIGHTRED2,String);
                    Spieler[playerid][pWantedCodes] -= strval(inputtext);
                    Spieler[playerid][punixWantedCodesDone] = gettime();
                    Spieler[playerid][tWantedCodes] = SetTimerEx("Pulse_WantedHacker",1000,false,"ddd",playerid,wantedcodename[playerid],strval(inputtext));
                    Spieler[playerid][bWantedHacking] = true;
                    SendFraktionMessage(1, COLOR_RED, "[POLIZEIZENTRALE] Jemand hat sich ins Polizeisystem eingehackt!");
                    SendFraktionMessage(2, COLOR_RED, "[POLIZEIZENTRALE] Jemand hat sich ins Polizeisystem eingehackt!");
                    SendFraktionMessage(16, COLOR_RED, "[POLIZEIZENTRALE] Jemand hat sich ins Polizeisystem eingehackt!");
                    wantedcodename[playerid]=MAX_PLAYERS;
                }
                else
                {
                    SendClientMessage(playerid,COLOR_RED,"Du hast nicht genügend Wantedcodes.");
                    ShowPlayerDialog(playerid,DIALOG_WANTEDCODES3,DIALOG_STYLE_INPUT,"Wanted Anzahl","Gib die Anzahl der Wanteds ein die entfernt werden soll","Hacken","Zurück");
                }
            }
            else
            {
                ShowPlayerDialog(playerid,DIALOG_WANTEDCODES3,DIALOG_STYLE_INPUT,"Wanted Anzahl","Gib die Anzahl der Wanteds ein die entfernt werden soll","Hacken","Zurück");
                SendClientMessage(playerid,COLOR_RED,"Ungültige Wantedanzahl.");
            }
        }
        else
        {
            ShowPlayerDialog(playerid,DIALOG_WANTEDCODES2,DIALOG_STYLE_INPUT,"Spielername","Gib den Spielernamen an dessen Wanteds du löschen möchtest","Weiter","Zurück");
        }
    }
    else if(dialogid==DIALOG_WANTEDCODES2)
    {
        if (!response) return ShowPlayerDialog(playerid,DIALOG_WANTEDCODES,DIALOG_STYLE_LIST,"Wantedhacking","Wanteds löschen\nGesuchten-Liste anzeigen\nAlle Cops anzeigen","Auswählen","Abbrechen");
        wantedcodename[playerid] = MAX_PLAYERS;
        new pID;
        if (sscanf(inputtext, "u", pID) || !gPlayerLogged[pID]) {
            ShowPlayerDialog(playerid,DIALOG_WANTEDCODES2,DIALOG_STYLE_INPUT,"Spielername","Gib den Spielernamen oder die ID an, dessen Wanteds du löschen möchtest:","Weiter","Zurück");
            return SendClientMessage(playerid,COLOR_RED, "Ungültiger Spielername bzw. Spieler ID.");
        }

        wantedcodename[playerid] = pID;
        return ShowPlayerDialog(playerid,DIALOG_WANTEDCODES3,DIALOG_STYLE_INPUT,"Wanted Anzahl","Gib die Anzahl der Wanteds ein die entfernt werden soll:","Hacken","Zurück");
    }
    else if(dialogid==DIALOG_WANTEDCODES)
    {
        if(response)
        {
            if(listitem==0)
            {
                ShowPlayerDialog(playerid,DIALOG_WANTEDCODES2,DIALOG_STYLE_INPUT,"Spielername","Gib den Spielernamen oder die ID an, dessen Wanteds du löschen möchtest","Weiter","Zurück");
            }
            else if(listitem==1)
            {
                SendClientMessage(playerid, COLOR_YELLOW, "====== {FFFFFF}[ Gesuchten-Liste ] {FFFF00}======");
                for (new i = 0; i <= GetPlayerPoolSize(); i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        if(Spieler[i][pWanteds] != 0)
                        {
                            new giveplayer[MAX_PLAYER_NAME], string[128];
                            GetPlayerName(i, giveplayer, sizeof(giveplayer));
                            format(string, sizeof(string), "%s [ID: %d]: %d Wanted(s)", giveplayer,i,Spieler[i][pWanteds]);
                            SendClientMessage(playerid, COLOR_YELLOW, string);
                        }
                    }
                }
            }
            else if(listitem==2)
            {
                new
                    frak[50],
                    String[128],
                    bool:bBeamteOnline = false;
                String[0] = '\0';
                for(new i ; i < MAX_PLAYERS ; i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        if( IsBeamter(i) )
                        {
                            if(!bBeamteOnline)
                            {
                                bBeamteOnline = true;
                                SendClientMessage(playerid,COLOR_YELLOW,"========BEAMTEN-LISTE========");
                            }
                            ReturnPlayerFraktion( i, frak );
                            if( String[0] )
                            {
                                format(String,sizeof(String),"%s,[%d] %s - %s",String,i,GetName(i), frak );
                            }
                            else
                            {
                                format(String,sizeof(String),"[%d] %s - %s",i,GetName(i), frak );
                            }
                            if( strlen(String) > 100 )
                            {
                                SendClientMessage(playerid,COLOR_GREEN,String);
                                String[0] = '\0';
                            }
                        }
                    }
                }
                if(!bBeamteOnline) {

                    SendClientMessage(playerid,COLOR_LIGHTRED2,"Es sind keine Beamten Online!");
                }
                else
                {
                    SendClientMessage(playerid,COLOR_GREY,String);
                }
            }
        }
    }
    else if(dialogid==DIALOG_POST3)
    {
        if(response)
        {
            new i,pfad[64];
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",inputtext,i);
                if(fexist(pfad))
                {
                }
                else
                {
                    i=100;
                    break;
                }
            }
            if(i==100)
            {
                ShowPlayerDialog(playerid,DIALOG_POST5,DIALOG_STYLE_INPUT,"Post schreiben","Geben sie den Text ein (maximal 500 Zeichen)\nEin Brief kostet dich 2.000$","Weiter","Zurück");
            }
            else
            {
                SendClientMessage(playerid,COLOR_RED,"Du kannst diesen Brief nicht abschicken, da das Postfach des Empfängers voll ist!");
            }
        }
        else
        {
            new i,pfad[64],string[2000];
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    if(klasseint==0)
                    {
                        format(string,2000,"%s, %s | Abs.: %s\n%s",datumstr,uhrzeitstr,absenderstr,string);
                    }
                }
            }
            ShowPlayerDialog(playerid,DIALOG_POST2,DIALOG_STYLE_LIST,"Ungelesene Briefe",string,"Lesen","Zurück");
            format(postpid[playerid],300,"%s",inputtext);
        }
    }
    else if(dialogid==DIALOG_POST2)
    {
        if(response)
        {
            new i,pfad[64],string[300];
            new str[100],str2[1000];
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[520],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    if(klasseint==0)
                    {
                        format(string,300,"%s, %s | Abs.: %s",datumstr,uhrzeitstr,absenderstr,string);
                        if(strcmp(inputtext,string,false)==0)
                        {
                            i=100;
                            format(briefstring,1000,"%s %s %s %s %s 0 0 1",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr);
                            new File:datei2=fopen(pfad,io_write);
                            fwrite(datei2,briefstring);
                            fclose(datei2);
                            format(str,100,"Brief von %s",absenderstr);
                            for(new leerzeichen;leerzeichen<1000;leerzeichen++)
                            {
                                if(strfind(textinhaltstr,"?",true)!=-1)
                                {
                                    strins(textinhaltstr," ",strfind(textinhaltstr,"?",true));
                                    strdel(textinhaltstr,strfind(textinhaltstr,"?",true),strfind(textinhaltstr,"?",true)+1);
                                }
                                else
                                {
                                    leerzeichen=1000;
                                }
                            }
                            if(strlen(textinhaltstr)>450)
                            {
                                strins(textinhaltstr,"\n",450);
                                strins(textinhaltstr,"\n",300);
                                strins(textinhaltstr,"\n",150);
                            }
                            else if(strlen(textinhaltstr)>300)
                            {
                                strins(textinhaltstr,"\n",300);
                                strins(textinhaltstr,"\n",150);
                            }
                            else if(strlen(textinhaltstr)>150)
                            {
                                strins(textinhaltstr,"\n",150);
                            }
                            format(str2,1000,"Von: %s\nDatum: %s %s\n\nNachricht:\n%s",absenderstr,datumstr,uhrzeitstr,textinhaltstr);
                            format(postpsenden[playerid],MAX_PLAYER_NAME,"%s",absenderstr);
                            break;
                        }
                    }
                }
            }
            ShowPlayerDialog(playerid,DIALOG_POST3,DIALOG_STYLE_MSGBOX,str,str2,"Antworten","Zurück");
        }
        else
        {
            ShowPlayerDialog(playerid,DIALOG_POST,DIALOG_STYLE_LIST,"Post","Ungelesene Post\nPost schreiben\nEmpfangene Post\nGesendete Post","Auswählen","Abbrechen");
        }
    }
    else if(dialogid==DIALOG_POST)
    {
        if(response)
        {
            if(listitem==0)
            {
                new i,pfad[64],string[2000];
                for(;i<50;i++)
                {
                    format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                    if(fexist(pfad))
                    {
                        new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                        fread(datei,briefstring);
                        fclose(datei);
                        sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                        if(klasseint==0)
                        {
                            format(string,2000,"%s, %s | Abs.: %s\n%s",datumstr,uhrzeitstr,absenderstr,string);
                        }
                    }
                }
                ShowPlayerDialog(playerid,DIALOG_POST2,DIALOG_STYLE_LIST,"Ungelesene Briefe",string,"Lesen","Zurück");
                format(postpid[playerid],300,"%s",inputtext);
            }
            else if(listitem==1)
            {
                if(CheckMoney(playerid)>=2500)
                {
                    new i,pfad[64];
                    for(;i<50;i++)
                    {
                        format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",inputtext,i);
                        if(fexist(pfad))
                        {
                        }
                        else
                        {
                            i=100;
                            break;
                        }
                    }
                    if(i==100)
                    {
                        ShowPlayerDialog(playerid,DIALOG_POST4,DIALOG_STYLE_INPUT,"Post schreiben","Geben sie den Spielernamen ein","Weiter","Zurück");
                    }
                    else
                    {
                        SendClientMessage(playerid,COLOR_RED,"Du kannst diesen Brief nicht abschicken da dein Postfach voll ist, lösche deine Briefe unter abgesendete Briefe");
                    }
                }
                else
                {
                    SendClientMessage(playerid,COLOR_RED,"Du besitzt keine 2.500$ um einen Brief zu schreiben");
                    ShowPlayerDialog(playerid,DIALOG_POST,DIALOG_STYLE_LIST,"Post","Ungelesene Post\nPost schreiben\nEmpfangene Post\nGesendete Post","Auswählen","Abbrechen");
                }
            }
            else if(listitem==2)
            {
                new i,pfad[64],string[2000];
                for(;i<50;i++)
                {
                    format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                    if(fexist(pfad))
                    {
                        new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                        fread(datei,briefstring);
                        fclose(datei);
                        sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                        if(klasseint!=0)
                        {
                            format(string,2000,"\n%s, %s | Abs.: %s\n%s",datumstr,uhrzeitstr,absenderstr,string);
                        }
                    }
                }
                strins(string,"Alle Briefe löschen\n",0);
                ShowPlayerDialog(playerid,DIALOG_POST6,DIALOG_STYLE_LIST,"Empfangene Briefe",string,"Lesen","Zurück");
                format(postpid[playerid],300,"%s",inputtext);
            }
            else if(listitem==3)
            {
                new i,pfad[64],string[2000];
                for(;i<50;i++)
                {
                    format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",GetName(playerid),i);
                    if(fexist(pfad))
                    {
                        new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                        fread(datei,briefstring);
                        fclose(datei);
                        sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                        format(string,2000,"\n%s, %s | Empf.: %s\n%s",datumstr,uhrzeitstr,empfangsstr,string);
                    }
                }
                strins(string,"Alle Briefe löschen\n",0);
                ShowPlayerDialog(playerid,DIALOG_POST9,DIALOG_STYLE_LIST,"Gesendete Briefe",string,"Lesen","Zurück");
                format(postpid[playerid],300,"%s",inputtext);
            }
        }
    }
    else if(dialogid==DIALOG_POST9)
    {
        if(response)
        {
            if(listitem==0)
            {
                new i,pfad[64];
                for(;i<50;i++)
                {
                    format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",GetName(playerid),i);
                    if(fexist(pfad))
                    {
                        ShowPlayerDialog(playerid,DIALOG_POST10,DIALOG_STYLE_MSGBOX,"Alle Briefe löschen","Bist du dir sicher dass du alle gesendeten Briefe löschen möchtest?","Ja","Nein");
                        break;
                    }
                    else if(i==49)
                    {
                        SendClientMessage(playerid,COLOR_RED,"Du hast keinen abgesendeten Brief den du löschen kannst");
                    }
                }
            }
            else
            {
                new i,pfad[64],string[300],str[100],str2[1000];
                for(;i<50;i++)
                {
                    format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",GetName(playerid),i);
                    if(fexist(pfad))
                    {
                        new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[520],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                        fread(datei,briefstring);
                        fclose(datei);
                        sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                        format(string,300,"%s, %s | Empf.: %s",datumstr,uhrzeitstr,empfangsstr);
                        if(strcmp(inputtext,string,false)==0)
                        {
                            i=100;
                            format(str,100,"Brief an %s",empfangsstr);
                            for(new leerzeichen;leerzeichen<1000;leerzeichen++)
                            {
                                if(strfind(textinhaltstr,"?",true)!=-1)
                                {
                                    strins(textinhaltstr," ",strfind(textinhaltstr,"?",true));
                                    strdel(textinhaltstr,strfind(textinhaltstr,"?",true),strfind(textinhaltstr,"?",true)+1);
                                }
                                else
                                {
                                    leerzeichen=1000;
                                }
                            }
                            if(strlen(textinhaltstr)>450)
                            {
                                strins(textinhaltstr,"\n",450);
                                strins(textinhaltstr,"\n",300);
                                strins(textinhaltstr,"\n",150);
                            }
                            else if(strlen(textinhaltstr)>300)
                            {
                                strins(textinhaltstr,"\n",300);
                                strins(textinhaltstr,"\n",150);
                            }
                            else if(strlen(textinhaltstr)>150)
                            {
                                strins(textinhaltstr,"\n",150);
                            }
                            format(str2,1000,"An: %s\nDatum: %s %s\n\nNachricht:\n%s",empfangsstr,datumstr,uhrzeitstr,textinhaltstr);
                            format(postpsenden[playerid],MAX_PLAYER_NAME,"%s",absenderstr);
                            format(postpid[playerid],300,"%s",inputtext);
                            ShowPlayerDialog(playerid,DIALOG_POST11,DIALOG_STYLE_MSGBOX,str,str2,"Löschen","Zurück");
                            break;
                        }
                    }
                }
            }
        }
        else
        {
            ShowPlayerDialog(playerid,DIALOG_POST,DIALOG_STYLE_LIST,"Post","Ungelesene Post\nPost schreiben\nEmpfangene Post\nGesendete Post","Auswählen","Abbrechen");
        }
    }
    else if(dialogid==DIALOG_POST6)
    {
        if(response)
        {
            if(listitem==0)
            {
                for(new i;i<50;i++)
                {
                    new pfad[64];
                    format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                    if(fexist(pfad))
                    {
                        new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[520],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                        fread(datei,briefstring);
                        fclose(datei);
                        sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                        if(klasseint!=0)
                        {
                            ShowPlayerDialog(playerid,DIALOG_POST8,DIALOG_STYLE_MSGBOX,"Alle Briefe löschen","Bist du dir sicher dass du alle empfangenen Briefe (nicht ungelesene) löschen möchtest?","Ja","Nein");
                        }
                    }
                    else if(i==49)
                    {
                        SendClientMessage(playerid,COLOR_RED,"Du hast keinen empfangenen Brief den du löschen kannst");
                    }
                }
            }
            else
            {
                new i,pfad[64],string[300],str[100],str2[1000];
                for(;i<50;i++)
                {
                    format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                    if(fexist(pfad))
                    {
                        new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[520],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                        fread(datei,briefstring);
                        fclose(datei);
                        sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                        if(klasseint!=0)
                        {
                            format(string,300,"%s, %s | Abs.: %s",datumstr,uhrzeitstr,absenderstr);
                            if(strcmp(inputtext,string,false)==0)
                            {
                                i=100;
                                format(str,100,"Brief von %s",absenderstr);
                                for(new leerzeichen;leerzeichen<1000;leerzeichen++)
                                {
                                    if(strfind(textinhaltstr,"?",true)!=-1)
                                    {
                                        strins(textinhaltstr," ",strfind(textinhaltstr,"?",true));
                                        strdel(textinhaltstr,strfind(textinhaltstr,"?",true),strfind(textinhaltstr,"?",true)+1);
                                    }
                                    else
                                    {
                                        leerzeichen=1000;
                                    }
                                }
                                if(strlen(textinhaltstr)>450)
                                {
                                    strins(textinhaltstr,"\n",450);
                                    strins(textinhaltstr,"\n",300);
                                    strins(textinhaltstr,"\n",150);
                                }
                                else if(strlen(textinhaltstr)>300)
                                {
                                    strins(textinhaltstr,"\n",300);
                                    strins(textinhaltstr,"\n",150);
                                }
                                else if(strlen(textinhaltstr)>150)
                                {
                                    strins(textinhaltstr,"\n",150);
                                }
                                format(str2,1000,"Von: %s\nDatum: %s %s\n\nNachricht:\n%s",absenderstr,datumstr,uhrzeitstr,textinhaltstr);
                                break;
                            }
                        }
                    }
                }
                ShowPlayerDialog(playerid,DIALOG_POST7,DIALOG_STYLE_MSGBOX,str,str2,"Löschen","Zurück");
                format(postpid[playerid],300,"%s",inputtext);
            }
        }
        else
        {
            ShowPlayerDialog(playerid,DIALOG_POST,DIALOG_STYLE_LIST,"Post","Ungelesene Post\nPost schreiben\nEmpfangene Post\nGesendete Post","Auswählen","Abbrechen");
        }
    }
    else if(dialogid==DIALOG_POST8)
    {
        if(response)
        {
            new i,pfad[64];
            ShowPlayerDialog(playerid,DIALOG_POST,DIALOG_STYLE_LIST,"Post","Ungelesene Post\nPost schreiben\nEmpfangene Post\nGesendete Post","Auswählen","Abbrechen");
            SendClientMessage(playerid,COLOR_YELLOW,"Es wurden erfolgreich alle empfangenen Briefe gelöscht");
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[520],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    if(klasseint!=0)
                    {
                        fremove(pfad);
                    }
                }
            }
        }
        else
        {
            new i,pfad[64],string[2000];
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    if(klasseint!=0)
                    {
                        format(string,2000,"\n%s, %s | Abs.: %s\n%s",datumstr,uhrzeitstr,absenderstr,string);
                    }
                }
            }
            strins(string,"Alle Briefe löschen\n",0);
            ShowPlayerDialog(playerid,DIALOG_POST6,DIALOG_STYLE_LIST,"Empfangene Briefe",string,"Lesen","Zurück");
            format(postpid[playerid],300,"%s",inputtext);
        }
    }
    else if(dialogid==DIALOG_POST7)
    {
        if(response)
        {
            for(new i;i<50;i++)
            {
                new pfad[64],string[300];
                format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[520],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    if(klasseint!=0)
                    {
                        format(string,300,"%s, %s | Abs.: %s",datumstr,uhrzeitstr,absenderstr);
                        if(strcmp(postpid[playerid],string,false)==0)
                        {
                            i=100;
                            fremove(pfad);
                            SendClientMessage(playerid,COLOR_YELLOW,"Der Brief wurde erfolgreich gelöscht");
                            break;
                        }
                    }
                }
            }
        }
        else
        {
            new i,pfad[64],string[2000];
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    if(klasseint!=0)
                    {
                        format(string,2000,"\n%s, %s | Abs.: %s\n%s",datumstr,uhrzeitstr,absenderstr,string);
                    }
                }
            }
            strins(string,"Alle Briefe löschen\n",0);
            ShowPlayerDialog(playerid,DIALOG_POST6,DIALOG_STYLE_LIST,"Empfangene Briefe",string,"Lesen","Zurück");
        }
    }
    else if(dialogid==DIALOG_POST10)
    {
        if(response)
        {
            new i,pfad[64];
            ShowPlayerDialog(playerid,DIALOG_POST,DIALOG_STYLE_LIST,"Post","Ungelesene Post\nPost schreiben\nEmpfangene Post\nGesendete Post","Auswählen","Abbrechen");
            SendClientMessage(playerid,COLOR_YELLOW,"Es wurden erfolgreich alle gesendeten Briefe gelöscht");
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    fremove(pfad);
                }
            }
        }
        else
        {
            new i,pfad[64],string[2000];
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    format(string,2000,"\n%s, %s | Empf.: %s\n%s",datumstr,uhrzeitstr,empfangsstr,string);
                }
            }
            strins(string,"Alle Briefe löschen\n",0);
            ShowPlayerDialog(playerid,DIALOG_POST6,DIALOG_STYLE_LIST,"Gesendete Briefe",string,"Lesen","Zurück");
        }
    }
    else if(dialogid==DIALOG_POST11)
    {
        if(response)
        {
            for(new i;i<50;i++)
            {
                new pfad[64],string[300];
                format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[520],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    format(string,300,"%s, %s | Empf.: %s",datumstr,uhrzeitstr,empfangsstr);
                    if(strcmp(postpid[playerid],string,false)==0)
                    {
                        i=100;
                        fremove(pfad);
                        SendClientMessage(playerid,COLOR_YELLOW,"Der Brief wurde erfolgreich gelöscht");
                        break;
                    }
                }
            }
        }
        else
        {
            new i,pfad[64],string[2000];
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Abgesendete Briefe/Brief%i.txt",GetName(playerid),i);
                if(fexist(pfad))
                {
                    new absenderstr[32],empfangsstr[32],datumstr[20],uhrzeitstr[20],textinhaltstr[500],loschinta,loschinte,klasseint,briefstring[1000],File:datei=fopen(pfad,io_read);
                    fread(datei,briefstring);
                    fclose(datei);
                    sscanf(briefstring,"sssssiii",absenderstr,empfangsstr,datumstr,uhrzeitstr,textinhaltstr,loschinta,loschinte,klasseint);
                    format(string,2000,"\n%s, %s | Empf.: %s\n%s",datumstr,uhrzeitstr,empfangsstr,string);
                }
            }
            strins(string,"Alle Briefe löschen\n",0);
            ShowPlayerDialog(playerid,DIALOG_POST9,DIALOG_STYLE_LIST,"Gesendete Briefe",string,"Lesen","Zurück");
        }
    }
    else if(dialogid==DIALOG_POST4)
    {
        if(response)
        {
            if(strlen(inputtext)>=1)
            {
                new query[256];
                format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s'",inputtext);
                format(postpsenden[playerid],MAX_PLAYER_NAME,"%s",inputtext);
                mysql_pquery(query , THREAD_POSTCHANGE , playerid, gSQL,MySQLThreadOwner);
            }
            else
            {
                ShowPlayerDialog(playerid,DIALOG_POST4,DIALOG_STYLE_INPUT,"Post schreiben","Geben sie den Spielernamen ein","Weiter","Zurück");
            }
        }
        else
        {
            ShowPlayerDialog(playerid,DIALOG_POST,DIALOG_STYLE_LIST,"Post","Ungelesene Post\nPost schreiben\nEmpfangene Post\nGesendete Post","Auswählen","Abbrechen");
        }
    }
    else if(dialogid==DIALOG_POST5)
    {
        if(response)
        {
            if(strlen(inputtext)>=1)
            {
                if(strlen(inputtext)<=500)
                {
                    CreateBrief(GetName(playerid),postpsenden[playerid],inputtext);
                    GivePlayerCash(playerid,-2500);
                }
                else
                {
                    new string[50];
                    format(string,50,"Maximal 500 Zeichen, es waren {FF0000}%i",strlen(inputtext));
                    SendClientMessage(playerid,COLOR_YELLOW,string);
                    ShowPlayerDialog(playerid,DIALOG_POST5,DIALOG_STYLE_INPUT,"Post schreiben","Geben sie den Text ein (maximal 500 Zeichen)","Weiter","Zurück");
                }
            }
            else
            {
                ShowPlayerDialog(playerid,DIALOG_POST5,DIALOG_STYLE_INPUT,"Post schreiben","Geben sie den Text ein (maximal 500 Zeichen)","Weiter","Zurück");
            }
        }
        else
        {
            ShowPlayerDialog(playerid,DIALOG_POST4,DIALOG_STYLE_INPUT,"Post schreiben","Geben sie den Spielernamen ein","Weiter","Zurück");
        }
    }
    switch(dialogid)
    {
        /*
        case DIALOG_PEILSENDER_LISTE: {
            if(response) {
                Spieler[playerid][pPeilsenderTemp] = listitem;
                ShowPeilsender(playerid,1);
            }
            else {
                Spieler[playerid][pPeilsenderTemp] = -1;
            }
        }
        case DIALOG_PEILSENDER_KAUFEN: {
            if(response) {
                new
                    index,
                    slot,
                    vehicleid;
                vehicleid = GetPlayerVehicleID(playerid);
                index = ( Spieler[playerid][pPeilsenderTemp] - 1 );
                if( CheckMoney(playerid) < g_Peilsender[index][P_iPrice] ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld um diesen Peilsender zu kaufen");
                }
                if(!vehicleid) {
                    return SendClientMessage(playerid,COLOR_RED,"Du musst in deinem Privatfahrzeug sitzen!");
                }
                if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
                    return SendClientMessage(playerid,COLOR_RED,"Nur als Fahrer kannst du diese Funktion ausführen");
                }
                if( playerid != GetCarOwner(vehicleid) ) {
                    return SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug gehört dir nicht!");
                }
                slot = GetCarOwnerSlot(playerid, vehicleid);
                if( slot == 555 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug gehört dir nicht!");
                }
                new
                    String[128];
                PlayerCar[playerid][slot][CarPeilsender] = index;
                CreatePeilsender(playerid,slot);
                format(String,sizeof(String),"Peilsender %s dem Fahrzeug hinzugefügt!", g_Peilsender[index][P_sText] );
                SendClientMessage(playerid,COLOR_GREEN,String);
                GivePlayerCash(playerid,-g_Peilsender[index][P_iPrice]);
            }
            else {
                ShowPeilsender(playerid);
            }
        }
        */
        case DIALOG_WARTUNG: {
            if(response) {
                new
                    besitzer,
                    vehicleid;
                vehicleid = GetPlayerVehicleID(playerid);
                if(!vehicleid) {
                    return SendClientMessage(playerid,COLOR_RED,"Du benötigst ein Fahrzeug.");
                }
                besitzer = GetCarOwner(vehicleid);
                if( besitzer == INVALID_PLAYER_ID || playerid != besitzer ) {
                    return SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug gehört dir nicht.");
                }
                new
                    slot = GetCarOwnerSlot(playerid, vehicleid);
                if( PlayerCar[besitzer][slot][TUV] == 0 || IsBicycle(GetVehicleModel(vehicleid))) {
                    return SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug benötigt keine Wartung vom TÜV.");
                }
                if( Spieler[playerid][pCash] < 25000) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld um die TÜV Wartung in Höhe von $25.000 zu begleichen.");
                }
                Spieler[playerid][pCash] -= 25000;
                SendClientMessage(playerid,COLOR_YELLOW,"Dein Fahrzeug hat TÜV bestanden. Gute Fahrt! (-$25.000).");
                PlayerCar[besitzer][slot][TUV] = 0;
            }
        }
        case DIALOG_REGSPERRE: {
            return Kick(playerid);
        }
        case DIALOG_HAUSMENU_EMPTY: {
            return cmd_hausmenu(playerid,"");
        }
        case DIALOG_PASSWORD_UPDATE: {
            if(response) {
                if( !IsSecurePassword(inputtext) ) {
                    return ShowPlayerDialog(playerid,DIALOG_PASSWORD_UPDATE,DIALOG_STYLE_INPUT,"Passwort Update","{FF0044}Dein Passwort ist nicht sicher genug!{FFFFFF}\n\nBitte aktualisiere dein Passwort:\n\n8 Buchstaben, davon 2 Zahlen\n\nHINWEIS: Dein Passwort sollte keine persönlichen Daten beinhaltet,\nsondern dein Passwort, sollte frei gewählt sein!","Speichern","");
                }
                new
                    escaped_password[30];
                mysql_real_escape_string( inputtext, escaped_password );
                if( strcmp( inputtext , escaped_password ) ) {
                    return ShowPlayerDialog(playerid,DIALOG_PASSWORD_UPDATE,DIALOG_STYLE_INPUT,"Passwort Update","{FF0044}Dein Passwort ist nicht sicher genug!{FFFFFF}\n\nBitte aktualisiere dein Passwort:\n\n8 Buchstaben, davon 2 Zahlen\n\nHINWEIS: Dein Passwort sollte keine persönlichen Daten beinhaltet,\nsondern dein Passwort, sollte frei gewählt sein!","Speichern","");
                }
                UpdateUserPassword(playerid,inputtext);
            }
            else {
                ShowPlayerDialog(playerid,DIALOG_PASSWORD_UPDATE,DIALOG_STYLE_INPUT,"Passwort Update","{FF0044}Dein Passwort ist nicht sicher genug!{FFFFFF}\n\nBitte aktualisiere dein Passwort:\n\n8 Buchstaben, davon 2 Zahlen\n\nHINWEIS: Dein Passwort sollte keine persönlichen Daten beinhaltet,\nsondern dein Passwort, sollte frei gewählt sein!","Speichern","");
            }
        }
        case DIALOG_HAUSMENU_MOEBEL_EDIT: {
            if(response) {
                new
                    h,
                    index;
                if( sscanf(inputtext,"p<)>d{S[64]}",index) ) {
                    printf("Fehler bei sscanf DIALOG_HAUSMENU_MOEBEL_EDIT");
                }
                h = Spieler[playerid][pPlayerHouse];
                Streamer_Update(playerid);
                EditDynamicObject(playerid,g_HausMoebelObjekt[h][index][HMO_iObjectID]);
                Streamer_Update(playerid);
                Spieler[playerid][pEditObjectMode] = 1;
                // Listitem auslesen
                return 1;
            }
            else {
                return cmd_hausmenu(playerid,"");
            }
        }
        case DIALOG_HAUSMENU_MOEBEL_BUY_ITEM_CONFIRM: {
            if(response) {
                new
                    String[200],
                    Float:x,
                    Float:y,
                    Float:z,
                    h,
                    index,
                    item,
                    slot;
                h = Spieler[playerid][pPlayerHouse];
                slot = GetHausMoebelFreeSlot(h);
                item = Spieler[playerid][pTempMoebelID];
                index = GetHausMoebelIndex(item);
                if( Spieler[playerid][pCash] < g_HausMoebel[index][HM_iModelID] ) {
                    ShowPlayerHausMoebel(playerid,5);
                    SendClientMessage(playerid,COLOR_RED,"Du besitzt nicht genug Geld um dieses Möbelstück zu kaufen");
                    return 1;
                }
                GetPlayerPos(playerid,x,y,z);
                Spieler[playerid][pEditObjectMode] = 1;
                // HMO_iID,
                // HMO_iHouseID,
                g_HausMoebelObjekt[h][slot][HMO_iMoebelID] = item;
                g_HausMoebelObjekt[h][slot][HMO_iObjectID] = CreateDynamicObject(  g_HausMoebel[index][HM_iModelID], x + 0.3, y + 0.3, z + 0.75,0.0,0.0,0.0, GetPlayerVirtualWorld(playerid) , GetPlayerInterior(playerid) );
                Streamer_SetIntData(STREAMER_TYPE_OBJECT,g_HausMoebelObjekt[h][slot][HMO_iObjectID],E_STREAMER_EXTRA_ID,slot);
                Streamer_Update(playerid);
                EditDynamicObject(playerid,g_HausMoebelObjekt[h][slot][HMO_iObjectID]);
                Streamer_Update(playerid);
                format(String,sizeof(String),"Du hast folgendes Möbelstück gekauft: %s (-$%s)",g_HausMoebel[index][HM_sTitel], AddDelimiters(g_HausMoebel[index][HM_iPrice]));
                SendClientMessage(playerid,COLOR_YELLOW,String);
                GivePlayerCash(playerid, -g_HausMoebel[index][HM_iPrice]);

                // DB ID holen
                format(String,sizeof(String),"INSERT INTO `hausmoebel` (`id`, `houseid`, `moebelid`, `x`, `y`, `z`, `rx`, `ry`, `rz`) \
                                            VALUES (NULL, '%d', '%d', '%.3f', '%.3f', '%.3f', '%.3f', '%.3f', '%.3f')",
                                            GetHouseIDByIndex(h),item,0.0,0.0,0.0,0.0,0.0,0.0);
                mysql_oquery( String ,  THREAD_CREATEHAUSMOEBEL , Hausmoebel_Compress(h,slot) ,gSQL);
            }
            else {
                return ShowPlayerHausMoebel(playerid,5);
            }
        }
        case DIALOG_HAUSMENU_MOEBEL_SELL_CONFIRM: {
            if(response) {
                // Verkauft!
                new
                    String[128],
                    item,
                    h,
                    moebel_index,
                    index,
                    payback;
                h = Spieler[playerid][pPlayerHouse];
                index = Spieler[playerid][pTempMoebelID];
                item = g_HausMoebelObjekt[h][index][HMO_iMoebelID];
                moebel_index = GetHausMoebelIndex(item);
                payback = g_HausMoebel[index][HM_iPrice];
                Spieler[playerid][pCash] += payback;
                format(String,sizeof(String),"Du hast erfolgreich folgendes Möbelstück verkauft: %s (+$%s)",g_HausMoebel[moebel_index][HM_sTitel], AddDelimiters(payback));
                SendClientMessage(playerid,COLOR_GREEN,String);
                format(String,sizeof(String),"DELETE FROM `hausmoebel` WHERE `id` = %d", g_HausMoebelObjekt[h][index][HMO_iID]);
                mysql_oquery( String , THREAD_DELETEHAUSMOEBEL , playerid ,gSQL);
                Hausmoebel_ResetHausMoebel(h,index);
            }
            else {
                ShowPlayerHausMoebel(playerid,0);
            }
            return 1;
        }
        case DIALOG_HAUSMENU_MOEBEL_SELL: {
            if(response) {
                new
                    index;
                if( sscanf(inputtext,"p<)>d{S[64]}",index) ) {
                    printf("Fehler bei sscanf DIALOG_HAUSMENU_MOEBEL_SELL");
                }
                Spieler[playerid][pTempMoebelID] = index;
                ShowPlayerHausMoebel(playerid,3);
            }
            else {
                return cmd_hausmenu(playerid,"");
            }
        }
        case DIALOG_HAUSMENU_MOEBEL_BUY_ITEM: {
            if(response) {
                new
                    item = GetMoebelKategorieItem(Spieler[playerid][pTempMoebelKategorie],listitem);
                Spieler[playerid][pTempMoebelID] = item;
                return ShowPlayerHausMoebel(playerid,6);
            }
            else {
                return ShowPlayerHausMoebel(playerid,2);
            }
        }
        case DIALOG_HAUSMENU_MOEBEL_BUY_KAT: {
            if(response) {
                Spieler[playerid][pTempMoebelKategorie] = listitem + 1;
                ShowPlayerHausMoebel(playerid,5);
            }
            else {
                return cmd_hausmenu(playerid,"");
            }
        }
        case DIALOG_HAUSMOEBEL_KATALOG_EX: {
            return ShowHausMoebelKatalog(playerid,0);
        }
        case DIALOG_HAUSMOEBEL_KATALOG: {
            if(response) {
                return ShowHausMoebelKatalog(playerid,listitem + 1);
            }
            else {
                return cmd_hausmenu(playerid,"");
            }
        }
        case DIALOG_HAUSMENU_MIETPREIS: {
            if(response) {
                cmd_mietpreis(playerid,inputtext);
            }
            else {
                return cmd_hausmenu(playerid,"");
            }
        }
        case DIALOG_HAUSMENU_MIETERANZAHL: {
            if(response)
            {
                new h = GetPlayerHouse(playerid);
                if( h == 999)return SendClientMessage(playerid, COLOR_RED, "Du besitzt kein Haus!");
                /*
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Hauses.");
                */
                if( Spieler[playerid][pPlayerHouse] != h ) {
                    return SendClientMessage(playerid,COLOR_RED,"Dieses Haus gehört nicht dir!");
                }
                if( !IsPlayerInHouse(playerid, Haus[h][hID]) ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht in deinem Haus");
                }
                new anzahl;
                if(sscanf(inputtext,"d",anzahl)) return SendClientMessage(playerid, COLOR_RED, "Wert muss zwischen 1 und 10 liegen");
                if( anzahl < 1 || anzahl > 10 ) return SendClientMessage(playerid, COLOR_RED, "Wert muss zwischen 1 und 10 liegen");
                if( anzahl < Haus[h][hMieterAnzahl] ) return SendClientMessage(playerid, COLOR_RED, "Es sind zu viele Spieler in das Haus eingemietet, um die Grenze auf diesen Wert festzulegen");
                new Str[80];
                format(Str, sizeof(Str), "Die maximale Anzahl an Mietern wurde auf %d geändert", anzahl);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                Haus[h][hMieterMax] = anzahl;
                UpdateHouseText(h);
            }
            return cmd_hausmenu(playerid,"");
        }
        case DIALOG_HAUSMENU: {
            if(response) {
                new pHouse = GetPlayerHouse(playerid);
                if( Spieler[playerid][pPlayerHouse] != pHouse ) {
                    return SendClientMessage(playerid, COLOR_RED, "Dieses Haus gehört nicht dir.");
                }
                if( !IsPlayerInHouse(playerid, Haus[pHouse][hID]) ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht in deinem Haus");
                }

                if(listitem == 0 ) { // Haustuer AUF/ZU
                    if( Haus[pHouse][hLock] == 0 ) {
                        cmd_haustuer(playerid,"ZU");
                    }
                    else {
                        cmd_haustuer(playerid,"AUF");
                    }
                    return cmd_hausmenu(playerid,"");
                }
                else if(listitem == 1 ) { // Mietstatus: AN/AUS
                    new rentable[12];
                    if(Haus[pHouse][hMieten]==0){
                        rentable="An";
                    }
                    else {
                        rentable="Aus";
                    }
                    cmd_hausmietung(playerid,rentable);
                    return cmd_hausmenu(playerid,"");
                }
                else if(listitem == 2 ) { // Mieter anzeigen
                    cmd_hausmieter(playerid,"");
                    return cmd_hausmenu(playerid,"");
                }
                else if(listitem == 3 ) { // Mieteranzahl ändern
                    new String[256];
                    format(String, sizeof(String), COLOR_HEX_WHITE"Möchtest du wirklich die maximale Anzahl an Mietern des Hauses ändern?\nDerzeitige maximale Anzahl: "COLOR_HEX_ORANGE"%d"COLOR_HEX_WHITE"\nDerzeitige Mieter Anzahl: "COLOR_HEX_ORANGE"%d", Haus[pHouse][hMieterMax], Haus[pHouse][hMieterAnzahl]);
                    ShowPlayerDialog(playerid, DIALOG_HAUSMENU_MIETERANZAHL, DIALOG_STYLE_INPUT, "Anzahl Hausmieter", String, "Ändern", "Abbrechen");
                }
                else if(listitem == 4 ) { // Mietpreis ändern
                    new String[256];
                    format(String, sizeof(String), COLOR_HEX_WHITE"Möchtest du wirklich den aktuellen Mitpreis ändern?\nDerzeitiger Mietpreis: "COLOR_HEX_ORANGE"%d"COLOR_HEX_WHITE, Haus[pHouse][hMietPreis]);
                    ShowPlayerDialog(playerid, DIALOG_HAUSMENU_MIETPREIS, DIALOG_STYLE_INPUT, "Höhe Mietpreis", String, "Ändern", "Abbrechen");
                }
                else if(listitem == 5 ) { // Möbelkatalog
                    return ShowHausMoebelKatalog(playerid,0);
                }
                else if(listitem == 6 ) { // Möbel aufbauen/umstellen
                    return ShowPlayerHausMoebel(playerid,2);
                }
                else if(listitem == 7 ) { // Möbel bearbeiten
                    return ShowPlayerHausMoebel(playerid,7);
                }
                else if(listitem == 8 ) { // Möbel verkaufen
                    return ShowPlayerHausMoebel(playerid,0);
                }
            }
        }
        case DIALOG_PARKSCHEIN: {
            if(response) {
                new automat = IsPlayerAtParkautomat(playerid);
                if(automat == 999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keinem Parkschein Automat.");
                if(!PlayerHaveCar[playerid][PlayerKey[playerid]]) SendClientMessage(playerid, COLOR_RED, "Auf dem ausgewählten Schlüssel ist kein Fahrzeug.");
                new vehicleid = PlayerCar[playerid][ PlayerKey[playerid] ][CarId];
                if(vehicleid == INVALID_VEHICLE_ID) return SendClientMessage(playerid, COLOR_RED, "Es ist ein unerwarteter Fehler aufgetreten");
                if( g_Parkschein[vehicleid] > gettime() ) return SendClientMessage(playerid, COLOR_RED, "Dieses Fahrzeug hat bereits einen gültigen Parkschein");
                if(Spieler[playerid][pCash] < 300) return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht die benötigten 300$ für ein Parkschein");
                new
                    String[128];
                format(String,sizeof(String),"Du hast einen Parkschein für dein %s gekauft. -300$", CarName[ PlayerCar[playerid][ PlayerKey[playerid] ][CarModel] - 400] );
                SendClientMessage(playerid,COLOR_ORANGE,String);
                g_Parkschein[vehicleid] = gettime() + 3*60*60;
                GivePlayerCash(playerid,-300);
            }
        }
        case DIALOG_SNACKSHOP: {
            if(response) {
                if (listitem < 0) return SendClientMessage(playerid, COLOR_RED, "Keine gültige Auswahl.");
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keiner Tanke!");
                if(strcmp(Tanke[t][tBesitzer], "Niemand", true) == 0)return SendClientMessage(playerid, COLOR_RED, "Die Tankstelle hat keinen Besitzer.");
                if (listitem == 0)
                {
                    new price = 5000;
                    if( Spieler[playerid][pCash] < price ) return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld für einen Power Riegel.");
                    if ( Spieler[playerid][pPowerRiegel] >= 20) return SendClientMessage(playerid, COLOR_RED,"Du kannst keine Power Riegel mehr kaufen.");
                    new String[128];
                    Spieler[playerid][pPowerRiegel] ++;
                    GivePlayerCash(playerid, -price);
                    Tanke[t][tKasse] += price*20/100;
                    format(String,sizeof(String),"Du hast dir einen Power-Riegel für $%d gekauft. +%d HP", price);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
                if (listitem == 1)
                {
                    new price = 20000;
                    if( Spieler[playerid][pCash] < price ) return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld für einen Booster.");
                    if ( Spieler[playerid][pBooster] >= 4) return SendClientMessage(playerid, COLOR_RED,"Du kannst keine Booster mehr kaufen.");
                    new String[128];
                    Spieler[playerid][pBooster] ++;
                    GivePlayerCash(playerid, -price);
                    Tanke[t][tKasse] += price*40/100;
                    format(String,sizeof(String),"Du hast dir einen Booster für $%d gekauft. +%d HP", price);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
                if (listitem == 2) 
                {
                    if (Spieler[playerid][pKanister] >= MAX_CANISTER) return SendClientMessage(playerid, COLOR_RED, "Du hast bereits " #MAX_CANISTER " Kanister.");
                    if (Tanke[t][tBenzin] < 10) return SendClientMessage(playerid, COLOR_RED, "Die Tankstelle hat zu wenig Benzin dafür.");
                    if (Spieler[playerid][pCash] < 20000) return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dafür.");
                    GivePlayerCash(playerid, -20000);
                    Tanke[t][tKasse] += 20000*20/100;
                    Spieler[playerid][pKanister]++;
                    return SendClientMessage(playerid, COLOR_YELLOW, "Du hast dir einen Kanister mit 10 Litern für $20.000 gekauft.");
                }
            }
        }
        case DIALOG_WPREIS: {
            if(response) {
                // Hat bestätigt
                new
                    String[128],
                    giveid,
                    modus;
                giveid = Spieler[playerid][pFLehrer];
                modus = Spieler[playerid][pFModus];
                if( Spieler[playerid][pCash] < g_WheelmenD[modus][W_iPrice] ) {
                    SendClientMessage(giveid,COLOR_RED,"Der Spieler konnte das Angebot nicht annehmen.");
                    return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld auf der Hand für dieses Angebot.");
                }
                /*
                if( Spieler[playerid][ g_FahrPruefung[modus][FP_iVar] ] ) {
                    SendClientMessage(giveid,COLOR_RED,"Der Spieler konnte das Angebot nicht annehmen");
                    return SendClientMessage(playerid,COLOR_RED,"Du hast bereits die Lizenz");
                }
                */
                new provision = floatround(g_WheelmenD[modus][W_iPrice] / 5, floatround_ceil);
                Kasse[Wheelmenk] += g_WheelmenD[modus][W_iPrice] - provision;
                GivePlayerCash(giveid, provision);
                GivePlayerCash(playerid, -g_WheelmenD[modus][W_iPrice]);
                format(String,sizeof(String),"Spieler %s hat das Angebot zum %s angenommen.",GetName(playerid), g_WheelmenD[modus][W_sName]);
                SendClientMessage(giveid,COLOR_GREEN,String);
                SCMFormatted(giveid, COLOR_ORANGE, "Du hast $%s Provision erhalten.", AddDelimiters(provision));
                SCMFormatted(playerid, COLOR_GREEN, "Du hast das Angebot zum %s angenommen.", g_WheelmenD[modus][W_sName]);
            }
            else {
                new
                    String[128],
                    giveid,
                    modus;
                giveid = Spieler[playerid][pFLehrer];
                modus = Spieler[playerid][pFModus];
                format(String,sizeof(String),"Spieler %s hat dein Angebot abgelehnt. Leistung: %s",GetName(playerid),g_WheelmenD[modus][W_sName]);
                SendClientMessage(giveid,COLOR_ORANGE,String);
            }
            Spieler[playerid][pFLehrer] = INVALID_PLAYER_ID;
        }
        case DIALOG_FPREIS: {
            if(response) {
                // Hat bestätigt
                new
                    String[128],
                    giveid,
                    modus;
                giveid = Spieler[playerid][pFLehrer];
                modus = Spieler[playerid][pFModus];
                if( Spieler[playerid][pCash] < g_FahrPruefung[modus][FP_iPrice] ) {
                    SendClientMessage(giveid,COLOR_RED,"Der Spieler konnte das Angebot nicht annehmen");
                    return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld auf der Hand für dieses Angebot");
                }
                /*
                if( Spieler[playerid][ g_FahrPruefung[modus][FP_iVar] ] ) {
                    SendClientMessage(giveid,COLOR_RED,"Der Spieler konnte das Angebot nicht annehmen");
                    return SendClientMessage(playerid,COLOR_RED,"Du hast bereits die Lizenz");
                }
                */
                Kasse[Fahrschule] += g_FahrPruefung[modus][FP_iPrice];
                GivePlayerCash(playerid, -g_FahrPruefung[modus][FP_iPrice] );
                format(String,sizeof(String),"Spieler %s hat das Angebot zum %s angenommen",GetName(playerid), g_FahrPruefung[modus][FP_sName]);
                SendClientMessage(giveid,COLOR_GREEN,String);
                fahrlehrerboni[giveid] += 1000;
            }
            else {
                new
                    String[128],
                    giveid,
                    modus;
                giveid = Spieler[playerid][pFLehrer];
                modus = Spieler[playerid][pFModus];
                format(String,sizeof(String),"Spieler %s hat dein Angebot zur %s Prüfung abgelehnt",GetName(playerid),g_FahrPruefung[modus][FP_sName]);
                SendClientMessage(giveid,COLOR_ORANGE,String);
            }
            Spieler[playerid][pFLehrer] = INVALID_PLAYER_ID;
        }
        case DIALOG_GUTSCHEINCODE: {
            if(response) {
                new
                    clean_inputtext[64],
                    Query[128];
                mysql_real_escape_string(inputtext,clean_inputtext);
                PlayerSQLExtra(playerid,clean_inputtext);
                format(Query,sizeof(Query),"SELECT * FROM `gutschein` WHERE `code` = '%s'",clean_inputtext);
                mysql_pquery( Query , THREAD_GUTSCHEINCODE_CHECK , playerid, gSQL,MySQLThreadOwner);
            }
        }
        case DIALOG_FIRMENINFO: {
            if(response) {
                new String[1024];
                String = "Firma\tBesitzer\tGehalt\n";
                for(new i ; i < sizeof(g_Firma);i++) {
                    format(String,sizeof(String),"%s ID: %d %s\t%s\t$%s\n",String,i+1,g_Firma[i][F_sBezeichnung],g_Firma[i][F_sBesitzer], AddDelimiters(g_Firma[i][F_iGehalt]));
                }
                ShowPlayerDialog(playerid,DIALOG_FIRMENUEBERSICHT,DIALOG_STYLE_TABLIST_HEADERS,"Firmenübersicht",String,"Schließen","");
            }
        }
        case DIALOG_ZOLLPASS: {
            if(response) {
                if( Spieler[playerid][pCash] < 45000 ) return SendClientMessage(playerid,COLOR_RED,"Der Zollpass kostet $45.000!");
                new
                    String[128],
                    year,
                    m,
                    d,
                    h,
                    minute,
                    sec;
                Spieler[playerid][pZollValid] = gettime() + 7*24*60*60;
                TimestampToDate( Spieler[playerid][pZollValid] , year,m,d,h,minute,sec,1,0);
                format(String,sizeof(String),"Du hast einen Zollpass der bis zum %02d/%02d/%d gültig ist für $45.000 gekauft!",d,m,year );
                SendClientMessage(playerid,COLOR_GREEN,String);
                GivePlayerCash(playerid, -15000);
                TreasuryDeposit(15000);
            }
        }
        case DIALOG_RECHTSSCHUTZ: {
            if(response) {
                if( Spieler[playerid][pCash] < 1000000  ) {
                 return SendClientMessage(playerid,COLOR_RED,"Die Rechtsschutzversicherung kostet $1.000.000. So viel Geld hast du nicht dabei.");
                }
                new
                    String[128],
                    year,
                    m,
                    d,
                    h,
                    minute,
                    sec;
                Spieler[playerid][pExperte] = gettime() + 62*24*60*60;
                TimestampToDate( Spieler[playerid][pExperte] , year,m,d,h,minute,sec,1,0);
                format(String,sizeof(String),"Du hast eine Rechtsschutzversicherung abgeschlossen! Gültig bis zum %02d/%02d/%d. Preis: $1.000.000",d,m,year );
                SendClientMessage(playerid,COLOR_GREEN,String);
                GivePlayerCash(playerid, -1000000);
                TreasuryDeposit(1000000);
            }
        }
        case DIALOG_STARTBAUER: {
            if(response) {
                if(listitem == 0 ) {
                    if(!(Spieler[playerid][pJob] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Farmer.");
                    new vID = GetPlayerVehicleID(playerid);
                    if(vID) {
                        for(new i=0;i<sizeof(combines);i++)
                        {
                            if(vID == combines[i])
                            {
                                SetPlayerCheckpointEx(playerid, 16.6802,43.9293,3.1172, 5.0, CP_HARVEST1);
                                SendClientMessage(playerid, COLOR_GREEN, "Du hast die Runde begonnen. Fahre nun die roten Kreise ab.");
                                Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                                Spieler[playerid][pCowJob] = 1;
                                return 1;
                            }
                        }
                    }
                    SendClientMessage(playerid, COLOR_YELLOW, "Begib dich zu einem Mähdräscher, um den Dienst zu starten.");
                }
                else if(listitem == 1 ) {
                    if(!(Spieler[playerid][pJob] == 1))return SendClientMessage(playerid, COLOR_RED, "Du bist kein Farmer.");

                    SendClientMessage(playerid,COLOR_YELLOW,"Begib dich zu den Kühen und melken sie.");
                    StartPlayerCow(playerid);
                    Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                    Spieler[playerid][pCowJob] = 2;
                }
            }
        }
        case DIALOG_BIZKEY: {
            if(response) {
                if(listitem == 0 ) {
                    if( Spieler[playerid][pPlayerBiz] != 999 ) {
                        new
                            String[128];
                        format(String,sizeof(String),"Dein aktives Biz ist immernoch %s.",Biz[ Spieler[playerid][pPlayerBiz] ][bName]);
                        SendClientMessage(playerid,COLOR_YELLOW,String);
                    }
                    else {
                        SendClientMessage(playerid,COLOR_RED,"Diese Aktion ist nicht möglich.");
                    }
                }
                else if( listitem == 1 ) {
                    if( Spieler[playerid][pPremiumBizSlot] == 1 ) {
                        new
                            temp;
                        temp = Spieler[playerid][pPlayerBizEx];
                        Spieler[playerid][pPlayerBizEx] = Spieler[playerid][pPlayerBiz];
                        Spieler[playerid][pPlayerBiz] = temp;
                        if ( temp != 999 ) {
                            // Keys switchen
                            new
                                String[128];
                            format(String,sizeof(String),"Du hast als aktives Biz %s ausgewählt.",Biz[ temp ][bName]);
                            SendClientMessage(playerid,COLOR_YELLOW,String);
                        }
                        else {
                            // Leeren key gewählt
                            SendClientMessage(playerid,COLOR_WHITE,"Du hast als aktives Biz einen freien Slot ausgewählt.");
                        }
                    }
                    else {
                        SendClientMessage(playerid,COLOR_RED,"Diese Aktion ist nicht möglich.");
                    }
                }
            }
        }
        case DIALOG_CLUBNEON: {
            if(response) {
                new
                    vehicleid,
                    Slot;
                vehicleid = GetPlayerVehicleID(playerid);
                if( !vehicleid ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du benötigst ein Fahrzeug für diese Funktion.");
                }
                new owner = GetCarOwner( vehicleid );
                if( owner != playerid ) {
                    return SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeug gehört nicht dir.");
                }
                Slot = GetCarOwnerSlot( playerid, vehicleid );
                if(listitem == 0 ) {
                    SendClientMessage(playerid,COLOR_RED,"Club-Neon von deinem Fahrzeug entfernt.");
                    PlayerCar[playerid][Slot][CarNeon1] = 0;
                    PlayerCar[playerid][Slot][CarNeon2] = 0;
                    DestroyDynamicObject(PlayerCar[playerid][Slot][ObjectIDNeon1]);
                    DestroyDynamicObject(PlayerCar[playerid][Slot][ObjectIDNeon2]);
                    PlayerCar[playerid][Slot][ObjectIDNeon1] = INVALID_OBJECT_ID;
                    PlayerCar[playerid][Slot][ObjectIDNeon2] = INVALID_OBJECT_ID;
                }
                else {
                    if( Spieler[playerid][pCash] < 10000 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Du besitzt nicht genug Geld. Der Preis beträgt $10.000.");
                    }
                    if(listitem == 1 ) {
                        PlayerCar[playerid][Slot][CarNeon1] = 18648;
                        PlayerCar[playerid][Slot][CarNeon2] = 18648;
                    }
                    else if(listitem == 2 ) {
                        PlayerCar[playerid][Slot][CarNeon1] = 18647;
                        PlayerCar[playerid][Slot][CarNeon2] = 18647;
                    }
                    else if(listitem == 3 ) {
                        PlayerCar[playerid][Slot][CarNeon1] = 18649;
                        PlayerCar[playerid][Slot][CarNeon2] = 18649;
                    }
                    else if(listitem == 4 ) {
                        PlayerCar[playerid][Slot][CarNeon1] = 18652;
                        PlayerCar[playerid][Slot][CarNeon2] = 18652;
                    }
                    else if(listitem == 5 ) {
                        PlayerCar[playerid][Slot][CarNeon1] = 18651;
                        PlayerCar[playerid][Slot][CarNeon2] = 18651;
                    }
                    else if(listitem == 6 ) {
                        PlayerCar[playerid][Slot][CarNeon1] = 18650;
                        PlayerCar[playerid][Slot][CarNeon2] = 18650;
                    }
                    if(PlayerCar[playerid][Slot][CarNeon1] != 0 && PlayerCar[playerid][Slot][CarNeon2] != 0){
                        DestroyDynamicObject(PlayerCar[playerid][Slot][ObjectIDNeon1]);
                        DestroyDynamicObject(PlayerCar[playerid][Slot][ObjectIDNeon2]);

                        PlayerCar[playerid][Slot][ObjectIDNeon1] = CreateDynamicObject(PlayerCar[playerid][Slot][CarNeon1], 0,0,0,0,0,0,0);
                        AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][ObjectIDNeon1] , PlayerCar[playerid][Slot][CarId], -0.8, 0.0, -0.8, 0.0, 0.0, 0.0);
                        PlayerCar[playerid][Slot][ObjectIDNeon2] = CreateDynamicObject(PlayerCar[playerid][Slot][CarNeon2], 0,0,0,0,0,0,0);
                        AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][ObjectIDNeon2] , PlayerCar[playerid][Slot][CarId], 0.8, 0.0, -0.8, 0.0, 0.0, 0.0);
                    }
                    new
                        String[128];
                    format(String,sizeof(String),"Club-Neon in der Farbe %s am Fahrzeug hinzugefügt! ( -$%s )",inputtext, AddDelimiters(10000));
                    SendClientMessage(playerid,COLOR_WHITE,String);
                    GivePlayerCash(playerid,-10000);
                }
            }
            return 1;
        }
        case DIALOG_TANKSTELLEN_VIDEO: {
            if(response) {
                new
                    tank_index = Spieler[playerid][pPlayerTank];
                if(tank_index == 999)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keine Tankstelle.");
                if(strcmp(GetName(playerid), Tanke[tank_index][tBesitzer], true) == 0)
                {
                    if(IsPlayerInRangeOfPoint(playerid, 2.0, Tanke[tank_index][EnterX], Tanke[tank_index][EnterY], Tanke[tank_index][EnterZ]))
                    {
                        if( Spieler[playerid][pCash] < 30000 ) {
                            SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dabei, um dieses Feature zu kaufen.");
                            return 1;
                        }
                        if( Tanke[tank_index][tVideoueberwachung] == true ) {
                            SendClientMessage(playerid, COLOR_RED, "Deine Tankstelle hat bereits diese Feature.");
                            return 1;
                        }
                        SendClientMessage(playerid,COLOR_GREEN,"Glückwunsch, du hast deine Tankstelle mit der Sicherheitsoption 'Videoüberwachung' ausgestattet.");
                        GivePlayerCash(playerid,-30000);
                        Tanke[tank_index][tVideoueberwachung] = true;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du musst vor deiner Tankstelle stehen.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Die Tankstelle gehört dir nicht.");
                    return 1;
                }
            }
        }
        case DIALOG_TANKSTELLEN_AUTONOTRUF: {
            if(response) {
                new
                    tank_index = Spieler[playerid][pPlayerTank];
                if(tank_index == 999)return SendClientMessage(playerid, COLOR_RED, "Du besitzt keine Tankstelle.");
                if(strcmp(GetName(playerid), Tanke[tank_index][tBesitzer], true) == 0)
                {
                    if(IsPlayerInRangeOfPoint(playerid, 2.0, Tanke[tank_index][EnterX], Tanke[tank_index][EnterY], Tanke[tank_index][EnterZ]))
                    {
                        if( Spieler[playerid][pCash] < 120000 ) {
                            SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dabei, um dieses Feature zu kaufen.");
                            return 1;
                        }
                        if( Tanke[tank_index][tAutomatischerNotruf] == true ) {
                            SendClientMessage(playerid, COLOR_RED, "Deine Tankstelle hat bereits diese Feature.");
                            return 1;
                        }
                        SendClientMessage(playerid,COLOR_GREEN,"Glückwunsch, du hast deine Tankstelle mit der Sicherheitsoption 'Automatischer Notruf' ausgestattet.");
                        GivePlayerCash(playerid,-120000);
                        Tanke[tank_index][tAutomatischerNotruf] = true;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du musst vor deiner Tankstelle stehen.");
                        return 1;
                    }
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Die Tankstelle gehört dir nicht.");
                    return 1;
                }
            }
        }
        case DIALOG_TANKSTELLEN_OPTION: {
            if(response) {
                if(listitem == 0 ) { // video
                    ShowPlayerDialog(playerid,DIALOG_TANKSTELLEN_VIDEO,DIALOG_STYLE_MSGBOX,"Tankstelle - Videoüberwachung","\
                        {FFFFFF}Durch die Installation eines Videoüberwachungssystems werden Sie bei Überfällen an Ihrer\n\
                        Tankstelle informiert, der Täter wird anhand der Aufnahmen zu erkennen sein.\n\
                        {FF0000}ACHTUNG: Sollten Sie OFFLINE sein, kann Sie das Videoüberwachungssystem nicht über den Überfall informieren!\n\n\
                        {FFFFFF}PREIS: $30.000","Kaufen","Abbruch");
                }
                else if(listitem == 1 ) { // Auto-Notruf
                    ShowPlayerDialog(playerid,DIALOG_TANKSTELLEN_AUTONOTRUF,DIALOG_STYLE_MSGBOX,"Tankstelle - Auto-Notruf","\
                       {FFFFFF} Automatischer Notruf an die Polizei:\n\
                    Durch die Installtion eines Alarmsystems wird bei einem Überfall an Ihrer Tankstelle\n\
                    automatisch ein Notruf an die Polizeizentrale gesendet.\n\
                    Das Alarmsystem läuft 24 Stunden!\n\n\
                    PREIS: $120.000","Kaufen","Abbruch");
                }
            }
        }
        case DIALOG_HAUSTIER_KAUFEN: {
            if(response) {
                listitem = Spieler[playerid][pHaustierTemp];
                if( 0 <= listitem <= 2 ) {
                    if( Spieler[playerid][pHaustier] == -1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Das Ordnungsamt hat dir ein Tierhalteverbot erteilt, daher kannst du kein Tier kaufen!");
                    }
                    else if( Spieler[playerid][pHaustier] == 0 ) {
                        new
                            preis,
                            tier[30];
                        if( listitem == 0 ) {
                            preis = 500000;
                            tier = "Hund";
                        }
                        else if(listitem == 1 ) {
                            preis = 400000;
                            tier = "Papagei";
                        }
                        else if(listitem == 2 ) {
                            preis = 300000;
                            tier = "Schildkröte";
                        }
                        if( CheckMoney(playerid) < preis ) {
                            return SendClientMessage(playerid,COLOR_RED,"Du besitzt nicht genug Geld um dieses Haustier zu kaufen.");
                        }
                        new
                            String[128];
                        Spieler[playerid][pHaustier] = listitem + 1;
                        Spieler[playerid][pHaustierCooldown] = 3*60;
                        format(String,sizeof(String),"Du hast eine(n) %s für $%s gekauft!",tier, AddDelimiters(preis));
                        SendClientMessage(playerid,COLOR_YELLOW,String),
                        GivePlayerCash(playerid,-preis);
                        new index;
                        index = GetBizIndexByID(64);
                        Biz[index][bKasse] += preis;
                        Biz[index][bWaren] -= 1;
                    }
                    else {
                        return SendClientMessage(playerid,COLOR_RED,"Du hast bereits ein Haustier.");
                    }
                }
                else {
                    // Futter
                }
            }
        }
        case DIALOG_HAUSTIER: {
            if(response) {
                new
                    string[500];
                strcat( string , "Wenn du Dir ein Haustier kaufst,\n trägst du selbstverständlich auch eine Verantwortung für sein Leben!\n",sizeof(string) );
                strcat( string , "Du musst dein Haustier füttern und pflegen, ansonsten kann es sogar sein, dass es stirbt!\n\n",sizeof(string) );
                strcat( string , "Wenn du dir ein Haustier kaufst, kannst du mit /Haustier mit ihm Gassi gehen.\n",sizeof(string) );
                strcat( string , "Wenn dein Haustier Hunger hat, wirst du darüber benachrichtigt. Mit /Fuettern kannst du es füttern.\n\n",sizeof(string) );
                strcat( string , "Tierfutter erhältst du ebenfalls im Tierhandel.",sizeof(string) );


                if( listitem == 0 ) {
                    format(string,sizeof(string),string,"Hund");
                    Spieler[playerid][pHaustierTemp] = 0;
                    ShowPlayerDialog(playerid,DIALOG_HAUSTIER_KAUFEN,DIALOG_STYLE_MSGBOX,"Haustier Geschäft - Hund",string,"Kaufen","Abbruch");
                }
                else if(listitem == 1 ) {
                    format(string,sizeof(string),string,"Papagei");
                    Spieler[playerid][pHaustierTemp] = 1;
                    ShowPlayerDialog(playerid,DIALOG_HAUSTIER_KAUFEN,DIALOG_STYLE_MSGBOX,"Haustier Geschäft - Papagei",string,"Kaufen","Abbruch");
                }
                else if(listitem == 2 ) {
                    format(string,sizeof(string),string,"Schildkröte");
                    Spieler[playerid][pHaustierTemp] = 2;
                    ShowPlayerDialog(playerid,DIALOG_HAUSTIER_KAUFEN,DIALOG_STYLE_MSGBOX,"Haustier Geschäft - Schildkröte",string,"Kaufen","Abbruch");
                }
                else if(listitem == 3 ) {
                    if( CheckMoney(playerid) < 20000 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld um Futter zu kaufen");
                    }
                    SendClientMessage(playerid,COLOR_GREEN,"Du hast Tierfutter gekauft!");
                    Spieler[playerid][pHaustierFutter]++;
                    GivePlayerCash(playerid,-20000);
                    new index;
                    index = GetBizIndexByID(62);
                    Biz[index][bKasse] += 20000*20/100;
                    Biz[index][bWaren] -= 1;
                }
            }
        }
        case DIALOG_WANTEDTICKET: {
            if(response) {
                if( CheckMoney(playerid) < g_WantedTicket[listitem][WT_iPrice] ) {
                    ShowWantedTicketList(playerid);
                    SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld.");
                    return 1;
                }
                if( Spieler[playerid][pWanteds] < g_WantedTicket[listitem][WT_iPoints] ) {
                    ShowWantedTicketList(playerid);
                    SendClientMessage(playerid,COLOR_RED,"Du benötigst so viele Wantedtickets nicht.");
                    return 1;
                }
                new
                    String[128];
                format(String,sizeof(String),"Du hast %d Wanteds gelöscht für $%s.",g_WantedTicket[listitem][WT_iPoints], AddDelimiters(g_WantedTicket[listitem][WT_iPrice]));
                SendClientMessage(playerid,COLOR_YELLOW,String);
                Spieler[playerid][pWanteds] -= g_WantedTicket[listitem][WT_iPoints];
                GivePlayerCash(playerid,-g_WantedTicket[listitem][WT_iPrice]);
                return 1;
            }
        }
        case DIALOG_HAUSUPGRADE_WL_BUY: {
            if(response) {
                if( Spieler[playerid][pCash] < 200000 ) {
                    SendClientMessage(playerid,COLOR_RED,"Das Upgrade kostet $200.000.");
                    return 1;
                }
                Spieler[playerid][pUpgradeWaffenlager] = 1;
                GivePlayerCash(playerid,-200000);
                SendClientMessage(playerid,COLOR_GREEN,"Haus-Upgrade für $200.000$ gekauft.");
                return cmd_hausupgrade(playerid,"");
            }
        }
        case DIALOG_HAUSUPGRADE_SB_BUY: {
            if(response) {
                if( Spieler[playerid][pCash] < 400000 ) {
                    SendClientMessage(playerid,COLOR_RED,"Das Upgrade kostet $400.000.");
                    return 1;
                }
                Spieler[playerid][pUpgradeSafebox] = 1;
                GivePlayerCash(playerid,-400000);
                SendClientMessage(playerid,COLOR_GREEN,"Haus-Upgrade für $400.000 gekauft.");
                return cmd_hausupgrade(playerid,"");
            }
        }
        case DIALOG_HAUSUPGRADE_WL: 
        {
            if(response) 
            {
                new String[64];
                format(String,sizeof(String),"Hausupgrade - Safebox - %s",g_HouseUpgradeBezeichnungWL[listitem]);
                Spieler[playerid][pHausWaffenlagerItem] = listitem;
                ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE_WL_ACTION,DIALOG_STYLE_LIST,String,"Nehmen\nAblegen","Weiter","Abbruch");
            }
        }
        case DIALOG_HAUSUPGRADE_SB: {
            if(response) {
                new
                    String[64];
                format(String,sizeof(String),"Hausupgrade - Safebox - %s",g_HouseUpgradeBezeichnung[listitem] );
                Spieler[playerid][pHausSafeboxItem] = listitem;
                ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE_SB_ACTION,DIALOG_STYLE_LIST,String,"Nehmen\nAblegen","Weiter","Abbruch");
            }
        }
        case DIALOG_HAUSUPGRADE_SB_ACTION: {
            if(response) {
                if(listitem == 0 ) {
                    new
                        item,
                        String[256],
                        header[64];
                    item = Spieler[playerid][pHausSafeboxItem];
                    format(header,sizeof(header),"Hausupgrade - Safebox - %s - Nehmen",g_HouseUpgradeBezeichnung[item]);
                    format(String,sizeof(String),"Gib die Menge an %s an, die du abheben möchtest:",g_HouseUpgradeBezeichnung[item]);
                    ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE_SB_NEHMEN,DIALOG_STYLE_INPUT,header,String,"Ablegen","Abbruch");
                }
                else if(listitem == 1 ) {
                    new
                        item,
                        String[256],
                        header[64];
                    item = Spieler[playerid][pHausSafeboxItem];
                    format(header,sizeof(header),"Hausupgrade - Safebox - %s - Ablegen",g_HouseUpgradeBezeichnung[item]);
                    format(String,sizeof(String),"Gib die Menge an %s an, die du ablegen möchtest:",g_HouseUpgradeBezeichnung[item]);
                    ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE_SB_ABLEGEN,DIALOG_STYLE_INPUT,header,String,"Ablegen","Abbruch");
                }
            }
        }
        case DIALOG_HAUSUPGRADE_SB_NEHMEN: {
            if(response) {
                new
                    item,
                    menge;
                if(sscanf(inputtext,"d",menge)) {
                    return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                }
                if(menge < 1 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                }
                item = Spieler[playerid][pHausSafeboxItem];
                if(item == 0 ) {
                    if( Spieler[playerid][pHausSafeboxDrogen] < menge ) {
                        return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht in der Haus Safebox.");
                    }
                    Spieler[playerid][pHausSafeboxDrogen] -= menge;
                    Spieler[playerid][pDrugs] += menge;
                }
                else if(item == 1 ) {
                    if( Spieler[playerid][pHausSafeboxSpice] < menge ) {
                        return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht in der Haus Safebox.");
                    }
                    //if(CheckPlayerSpice(playerid,menge)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur maximal 3.000 Gramm Spice besitzen!");
                    Spieler[playerid][pHausSafeboxSpice] -= menge;
                    Spieler[playerid][pSpice] += menge;
                }
                new
                    String[128];
                format(String,sizeof(String),"Du hast %d Stk %s aus der Safebox genommen.",menge,g_HouseUpgradeBezeichnung[item]);
                SendClientMessage(playerid,COLOR_YELLOW,String);
            }
        }
        case DIALOG_HAUSUPGRADE_SB_ABLEGEN: {
            if(response) {
                new
                    //vehicleid,
                    item,
                    menge;
                if(sscanf(inputtext,"d",menge)) {
                    return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                }
                if(menge < 1 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                }
                item = Spieler[playerid][pHausSafeboxItem];
                if(item == 0 ) {
                    if( Spieler[playerid][pDrugs] < menge ) {
                        return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir.");
                    }
                    Spieler[playerid][pHausSafeboxDrogen] += menge;
                    Spieler[playerid][pDrugs] -= menge;
                }
                else if(item == 1 ) {
                    if( Spieler[playerid][pSpice] < menge ) {
                        return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir.");
                    }
                    //if(CheckPlayerSpice(playerid,menge)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur maximal 3.000 Gramm Spice besitzen!");
                    Spieler[playerid][pHausSafeboxSpice] += menge;
                    Spieler[playerid][pSpice] -= menge;
                }
                new
                    String[128];
                format(String,sizeof(String),"Du hast %d Stk %s in die Safebox gelegt.",menge,g_HouseUpgradeBezeichnung[item]);
                SendClientMessage(playerid,COLOR_YELLOW,String);
            }
        }
        case DIALOG_HAUSUPGRADE_WL_ACTION: {
            if(response) {
                if(listitem == 0 ) {
                    new String[256],header[64];
                    format(header,sizeof(header),"Hausupgrade - Safebox - Waffe - Nehmen");
                    format(String,sizeof(String),"Gib die Menge an Munition an, die du abheben möchtest:");
                    ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE_WL_NEHMEN,DIALOG_STYLE_INPUT,header,String,"Ablegen","Abbruch");
                }
                else if(listitem == 1 ) {
                    new String[256],header[64];
                    format(header,sizeof(header),"Hausupgrade - Safebox - Waffe - Ablegen");
                    format(String,sizeof(String),"Gib die Waffen-ID und die Menge an Munition an, die du ablegen möchtest:");
                    ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE_WL_ABLEGEN,DIALOG_STYLE_INPUT,header,String,"Ablegen","Abbruch");
                }
            }
        }
        case DIALOG_HAUSUPGRADE_WL_ABLEGEN: {
            if(response) {
                new item;
                item = Spieler[playerid][pHausWaffenlagerItem];
                if(item == 0){
                    new slot, wname[30], weapon, weapon_muni, waffe, menge;
                    if(sscanf(inputtext,"dd",waffe,menge)) return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe! <WaffenID> <Munition>");
                    if(menge < 1 ) return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    slot = GetWeaponSlot(waffe);
                    GetPlayerWeaponData(playerid,slot,weapon,weapon_muni);
                    if( weapon != waffe ) return SendClientMessage(playerid,COLOR_RED,"Du besitzt diese Waffe nicht.");
                    if( weapon_muni < menge ) return SendClientMessage(playerid,COLOR_RED,"Diese Menge der Waffe besitzt du nicht.");
                    new safebox_waffe, safebox_ammo;
                    Class_SplitWeaponInfo( Spieler[playerid][pHausWaffenlager1] ,safebox_waffe , safebox_ammo );
                    if( Spieler[playerid][pHausWaffenlager1] != 0 ) {
                        if( safebox_waffe != waffe ) return SendClientMessage(playerid,COLOR_RED,"Es befindet sich bereits eine andere Waffe im Waffenlager.");
                    }
                    new String[128];
                    GetWeaponNameEx(waffe,wname,sizeof(wname));
                    GivePlayerWeapon(playerid,waffe,-menge);
                    Spieler[playerid][pHausWaffenlager1] = Class_CompressWeaponInfo( waffe , safebox_ammo + menge );
                    format(String,sizeof(String),"Du hast %s mit %d Munition in das Waffenlager gelegt.",wname,menge);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
                else if(item == 1){
                    new slot, wname[30], weapon, weapon_muni, waffe, menge;
                    if(sscanf(inputtext,"dd",waffe,menge)) return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe! <WaffenID> <Munition>");
                    if(menge < 1 ) return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    slot = GetWeaponSlot(waffe);
                    GetPlayerWeaponData(playerid,slot,weapon,weapon_muni);
                    if( weapon != waffe ) return SendClientMessage(playerid,COLOR_RED,"Du besitzt diese Waffe nicht.");
                    if( weapon_muni < menge ) return SendClientMessage(playerid,COLOR_RED,"Diese Menge der Waffe besitzt du nicht.");
                    new safebox_waffe, safebox_ammo;
                    Class_SplitWeaponInfo( Spieler[playerid][pHausWaffenlager2] ,safebox_waffe , safebox_ammo );
                    if( Spieler[playerid][pHausWaffenlager2] != 0 )  {
                        if( safebox_waffe != waffe ) return SendClientMessage(playerid,COLOR_RED,"Es befindet sich bereits eine andere Waffe im Waffenlager.");
                    }
                    new String[128];
                    GetWeaponNameEx(waffe,wname,sizeof(wname));
                    GivePlayerWeapon(playerid,waffe,-menge);
                    Spieler[playerid][pHausWaffenlager2] = Class_CompressWeaponInfo( waffe , safebox_ammo + menge );
                    format(String,sizeof(String),"Du hast %s mit %d Munition in das Waffenlager gelegt.",wname,menge);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
                else if(item == 2){
                    new slot, wname[30], weapon, weapon_muni, waffe, menge;
                    if(sscanf(inputtext,"dd",waffe,menge)) return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe! <WaffenID> <Munition>");
                    if(menge < 1 ) return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    slot = GetWeaponSlot(waffe);
                    GetPlayerWeaponData(playerid,slot,weapon,weapon_muni);
                    if( weapon != waffe ) return SendClientMessage(playerid,COLOR_RED,"Du besitzt diese Waffe nicht.");
                    if( weapon_muni < menge ) return SendClientMessage(playerid,COLOR_RED,"Diese Menge der Waffe besitzt du nicht.");
                    new safebox_waffe, safebox_ammo;
                    Class_SplitWeaponInfo( Spieler[playerid][pHausWaffenlager3] ,safebox_waffe , safebox_ammo );
                    if( Spieler[playerid][pHausWaffenlager3] != 0 ){
                        if( safebox_waffe != waffe ) return SendClientMessage(playerid,COLOR_RED,"Es befindet sich bereits eine andere Waffe im Waffenlager.");
                    }
                    new String[128];
                    GetWeaponNameEx(waffe,wname,sizeof(wname));
                    GivePlayerWeapon(playerid,waffe,-menge);
                    Spieler[playerid][pHausWaffenlager3] = Class_CompressWeaponInfo( waffe , safebox_ammo + menge );
                    format(String,sizeof(String),"Du hast %s mit %d Munition in das Waffenlager gelegt.",wname,menge);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
            }
        }
        case DIALOG_HAUSUPGRADE_WL_NEHMEN: 
        {
            if(response) {
                new item;
                item = Spieler[playerid][pHausWaffenlagerItem];
                if(item == 0){
                    if(HasWeaponBlock(playerid)){
                        SendClientMessage(playerid,COLOR_RED,"Du kannst diese Hausfunktion nicht nutzen!");
                        return SendWeaponBlockInfo(playerid);
                    }
                    new wname[30], menge;
                    if(sscanf(inputtext,"d",menge)) return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    if(menge < 1 ) return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    new weapon,muni;
                    Class_SplitWeaponInfo( Spieler[playerid][pHausWaffenlager1], weapon,muni);
                    if( muni < menge ) return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Hauslager.");
                    new String[128];
                    GetWeaponNameEx(weapon,wname,sizeof(wname));
                    GivePlayerWeapon(playerid,weapon,menge);
                    Spieler[playerid][pHausWaffenlager1] = Class_CompressWeaponInfo( weapon , muni - menge );
                    format(String,sizeof(String),"Du hast %s mit %d Munition aus dem Waffenlager genommen.",wname,menge);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
                else if(item == 1){
                    if(HasWeaponBlock(playerid)){
                        SendClientMessage(playerid,COLOR_RED,"Du kannst diese Hausfunktion nicht nutzen!");
                        return SendWeaponBlockInfo(playerid);
                    }
                    new wname[30], menge;
                    if(sscanf(inputtext,"d",menge)) return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    if(menge < 1 ) return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    new weapon,muni;
                    Class_SplitWeaponInfo( Spieler[playerid][pHausWaffenlager2], weapon,muni);
                    if( muni < menge ) return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Hauslager.");
                    new String[128];
                    GetWeaponNameEx(weapon,wname,sizeof(wname));
                    GivePlayerWeapon(playerid,weapon,menge);
                    Spieler[playerid][pHausWaffenlager2] = Class_CompressWeaponInfo( weapon , muni - menge );
                    format(String,sizeof(String),"Du hast %s mit %d Munition aus dem Waffenlager genommen.",wname,menge);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
                else if(item == 2){
                    if(HasWeaponBlock(playerid)){
                        SendClientMessage(playerid,COLOR_RED,"Du kannst diese Hausfunktion nicht nutzen!");
                        return SendWeaponBlockInfo(playerid);
                    }
                    new wname[30], menge;
                    if(sscanf(inputtext,"d",menge)) return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    if(menge < 1 ) return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    new weapon,muni;
                    Class_SplitWeaponInfo( Spieler[playerid][pHausWaffenlager3], weapon,muni);
                    if( muni < menge ) return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Hauslager.");
                    new String[128];
                    GetWeaponNameEx(weapon,wname,sizeof(wname));
                    GivePlayerWeapon(playerid,weapon,menge);
                    Spieler[playerid][pHausWaffenlager3] = Class_CompressWeaponInfo( weapon , muni - menge );
                    format(String,sizeof(String),"Du hast %s mit %d Munition aus dem Waffenlager genommen.",wname,menge);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
            }
        }
        case DIALOG_HAUSUPGRADE: {
            if(response) {
                if(listitem == 0 ) {
                    if( Spieler[playerid][pUpgradeWaffenlager] ) {
                        // DIALOG_HAUSUPGRADE_WL
                        ShowHausUpgrade(playerid,false);
                    }
                    else {
                        //
                        ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE_WL_BUY,DIALOG_STYLE_MSGBOX,"HouseUpgrade - Waffenlager kaufen","\
                        Um deine Waffen im Haus lagern zu können, musst du einmalig $200.000 zahlen!\n\
                        Es ist dein persönliches Hauswaffenlager, keiner kann deine eingelagerten Waffen herausnehmen.\n\
                        Sobald du dich ausmietest oder das Haus verkaufst, sind deine eingelagerten Waffen weg.","Kaufen","Abbruch");
                    }
                }
                else if(listitem == 1 ) {
                    if( Spieler[playerid][pUpgradeSafebox] ) {
                        // DIALOG_HAUSUPGRADE_SB
                        // g_HouseUpgradeBezeichnung
                        ShowHausUpgrade(playerid,true);
                    }
                    else {
                        //
                        ShowPlayerDialog(playerid,DIALOG_HAUSUPGRADE_SB_BUY,DIALOG_STYLE_MSGBOX,"HouseUpgrade - Waffenlager kaufen","\
                        Um deine Drogen (Spice, Drogen) im Haus lagern zu können, musst du einmalig $400.000 zahlen!\n\
                        Es ist deine persönliche Haussafebox, keiner kann deine eingelagerten Inventare herausnehmen.\n\
                        Sobald du dich ausmietest oder das Haus verkaufst, sind deine eingelagerten Inventare weg.","Kaufen","Abbruch");
                    }
                }
            }
        }
        case DIALOG_PIN_VERGESSEN: {
            if(response) {
                new
                    query[256];
                mysql_real_escape_string(inputtext,query,gSQL,sizeof(query));
                format(query,sizeof(query),"SELECT `BankPin` FROM `accounts` WHERE `Name` = '%s' AND `SecureCode` = '%s'",GetName(playerid),query);
                mysql_pquery(query,THREAD_PIN_VERGESSEN,playerid,gSQL,MySQLThreadOwner);
            }
        }
        case DIALOG_MEMBERS: {
            if(response) {
                if(Spieler[playerid][pFraktion] < 1)return SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Fraktion!");
                new
                    query[160];
                pCurrentSite[playerid] = 0;

                SetPVarInt(playerid, "MEMBERAUSWAHL", listitem+1);

                format(query, sizeof(query), "SELECT `Name`, `Level`, `Rank`, `Fraktion`, `FrakLohn` FROM `accounts` WHERE `Fraktion` =%d ORDER BY `Rank` DESC LIMIT 0,30", Spieler[playerid][pFraktion]);
                mysql_pquery(query,THREAD_MITGLIEDER_AUSWAHL,playerid,gSQL,MySQLThreadOwner);
            }
        }
        case DIALOG_MEMBER_RESULT: {
            if(response){
                //format(str2, sizeof(str2), "{FFFFFF}Rang ändern\nLohn ändern\nMitglied entlassen");
                new pName[24];
                GetPVarString(playerid, "MITGLIEDERNAME", pName, sizeof(pName));

                if(listitem == 0){
                    new title[128];
                    format(title, sizeof(title), "Mitgliederliste - Ranganpassung - %s", pName);

                    new string[128];
                    format(string, sizeof(string), "{FFFFFF}Gebe hier den neuen Rang des Mitgliedes %s ein:", pName);

                    ShowPlayerDialog(playerid, DIALOG_MEMBER_RANK, DIALOG_STYLE_INPUT, title, string, "Ändern", "Abbrechen");
                }

                if(listitem == 1){
                    new title[128];
                    format(title, sizeof(title), "Mitgliederliste - Gehaltsanpssung - %s", pName);

                    new string[128];
                    format(string, sizeof(string), "{FFFFFF}Gebe hier das neue Gehalt des Mitgliedes %s ein:", pName);

                    ShowPlayerDialog(playerid, DIALOG_MEMBER_LOHN, DIALOG_STYLE_INPUT, title, string, "Ändern", "Abbrechen");
                }

                if(listitem == 2){
                    new giveid, string[128];
                    sscanf(pName, "k<playername>", giveid);
                    if (giveid != INVALID_PLAYER_ID){
                        if(giveid == playerid) {
                            SendClientMessage(playerid, COLOR_RED, "Du kannst dich nicht selber feuern!");
                        }else{
                            format(string, sizeof(string), "Du wurdest von %s aus der Fraktion gefeuert. Du bist nun wieder Zivilist.", GetName(playerid));
                            SendClientMessage(giveid, COLOR_YELLOW, string);
                            format(string, sizeof(string), "Du hast %s aus der Fraktion gefeuert.", GetName(giveid));
                            SendClientMessage(playerid, COLOR_YELLOW, string);
                            RemovePlayerFromFaction(giveid);
                        }
                    }else{
                        new query[128];
                        format(string, sizeof(string), "Du hast %s aus der Fraktion gefeuert.", pName);
                        SendClientMessage(playerid, COLOR_YELLOW, string);
                        format(query,sizeof(query),"UPDATE `accounts` SET `Fraktion` = 0,`Rank` = 0,`Skin` = 2 WHERE `Name` = '%s'",pName);
                        mysql_pquery(query,THREAD_OAFKICK,playerid,gSQL,MySQLThreadOwner);
                    }
                }
                /*
                sscanf(pName, "k<playername>", giveid);
            if (giveid != INVALID_PLAYER_ID)
            */
            }else{
                cmd_mitglieder(playerid);
            }
        }
        case DIALOG_MEMBER_RANK: {
            if(response){
                new pName[24];
                GetPVarString(playerid, "MITGLIEDERNAME", pName, sizeof(pName));
                new giveid, string[128];
                sscanf(pName, "k<playername>", giveid);

                new iValue = strval(inputtext);

                if(giveid == playerid) return SendClientMessage(playerid, COLOR_RED, "Du kannst deinen eigenen Rang nicht ändern!");

                if(Spieler[giveid][pRank] == 6) return SendClientMessage(playerid,COLOR_RED,"Du kannst den Rank des Leaders nicht verändern.");
                
                if(iValue < 0 || iValue > 5){
                    SendClientMessage(playerid, COLOR_RED, "Ungültiger Rang!");
                    cmd_mitglieder(playerid);
                    return 1;
                }

                if (giveid != INVALID_PLAYER_ID){
                    Spieler[giveid][pRank] = iValue;
                    format(string, sizeof(string), "[FRAKTIONS-NEWS] Der Rank von %s wurde von %s geändert. Er ist nun %s.", GetName(giveid), GetName(playerid), GetRankName(Spieler[giveid][pFraktion], Spieler[giveid][pRank]));
                    SendFraktionMessage(Spieler[playerid][pFraktion], COLOR_YELLOW, string);
                    format(string, sizeof(string), "Du wurdest von %s auf den Rank %s gestuft.", GetName(playerid), GetRankName(Spieler[giveid][pFraktion], Spieler[giveid][pRank]));
                    SendClientMessage(giveid, COLOR_LIGHTBLUE, string);
                }else{
                    new query[256];
                    SetPVarString(playerid, "OFFSETRANK.NAME", pName);
                    SetPVarInt(playerid, "OFFSETRANK.AMOUNT", iValue);
                    format(query, sizeof(query), "SELECT `Name`, `Fraktion`, `Rank` FROM `accounts` WHERE `Name` = '%s' LIMIT 1", pName);
                    mysql_pquery(query, THREAD_OFFSETRANK_CHECK, playerid, gSQL, MySQLThreadOwner);
                }

            }else{
                cmd_mitglieder(playerid);
            }
        }
        case DIALOG_MEMBER_LOHN: {
            if(response){
                new pName[24];
                GetPVarString(playerid, "MITGLIEDERNAME", pName, sizeof(pName));
                new giveid, string[128];
                sscanf(pName, "k<playername>", giveid);

                new iValue = strval(inputtext);
                if(IsBeamter(playerid) == 1)
                {
                    if(iValue < 0 || iValue > 50000)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Ungültige Eingabe!!");
                        cmd_mitglieder(playerid);
                        return 1;
                    }
                }
                else
                {
                    if(iValue < 0 || iValue > 40000)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Ungültige Eingabe!!");
                        cmd_mitglieder(playerid);
                        return 1;
                    }
                }

                if (giveid != INVALID_PLAYER_ID){
                    Spieler[giveid][pFrakLohn] = iValue;
                    format(string, sizeof(string), "Dein Lohn wurde von Leader %s auf $%s gesetzt.", GetName(playerid), AddDelimiters(iValue));
                    SendClientMessage(giveid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "Du hast den Lohn von %s auf $%s gesetzt.", GetName(giveid), AddDelimiters(iValue));
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                }else{
                    new query[256];
                    SetPVarString(playerid, "OFFSETLOHN.NAME", pName);
                    SetPVarInt(playerid, "OFFSETLOHN.AMOUNT", iValue);
                    format(query, sizeof(query), "SELECT `Name`, `Fraktion`, `FrakLohn` FROM `accounts` WHERE `Name` = '%s' LIMIT 1", pName);
                    mysql_pquery(query, THREAD_OFFSETLOHN_CHECK, playerid, gSQL, MySQLThreadOwner);
                }
            }else{
                cmd_mitglieder(playerid);
            }
        }
        case DIALOG_BANK: {
            if(response) {
                if(listitem==0) {
                    ShowPlayerDialog(playerid, DIALOG_UEBERWEISEN, DIALOG_STYLE_MSGBOX, "BANK-INFO", "Bei der Bank können Sie Überweisungen tätigen und ihre Bank-PIN ändern lassen.\nSollten Sie Ihre Bank-PIN vergessen haben, ist das kein Problem.\nBei einer erfolgreichen Verifizierung wird Ihnen eine neue Bank-PIN aufgestellt.\n\nEin- und Auszahlungen können Sie an jeden Geldautomaten tätigen.", "OK", "");
                }
                if(listitem==1) {
                    ShowPlayerDialog(playerid, DIALOG_PIN_AENDERN_PIN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"BankPin", COLOR_HEX_WHITE"Bestätige zunächst mit deinem PIN"  , "Fertig", "");
                }
                else if(listitem==2) {
                    if( HasPlayerChecks(playerid) ) {
                        new
                            String[256];
                        for(new i ; i < MAX_PLAYERS ; i++) {
                            if( IsPlayerConnected(i)) {
                                if( Spieler[i][pGeldcheckID] == playerid ) {
                                    // ACHTUNG !!! NICHT DAS FORMAT DER AUSGABE ÄNDERN !!!!!
                                    // NUR NACH RÜCKSPRACHE!!!
                                    format(String,sizeof(String),"%s%s - $%s\n",String,GetName(i), AddDelimiters(Spieler[i][pGeldcheckBetrag]));
                                }
                            }
                        }
                        ShowPlayerDialog(playerid, DIALOG_CHECKAUSWAHL, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Check einlösen", String  , "Einlösen", "Abbruch");
                        return 1;
                    }
                    else {
                        ClearAnimations(playerid);
                        return SendClientMessage(playerid,COLOR_RED,"Dir wurden keine Geldchecks ausgestellt!");
                    }
                }
                else if(listitem==3) {
                    ShowPlayerDialog(playerid, DIALOG_PIN_VERGESSEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"BankPin Vergessen", COLOR_HEX_WHITE"Identifiziere dich mit deinem Sicherheitscode.\nDu hast 3 Versuche!"  , "Weiter", "Abbruch");
                }
            }
        }
        case DIALOG_TELEFONZELLE_CALL: {
            if(response) {
                new
                    giveid;
                TelefonzelleAn[playerid] = INVALID_PLAYER_ID;
                if(sscanf(inputtext,"u",giveid) ) {
                    SendClientMessage(playerid,COLOR_RED,"Spieler nicht gefunden.");
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return 1;
                }
                if( !IsPlayerConnected(giveid) ) {
                    SendClientMessage(playerid,COLOR_RED,"Spieler nicht gefunden.");
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return 1;
                }
                if( giveid == playerid ) {
                    SendClientMessage(playerid,COLOR_RED,"Diese Aktion ist nicht möglich.");
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return 1;
                }

                if(Spieler[playerid][pMuted]== 1) {
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return SendClientMessage(playerid, COLOR_CHAT_MUTED, "Du bist gemutet.");
                }
                if(Spieler[playerid][pTot] == 1) {
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return SendClientMessage(playerid, COLOR_RED, "Du kannst niemanden anrufen, wenn du tot bist!");
                }

                if(Spieler[giveid][pHandyState] == 0) {
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return SendClientMessage(playerid, COLOR_ORANGE, "Das Handy des Spielers ist aus.");
                }
                if(CurrentPhone[giveid] == 999)
                {
                    new string[160];
                    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
                    SendClientMessage(playerid, COLOR_WHITE, "Es klingelt...");
                    PlayerPlaySound(giveid, 20600, 0.0, 0.0, 0.0);
                    format(string, sizeof(string), "Dein Handy klingelt. Anrufer: %s. Tippe /Abnehmen um den Anruf anzunehmen.", GetName(playerid));
                    SendClientMessage(giveid, COLOR_YELLOW, string);
                    format(string, sizeof(string), "* %s's %s klingelt.", GetName(giveid) , GetPlayerHandyName(giveid) );
                    new Float:x, Float:y, Float:z;
                    GetPlayerPos(giveid, x,y,z);
                    SendRoundMessage(x,y,z,COLOR_PURPLE, string);
                    SendClientMessage(giveid,COLOR_PURPLE,string);
                    CurrentPhone[playerid] = giveid;
                    CurrentPhone[giveid] = playerid;
                    TelefonzelleAn[playerid] = giveid;
                }
                else {
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    SendClientMessage(playerid, COLOR_WHITE, "Leitung besetzt...");
                }
                return 1;
            }
            SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
            UnfreezePlayer(playerid);
        }
        case DIALOG_TELEFONZELLE_SMS_MSG: {
            if(response) {
                // SMS Abgesendet
                new
                    sms[160],
                    String[256],
                    giveid;
                giveid = TelefonzelleAn[playerid];
                SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                UnfreezePlayer(playerid);
                TelefonzelleAn[playerid] = INVALID_PLAYER_ID;
                if(!IsPlayerConnected(giveid)) {
                    SendClientMessage(playerid,COLOR_RED,"Der Spieler ist nicht mehr online.");
                    return 1;
                }
                if(sscanf(inputtext,"s[160]",sms)) {
                    SendClientMessage(playerid,COLOR_RED,"Du hast keine gültige Nachricht eingegeben.");
                    return 1;
                }
                if(Spieler[giveid][pHandyState] == 0) {
                    SendClientMessage(playerid, COLOR_RED, "Das Handy des Spielers ist aus.");
                    return 1;
                }

                format(String, sizeof(String), "[SMS]: %s, Von: %s (Telefonzelle)", sms, GetName(playerid) );
                SendClientMessage(giveid, COLOR_YELLOW, String);
                format(String, sizeof(String), "[SMS] Nachricht versendet - %s, An: %s (Nr: %d)", sms, GetName(giveid), Spieler[giveid][pHandyNr]);
                SendClientMessage(playerid, COLOR_YELLOW, String);
                GameTextForPlayer(playerid, "~r~$-150", 3000, 1);
                GivePlayerCash(playerid,-150);
                return 1;
            }
            SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
            UnfreezePlayer(playerid);
        }
        case DIALOG_TELEFONZELLE_SMS: {
            if(response) {
                new
                    giveid;
                TelefonzelleAn[playerid] = INVALID_PLAYER_ID;
                if(sscanf(inputtext,"u",giveid) ) {
                    SendClientMessage(playerid,COLOR_RED, "Der Spieler wurde nicht gefunden.");
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return 1;
                }
                if( !IsPlayerConnected(giveid) ) {
                    SendClientMessage(playerid,COLOR_RED,"Der Spieler wurde nicht gefunden.");
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return 1;
                }
                if( giveid == playerid ) {
                    SendClientMessage(playerid,COLOR_RED,"Diese Aktion ist nicht möglich.");
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
                    UnfreezePlayer(playerid);
                    return 1;
                }
                TelefonzelleAn[playerid] = giveid;
                ShowPlayerDialog(playerid,DIALOG_TELEFONZELLE_SMS_MSG,DIALOG_STYLE_INPUT,"Telefonzelle - SMS - Nachricht","Gib unten die SMS Nachricht ein","Absenden","Abbruch");
                return 1;
            }
            SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
            UnfreezePlayer(playerid);
        }
        case DIALOG_TELEFONZELLE: {
            if(response) {
                if( IsPlayerAtTelefonzelle(playerid) == 999 ) {
                    SendClientMessage(playerid,COLOR_RED,"Du befindest dich nicht an einer Telefonzelle.");
                    return 1;
                }
                if(listitem == 0 ) {
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE );
                    FreezePlayer(playerid);
                    ShowPlayerDialog(playerid,DIALOG_TELEFONZELLE_CALL,DIALOG_STYLE_INPUT,"Telefonzelle - Anruf",
                    "Ein Anruf über dieser Telefonzelle wird dich $100 kosten!\n\
                    Sobald derjenige abnimmt, werden die Telefonkosten von deinem Bargeld abgezogen.\n\
                    Gib unten den Namen oder die ID des Spielers an, den du anrufen möchtest.\n\
                    Um dies zu bestätigen, drück auf 'Weiter', ansonsten auf 'Abbrechen'.","Weiter","Abbrechen");
                }
                else if(listitem == 1 ) {
                    SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE );
                    FreezePlayer(playerid);
                    ShowPlayerDialog(playerid,DIALOG_TELEFONZELLE_SMS,DIALOG_STYLE_INPUT,"Telefonzelle - SMS",
                    "Sobald die SMS erfolgreich versendet wurde, werden die Kosten von deinem Bargeld abgezogen.\n\
                    Gib unten den Namen oder die ID des Spielers an, dem du eine SMS senden möchtest.\n\
                    Um dies zu bestätigen, drück auf 'Weiter', ansonsten auf 'Abbrechen'.","Weiter","Abbrechen");
                }
            }
        }
        case DIALOG_KREDITUEBERSICHT: {
            if(response) {
                ShowKreditLimitUebersicht(playerid,1,listitem);
            }
        }
        case DIALOG_KREDITCONFIRM: {
            if(response) {
                listitem = Spieler[playerid][pKreditAuswahl];
                if( CheckMoney(playerid) < g_KreditLimit[listitem][KL_iKreditRate] ) {
                    return SendClientMessage(playerid,COLOR_RED,"[FEHLER] {FFFFFF}Sie haben nicht genug Bargeld dabei, um die erste Rate zu begleichen.");
                }
                GivePlayerCash(playerid, -g_KreditLimit[listitem][KL_iKreditRate] );
                Spieler[playerid][pKreditwert] = g_KreditLimit[listitem][KL_iKreditwert];
                Spieler[playerid][pKreditGezahlt] = 0;
                Spieler[playerid][pBank] += g_KreditLimit[listitem][KL_iKreditwert];
                TreasuryDeposit(-g_KreditLimit[listitem][KL_iKreditwert]); // Geld von der Staatskasse entziehen
                SendClientMessage(playerid,COLOR_GREEN,"[INFO] {FFFFFF}Glückwunsch, der Kredit wurde von der San Andreas Bank genehmigt!");
                SendClientMessage(playerid,COLOR_GREEN,"[INFO] {FFFFFF}Das Geld befindet sich nun auf Ihrem Bankkonto.");
            }
        }
        case DIALOG_PURGEFVERLEIH: {
            new vID = GetPlayerVehicleID(playerid);
            UnLockCar(vID);
            miettimer[playerid]=0;
            if(response) {
                if( !vID ) {
                    RemovePlayerFromVehicle(playerid);
                    return 1;
                }
                new
                    vehicleid,
                    Float:x,
                    Float:y,
                    Float:z,
                    Float:rot,
                    Float:px,
                    Float:py,
                    Float:pz,
                    index,
                    modelid,
                    price,
                    spawn;
                index = GetPurgeVerleihIndex(vID);
                modelid = GetVehicleModel(vID);
                price = g_PurgeVerleihFahrzeuge[index][FVF_iPrice];
                if( CheckMoney(playerid) < price ) {
                    RemovePlayerFromVehicle(playerid);
                    SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld dabei.");
                    return 1;
                }
                spawn = GetFreePurgeVerleihSpawn( g_PurgeVerleihFahrzeuge[index][FVF_iVerleihIndex] );

                x = g_PurgeVerleihSpawn[spawn][FVS_fX];
                y = g_PurgeVerleihSpawn[spawn][FVS_fY];
                z = g_PurgeVerleihSpawn[spawn][FVS_fZ];
                rot = g_PurgeVerleihSpawn[spawn][FVS_fRot];
                vehicleid = CreateVehicle( modelid , x,y,z,rot , -1,-1, -1 );
                gGas[vehicleid] = GetMaxTank(vehicleid);
                gMaxGas[vehicleid] = GetMaxTank(vehicleid);
                Spieler[playerid][tickVehicleVerleih] = gettime() + 7*60*60;
                SetVehicleHealth(vehicleid, 5000.0); // <== Extra HP
                SetVehicleNumberPlate( vehicleid , "PURGE");
                g_PurgeVerleihSpawn[spawn][FVS_bFree] = false;
                GetPlayerPos(playerid,px,py,pz);
                SCMFormatted(playerid,COLOR_GREEN,"[PURGE] "COLOR_HEX_WHITE"Du hast das Fahrzeug %s für 7 Stunden geliehen.",CarName[modelid-400]);
                SendClientMessage(playerid,COLOR_GREEN,"[INFO] "COLOR_HEX_WHITE"Mit /Mietlock schließt du dein Fahrzeug auf und zu.");
                SendClientMessage(playerid,COLOR_GREEN,"[INFO] "COLOR_HEX_WHITE"Mit /Findmietcar findest du dein Mietfahrzeug.");
                SendClientMessage(playerid,COLOR_GREEN,"[INFO] "COLOR_HEX_WHITE"Bei einem Logout oder per /Entmieten wird das Fahrzeug gelöscht.");
                GivePlayerCash(playerid,-price);
                aiVehicles[vehicleid] = VEH_PRIVATVERLEIH;
                Spieler[playerid][pVehicleVerleih] = vehicleid;
                
                TogglePlayerControllable(playerid,false);
                SetTimerEx("DelayCameraMove",59,false,"ddffffff",playerid,3500,x,y,z,7.0,7.0,3.0);
			}
            else {
                RemovePlayerFromVehicle(playerid);
            }
        }
        case DIALOG_FAHRZEUGVERLEIH: {
            new vID = GetPlayerVehicleID(playerid);
            UnLockCar(vID);
            miettimer[playerid]=0;
            if(response) {
                if( !vID ) {
                    RemovePlayerFromVehicle(playerid);
                    return 1;
                }
                new
                    vehicleid,
                    Float:x,
                    Float:y,
                    Float:z,
                    Float:rot,
                    Float:px,
                    Float:py,
                    Float:pz,
                    index,
                    modelid,
                    price,
                    spawn,
                    String[128];
                index = GetFahrzeugVerleihIndex(vID);
                modelid = GetVehicleModel(vID);
                price = g_FahrzeugVerleihFahrzeuge[index][FVF_iPrice];
                if( CheckMoney(playerid) < price ) {
                    RemovePlayerFromVehicle(playerid);
                    SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld dabei.");
                    return 1;
                }
                spawn = GetFreeFahrzeugVerleihSpawn( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] );

                x = g_FahrzeugVerleihSpawn[spawn][FVS_fX];
                y = g_FahrzeugVerleihSpawn[spawn][FVS_fY];
                z = g_FahrzeugVerleihSpawn[spawn][FVS_fZ];
                rot = g_FahrzeugVerleihSpawn[spawn][FVS_fRot];
                vehicleid = CreateVehicle( modelid , x,y,z,rot , -1,-1, -1 );
                gGas[vehicleid] = GetMaxTank(vehicleid);
                gMaxGas[vehicleid] = GetMaxTank(vehicleid);
                Spieler[playerid][tickVehicleVerleih] = gettime() + 3*60*60;
                //Spieler[playerid][tickVehicleVerleih] = gettime() + 2*60;
                SetVehicleNumberPlate( vehicleid , "VERLEIH");
                //SetVehicleToRespawn( vehicleid );
                g_FahrzeugVerleihSpawn[spawn][FVS_bFree] = false;
                GetPlayerPos(playerid,px,py,pz);
                format(String,sizeof(String),"Du hast das Fahrzeug %s für 3 Stunden geliehen.",CarName[modelid-400]);
                SendClientMessage(playerid,COLOR_GREEN,String);
                SendClientMessage(playerid,COLOR_GREEN,"Dein Fahrzeug steht auf dem Parkplatz bereit.");
                SendClientMessage(playerid,COLOR_YELLOW,"Hinweis: Mit /Mietlock schließt du dein Mietfahrzeug auf und zu.");
                SendClientMessage(playerid,COLOR_YELLOW,"Hinweis: Mit /Findmietcar wird dir der Standort deines Mietfahrzeuges angezeigt.");
                SendClientMessage(playerid,COLOR_YELLOW,"Hinweis: Solltest du den Server verlassen, ist die Mietzeit abgelaufen.");
                GivePlayerCash(playerid,-price);
                // RemovePlayerFromVehicle(playerid);
                aiVehicles[vehicleid] = VEH_PRIVATVERLEIH;
                Spieler[playerid][pVehicleVerleih] = vehicleid;
                if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 0 ) { 
                    index = GetBizIndexByID(37);
                }
                else if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 1 ) {
                    index = GetBizIndexByID(43);
                }
                else if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 2 ) {
                    index = GetBizIndexByID(44);
                }
                else if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 3 ) {
                    index = GetBizIndexByID(45);
                }
                else if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 4 ) {
                    index = GetBizIndexByID(38);
                }
                else if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 5 ) {
                    index = GetBizIndexByID(42);
                }
                else if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 6 ) {
                    index = GetBizIndexByID(39);
                }
                else if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 7 ) {
                    index = GetBizIndexByID(40);
                }
                else if( g_FahrzeugVerleihFahrzeuge[index][FVF_iVerleihIndex] == 8 ) {
                    index = GetBizIndexByID(41);
                }
                Biz[index][bKasse] += price;

                TogglePlayerControllable(playerid,false);
                SetTimerEx("DelayCameraMove",59,false,"ddffffff",playerid,3500,x,y,z,7.0,7.0,3.0);

            }
            else {
                RemovePlayerFromVehicle(playerid);
            }
        }
        case DIALOG_WAFFENLAGER: {
            if (response) {
                if (IsPlayerAtWaffenlager(playerid) != WEAPON_DEPOT_OWN) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht mehr am Waffenlager.");
                // Einlagern
                if( Spieler[playerid][pFraktion] == 0 ) return SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Fraktion.");
                if(listitem == 0 ) {
                    ShowWaffenLager(playerid,1);
                }
                // Bauen
                else if(listitem == 1 ) {
                    ShowWaffenLager(playerid,2);
                }
                // Status
                else if(listitem == 2 ) {
                    ShowWaffenLager(playerid,3);
                }
            }
        }
        case DIALOG_WAFFENLAGER_LAGERN: {
            if(response) {
                if (IsPlayerAtWaffenlager(playerid) != WEAPON_DEPOT_OWN) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht mehr am Waffenlager.");
                new
                    menge;
                if(sscanf(inputtext,"d",menge)) {
                    SendClientMessage(playerid,COLOR_RED,"Ungültige Mengenangabe.");
                    ShowWaffenLager(playerid, 1);
                    return 1;
                }
                if( menge < 1 ) {
                    SendClientMessage(playerid,COLOR_RED,"Ungültige Mengenangabe.");
                    ShowWaffenLager(playerid, 1);
                    return 1;
                }
                if( Spieler[playerid][pWaffenteile] < menge ) {
                    SendClientMessage(playerid,COLOR_RED,"Du besitzt diese Menge an Waffenteilen nicht.");
                    ShowWaffenLager(playerid, 1);
                    return 1;
                }
                if( Spieler[playerid][pFraktion] == 0 ) {
                    SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Fraktion.");
                    return 1;
                }
                new
                    String[128],
                    index;
                index = GetWaffenLagerIndex( Spieler[playerid][pFraktion] );
                Spieler[playerid][pWaffenteile] -= menge;
                g_fraktion[index][Fr_WaffenlagerTeile] += menge;
                format(String,sizeof(String),"Spieler %s hat %s Waffenteile in das Waffenlager gelegt.", GetName(playerid), AddDelimiters(menge));
                SendFraktionMessage( Spieler[playerid][pFraktion], COLOR_YELLOW, String);
                ShowWaffenLager(playerid, 0);
            }
            else {
                ShowWaffenLager(playerid, 0);
            }
        }
        case DIALOG_WAFFENLAGER_BAUEN: {
            if (response) {
                if (IsPlayerAtWaffenlager(playerid) != WEAPON_DEPOT_OWN) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht mehr am Waffenlager.");
                new waffenid, waffe[24], price, String[128], index;
                if( Spieler[playerid][pFraktion] == 0 ) {
                    SendClientMessage(playerid, COLOR_RED, "Du bist in keiner Fraktion.");
                    return 1;
                }
                index = GetWaffenLagerIndex( Spieler[playerid][pFraktion] );
                price = g_WaffenLagerConfig[listitem][WLC_iPrice];
                if( g_fraktion[index][Fr_WaffenlagerTeile] < price  ) {
                    SendClientMessage(playerid,COLOR_RED,"Im Waffenlager befinden sich nicht genug Waffenteile.");
                    ShowWaffenLager(playerid, 2);
                    return 1;
                }
                waffenid = g_WaffenLagerConfig[listitem][WLC_iWaffe];
                if( waffenid == -1 ) {
                    SetPlayerArmour(playerid, 100.0 );
                    SetPlayerHealth(playerid, 100.0 );
                    format(String,sizeof(String),"Spieler %s hat sich für %d Waffenteile eine Schutzweste + HP gebaut.",GetName(playerid),price);
                }
                else {
                    GetWeaponNameEx( waffenid , waffe, sizeof(waffe) );
                    GivePlayerWeapon(playerid, waffenid , g_WaffenLagerConfig[listitem][WLC_iMuni] );
                    format(String,sizeof(String),"Spieler %s hat sich für %d Waffenteile folgende Waffe gebaut: %s",GetName(playerid),price,waffe);
                }
                g_fraktion[index][Fr_WaffenlagerTeile] -= price;
                SendFraktionMessage(  Spieler[playerid][pFraktion] ,COLOR_YELLOW,String);
                ShowWaffenLager(playerid, 2);
            }
            else {
                ShowWaffenLager(playerid, 0);
            }
        }
        case DIALOG_WAFFENLAGER_INFO: {
            if (IsPlayerAtWaffenlager(playerid) != WEAPON_DEPOT_OWN) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht mehr am Waffenlager.");
            ShowWaffenLager(playerid,0);
        }
        case DIALOG_SELLSPICE: {
            if (!response) return SendClientMessage(playerid, COLOR_RED, "Du hast den Verkauf von Spice abgebrochen.");
            new pID, menge, preis;
            new string[128];
            GetPVarString(playerid,"SellSpice",string,sizeof(string));
            sscanf(string,"udd",pID,menge,preis);

            pSpiceID[pID] = playerid;
            pSpicePreis[pID] = preis;
            pSpiceMenge[pID] = menge;
            format(string, sizeof(string), "Du hast von %s eine Anfrage für Spice erhalten. Menge: %d, Preis: $%s.", GetName(playerid), menge, AddDelimiters(preis));
            SendClientMessage(pID, COLOR_LIGHTBLUE, string);
            SendClientMessage(pID, COLOR_LIGHTBLUE, "Tippe '/Accept Spice' zur Annahme von Spice.");
            format(string, sizeof(string), "Du hast %s eine Anfrage für Spice gemacht. Menge: %d Gramm Spice, Preis: $%s.", GetName(pID), menge, AddDelimiters(preis));
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        }
        case DIALOG_SELLDRUGS: {
            if (!response) return SendClientMessage(playerid, COLOR_RED, "Du hast den Verkauf von Drogen abgebrochen.");
            new pID, menge, preis;
            new string[128];
            GetPVarString(playerid,"SellDrugs",string,sizeof(string));
            sscanf(string, "uii", pID, menge, preis);
            pDrogenID[pID] = playerid;
            pDrogenPreis[pID] = preis;
            pDrogenMenge[pID] = menge;

            format(string, sizeof(string), "Du hast von %s ein Angebot für Drogen erhalten. Menge: %d, Preis: $%s.", GetName(playerid), menge, AddDelimiters(preis));
            SendClientMessage(pID, COLOR_LIGHTBLUE, string);
            SendClientMessage(pID, COLOR_LIGHTBLUE, "Tippe '/Accept Drogen' um das Angebot anzunehmen.");
            format(string, sizeof(string), "Du hast %s deine Drogen angeboten. Menge: %d, Preis: $%s.", GetName(pID), menge, AddDelimiters(preis));
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        }
        case DIALOG_SELLWCODES: {
            if (!response) return SendClientMessage(playerid, COLOR_RED, "Du hast den Verkauf von Wantedcodes abgebrochen.");
            new pID, menge, preis;
            new string[128];
            GetPVarString(playerid, "SELL_WCODES", string, sizeof(string));
            sscanf(string, "uii", pID, menge, preis);
            format(string, sizeof(string), "%i %i %i", playerid, menge, preis);
            SetPVarString(pID, "BUY_WCODES", string);

            format(string, sizeof(string), "Du hast von %s ein Angebot für Wantedcodes erhalten. Menge: %d, Preis: $%s.", GetName(playerid), menge, AddDelimiters(preis));
            SendClientMessage(pID, COLOR_LIGHTBLUE, string);
            SendClientMessage(pID, COLOR_LIGHTBLUE, "Tippe '/Accept Wantedcodes' um das Angebot anzunehmen.");
            format(string, sizeof(string), "Du hast %s deine Wantedcodes angeboten. Menge: %d, Preis: $%s.", GetName(pID), menge, AddDelimiters(preis));
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        }
        case DIALOG_SELLWTEILE: {
            if (!response) return SendClientMessage(playerid, COLOR_RED, "Du hast den Verkauf von Waffenteilen abgebrochen.");
            new pID, menge, preis;
            new string[128];
            GetPVarString(playerid,"SellWTeile",string,sizeof(string));
            sscanf(string, "uii", pID, menge, preis);
            pWTeileID[pID] = playerid;
            pWTeilePreis[pID] = preis;
            pWTeileMenge[pID] = menge;

            format(string, sizeof(string), "Du hast von %s ein Angebot für Waffenteile erhalten. Menge: %d, Preis: $%s.", GetName(playerid), menge, AddDelimiters(preis));
            SendClientMessage(pID, COLOR_LIGHTBLUE, string);
            SendClientMessage(pID, COLOR_LIGHTBLUE, "Tippe '/Accept Waffenteile' um das Angebot anzunehmen.");
            format(string, sizeof(string), "Du hast %s deine Waffenteile angeboten.. Menge: %d, Preis: $%s.", GetName(pID), menge, AddDelimiters(preis));
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
        }
        case DIALOG_RATESUPPORTER: {
            new
                String[180],
                supporter[MAX_PLAYER_NAME];
            GetPVarString(playerid,"Supporter",supporter,sizeof(supporter));
            if(!response) {
                format(String,sizeof(String),"%s hat Supporter %s negativ bewertet!",GetName(playerid),supporter);
                //SendClientMessage(playerid,COLOR_GREEN,"Du wurdest vom Fragesteller wegen deiner Auskunft positiv bewertet!");
            }
            else {
                format(String,sizeof(String),"%s hat Supporter %s positiv bewertet!",GetName(playerid),supporter);
                //SendClientMessage(playerid,COLOR_ORANGE,"Der Fragesteller fand deine Auskunft nicht ausreichend und hat dich negativ bewertet!");
            }
            SupporterLog( String , response );
            if(!response) {
                format(String,sizeof(String),"Du hast den Support von %s negativ bewertet",supporter);
                //SendClientMessage(playerid,COLOR_GREEN,"Du wurdest vom Fragesteller wegen deiner Auskunft positiv bewertet!");
            }
            else {
                format(String,sizeof(String),"Du hast den Support von %s positiv bewertet",supporter);
                //SendClientMessage(playerid,COLOR_ORANGE,"Der Fragesteller fand deine Auskunft nicht ausreichend und hat dich negativ bewertet!");
            }
            SendClientMessage(playerid,COLOR_WHITE,String);
        }
        case DIALOG_NOTRUF: {
            if(response) {
                new
                    String[128];
                format(String,sizeof(String),"[NOTRUFZENTRALE] %s (ID: %d) ist sehr verletzt und benötigt dringende Hilfe. Benutze: /Sfinden!",GetName(playerid),playerid);
                SendFraktionMessage(3, COLOR_LIGHTRED, String);
            }
            //SpawnPlayer(playerid);
            return 1;
     	}

     	case DIALOG_ZULASSUNGSSTELLE: {
     	    if(response) {
     	        if(listitem == 0 ) {
					if( !PlayerHaveCar[playerid][PlayerKey[playerid]] )
						return SendClientMessage(playerid, COLOR_RED, "Du hast gerade kein Fahrzeug gewählt ( /Carkey ).");

					new
     	                String[256+64],
					    slot,
						vehicleid,
						modelid;
					slot = PlayerKey[playerid];
					if( HasVehicleLicence(playerid,slot) )
						return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug hat bereits eine KFZ-Zulassung.");

					vehicleid = PlayerCar[playerid][slot][CarId];
					modelid = GetVehicleModel(vehicleid);
                    new preis = PlayerCar[playerid][slot][CarPreis]*10/100;
					format(String,sizeof(String),"Folgendes Fahrzeug möchten Sie amtlich Zulassen: %s\n\
						Eine Neuzulassung für ein Kraftfahrzeug nimmt einmalige Gebühren in Höhe von $%s.",
						CarName[modelid-400],AddDelimiters(preis));
					ShowPlayerDialog(playerid,DIALOG_FAHRZEUGZULASSEN,DIALOG_STYLE_MSGBOX,"Fahrzeug Zulassen",String,"Akzeptieren","Abbrechen");
     	        }
     	        else if(listitem == 1 ) {
					if( !PlayerHaveCar[playerid][PlayerKey[playerid]] )
						return SendClientMessage(playerid, COLOR_RED, "Du hast gerade kein Fahrzeug gewählt ( /Carkey ).");

					new
     	                String[256+64],
					    slot,
						vehicleid,
						modelid;
					slot = PlayerKey[playerid];
					if( !HasVehicleLicence(playerid,slot) )
						return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug hat keine KFZ-Zulassung.");

					vehicleid = PlayerCar[playerid][slot][CarId];
					modelid = GetVehicleModel(vehicleid);
                    new preis = PlayerCar[playerid][slot][CarPreis]*2/100;
					format(String,sizeof(String),"Sie möchten Ihr Fahrzeug %s mit dem amtlichen Kennzeichen %s abmelden.\n\
						Eine Fahrzeugabmeldung würde $%s an Gebühren kosten!\n\
						Sollten Sie die Fahrzeug stillegung akzeptieren, dürfen Sie mit dem Fahrzeug nicht mehr weiterfahren!",
						CarName[modelid-400],PlayerCar[playerid][slot][CarNumberplate],AddDelimiters(preis));
					ShowPlayerDialog(playerid,DIALOG_FAHRZEUGABMELDEN,DIALOG_STYLE_MSGBOX,"Fahrzeug Abmelden",String,"Akzeptieren","Abbrechen");
     	        }
     	    }
     	}
     	case DIALOG_FAHRZEUGZULASSEN: {
     	    if(response) {
				new
				    nummernschild[16],
 	                String[256+64],
				    slot,
					vehicleid,
					modelid;
				slot = PlayerKey[playerid];
				if( HasVehicleLicence(playerid,slot) )return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug hat bereits eine KFZ-Zulassung");
                if(CheckMoney(playerid) < PlayerCar[playerid][slot][CarPreis]*10/100) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genügend Geld.");
				vehicleid = PlayerCar[playerid][slot][CarId];
				modelid = GetVehicleModel(vehicleid);
				format(nummernschild,sizeof(nummernschild),"LS-%04d", 1 + random(9999) );
				format(String,sizeof(String),"Vielen Dank! Ihr Fahrzeug %s mit dem amtlichen Kennzeichen %s wurde erfolgreich angemeldet!\n\
					Das Kennzeichen wird automatisch an dein Fahrzeug angebracht!",
				    CarName[modelid-400],nummernschild);
				ShowPlayerDialog(playerid,DIALOG_DUMMY,DIALOG_STYLE_MSGBOX,"Fahrzeug Zulassen",String,"Weiter","");
				TreasuryDeposit(PlayerCar[playerid][slot][CarPreis]*10/100);
				GivePlayerCash(playerid,- PlayerCar[playerid][slot][CarPreis]*10/100);
				//Spieler[playerid][pKFZSteuer] += FIX_KFZSTEUER;
				format(PlayerCar[playerid][slot][CarNumberplate],32,"%s",nummernschild);
				SetVehicleNumberPlate( vehicleid , nummernschild );
				SavePlayerCar(playerid,slot);
     	    }
     	}

        case DIALOG_FAHRZEUGABMELDEN: {
            if(response) {
                new
                    String[256+64],
                    slot,
                    vehicleid,
                    modelid;
                slot = PlayerKey[playerid];
                if( !HasVehicleLicence(playerid,slot) ) return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug hat keine KFZ-Zulassung");
                if(CheckMoney(playerid) < PlayerCar[playerid][slot][CarPreis]*2/100) return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genügend Geld.");
                vehicleid = PlayerCar[playerid][slot][CarId];
                modelid = GetVehicleModel(vehicleid);
                format(String,sizeof(String),"Vielen Dank! Ihr Fahrzeug %s mit dem amtlichen Kennzeichen %s wurde erfolgreich abgemeldet!",
                    CarName[modelid-400],PlayerCar[playerid][slot][CarNumberplate]);
                ShowPlayerDialog(playerid,DIALOG_DUMMY,DIALOG_STYLE_MSGBOX,"Fahrzeug Abmelden",String,"Weiter","");
                TreasuryDeposit(PlayerCar[playerid][slot][CarPreis]*2/100);
                GivePlayerCash(playerid,- PlayerCar[playerid][slot][CarPreis]*2/100);
                //Spieler[playerid][pKFZSteuer] -= FIX_KFZSTEUER;
                format(PlayerCar[playerid][slot][CarNumberplate],32,"%s",KEIN_KENNZEICHEN);
                SetVehicleNumberPlate( vehicleid , KEIN_KENNZEICHEN );
                SavePlayerCar(playerid,slot);
            }
        }
        case DIALOG_KANISTER: {
            if(response) {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keiner Tankstelle.");
                if(Spieler[playerid][pKanister] >= MAX_CANISTER) return SendClientMessage(playerid, COLOR_RED, "Du hast bereits " #MAX_CANISTER " Kanister.");
                if (Tanke[t][tBenzin] < 10) return SendClientMessage(playerid, COLOR_RED, "Die Tankstelle hat zu wenig Benzin dafür.");

                new preis;
                new kanister[20];
                if(listitem == 0 ) {
                    preis = 2000;
                    kanister = "Diesel 10L";
                }
                else if(listitem == 1 ) {
                    preis = 2600;
                    kanister = "Benzin 10L";
                }
                else if(listitem == 2 ) {
                    preis = 3800;
                    kanister = "Super 10L";
                }

                if (CheckMoney(playerid) < preis) return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");

                Tanke[t][tBenzin] -= 10;
                new String[128];
                Spieler[playerid][pKanister]++;
                GivePlayerCash(playerid, -preis);
                Tanke[t][tKasse] += preis*70/100;
                format(String,sizeof(String),"Du hast einen Kanister %s für $%s gekauft.",kanister, AddDelimiters(preis));
                SendClientMessage(playerid,COLOR_RED,String);
            }
        }
        case DIALOG_KOFFERRAUM: {
            if(response) {
                new
                    String[64];
				if(listitem == 5) { ClearAnimations(playerid); return SendClientMessage(playerid, COLOR_RED, "Du kannst damit nichts anfangen!"); }
                format(String,sizeof(String),"Kofferraum - %s",g_KofferraumBezeichnung[listitem]);
                Spieler[playerid][pKofferraumItem] = listitem;
                ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_ACTION,DIALOG_STYLE_LIST,String,"Nehmen\nAblegen","Weiter","Abbruch");
            }
            else {
                ClearAnimations(playerid);
            }
        }
        case DIALOG_KOFFER: {
            if(response) {
                new
                    String[64];
                format(String,sizeof(String),"Koffer - %s",g_KofferBezeichnung[listitem]);
                Spieler[playerid][pKofferItem] = listitem;
                ShowPlayerDialog(playerid,DIALOG_KOFFER_ACTION,DIALOG_STYLE_LIST,String,"Nehmen\nAblegen","Weiter","Abbruch");
            }
        }
        case DIALOG_HANDYKAUFEN: {
            if(response) {
                if( CheckMoney(playerid) < g_Mobiltelefon[listitem][M_iPrice] ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld,um dieses Handy zu kaufen");
                }
                if(Biz[HandyShopBiz_Index][bWaren] < 3)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                Biz[HandyShopBiz_Index][bWaren] -= 3;
                Biz[HandyShopBiz_Index][bKasse] += g_Mobiltelefon[listitem][M_iPrice]*20/100;
                new
                    String[128];
                format(String,sizeof(String),"Glückwunsch, du hast folgendes Handy erworben: %s ($%s)",g_Mobiltelefon[listitem][M_sName], AddDelimiters(g_Mobiltelefon[listitem][M_iPrice]));
                Spieler[playerid][pHandy] = listitem;
                GivePlayerCash(playerid,-g_Mobiltelefon[listitem][M_iPrice]);
                return SendClientMessage(playerid,COLOR_YELLOW,String);
            }
        }
        case DIALOG_FIGHTSTYLE: {
            if(response) {
                if( CheckMoney(playerid) < g_KampfStyle[listitem][KS_iPrice] ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld,um dieses Kampfstyle zu kaufen");
                }
                new
                    String[128];
                format(String,sizeof(String),"Du hast folgenden Kampfstyle erlernt: %s ($%s)",g_KampfStyle[listitem][KS_sName], AddDelimiters(g_KampfStyle[listitem][KS_iPrice]));
                Spieler[playerid][pFightstyle] = g_KampfStyle[listitem][KS_iStyle];
                SetPlayerFightingStyle(playerid, Spieler[playerid][pFightstyle] );
                GivePlayerCash(playerid,-g_KampfStyle[listitem][KS_iPrice]);
                return SendClientMessage(playerid,COLOR_YELLOW,String);
            }
        }
        case DIALOG_KOFFERRAUM_ACTION: {
            if(response) {
                if(listitem == 0 ) {
                    new
                        item,
                        String[256],
                        header[64];
                    item = Spieler[playerid][pKofferraumItem];
                    format(header,sizeof(header),"Kofferraum - %s - Nehmen",g_KofferraumBezeichnung[item]);
                    format(String,sizeof(String),"Gib die Menge an %s an,die du abheben möchtest",g_KofferraumBezeichnung[item]);
                    ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_NEHMEN,DIALOG_STYLE_INPUT,header,String,"Ablegen","Abbruch");
                }
                else if(listitem == 1 ) {
                    new
                        item,
                        String[256],
                        header[64];
                    item = Spieler[playerid][pKofferraumItem];
                    format(header,sizeof(header),"Kofferraum - %s - Ablegen",g_KofferraumBezeichnung[item]);
                    format(String,sizeof(String),"Gib die Menge an %s an,die du ablegen möchtest",g_KofferraumBezeichnung[item]);
                    ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM_ABLEGEN,DIALOG_STYLE_INPUT,header,String,"Ablegen","Abbruch");
                }
            }
            else {
                ClearAnimations(playerid);
            }
        }
        case DIALOG_KOFFER_ACTION: {
            if(response) {
                if(listitem == 0 ) {
                    new
                        item,
                        String[256],
                        header[64];
                    item = Spieler[playerid][pKofferItem];
                    format(header,sizeof(header),"Koffer - %s - Nehmen",g_KofferBezeichnung[item]);
                    format(String,sizeof(String),"Gib die Menge an %s an,die du abheben möchtest",g_KofferBezeichnung[item]);
                    ShowPlayerDialog(playerid,DIALOG_KOFFER_NEHMEN,DIALOG_STYLE_INPUT,header,String,"Ablegen","Abbruch");
                }
                else if(listitem == 1 ) {
                    new
                        item,
                        String[256],
                        header[64];
                    item = Spieler[playerid][pKofferItem];
                    format(header,sizeof(header),"Koffer - %s - Ablegen",g_KofferBezeichnung[item]);
                    format(String,sizeof(String),"Gib die Menge an %s an,die du ablegen möchtest",g_KofferBezeichnung[item]);
                    ShowPlayerDialog(playerid,DIALOG_KOFFER_ABLEGEN,DIALOG_STYLE_INPUT,header,String,"Ablegen","Abbruch");
                }
            }
        }
        case DIALOG_KOFFERRAUM_NEHMEN: {
            ClearAnimations(playerid);
            if(response) {
                new
                    item;
                item = Spieler[playerid][pKofferraumItem];
                if( item == 2 ) {
                    if(HasWeaponBlock(playerid)) {
                        return SendWeaponBlockInfo(playerid);
                    }
                    new
                        wname[30],
                        vehicleid,
                        menge;
                    if(sscanf(inputtext,"d",menge)) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    if(menge < 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    new
                        weapon,
                        muni;
                    vehicleid = GetClosestVehicle(playerid,4.0);
                    if( vehicleid == INVALID_VEHICLE_ID ) {
                        SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht mehr in Nähe zu einem Fahrzeug");
                        return 1;
                    }
                    if( !IsTrunkOpen(vehicleid) ) {
                        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
                    }
                    Class_SplitWeaponInfo(g_Kofferraum[vehicleid][K_iWaffen], weapon,muni);
                    if( muni < menge ) {
                        return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Kofferraum");
                    }
                    new
                        String[128];
                    GetWeaponNameEx(weapon,wname,sizeof(wname));
                    GivePlayerWeapon(playerid,weapon,menge);
                    g_Kofferraum[vehicleid][K_iWaffen] = Class_CompressWeaponInfo( weapon , muni - menge );
                    format(String,sizeof(String),"Du hast %s mit %d Munition %s aus dem Kofferraum genommen",wname,menge,g_KofferraumBezeichnung[item]);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
                else {
                    new
                        vehicleid,
                        menge;
                    if(sscanf(inputtext,"d",menge)) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    if(menge < 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    vehicleid = GetClosestVehicle(playerid,4.0);
                    if( vehicleid == INVALID_VEHICLE_ID ) {
                        SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht mehr in Nähe zu einem Fahrzeug");
                        return 1;
                    }
                    if( !IsTrunkOpen(vehicleid) ) {
                        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
                    }
                    if(item == 0 ) {
                        if( g_Kofferraum[vehicleid][K_iDrogen] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Kofferraum");
                        }
                        g_Kofferraum[vehicleid][K_iDrogen] -= menge;
                        Spieler[playerid][pDrugs] += menge;
                    }
                    else if(item == 1 ) {
                        if( g_Kofferraum[vehicleid][K_iWaffenteile] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Kofferraum");
                        }
                        g_Kofferraum[vehicleid][K_iWaffenteile] -= menge;
                        Spieler[playerid][pWaffenteile] += menge;
                    }
                    else if(item == 3 ) {
                        if( g_Kofferraum[vehicleid][K_iWantedcodes] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Kofferraum");
                        }
                        g_Kofferraum[vehicleid][K_iWantedcodes] -= menge;
                        Spieler[playerid][pWantedCodes] += menge;
                    }
                    else if(item == 4 ) {
                        if( g_Kofferraum[vehicleid][K_iSpice] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Kofferraum");
                        }
                        //if(CheckPlayerSpice(playerid,menge)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur maximal 3.000 Gramm Spice besitzen!");
                        g_Kofferraum[vehicleid][K_iSpice] -= menge;
                        Spieler[playerid][pSpice] += menge;
                    }
                    new
                        String[128];
                    format(String,sizeof(String),"Du hast %d Stk %s aus dem Kofferraum genommen",menge,g_KofferraumBezeichnung[item]);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
            }
        }
        case DIALOG_KOFFER_NEHMEN: {
            if(response) {
                new
                    item;
                item = Spieler[playerid][pKofferItem];
                if( item == 2 ) {
                    new
                        wname[30],
                        //vehicleid,
                        menge;
                    if(sscanf(inputtext,"d",menge)) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    if(menge < 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    new
                        weapon,
                        muni;
                    /*
                    vehicleid = GetClosestVehicle(playerid,4.0);
                    if( vehicleid == INVALID_VEHICLE_ID ) {
                        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in mehr in Nähe zu einem Fahrzeug");
                        return 1;
                    }
                    if( !IsTrunkOpen(vehicleid) ) {
                        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
                    }
                    */
                    Class_SplitWeaponInfo(g_Koffer[playerid][K_iWaffen], weapon,muni);
                    if( muni < menge ) {
                        return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Koffer");
                    }
                    new
                        String[128];
                    GetWeaponNameEx(weapon,wname,sizeof(wname));
                    GivePlayerWeapon(playerid,weapon,menge);
                    g_Koffer[playerid][K_iWaffen] = Class_CompressWeaponInfo( weapon , muni - menge );
                    format(String,sizeof(String),"Du hast %s mit %d Munition %s aus dem Koffer genommen",wname,menge,g_KofferBezeichnung[item]);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
                else {
                    new
                        //vehicleid,
                        menge;
                    if(sscanf(inputtext,"d",menge)) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    if(menge < 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    /*
                    vehicleid = GetClosestVehicle(playerid,4.0);
                    if( vehicleid == INVALID_VEHICLE_ID ) {
                        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in mehr in Nähe zu einem Fahrzeug");
                        return 1;
                    }
                    if( !IsTrunkOpen(vehicleid) ) {
                        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
                    }
                    */
                    if(item == 0 ) {
                        if( g_Koffer[playerid][K_iDrogen] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Koffer");
                        }
                        g_Koffer[playerid][K_iDrogen] -= menge;
                        Spieler[playerid][pDrugs] += menge;
                    }
                    else if(item == 1 ) {
                        if( g_Koffer[playerid][K_iWaffenteile] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Koffer");
                        }
                        g_Koffer[playerid][K_iWaffenteile] -= menge;
                        Spieler[playerid][pWaffenteile] += menge;
                    }
                    else if(item == 3 ) {
                        if( g_Koffer[playerid][K_iWantedcodes] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Koffer");
                        }
                        g_Koffer[playerid][K_iWantedcodes] -= menge;
                        Spieler[playerid][pWantedCodes] += menge;
                    }
                    else if(item == 4 ) {
                        if( g_Koffer[playerid][K_iSpice] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge befindet sich nicht im Koffer");
                        }
                        //if(CheckPlayerSpice(playerid,menge)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur maximal 3.000 Gramm Spice besitzen!");
                        g_Koffer[playerid][K_iSpice] -= menge;
                        Spieler[playerid][pSpice] += menge;
                    }
                    new
                        String[128];
                    format(String,sizeof(String),"Du hast %d Stk %s aus dem Koffer genommen",menge,g_KofferBezeichnung[item]);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
            }
        }
        case DIALOG_KOFFERRAUM_ABLEGEN: {
            ClearAnimations(playerid);
            if(response) {
                new
                    item;
                item = Spieler[playerid][pKofferraumItem];
                if( item == 2 ) {
                    new
                        slot,
                        wname[30],
                        vehicleid,
                        weapon,
                        weapon_muni,
                        waffe,
                        menge;
                    if(sscanf(inputtext,"dd",waffe,menge)) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe! <WaffenID> <Munition>");
                    }
                    if(menge < 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    slot = GetWeaponSlot(waffe);
                    vehicleid = GetClosestVehicle(playerid,4.0);
                    if( vehicleid == INVALID_VEHICLE_ID ) {
                        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in mehr in Nähe zu einem Fahrzeug");
                        return 1;
                    }
                    GetPlayerWeaponData(playerid,slot,weapon,weapon_muni);
                    if( !IsTrunkOpen(vehicleid) ) {
                        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
                    }
                    if( weapon != waffe ) {
                        return SendClientMessage(playerid,COLOR_RED,"Du besitzt diese Waffe nicht.");
                    }
                    if( weapon_muni < menge ) {
                        return SendClientMessage(playerid,COLOR_RED,"Diese Menge der Waffe besitzt du nicht.");
                    }
                    new
                        kofferraum_waffe,
                        kofferraum_ammo;
                    Class_SplitWeaponInfo( g_Kofferraum[vehicleid][K_iWaffen] ,kofferraum_waffe , kofferraum_ammo );
                    if( g_Kofferraum[vehicleid][K_iWaffen] != 0 ) {
                        if( kofferraum_waffe != waffe ) {
                            return SendClientMessage(playerid,COLOR_RED,"Es befindet sich bereits eine andere Waffe im Kofferraum");
                        }
                    }
                    new
                        String[128];
                    GetWeaponNameEx(waffe,wname,sizeof(wname));
                    GivePlayerWeapon(playerid,waffe,-menge);
                    g_Kofferraum[vehicleid][K_iWaffen] = Class_CompressWeaponInfo( waffe , kofferraum_ammo + menge );
                    format(String,sizeof(String),"Du hast %s mit %d Munition %s in den Kofferraum gelegt",wname,menge,g_KofferraumBezeichnung[item]);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
                else {
                    new
                        vehicleid,
                        menge;
                    if(sscanf(inputtext,"d",menge)) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    if(menge < 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    vehicleid = GetClosestVehicle(playerid,4.0);
                    if( vehicleid == INVALID_VEHICLE_ID ) {
                        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in mehr in Nähe zu einem Fahrzeug");
                        return 1;
                    }
                    if( !IsTrunkOpen(vehicleid) ) {
                        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
                    }
                    if(item == 0 ) {
                        if( Spieler[playerid][pDrugs] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir");
                        }
                        g_Kofferraum[vehicleid][K_iDrogen] += menge;
                        Spieler[playerid][pDrugs] -= menge;
                    }
                    else if(item == 1 ) {
                        if( Spieler[playerid][pWaffenteile] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir");
                        }
                        g_Kofferraum[vehicleid][K_iWaffenteile] += menge;
                        Spieler[playerid][pWaffenteile] -= menge;
                    }
                    else if(item == 3 ) {
                        if( Spieler[playerid][pWantedCodes] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir");
                        }
                        g_Kofferraum[vehicleid][K_iWantedcodes] += menge;
                        Spieler[playerid][pWantedCodes] -= menge;
                    }
                    else if(item == 4 ) {
                        if( Spieler[playerid][pSpice] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir");
                        }
                        //if(CheckPlayerSpice(playerid,menge)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur maximal 3.000 Gramm Spice besitzen!");
                        g_Kofferraum[vehicleid][K_iSpice] += menge;
                        Spieler[playerid][pSpice] -= menge;
                    }
                    new
                        String[128];
                    format(String,sizeof(String),"Du hast %d Stk %s in den Kofferraum gelegt",menge,g_KofferraumBezeichnung[item]);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
            }
        }
        case DIALOG_KOFFER_ABLEGEN: {
            if(response) {
                new
                    item;
                item = Spieler[playerid][pKofferItem];
                if( item == 2 ) {
                    new
                        slot,
                        wname[30],
                        //vehicleid,
                        weapon,
                        weapon_muni,
                        waffe,
                        menge;
                    if(sscanf(inputtext,"dd",waffe,menge)) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe! <WaffenID> <Munition>");
                    }
                    if(menge < 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    slot = GetWeaponSlot(waffe);
                    /*
                    vehicleid = GetClosestVehicle(playerid,4.0);
                    if( vehicleid == INVALID_VEHICLE_ID ) {
                        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in mehr in Nähe zu einem Fahrzeug");
                        return 1;
                    }
                    */
                    GetPlayerWeaponData(playerid,slot,weapon,weapon_muni);
                    /*
                    if( !IsTrunkOpen(vehicleid) ) {
                        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
                    }
                    */
                    if( weapon != waffe ) {
                        return SendClientMessage(playerid,COLOR_RED,"Du besitzt diese Waffe nicht.");
                    }
                    if( weapon_muni < menge ) {
                        return SendClientMessage(playerid,COLOR_RED,"Diese Menge der Waffe besitzt du nicht.");
                    }
                    new
                        kofferraum_waffe,
                        kofferraum_ammo;
                    Class_SplitWeaponInfo( g_Koffer[playerid][K_iWaffen] ,kofferraum_waffe , kofferraum_ammo );
                    if( g_Koffer[playerid][K_iWaffen] != 0 ) {
                        if( kofferraum_waffe != waffe ) {
                            return SendClientMessage(playerid,COLOR_RED,"Es befindet sich bereits eine andere Waffe im Kofferraum");
                        }
                    }
                    new
                        String[128];
                    GetWeaponNameEx(waffe,wname,sizeof(wname));
                    GivePlayerWeapon(playerid,waffe,-menge);
                    g_Koffer[playerid][K_iWaffen] = Class_CompressWeaponInfo( waffe , kofferraum_ammo + menge );
                    format(String,sizeof(String),"Du hast %s mit %d Munition %s in den Kofferraum gelegt",wname,menge,g_KofferBezeichnung[item]);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
                else {
                    new
                        //vehicleid,
                        menge;
                    if(sscanf(inputtext,"d",menge)) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    if(menge < 1 ) {
                        return SendClientMessage(playerid,COLOR_RED,"Ungültig Eingabe!");
                    }
                    /*
                    vehicleid = GetClosestVehicle(playerid,4.0);
                    if( vehicleid == INVALID_VEHICLE_ID ) {
                        SendClientMessage(playerid, COLOR_RED, "Du befindest dich in mehr in Nähe zu einem Fahrzeug");
                        return 1;
                    }
                    if( !IsTrunkOpen(vehicleid) ) {
                        return SendClientMessage(playerid, COLOR_RED, "Der Kofferraum dieses Fahrzeuges ist geschlossen");
                    }
                    */
                    if(item == 0 ) {
                        if( Spieler[playerid][pDrugs] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir");
                        }
                        g_Koffer[playerid][K_iDrogen] += menge;
                        Spieler[playerid][pDrugs] -= menge;
                    }
                    else if(item == 1 ) {
                        if( Spieler[playerid][pWaffenteile] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir");
                        }
                        g_Koffer[playerid][K_iWaffenteile] += menge;
                        Spieler[playerid][pWaffenteile] -= menge;
                    }
                    else if(item == 3 ) {
                        if( Spieler[playerid][pWantedCodes] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir");
                        }
                        g_Koffer[playerid][K_iWantedcodes] += menge;
                        Spieler[playerid][pWantedCodes] -= menge;
                    }
                    else if(item == 4 ) {
                        if( Spieler[playerid][pSpice] < menge ) {
                            return SendClientMessage(playerid,COLOR_RED,"Diese Menge führst du nicht mit dir");
                        }
                        //if(CheckPlayerSpice(playerid,menge)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur maximal 3.000 Gramm Spice besitzen!");
                        g_Koffer[playerid][K_iSpice] += menge;
                        Spieler[playerid][pSpice] -= menge;
                    }
                    new
                        String[128];
                    format(String,sizeof(String),"Du hast %d Stk %s in den Koffer gelegt",menge,g_KofferBezeichnung[item]);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                }
            }
        }
        #if defined SILVESTER_EVENT
        case DIALOG_SILVESTER: {
            if(response) {
                new
                    index,
                    kosten,
                    stk,
                    String[128];
                if( listitem == 0 ) {
                    kosten = 4500;
                    stk = 5;
                    index = _:(SpielerDaten:pBoeller);
                }
                else if(listitem == 1 ) {
                    kosten = 8000;
                    stk = 5;
                    index = _:(SpielerDaten:pRaketen);
                }
                if( CheckMoney(playerid) < kosten ) {
                    SendClientMessage(playerid,COLOR_RED,"Nicht genug Geld");
                    return 1;
                }
                if( Spieler[playerid][SpielerDaten:index] > 0 ) {
                    SendClientMessage(playerid,COLOR_RED,"Du besitzt noch Feuerwerkskörper, die du zuerst aufgebrauchen musst");
                    return 1;
                }
                GivePlayerCash(playerid,-kosten);
                Spieler[playerid][SpielerDaten:index] += stk;
                format(String,sizeof(String),"Du hast folgendes gekauft: %s . Bestand: %d Stk",inputtext,Spieler[playerid][SpielerDaten:index]);
                SendClientMessage(playerid,COLOR_YELLOW,String);
            }
        }
        #endif
        case DIALOG_FAHRSCHULE_SOLO: {
            if(response) {
                new
                    modelid,
                    preis,
                    Float:x,
                    Float:y,
                    Float:z;
                GetPlayerPos(playerid,x,y,z);
                if(listitem == 0) { // Auto
                    if( Spieler[playerid][pCarLic] == 1 ) return SendClientMessage(playerid,COLOR_RED,"Du hast bereits einen Auto Führerschein.");
                    if( gettime() < Spieler[playerid][punixFSperre] ) return SendClientMessage(playerid,COLOR_YELLOW,"Du hast noch eine Fahrlizenz Sperre.");
                    modelid = 445;
                    preis = 20000;
                    if( preis > CheckMoney(playerid) ) return SendClientMessage(playerid,COLOR_RED,"Du hast leider zu wenig Geld!");
                	SetPlayerInterior(playerid, 0);
	                pFahrschulCar[playerid] = CreateVehicle(modelid,1196.0063,-1846.9019,13.3482,90.8546,3,3,-1);
	                aiVehicles[pFahrschulCar[playerid]] = VEH_FAHRSCHULCAR;
	                GivePlayerCash(playerid,-preis);
	                PutPlayerInVehicle(playerid, pFahrschulCar[playerid] , 0 );
	                SendClientMessage(playerid,COLOR_RED,"WICHTIG!!! Beachte bitte nun folgendes:");
	                SendClientMessage(playerid,COLOR_YELLOW,"Maximale Geschwindigkeit: Innenorts 80Km/h, Autobahn und Landstraßen 120Km/h.");
	                SendClientMessage(playerid,COLOR_YELLOW,"Von 19 bis 6 Uhr oder bei Unwetter muss das Licht eingeschaltet sein.");
	                SendClientMessage(playerid,COLOR_YELLOW,"Ampelanlagen >mit Ampelschild< sind von 15 bis 22 Uhr in Los Santos zu beachten - bei Rot halten, bei Grün fahren.");
	                SendClientMessage(playerid,COLOR_YELLOW,"An einspurigen Kreuzungen ohne Ampeln oder Verkehrszeichen gilt Rechts vor Links.");
	                SendClientMessage(playerid,COLOR_YELLOW,"Einsatzfahrzeugen haben beim Notfall Vorrang!");
	                SendClientMessage(playerid,COLOR_YELLOW,"Es gilt die gleiche Fahrrichtung und Fahrweise wie laut der Deutschen Straßenverkehrsordnung.");
	                SendClientMessage(playerid,COLOR_GREEN,"Los Gehts! PS: Steig nicht aus dem Fahrzeug aus und überschreite 90 km/h nicht!");
	                SetPlayerCheckpointEx(playerid, g_FahrpruefungCP[0][F_fX] , g_FahrpruefungCP[0][F_fY] , g_FahrpruefungCP[0][F_fZ] ,5.0, CP_FAHRSCHULE_OFFLINE );
	                LockCar(pFahrschulCar[playerid]);
	                gGas[pFahrschulCar[playerid]] = GetMaxTank(pFahrschulCar[playerid]);
	                pFahrschuleCP[playerid] = 0;
	                Spieler[playerid][tFahrschule] = SetTimerEx("Pulse_Fahrschule",1007,true,"d",playerid);
	                Spieler[playerid][pFahrschuleSpeedWarnung] = 0;
	                Spieler[playerid][unixFahrschuleZeit] = gettime() + 20;
                    new firmenindex = GetJobFirmaIndexByID(11); 
                    g_Firma[firmenindex][F_iKasse] += preis;
                }
                else if(listitem == 1 ) { // Motorrad
                    if( Spieler[playerid][pMotoLic] == 1 ) return SendClientMessage(playerid,COLOR_RED,"Du hast bereits einen Motorrad Führerschein.");
                    if( gettime() < Spieler[playerid][punixMotoSperre] ) return SendClientMessage(playerid,COLOR_YELLOW,"Du hast noch eine Fahrlizenz Sperre.");
                    preis = 30000;
                    modelid = 461;
                    if( preis > CheckMoney(playerid) ) return SendClientMessage(playerid,COLOR_RED,"Du hast leider zu wenig Geld!");
	                SetPlayerInterior(playerid, 0);
	                pFahrschulCar[playerid] = CreateVehicle(modelid,1196.0063,-1846.9019,13.3482,90.8546,3,3,-1);
	                aiVehicles[pFahrschulCar[playerid]] = VEH_FAHRSCHULCAR;
	                GivePlayerCash(playerid,-preis);
	                PutPlayerInVehicle(playerid, pFahrschulCar[playerid] , 0 );
	                SendClientMessage(playerid,COLOR_RED,"WICHTIG!!! Beachte bitte nun folgendes:");
	                SendClientMessage(playerid,COLOR_YELLOW,"Maximale Geschwindigkeit: Innenorts 80Km/h, Autobahn und Landstraßen 120Km/h.");
	                SendClientMessage(playerid,COLOR_YELLOW,"Von 19 bis 6 Uhr oder bei Unwetter muss das Licht eingeschaltet sein.");
	                SendClientMessage(playerid,COLOR_YELLOW,"Ampelanlagen >mit Ampelschild< sind von 15 bis 22 Uhr in Los Santos zu beachten - bei Rot halten, bei Grün fahren.");
	                SendClientMessage(playerid,COLOR_YELLOW,"An einspurigen Kreuzungen ohne Ampeln oder Verkehrszeichen gilt Rechts vor Links.");
	                SendClientMessage(playerid,COLOR_YELLOW,"Einsatzfahrzeugen haben beim Notfall Vorrang!");
	                SendClientMessage(playerid,COLOR_YELLOW,"Es gilt die gleiche Fahrrichtung und Fahrweise wie laut der Deutschen Straßenverkehrsordnung.");
	                SendClientMessage(playerid,COLOR_GREEN,"Los Gehts! PS: Steig nicht aus dem Fahrzeug aus und überschreite 90 km/h nicht!");
	                SetPlayerCheckpointEx(playerid, g_FahrpruefungCP[0][F_fX] , g_FahrpruefungCP[0][F_fY] , g_FahrpruefungCP[0][F_fZ] ,5.0, CP_FAHRSCHULE_OFFLINE );
	                LockCar(pFahrschulCar[playerid]);
	                gGas[pFahrschulCar[playerid]] = GetMaxTank(pFahrschulCar[playerid]);
	                pFahrschuleCP[playerid] = 0;
	                Spieler[playerid][tFahrschule] = SetTimerEx("Pulse_Fahrschule",1007,true,"d",playerid);
	                Spieler[playerid][pFahrschuleSpeedWarnung] = 0;
	                Spieler[playerid][unixFahrschuleZeit] = gettime() + 20;
                    new firmenindex = GetJobFirmaIndexByID(11); 
                    g_Firma[firmenindex][F_iKasse] += preis;
               	}
               	else if(listitem == 2 ) { // LKW-Schein
                    if( Spieler[playerid][pLKWLic] == 1 ) return SendClientMessage(playerid,COLOR_RED,"Du hast bereits einen LKW Führerschein.");
                    if( gettime() < Spieler[playerid][punixLKWSperre] ) return SendClientMessage(playerid,COLOR_YELLOW,"Du hast noch eine Fahrlizenz Sperre.");
                    preis = 70000;
                    modelid = 515;
                    if( preis > CheckMoney(playerid) ) return SendClientMessage(playerid,COLOR_RED,"Du hast leider zu wenig Geld!");
                    SetPlayerInterior(playerid, 0);
	                pFahrschulCar[playerid] = CreateVehicle(modelid,1196.0063,-1846.9019,13.3482,90.8546,3,3,-1);
	                aiVehicles[pFahrschulCar[playerid]] = VEH_FAHRSCHULCAR;
	                GivePlayerCash(playerid,-preis);
	                PutPlayerInVehicle(playerid, pFahrschulCar[playerid] , 0 );
	                SendClientMessage(playerid,COLOR_RED,"WICHTIG!!! Beachte bitte nun folgendes:");
	                SendClientMessage(playerid,COLOR_YELLOW,"Maximale Geschwindigkeit: Innenorts 80Km/h, Autobahn und Landstraßen 120Km/h.");
	                SendClientMessage(playerid,COLOR_YELLOW,"Von 19 bis 6 Uhr oder bei Unwetter muss das Licht eingeschaltet sein.");
	                SendClientMessage(playerid,COLOR_YELLOW,"Ampelanlagen >mit Ampelschild< sind von 15 bis 22 Uhr in Los Santos zu beachten - bei Rot halten, bei Grün fahren.");
	                SendClientMessage(playerid,COLOR_YELLOW,"An einspurigen Kreuzungen ohne Ampeln oder Verkehrszeichen gilt Rechts vor Links.");
	                SendClientMessage(playerid,COLOR_YELLOW,"Einsatzfahrzeugen haben beim Notfall Vorrang!");
	                SendClientMessage(playerid,COLOR_YELLOW,"Es gilt die gleiche Fahrrichtung und Fahrweise wie laut der Deutschen Straßenverkehrsordnung.");
	                SendClientMessage(playerid,COLOR_GREEN,"Los Gehts! PS: Steig nicht aus dem Fahrzeug aus und überschreite 90 km/h nicht!");
	                SetPlayerCheckpointEx(playerid, g_FahrpruefungCP[0][F_fX] , g_FahrpruefungCP[0][F_fY] , g_FahrpruefungCP[0][F_fZ] ,5.0, CP_FAHRSCHULE_OFFLINE );
	                LockCar(pFahrschulCar[playerid]);
	                gGas[pFahrschulCar[playerid]] = GetMaxTank(pFahrschulCar[playerid]);
	                pFahrschuleCP[playerid] = 0;
	                Spieler[playerid][tFahrschule] = SetTimerEx("Pulse_Fahrschule",1007,true,"d",playerid);
	                Spieler[playerid][pFahrschuleSpeedWarnung] = 0;
	                Spieler[playerid][unixFahrschuleZeit] = gettime() + 20;
                    new firmenindex = GetJobFirmaIndexByID(11); 
                    g_Firma[firmenindex][F_iKasse] += preis;
                }
	            else if(listitem == 3) { //Flugschein
	                if( Spieler[playerid][pFlyLic] == 1) return SendClientMessage(playerid, COLOR_RED, "Du hast bereits eine Fluglizenz!");
					preis = 100000;
					if( preis > CheckMoney(playerid) ) return SendClientMessage(playerid, COLOR_RED, "Du hast leider zu wenig Geld!");
					GivePlayerCash(playerid, -preis);
                    new firmenindex = GetJobFirmaIndexByID(11); 
					SendClientMessage(playerid, COLOR_GREEN, "Du hast erfolgreich eine Fluglizenz erworben!");
                    g_Firma[firmenindex][F_iKasse] += preis;
					Spieler[playerid][pFlyLic] = 1;
				}
				else if(listitem == 4) { //Bootsschein
	                if( Spieler[playerid][pBoatLic] == 1)  return SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Bootsschein!");
					preis = 40000;
					if( preis > CheckMoney(playerid) ) return SendClientMessage(playerid, COLOR_RED, "Du hast leider zu wenig Geld!");
					GivePlayerCash(playerid, -preis);
					Spieler[playerid][pBoatLic] = 1;
					SendClientMessage(playerid, COLOR_GREEN, "Du hast erfolgreich einen Bootsschein erworben!");
                    new firmenindex = GetJobFirmaIndexByID(11); 
                    g_Firma[firmenindex][F_iKasse] += preis;
				}
	            else if(listitem == 5) { //AWaffenschein
	                if( Spieler[playerid][pGunLic] == 1)  return SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Klasse A Waffenschein!");
					preis = 120000;
					if( preis > CheckMoney(playerid) ) return SendClientMessage(playerid, COLOR_RED, "Du hast leider zu wenig Geld!");
					GivePlayerCash(playerid, -preis);
					Spieler[playerid][pGunLic] = 1;
					SendClientMessage(playerid, COLOR_GREEN, "Du hast erfolgreich einen Waffenschein Klasse A erworben!");
                    new firmenindex = GetJobFirmaIndexByID(11); 
                    g_Firma[firmenindex][F_iKasse] += preis;
				}
	            else if(listitem == 6) { //BWaffenschein
	                if( Spieler[playerid][pGunLicB] == 1) return SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Klasse B Waffenschein!");
					preis = 240000;
					if( preis > CheckMoney(playerid) ) return SendClientMessage(playerid, COLOR_RED, "Du hast leider zu wenig Geld!");
					GivePlayerCash(playerid, -preis);
					Spieler[playerid][pGunLicB] = 1;
					SendClientMessage(playerid, COLOR_GREEN, "Du hast erfolgreich einen Waffenschein Klasse B erworben!");
                    new firmenindex = GetJobFirmaIndexByID(11); 
                    g_Firma[firmenindex][F_iKasse] += preis;
				}
			}
        }
        case DIALOG_FAHRSCHULE_REMOVESPERRE: {
            if(response) 
            {
                new preis;
				if(listitem == 0){
				    if( gettime() < Spieler[playerid][punixFSperre] ) {
                        preis = 100000;
                    	if( preis > CheckMoney(playerid) ) {
                    		return SendClientMessage(playerid,COLOR_RED,"Du hast leider zu wenig Geld!");
                		}
                		GivePlayerCash(playerid, -preis);
                		Kasse[Oamt] += preis;
                		Spieler[playerid][punixFSperre] = 0;
                		SendClientMessage(playerid, COLOR_GREEN, "Du hast die Sperre für deinen Autoschein freigekauft!");
                        new firmenindex = GetJobFirmaIndexByID(11); 
                        g_Firma[firmenindex][F_iKasse] += preis;
                    }else{
                        SendClientMessage(playerid, COLOR_RED, "Du hat auf diesem Führerschein keine Sperre.");
					}
				}else if(listitem == 1){
				    if( gettime() < Spieler[playerid][punixMotoSperre] ) {
                        preis = 120000;
                    	if( preis > CheckMoney(playerid) ) {
                    		return SendClientMessage(playerid,COLOR_RED,"Du hast leider zu wenig Geld!");
                		}
                		GivePlayerCash(playerid, -preis);
                		Kasse[Oamt] += preis;
                		Spieler[playerid][punixMotoSperre] = 0;
                		SendClientMessage(playerid, COLOR_GREEN, "Du hast die Sperre für deinen Motorradschein freigekauft!");
                        new firmenindex = GetJobFirmaIndexByID(11); 
                        g_Firma[firmenindex][F_iKasse] += preis;
                    }else{
                        SendClientMessage(playerid, COLOR_RED, "Du hat auf diesem Führerschein keine Sperre.");
					}
				}else if(listitem == 2){
				    if( gettime() < Spieler[playerid][punixLKWSperre] ) {
                        preis = 120000;
                    	if( preis > CheckMoney(playerid) ) {
                    		return SendClientMessage(playerid,COLOR_RED,"Du hast leider zu wenig Geld!");
                		}
                		GivePlayerCash(playerid, -preis);
                		Kasse[Oamt] += preis;
                		Spieler[playerid][punixLKWSperre] = 0;
                		SendClientMessage(playerid, COLOR_GREEN, "Du hast die Sperre für deinen LKW-Schein freigekauft!");
                        new firmenindex = GetJobFirmaIndexByID(11); 
                        g_Firma[firmenindex][F_iKasse] += preis;
                    }else{
                        SendClientMessage(playerid, COLOR_RED, "Du hat auf diesem Führerschein keine Sperre.");
					}
				}
                else if(listitem == 3)
                {
				    if( gettime() < Spieler[playerid][punixFlSperre] ) 
                    {
                        preis = 160000;
                    	if( preis > CheckMoney(playerid) ) 
                        {
                    		return SendClientMessage(playerid,COLOR_RED,"Du hast leider zu wenig Geld!");
                		}
                		GivePlayerCash(playerid, -preis);
                		Kasse[Oamt] += preis;
                		Spieler[playerid][punixFlSperre] = 0;
                		SendClientMessage(playerid, COLOR_GREEN, "Du hast die Sperre für deinen Flug-Schein freigekauft!");
                        new firmenindex = GetJobFirmaIndexByID(11); 
                        g_Firma[firmenindex][F_iKasse] += preis;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hat auf diesem Führerschein keine Sperre.");
					}
				}
			}
		}
		case DRIVEBYDIALOG: {
		    if(response) {
		        new weapID1, weapID2, weapAmmo;
		        if(listitem == 0){
					GetPlayerWeaponData(playerid, 4, weapID1, weapAmmo);
					if(weapID1 != 29){
						SetPlayerArmedWeapon(playerid, 0);
						ApplyAnimation(playerid,"PED","CAR_GETIN_RHS",4.1,0,0,0,0,1,1);
					} else {
						SetPlayerArmedWeapon(playerid, 29);
					}
				}else if(listitem == 1){
				    GetPlayerWeaponData(playerid, 5, weapID2, weapAmmo);
					if(weapID2 == 30){
						SetPlayerArmedWeapon(playerid, 30);
					}else if(weapID2 == 31){
						SetPlayerArmedWeapon(playerid, 31);
					}else{
					    SetPlayerArmedWeapon(playerid, 0);
					    ApplyAnimation(playerid,"PED","CAR_GETIN_RHS",4.1,0,0,0,0,1,1);
					}
				}else if(listitem == 2){
				    SetPlayerArmedWeapon(playerid, 0);
				    ApplyAnimation(playerid,"PED","CAR_GETIN_RHS",4.1,0,0,0,0,1,1);
				}
			}
					
		}
		case DIALOG_FRAKTIONEN_LIST: {
		    if(response) {
				new string[128];
				if(listitem == 0){
				    Spieler[playerid][pFraktion] = 0;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion Zivilist gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 1){
				    Spieler[playerid][pFraktion] = 1;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion LSPD gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 2){
					Spieler[playerid][pFraktion] = 2;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion FBI gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 3){
				    Spieler[playerid][pFraktion] = 3;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion SAMD gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 4){
					Spieler[playerid][pFraktion] = 4;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion San News gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 5){
				    Spieler[playerid][pFraktion] = 5;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion O-AMT gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 6){
					Spieler[playerid][pFraktion] = 6;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion Grove Street gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 7){
                    Spieler[playerid][pFraktion] = 7;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion Ballas gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 8){
				    Spieler[playerid][pFraktion] = 8;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion Fahrschule gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
    				SendClientMessage(playerid, COLOR_YELLOW,"[INFO] {FFFFFF}Die Fraktion Fahrschule ist nicht mehr im Script implementiert.");
				}else if(listitem == 9){
				    Spieler[playerid][pFraktion] = 9;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion Regierung gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 10){
				    Spieler[playerid][pFraktion] = 10;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion Yakuza gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 11){
				    Spieler[playerid][pFraktion] = 11;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion Aztecas gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 12){
				    Spieler[playerid][pFraktion] = 12;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion Cali Kartell gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 13){
				    Spieler[playerid][pFraktion] = 13;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion Vagos gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 14){
                    Spieler[playerid][pFraktion] = 14;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion Agency gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 15){
				    Spieler[playerid][pFraktion] = 15;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion Nine Demons gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 16){
				    Spieler[playerid][pFraktion] = 16;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion LVPD gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 17){
				    Spieler[playerid][pFraktion] = 17;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion Wheelman gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
    				SendClientMessage(playerid, COLOR_YELLOW,"[INFO] {FFFFFF}Die Fraktion Wheelman ist nicht mehr im Script implementiert.");
				}else if(listitem == 18){
                    Spieler[playerid][pFraktion] = 18;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion Army gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 19){
                    Spieler[playerid][pFraktion] = 19;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion Terroristen gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
    				SendClientMessage(playerid, COLOR_YELLOW,"[INFO] {FFFFFF}Die Fraktion Terroristen ist nicht mehr im Script implementiert.");
				}else if(listitem == 20){
				    Spieler[playerid][pFraktion] = 20;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion La Cosa Nostra gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 21){
				    Spieler[playerid][pFraktion] = 21;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion Triaden gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 22){
                    Spieler[playerid][pFraktion] = 22;
				    format(string,sizeof(string),"%s %s hat sich in die Fraktion Zollamt gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}
			}
		}
		case DIALOG_JOB_LIST: {
		    if(response) {
		        new string[128];
		        if(listitem == 0){
		            Spieler[playerid][pJob] = 0;
		            format(string,sizeof(string),"%s %s hat sich in den Job Arbeitslos gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 1){
				    Spieler[playerid][pJob] = 1;
		            format(string,sizeof(string),"%s %s hat sich in den Job Bauer gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 2){
				    Spieler[playerid][pJob] = 2;
		            format(string,sizeof(string),"%s %s hat sich in den Job Busfahrer gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 3){
				    Spieler[playerid][pJob] = 3;
		            format(string,sizeof(string),"%s %s hat sich in den Job Trucker gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 4){
				    Spieler[playerid][pJob] = 4;
		            format(string,sizeof(string),"%s %s hat sich in den Job Pilot gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 5){
				    Spieler[playerid][pJob] = 5;
		            format(string,sizeof(string),"%s %s hat sich in den Job KFZ-Mechaniker gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 6){
				    Spieler[playerid][pJob] = 6;
		            format(string,sizeof(string),"%s %s hat sich in den Job Anwalt gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 7){
				    Spieler[playerid][pJob] = 7;
		            format(string,sizeof(string),"%s %s hat sich in den Job Straßenreiniger gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 8){
				    Spieler[playerid][pJob] = 8;
		            format(string,sizeof(string),"%s %s hat sich in den Job Müllmann gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 9){
				    Spieler[playerid][pJob] = 9;
		            format(string,sizeof(string),"%s %s hat sich in den Job Gärtner gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 10){
				    Spieler[playerid][pJob] = 10;
		            format(string,sizeof(string),"%s %s hat sich in den Job Bauarbeiter gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 11){
				    Spieler[playerid][pJob] = 11;
		            format(string,sizeof(string),"%s %s hat sich in den Job Schiffsfahrer gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 12){
				    Spieler[playerid][pJob] = 12;
		            format(string,sizeof(string),"%s %s hat sich in den Job Geld-Transportfahrer gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 13){
				    Spieler[playerid][pJob] = 13;
		            format(string,sizeof(string),"%s %s hat sich in den Job Eisverkäufer gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 14){
				    Spieler[playerid][pJob] = 14;
		            format(string,sizeof(string),"%s %s hat sich in den Job Detektiv gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 15){
				    Spieler[playerid][pJob] = 15;
		            format(string,sizeof(string),"%s %s hat sich in den Job Pizzalieferant gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 16){
				    Spieler[playerid][pJob] = 16;
		            format(string,sizeof(string),"%s %s hat sich in den Job Taxifahrer gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 17){
				    Spieler[playerid][pJob] = 17;
		            format(string,sizeof(string),"%s %s hat sich in den Job Drogendealer gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 18){
				    Spieler[playerid][pJob] = 18;
		            format(string,sizeof(string),"%s %s hat sich in den Job Waffendealer gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 19){
				    Spieler[playerid][pJob] = 19;
		            format(string,sizeof(string),"%s %s hat sich in den Job Taschendieb gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 20){
				    Spieler[playerid][pJob] = 20;
		            format(string,sizeof(string),"%s %s hat sich in den Job Prostituierte gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 21){
				    Spieler[playerid][pJob] = 21;
		            format(string,sizeof(string),"%s %s hat sich in den Job Wanted-Hacker gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}else if(listitem == 22){
				    Spieler[playerid][pJob] = 22;
		            format(string,sizeof(string),"%s %s hat sich in den Job Autodieb gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}/*else if(listitem == 23){
				    Spieler[playerid][pJob] = 23;
		            format(string,sizeof(string),"%s %s hat sich in den Job Zugfahrer gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}*/
                else if(listitem == 23){
				    Spieler[playerid][pJob] = 23;
		            format(string,sizeof(string),"%s %s hat sich in den Job HotDog-Verkäufer gesetzt!", GetPlayerAdminRang(playerid), GetName(playerid));
    				SendAdminMessage(COLOR_YELLOW, string);
				}
			}
		}
        case DIALOG_SCHWARZMARKT_WAFFENTEILE: {
            if(response){
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new iValue = strval(inputtext);
                if(sscanf(inputtext, "{i}", iValue) || iValue < 1 || iValue > 500000) {
            	SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Gebe einen Wert zwischen 1 und 500.000 an.");
            	return 1;}
                if(Schwarzmarkt_Waffenteile < iValue) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Soviele Waffenteile sind im Schwarzmarkt nicht vorhanden!");
                if(CheckMoney(playerid) < iValue*Schwarzmarkt_Waffenteile_Preis) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast nicht soviel Geld dabei!");
                if(Spieler[playerid][swWT]+iValue > schwarzmarktMaxWT) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Mit dieser Menge würdest du das Einkaufslimit übersteigen.");
                if(Spieler[playerid][swWT] >= schwarzmarktMaxWT) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast die wöchentliche Ankaufssperre erreicht. Komm am Montag wieder.");
                Schwarzmarkt_Waffenteile -= iValue;
                Spieler[playerid][pWaffenteile] += iValue;
                GivePlayerCash(playerid, -iValue*Schwarzmarkt_Waffenteile_Preis);
                Kasse[BBikerZ] += iValue*Schwarzmarkt_Waffenteile_Preis;
                Spieler[playerid][swWT] += iValue;
                SCMFormatted(playerid, COLOR_GREEN, "* Du hast %i Waffenteile für $%i erworben.", iValue, iValue*Schwarzmarkt_Waffenteile_Preis);
            }
        }
        case DIALOG_SCHWARZMARKT_WAFFENTEILE_ADMIN: {
            if(response){
                new String[256];
                if(listitem == 0){//einlagern
                    format(String, sizeof(String), "{FFFFFF}Wie viele Waffenteile möchtest du in den Schwarzmarkt einlagern?\n\nWaffenteile auf deiner Hand: %i\nWaffenteile im Schwarzmarkt: %i", Spieler[playerid][pWaffenteile], Schwarzmarkt_Waffenteile);
                    ShowPlayerDialog(playerid, DIALOG_SCHWARZMARKT_WAFFENTEILE_LAGERN, DIALOG_STYLE_INPUT, "Schwarzmarkt: Waffenteile - Einlagern", String, "Einlagern", "Abbrechen");
                }else if(listitem == 1){
                    format(String, sizeof(String), "{FFFFFF}Wie viele Waffenteile möchtest du in den Schwarzmarkt auslagern?\n\nWaffenteile im Schwarzmarkt: %i", Schwarzmarkt_Waffenteile);
                    ShowPlayerDialog(playerid, DIALOG_SCHWARZMARKT_WAFFENTEILE_AUSLAGERN, DIALOG_STYLE_INPUT, "Schwarzmarkt: Waffenteile - Auslagern", String, "Einlagern", "Abbrechen");
                }else if(listitem == 2){
                    format(String, sizeof(String), "{FFFFFF}Hier kannst du den Preis der Waffenteile anpassen.\n\nWaffenteile im Schwarzmarkt: %i\nStückpreis: %i", Schwarzmarkt_Waffenteile, Schwarzmarkt_Waffenteile_Preis);
                    ShowPlayerDialog(playerid, DIALOG_SCHWARZMARKT_WAFFENTEILE_PREIS, DIALOG_STYLE_INPUT, "Schwarzmarkt: Waffenteile - Auslagern", String, "Einlagern", "Abbrechen");
                }
            }
        }
        case DIALOG_SCHWARZMARKT_WAFFENTEILE_LAGERN: {
            if(response){
                new String[128];
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new iValue = strval(inputtext);
                if(iValue < 0) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(iValue > Spieler[playerid][pWaffenteile]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast nicht soviele Waffenteile auf der Hand!");
                Schwarzmarkt_Waffenteile += iValue;
                Spieler[playerid][pWaffenteile] -= iValue;
                format(String, sizeof(String), "Fraktionsmitglied %s hat %i Waffenteile in dem Schwarzmarkt gelegt!", GetName(playerid), iValue);
                SendFraktionMessage(15, COLOR_YELLOW, String);
            }
        }
        case DIALOG_SCHWARZMARKT_WAFFENTEILE_AUSLAGERN: {
            if(response){
                new String[128];
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new iValue = strval(inputtext);
                if(iValue < 0) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(Schwarzmarkt_Waffenteile < iValue) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Soviele Waffenteile befinden sich nicht im Schwarzmarkt!");
                Schwarzmarkt_Waffenteile -= iValue;
                Spieler[playerid][pWaffenteile] += iValue;
                format(String, sizeof(String), "Fraktionsmitglied %s hat %i Waffenteile aus dem Schwarzmarkt genommen!", GetName(playerid), iValue);
                SendFraktionMessage(15, COLOR_YELLOW, String);
            }
        }
        case DIALOG_SCHWARZMARKT_WAFFENTEILE_PREIS: {
            if(response){
                new String[128];
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new iValue = strval(inputtext);
                if(iValue < 0) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                Schwarzmarkt_Waffenteile_Preis = iValue;
                format(String, sizeof(String), "Fraktionsmitglied %s hat den Preis der Waffenteile auf $%i geändert!", GetName(playerid), iValue);
                SendFraktionMessage(15, COLOR_YELLOW, String);
            }
        }
        case DIALOG_SCHWARZMARKT_DROGEN: {
            if(response){
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new iValue = strval(inputtext);
                if(sscanf(inputtext, "{i}", iValue) || iValue < 1 || iValue > 500000) {
            	SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Gebe einen Wert zwischen 1 und 500.000 an.");
            	return 1;}
                if(Schwarzmarkt_Drogen < iValue) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Soviele Drogen sind im Schwarzmarkt nicht vorhanden!");
                if(CheckMoney(playerid) < iValue*Schwarzmarkt_Drogen_Preis) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast nicht soviel Geld dabei!");
                if(Spieler[playerid][swDrogen]+iValue > schwarzmarktMaxDrogen) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Mit dieser Menge würdest du das Einkaufslimit übersteigen.");
                if(Spieler[playerid][swDrogen] >= schwarzmarktMaxDrogen) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast die wöchentliche Ankaufssperre erreicht. Komm am Montag wieder.");
                Schwarzmarkt_Drogen -= iValue;
                Spieler[playerid][pDrugs] += iValue;
                Kasse[BBikerZ] += iValue*Schwarzmarkt_Drogen_Preis;
                GivePlayerCash(playerid, -iValue*Schwarzmarkt_Drogen_Preis);
                Spieler[playerid][swDrogen] += iValue;
                SCMFormatted(playerid, COLOR_GREEN, "* Du hast %i Drogen für $%i erworben.", iValue, iValue*Schwarzmarkt_Drogen_Preis);
            }
        }
        case DIALOG_SCHWARZMARKT_DROGEN_ADMIN: {
            if(response){
                new String[256];
                if(listitem == 0){//einlagern
                    format(String, sizeof(String), "{FFFFFF}Wie viele Drogen möchtest du in den Schwarzmarkt einlagern?\n\nDrogen auf deiner Hand: %i\nDrogen im Schwarzmarkt: %i", Spieler[playerid][pDrugs], Schwarzmarkt_Drogen);
                    ShowPlayerDialog(playerid, DIALOG_SCHWARZMARKT_DROGEN_LAGERN, DIALOG_STYLE_INPUT, "Schwarzmarkt: Drogen - Einlagern", String, "Einlagern", "Abbrechen");
                }else if(listitem == 1){
                    format(String, sizeof(String), "{FFFFFF}Wie viele Drogen möchtest du in den Schwarzmarkt auslagern?\n\nDrogen im Schwarzmarkt: %i", Schwarzmarkt_Drogen);
                    ShowPlayerDialog(playerid, DIALOG_SCHWARZMARKT_DROGEN_AUSLAGERN, DIALOG_STYLE_INPUT, "Schwarzmarkt: Drogen - Auslagern", String, "Einlagern", "Abbrechen");
                }else if(listitem == 2){
                    format(String, sizeof(String), "{FFFFFF}Hier kannst du den Preis der Drogen anpassen.\n\nDrogen im Schwarzmarkt: %i\nStückpreis: %i", Schwarzmarkt_Drogen, Schwarzmarkt_Drogen_Preis);
                    ShowPlayerDialog(playerid, DIALOG_SCHWARZMARKT_DROGEN_PREIS, DIALOG_STYLE_INPUT, "Schwarzmarkt: Drogen - Auslagern", String, "Einlagern", "Abbrechen");
                }
            }
        }
        case DIALOG_SCHWARZMARKT_DROGEN_LAGERN: {
            if(response){
                new String[128];
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new iValue = strval(inputtext);
                if(iValue < 0) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(iValue > Spieler[playerid][pDrugs]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast nicht soviele Drogen auf der Hand!");
                Schwarzmarkt_Drogen += iValue;
                Spieler[playerid][pDrugs] -= iValue;
                format(String, sizeof(String), "Fraktionsmitglied %s hat %i Drogen in dem Schwarzmarkt gelegt!", GetName(playerid), iValue);
                SendFraktionMessage(15, COLOR_YELLOW, String);
            }
        }
        case DIALOG_SCHWARZMARKT_DROGEN_AUSLAGERN: {
            if(response){
                new String[128];
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new iValue = strval(inputtext);
                if(iValue < 0) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(Schwarzmarkt_Drogen < iValue) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Soviele Drogen befinden sich nicht im Schwarzmarkt!");
                Schwarzmarkt_Drogen -= iValue;
                Spieler[playerid][pDrugs] += iValue;
                format(String, sizeof(String), "Fraktionsmitglied %s hat %i Drogen aus dem Schwarzmarkt genommen!", GetName(playerid), iValue);
                SendFraktionMessage(15, COLOR_YELLOW, String);
            }
        }
        case DIALOG_SCHWARZMARKT_DROGEN_PREIS: {
            if(response){
                new String[128];
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new iValue = strval(inputtext);
                if(iValue < 0) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                Schwarzmarkt_Drogen_Preis = iValue;
                format(String, sizeof(String), "Fraktionsmitglied %s hat den Preis der Drogen auf $%i geändert!", GetName(playerid), iValue);
                SendFraktionMessage(15, COLOR_YELLOW, String);
            }
        }
        case DIALOG_SCHWARZMARKT_SPICE: {
            if(response){
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                new iValue = strval(inputtext);
                if(sscanf(inputtext, "{i}", iValue) || iValue < 1 || iValue > 500000) {
            	SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Gebe einen Wert zwischen 1 und 500.000 an.");
            	return 1;}
                if(Schwarzmarkt_Spice < iValue) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Soviele Spice sind im Schwarzmarkt nicht vorhanden!");
                if(CheckMoney(playerid) < iValue*Schwarzmarkt_Spice_Preis) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast nicht soviel Geld dabei!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");

                //Check Player Spice
                //if(CheckPlayerSpice(playerid,iValue)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur maximal 3.000 Gramm Spice besitzen!");

                if(Spieler[playerid][swSpice]+iValue > schwarzmarktMaxSpice) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Mit dieser Menge würdest du das Einkaufslimit übersteigen.");
                if(Spieler[playerid][swSpice] >= schwarzmarktMaxSpice) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast die wöchentliche Ankaufssperre erreicht. Komm am Montag wieder.");

                Schwarzmarkt_Spice -= iValue;
                Spieler[playerid][pSpice] += iValue;
                Kasse[BBikerZ] += iValue*Schwarzmarkt_Spice_Preis;
                GivePlayerCash(playerid, -iValue*Schwarzmarkt_Spice_Preis);
                Spieler[playerid][swSpice] += iValue;
                SCMFormatted(playerid, COLOR_GREEN, "* Du hast %i Spice für $%i erworben.", iValue, iValue*Schwarzmarkt_Spice_Preis);
            }
        }
        case DIALOG_SCHWARZMARKT_SPICE_ADMIN: {
            if(response){
                new String[256];
                if(listitem == 0){//einlagern
                    format(String, sizeof(String), "{FFFFFF}Wie viele Spice möchtest du in den Schwarzmarkt einlagern?\n\nSpice auf deiner Hand: %i\nSpice im Schwarzmarkt: %i", Spieler[playerid][pSpice], Schwarzmarkt_Spice);
                    ShowPlayerDialog(playerid, DIALOG_SCHWARZMARKT_SPICE_LAGERN, DIALOG_STYLE_INPUT, "Schwarzmarkt: Spice - Einlagern", String, "Einlagern", "Abbrechen");
                }else if(listitem == 1){
                    format(String, sizeof(String), "{FFFFFF}Wie viele Spice möchtest du in den Schwarzmarkt auslagern?\n\nSpice im Schwarzmarkt: %i", Schwarzmarkt_Spice);
                    ShowPlayerDialog(playerid, DIALOG_SCHWARZMARKT_SPICE_AUSLAGERN, DIALOG_STYLE_INPUT, "Schwarzmarkt: Spice - Auslagern", String, "Einlagern", "Abbrechen");
                }else if(listitem == 2){
                    format(String, sizeof(String), "{FFFFFF}Hier kannst du den Preis der Spice anpassen.\n\nSpice im Schwarzmarkt: %i\nStückpreis: %i", Schwarzmarkt_Spice, Schwarzmarkt_Spice_Preis);
                    ShowPlayerDialog(playerid, DIALOG_SCHWARZMARKT_SPICE_PREIS, DIALOG_STYLE_INPUT, "Schwarzmarkt: Spice - Auslagern", String, "Einlagern", "Abbrechen");
                }
            }
        }
        case DIALOG_SCHWARZMARKT_SPICE_LAGERN: {
            if(response){
                new String[128];
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new iValue = strval(inputtext);
                if(iValue < 0) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(iValue > Spieler[playerid][pSpice]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast nicht soviele Spice auf der Hand!");
                Schwarzmarkt_Spice += iValue;
                Spieler[playerid][pSpice] -= iValue;
                format(String, sizeof(String), "Fraktionsmitglied %s hat %i Spice in dem Schwarzmarkt gelegt!", GetName(playerid), iValue);
                SendFraktionMessage(15, COLOR_YELLOW, String);
            }
        }
        case DIALOG_SCHWARZMARKT_SPICE_AUSLAGERN: {
            if(response){
                new String[128];
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new iValue = strval(inputtext);
                if(iValue < 0) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(Schwarzmarkt_Spice < iValue) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Soviele Spice befinden sich nicht im Schwarzmarkt!");
                Schwarzmarkt_Spice -= iValue;
                Spieler[playerid][pSpice] += iValue;
                format(String, sizeof(String), "Fraktionsmitglied %s hat %i Spice aus dem Schwarzmarkt genommen!", GetName(playerid), iValue);
                SendFraktionMessage(15, COLOR_YELLOW, String);
            }
        }
        case DIALOG_SCHWARZMARKT_SPICE_PREIS: {
            if(response){
                new String[128];
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new iValue = strval(inputtext);
                if(iValue < 0) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                Schwarzmarkt_Spice_Preis = iValue;
                format(String, sizeof(String), "Fraktionsmitglied %s hat den Preis der Spice-Drogen auf $%i geändert!", GetName(playerid), iValue);
                SendFraktionMessage(15, COLOR_YELLOW, String);
            }
        }
        case DIALOG_SCHWARZMARKT_WANTEDCODES: {
            if(response){
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new iValue = strval(inputtext);
                if(sscanf(inputtext, "{i}", iValue) || iValue < 1 || iValue > 500000) {
            	SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Gebe einen Wert zwischen 1 und 500.000 an.");
            	return 1;}
                if(Schwarzmarkt_Wantedcodes < iValue) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Soviele Wantedcodes sind im Schwarzmarkt nicht vorhanden!");
                if(CheckMoney(playerid) < iValue*Schwarzmarkt_Wantedcodes_Preis) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast nicht soviel Geld dabei!");
                if(Spieler[playerid][swWCodes]+iValue > schwarzmarktMaxWCodes) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Mit dieser Menge würdest du das Einkaufslimit übersteigen.");
                if(Spieler[playerid][swWCodes] >= schwarzmarktMaxWCodes) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast die wöchentliche Ankaufssperre erreicht. Komm am Montag wieder.");
                Schwarzmarkt_Wantedcodes -= iValue;
                Spieler[playerid][pWantedCodes] += iValue;
                Kasse[BBikerZ] += iValue*Schwarzmarkt_Wantedcodes_Preis;
                GivePlayerCash(playerid, -iValue*Schwarzmarkt_Wantedcodes_Preis);
                Spieler[playerid][swWCodes] += iValue;
                SCMFormatted(playerid, COLOR_GREEN, "* Du hast %i Wantedcodes für $%i erworben.", iValue, iValue*Schwarzmarkt_Wantedcodes_Preis);
            }
        }
        case DIALOG_SCHWARZMARKT_WANTEDCODES_ADMIN: {
            if(response){
                new String[256];
                if(listitem == 0){//einlagern
                    format(String, sizeof(String), "{FFFFFF}Wie viele Wantedcodes möchtest du in den Schwarzmarkt einlagern?\n\nWantedcodes auf deiner Hand: %i\nWantedcodes im Schwarzmarkt: %i", Spieler[playerid][pWantedCodes], Schwarzmarkt_Wantedcodes);
                    ShowPlayerDialog(playerid, DIALOG_SCHWARZMARKT_WANTEDCODES_LAGERN, DIALOG_STYLE_INPUT, "Schwarzmarkt: Wantedcodes - Einlagern", String, "Einlagern", "Abbrechen");
                }else if(listitem == 1){
                    format(String, sizeof(String), "{FFFFFF}Wie viele Wantedcodes möchtest du in den Schwarzmarkt auslagern?\n\nWantedcodes im Schwarzmarkt: %i", Schwarzmarkt_Wantedcodes);
                    ShowPlayerDialog(playerid, DIALOG_SCHWARZMARKT_WANTEDCODES_AUSLAGERN, DIALOG_STYLE_INPUT, "Schwarzmarkt: Wantedcodes - Auslagern", String, "Einlagern", "Abbrechen");
                }else if(listitem == 2){
                    format(String, sizeof(String), "{FFFFFF}Hier kannst du den Preis der Wantedcodes anpassen.\n\nWantedcodes im Schwarzmarkt: %i\nStückpreis: %i", Schwarzmarkt_Wantedcodes, Schwarzmarkt_Wantedcodes_Preis);
                    ShowPlayerDialog(playerid, DIALOG_SCHWARZMARKT_WANTEDCODES_PREIS, DIALOG_STYLE_INPUT, "Schwarzmarkt: Wantedcodes - Auslagern", String, "Einlagern", "Abbrechen");
                }
            }
        }
        case DIALOG_SCHWARZMARKT_WANTEDCODES_LAGERN: {
            if(response){
                new String[128];
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new iValue = strval(inputtext);
                if(iValue < 0) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(iValue > Spieler[playerid][pWantedCodes]) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast nicht soviele Wantedcodes auf der Hand!");
                Schwarzmarkt_Wantedcodes += iValue;
                Spieler[playerid][pWantedCodes] -= iValue;
                format(String, sizeof(String), "Fraktionsmitglied %s hat %i Wantedcodes in dem Schwarzmarkt gelegt!", GetName(playerid), iValue);
                SendFraktionMessage(15, COLOR_YELLOW, String);
            }
        }
        case DIALOG_SCHWARZMARKT_WANTEDCODES_AUSLAGERN: {
            if(response){
                new String[128];
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new iValue = strval(inputtext);
                if(iValue < 0) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(Schwarzmarkt_Wantedcodes < iValue) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Soviele Wantedcodes befinden sich nicht im Schwarzmarkt!");
                Schwarzmarkt_Wantedcodes -= iValue;
                Spieler[playerid][pWantedCodes] += iValue;
                format(String, sizeof(String), "Fraktionsmitglied %s hat %i Wantedcodes aus dem Schwarzmarkt genommen!", GetName(playerid), iValue);
                SendFraktionMessage(15, COLOR_YELLOW, String);
            }
        }
        case DIALOG_SCHWARZMARKT_WANTEDCODES_PREIS: {
            if(response){
                new String[128];
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new iValue = strval(inputtext);
                if(iValue < 0) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                Schwarzmarkt_Wantedcodes_Preis = iValue;
                format(String, sizeof(String), "Fraktionsmitglied %s hat den Preis der Wantedcodes auf $%i geändert!", GetName(playerid), iValue);
                SendFraktionMessage(15, COLOR_YELLOW, String);
            }
        }
        case DIALOG_SCHWARZMARKT_WEAPONS: {
            if(response){
                new Price, Schuss, needWaffenteile, giveWeapon;
                if(listitem == 0){//Sniper
                    Price = 30000;
                    Schuss = 30;
                    needWaffenteile = 500;
                    giveWeapon = 34;
                }else if(listitem == 1){//uzi
                    Price = 50000;
                    Schuss = 200;
                    needWaffenteile = 1000;
                    giveWeapon = 28;
                }else if(listitem == 2){//tec9
                    Price = 50000;
                    Schuss = 200;
                    needWaffenteile = 1000;
                    giveWeapon = 32;
                }else if(listitem == 3){//Katana
                    Price = 10000;
                    Schuss = 1;
                    needWaffenteile = 150;
                    giveWeapon = 8;
                }else if(listitem == 4){//Granate
                    Price = 2000000;
                    Schuss = 1;
                    needWaffenteile = 1000;
                    giveWeapon = 16;
                }
                if(Schwarzmarkt_Waffenteile < needWaffenteile) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Es befinden sich nicht genug Waffenteile im Schwarzmarkt, um diese Waffe bauen zu können!");
                if(CheckMoney(playerid) < Price) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast zu wenig Geld dabei!");
                GivePlayerCash(playerid, -Price);
                GivePlayerWeapon(playerid, giveWeapon, Schuss);
                Schwarzmarkt_Waffenteile -= needWaffenteile;
                Kasse[BBikerZ] += Price;
            }
        }
        case DIALOG_SCHWARZMARKT_ILLEGALE_GEGENSTAENDE: {
            if(response){
                if(listitem == 0){
                    new needWaffenteile = 1500;
                    new price = 50000;
                    if(Schwarzmarkt_Waffenteile < needWaffenteile) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Es befinden sich nicht genug Waffenteile im Schwarzmarkt, um diese Waffe bauen zu können!");
                    if(CheckMoney(playerid) < price) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast zu wenig Geld dabei!");
                    GivePlayerCash(playerid, -price);
                    Spieler[playerid][pC4] += 1;
                    Schwarzmarkt_Waffenteile -= needWaffenteile;
                    Kasse[BBikerZ] += price;
                    SendClientMessage(playerid, COLOR_GREEN, "* Du hast C4 gekauft. Sei vorsichtig damit!");
                }else if(listitem == 1){
                    new needWaffenteile = 80;
                    new price = 10000;
                    if(Schwarzmarkt_Waffenteile < needWaffenteile) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Es befinden sich nicht genug Waffenteile im Schwarzmarkt, um diese Waffe bauen zu können!");
                    if(CheckMoney(playerid) < price) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast zu wenig Geld dabei!");
                    GivePlayerCash(playerid, -price);
                    Spieler[playerid][pBrecheisen] += 1;
                    Schwarzmarkt_Waffenteile -= needWaffenteile;
                    Kasse[BBikerZ] += price;
                    SendClientMessage(playerid, COLOR_GREEN, "* Du hast ein Brecheisen gekauft. Sei vorsichtig damit!");
                }
            }
        }
        case DIALOG_SCHWARZMARKT_KENNZEICHEN: {
            if(response){
                new price = 1000000;
                if(CheckMoney(playerid) < price) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast zu wenig Geld dabei!");
                new
				    String[256+64],
				    slot,
					vehicleid,
					modelid;
				slot = PlayerKey[playerid];
				vehicleid = PlayerCar[playerid][slot][CarId];
				modelid = GetVehicleModel(vehicleid);
                new k;
                for(;k<sizeof(word);k++)
                {
                    if(strfind(inputtext,word[k],true)!=-1)
                    {
                        SendClientMessage(playerid,COLOR_RED,"Beleidigungen dieser Art sind strengst verbotenen und werden mit einer dauerhaften Sperrung bestraft!");
                        break;
                    }
                }
                if(strlen(inputtext) > 7) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Dieses Kennzeichen ist zu lang!");
                format(String,sizeof(String),"Das Fahrzeug %s hat nun das Kennzeichen %s erhalten!", CarName[modelid-400],inputtext);
                SendClientMessage(playerid, COLOR_GREEN, String);
                GivePlayerCash(playerid,-1000000);
                Kasse[BBikerZ] += price;
                format(PlayerCar[playerid][slot][CarNumberplate],32,"%s",inputtext);
                SetVehicleNumberPlate( vehicleid , inputtext );
            }
        }
        case DIALOG_SCHWARZMARKT_SIM: {
            if(response){
                new price = 500000;
                if(CheckMoney(playerid) < price) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast zu wenig Geld dabei!");
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(strlen(inputtext) != 6) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Die Handynummer muss sechs Stellen haben!");
                new iValue = strval(inputtext);
                new NameCoins[MAX_PLAYER_NAME];
                GetPlayerName(playerid, NameCoins, sizeof(NameCoins));
                SetPVarInt(playerid, "NEWHANDYNR", iValue);
                new queryCoins[128];
                format(queryCoins, sizeof(queryCoins), "SELECT `HandyNr` FROM `accounts` WHERE `HandyNr` = '%i'", iValue);
                mysql_pquery(queryCoins,THREAD_NEW_SIM,playerid,gSQL,MySQLThreadOwner);
            }
        }
        case DIALOG_CONFIRM_DRUGS: {
            if(response){
                new string[128];
                format(string, sizeof(string), "Du hast %i Drogen für $%i an den Server verkauft!", Spieler[playerid][pDrugs], Spieler[playerid][pDrugs] * 300);
                SendClientMessage(playerid, COLOR_GREEN, string);
                GivePlayerCash(playerid, Spieler[playerid][pDrugs] * 300);
                Spieler[playerid][pDrugs] = 0;
            }
        }
        case DIALOG_CONFIRM_WT: {
            if(response){
                new string[128];
                format(string, sizeof(string), "Du hast %i Waffenteile für $%i an den Server verkauft!", Spieler[playerid][pWaffenteile], Spieler[playerid][pWaffenteile] * 22);
                SendClientMessage(playerid, COLOR_GREEN, string);
                GivePlayerCash(playerid, Spieler[playerid][pWaffenteile] * 22);
                Spieler[playerid][pWaffenteile] = 0;
            }
        }
        case DIALOG_CONFIRM_WCODES: {
            if(response){
                new string[128];
                format(string, sizeof(string), "Du hast %i Wantedcodes für $%i an den Server verkauft!", Spieler[playerid][pWantedCodes], Spieler[playerid][pWantedCodes] * 1502);
                SendClientMessage(playerid, COLOR_GREEN, string);
                GivePlayerCash(playerid, Spieler[playerid][pWantedCodes] * 1502);
                Spieler[playerid][pWantedCodes] = 0;
            }
        }
        case DIALOG_CONFIRM_SPICE: {
            if(response){
                new string[128];
                format(string, sizeof(string), "Du hast %i Spice für $%i an den Server verkauft!", Spieler[playerid][pSpice], Spieler[playerid][pSpice] * 700);
                SendClientMessage(playerid, COLOR_GREEN, string);
                GivePlayerCash(playerid, Spieler[playerid][pSpice] * 700);
                Spieler[playerid][pSpice] = 0;
            }
        }
        case DIALOG_PIN_AENDERN_PIN: {
            if(response) {
                new
                    pin;
                pin = strval(inputtext);
                if( pin != Spieler[playerid][pBankKontoPin] ) {
                    ClearAnimations(playerid);
                    return SendClientMessage(playerid,COLOR_RED,"Die Bankpinnummer war nicht korrekt!");
                }
                if( strlen(inputtext) != 4 ) {
                    ClearAnimations(playerid);
                    return SendClientMessage(playerid,COLOR_RED,"Dein PinCode muss 4 Zeichen haben");
                }
                if( pin <= 0 ) {
                    ClearAnimations(playerid);
                    return SendClientMessage(playerid,COLOR_RED,"Ungültiger Pin");
                }
                ShowPlayerDialog(playerid, DIALOG_PIN_AENDERN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"BankPin", COLOR_HEX_WHITE"Gib unten deinen neuen BankPin ein", "Fertig", "Abbrechen");
            }
        }
        case DIALOG_PIN_AENDERN: {
            ClearAnimations(playerid);
            if(response) {
                new
                    String[128],
                    pincode = strval(inputtext);
                if( !HasBankKonto(playerid) ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast kein Bankkonto");
                }
                if( strlen(inputtext) != 4 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Dein PinCode muss 4 Zeichen haben");
                }
                if( pincode <= 0 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Ungültiger Pin");
                }
                format(String,sizeof(String),"Du hast deinen PinCode geändert ! Neuer BankPin: %04d",pincode);
                SendClientMessage(playerid,COLOR_YELLOW,String);
                format(String,sizeof(String),"UPDATE `accounts` SET `BankPin` = '%s' WHERE `Name` = '%s'",inputtext,GetName(playerid));
                mysql_oquery(String,THREAD_DUMMY,INVALID_PLAYER_ID,gSQL);
                SendClientMessage(playerid,COLOR_ORANGE,"Merke dir diesen Gut");
                Spieler[playerid][pBankKontoPin] = pincode;
            }
        }
        case DIALOG_ABHEBEN_PIN: {
            if(response) {
                new
                    pin;
                pin = strval(inputtext);
                if( pin != Spieler[playerid][pBankKontoPin] ) {
                    ClearAnimations(playerid);
                    return SendClientMessage(playerid,COLOR_RED,"Die Bankpinnummer war nicht korrekt!");
                }
                ShowPlayerDialog(playerid, DIALOG_ABHEBEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du abheben?", "Abheben", "Abbrechen");
            }
        }
        case DIALOG_UEBERWEISEN_PIN: {
            if(response) {
                new pin;
                pin = strval(inputtext);
                if( pin != Spieler[playerid][pBankKontoPin] ) {
                    ClearAnimations(playerid);
                    return SendClientMessage(playerid,COLOR_RED,"Die Bankpinnummer war nicht korrekt!");
                }
                ShowPlayerDialog(playerid, DIALOG_BANKWERT, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Überweisung", COLOR_HEX_WHITE"Bitte gebe den gewünschten Betrag an.", "Weiter", "Abbrechen");
            }
        }
        case DIALOG_BANKKONTO: {
            ClearAnimations(playerid);
            if(response) {
                if( HasBankKonto(playerid) ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast bereits ein Bankkonto");
                }
                if( CheckMoney(playerid) < 1200 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast nicht genug Geld auf der Hand, um das Konto einzurichten");
                }
                Spieler[playerid][pBankKonto] = 1;
                SendClientMessage(playerid,COLOR_GREEN,"Dein Bankkonto wurde erfolgreich eingerichtet");
                GivePlayerCash(playerid,-1200);
                return 1;
            }
        }
        case DIALOG_BANKKONTO_PIN: {
            ClearAnimations(playerid);
            if(response) {
                new
                    String[128],
                    pincode = strval(inputtext);
                if( !HasBankKonto(playerid) ) {
                    return SendClientMessage(playerid,COLOR_RED,"Du hast kein Bankkonto!");
                }
                if( pincode < 0 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Ungültiger Pin.");
                }
                if( strlen(inputtext) != 4 ) {
                    return SendClientMessage(playerid,COLOR_RED,"Dein Pin-Code muss 4 Zeichen haben.");
                }
                format(String,sizeof(String),"Du hast folgenden Pin-Code gewählt: %04d.",pincode);
                SendClientMessage(playerid,COLOR_YELLOW,String);
                SendClientMessage(playerid,COLOR_ORANGE,"Merke dir diesen gut!");
                Spieler[playerid][pBankKontoPin] = pincode;
                return 1;
            }
        }
        case DIALOG_TANKMENGE: {
            if(response) {
                if (Refueling[playerid]) return SendClientMessage(playerid, COLOR_RED, "Du tankst bereits!");
                new menge, tanke = IsPlayerAtTanke(playerid);
                if (tanke == 999) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht mehr an einer Tankstelle.");
                if( sscanf(inputtext, "d", menge) || menge < 1)
                    return ShowPlayerDialog(playerid,DIALOG_TANKMENGE,DIALOG_STYLE_INPUT,"Tankmenge","Gib die Tankmenge in Litern unten an","Auftanken","Abbruch");

                new String[128], maxsprit, vehicleid;
                vehicleid = GetPlayerVehicleID(playerid);
                if (!vehicleid) return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Fahrzeug mehr.");
                if (vehicleRefueling[vehicleid]) return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird bereits betankt.");
                //modelid = GetVehicleModel(vehicleid);
                maxsprit = GetMaxTank(vehicleid) - gGas[vehicleid];
                if( menge > maxsprit ) {
                    format(String,sizeof(String),"Du kannst maximal %d Liter tanken.",maxsprit);
                    SendClientMessage(playerid,COLOR_RED,String);
                    return ShowPlayerDialog(playerid,DIALOG_TANKMENGE,DIALOG_STYLE_INPUT,"Tankmenge","Gib die Tankmenge in Litern an:","Auftanken","Abbruch");
                }

                if (Tanke[tanke][tBenzin] < menge) return SendClientMessage(playerid, COLOR_RED, "Die Tanke hat nicht mehr so viel Benzin.");
                SetPVarInt(playerid, "FILLUP.AMOUNT", menge);
                return ShowPlayerDialog(playerid, DIALOG_FILLUP_PAYMETHOD, DIALOG_STYLE_MSGBOX, "Bezahlmethode", "{FFFFFF}Wie möchtest du bezahlen?", "Barzahlung", "EC-Karte");
            }
        }
        case DIALOG_FILLUP_PAYMETHOD: {
            if (Refueling[playerid]) return SendClientMessage(playerid, COLOR_RED, "Du tankst bereits!");
            new menge = GetPVarInt(playerid, "FILLUP.AMOUNT"), tanke = IsPlayerAtTanke(playerid);
            if (tanke == 999) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht mehr an einer Tankstelle.");
            if (menge < 1) return SendClientMessage(playerid, COLOR_RED, "Du kannst keine 0 Liter tanken.");

            new price = menge * Tanke[tanke][taiFillCost][RefuelType[playerid]];
            if (response) { // Barzahlung
                if (Spieler[playerid][pCash] < price) {
                    SendClientMessage(playerid, COLOR_RED, "So viel Geld hast du nicht dabei.");
                    return 1;
                }

                new vehicleid = GetPlayerVehicleID(playerid);
                if (!vehicleid) return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Fahrzeug mehr.");
                if (vehicleRefueling[vehicleid]) return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird bereits betankt.");
                DeletePVar(playerid, "FILLUP.AMOUNT");
                SetTimerEx("Fillup", RefuelWait, 0, "iiiii", playerid, menge, price, RefuelType[playerid], 0);
                Refueling[playerid] = vehicleid;
                vehicleRefueling[vehicleid] = 1;
                FreezePlayer(playerid);
                SendClientMessage(playerid, COLOR_WHITE, "Dein Fahrzeug wird betankt, bitte warten ...");
                ShowBuyInformation(playerid,"~y~Fahrzeug wird ~w~betankt!");
                return 1;
            }
            else { // EC-Karte
                if (!Spieler[playerid][pBankKonto]) return SendClientMessage(playerid, COLOR_RED, "Du hast kein Bankkonto.");
                if (Spieler[playerid][pBank] < price) return SendClientMessage(playerid, COLOR_RED, "So viel Geld hast du nicht auf dem Konto.");
                return ShowPlayerDialog(playerid, DIALOG_FILLUP_ECPIN, DIALOG_STYLE_INPUT, "Tankstelle - Bankpin", "Bitte gebe deinen EC-Pin ein:", "Bestätigen", "Abbrechen");
            }
        }
        case DIALOG_FILLUP_ECPIN: {
            if (Refueling[playerid]) return SendClientMessage(playerid, COLOR_RED, "Du tankst bereits!");
            new menge = GetPVarInt(playerid, "FILLUP.AMOUNT"), tanke = IsPlayerAtTanke(playerid);
            if (tanke == 999) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht mehr an einer Tankstelle.");
            if (menge < 1) return SendClientMessage(playerid, COLOR_RED, "Du kannst keine 0 Liter tanken.");
            new price = menge * Tanke[tanke][taiFillCost][RefuelType[playerid]];
            new vehicleid = GetPlayerVehicleID(playerid);
            if (!vehicleid) return SendClientMessage(playerid,COLOR_RED,"Du sitzt in keinem Fahrzeug mehr.");
            if (vehicleRefueling[vehicleid]) return SendClientMessage(playerid, COLOR_RED, "Das Fahrzeug wird bereits betankt.");

            if (!response) return 1;
            if (strval(inputtext) != Spieler[playerid][pBankKontoPin]) {
                SendClientMessage(playerid, COLOR_RED, "Dein EC-Pin war nicht korrekt!");
                return ShowPlayerDialog(playerid, DIALOG_FILLUP_ECPIN, DIALOG_STYLE_INPUT, "Tankstelle - Bankpin", "Bitte gebe deinen EC-Pin ein:", "Bestätigen", "Abbrechen");
            }

            DeletePVar(playerid, "FILLUP.AMOUNT");
            SetTimerEx("Fillup", RefuelWait, 0, "iiiii", playerid, menge, price, RefuelType[playerid], 1);
            Refueling[playerid] = vehicleid;
            vehicleRefueling[vehicleid] = 1;
            FreezePlayer(playerid);
            SendClientMessage(playerid, COLOR_WHITE, "Dein Fahrzeug wird betankt, bitte warten ...");
            ShowBuyInformation(playerid,"~y~Fahrzeug wird ~w~betankt!");
            return 1;
        }
        case DIALOG_TANKE: {
            if(response) {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keiner Tanke!");
                if(Tanke[t][tBenzin] < 1)return SendClientMessage(playerid, COLOR_RED, "Die Tankstelle hat kein Benzin mehr.");
                new
                    vehicleid,
                    modelid;
                vehicleid = GetPlayerVehicleID(playerid);
                if(vehicleid) {
                    modelid = GetVehicleModel(vehicleid);
                    if( GetVehicleModelKraftstoff(modelid) != listitem ) {
                        return SendClientMessage(playerid, COLOR_RED, "Dein Fahrzeug verträgt diesen Kraftstoff nicht.");
                    }
                    RefuelType[playerid] = listitem;
                    ShowPlayerDialog(playerid,DIALOG_TANKMENGE,DIALOG_STYLE_INPUT,"Tankmenge","Gib die Tankmenge in Litern unten an","Auftanken","Abbruch");
                    /*
                    SetTimerEx("Fillup", RefuelWait, 0, "ii", playerid,listitem);
                    Refueling[playerid] = 1;
                    FreezePlayer(playerid);
                    SendClientMessage(playerid, COLOR_WHITE, "Dein Fahrzeug wird betankt, bitte warten ...");
                    */
                }
            }
        }
        case DIALOG_CHECK_SECURECODE: {
            new
                String[128],
                query[128];
            if(response) {
                mysql_real_escape_string(inputtext,String,gSQL,sizeof(String) );
                format(query,sizeof(query),"SELECT * FROM `accounts` WHERE `Name` = '%s' AND `SecureCode` = '%s'",GetName(playerid),String);
                mysql_pquery(query,THREAD_CHECK_SECURECODE,playerid,gSQL,MySQLThreadOwner);
                // -> Threaded
            }
            else {
                format(String,sizeof(String),"Ein Teammitglied hat dich zur Sicherheitsabfrage geschickt, um dich als Account Eigentümer zu identifizieren.\n\nGib deinen Sicherheitscode korrekt ein! ( %d/3 ):",Spieler[playerid][pSecureCodeLevel]);
                ShowPlayerDialog(playerid, DIALOG_CHECK_SECURECODE , DIALOG_STYLE_INPUT,COLOR_HEX_LIGHTBLUE"Sicherheitsabfrage:", String , "Absenden" , "");
            }
        }
        case DIALOG_SET_SECURECODE: {
            if(response) {
                new
                    securecode[128],
                    string[128],
                    len;
                len = strlen(inputtext);
                if( !(4 <= len <= 10) ) {
                    SendClientMessage(playerid,COLOR_RED,"Dein Sicherheitscode ist zu lang bzw zu kurz ( 4 - 10 Zeichen )");
                    return ShowPlayerDialog(playerid,DIALOG_SET_SECURECODE,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Sicherheitscode:", COLOR_HEX_WHITE"Bitte gib unten deinen persönlichen Sicherheitscode ein.\nDieser wird genutzt, um dich zukünftig eindeutig zu identifizieren.\n\nDein Sicherheitscode muss zwischen 4 und 10 Zeichen haben,\ndarf Zahlen und Sonderzeichen enthalten.\n\nBitte merke dir dein Sicherheitscode(!) gut","Bestätigen","");
                }
                mysql_real_escape_string(inputtext,securecode,gSQL,sizeof(securecode) );
                format(string,sizeof(string),"UPDATE `accounts` SET `SecureCode` = '%s' WHERE `Name` = '%s'",securecode,GetName(playerid));
                mysql_pquery(string,THREAD_SET_SECURECODE,playerid,gSQL,MySQLThreadOwner);

                format(string,sizeof(string),"Dein Sicherheitscode wurde gespeichert! ( %s )",securecode);
                SendClientMessage(playerid,COLOR_YELLOW,string);

                SpawnPlayerEx(playerid);
                SetCameraBehindPlayer(playerid);
            }
            else {
                return ShowPlayerDialog(playerid,DIALOG_SET_SECURECODE,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Sicherheitscode:", COLOR_HEX_WHITE"Bitte gib unten deinen persönlichen Sicherheitscode ein.\nDieser wird genutzt, um dich zukünftig eindeutig zu identifizieren.\n\nDein Sicherheitscode muss zwischen 4 und 10 Zeichen haben\n, darf Zahlen und Sonderzeichen enthalten.\n\nBitte merke dir dein Sicherheitscode(!) gut","Bestätigen","");
            }
        }
        case DIALOG_SECURECODE_REGISTER: {
            if(response) {
                new
                    securecode[128],
                    string[128],
                    len;
                len = strlen(inputtext);
                if( !(4 <= len <= 10) ) {
                    SendClientMessage(playerid,COLOR_RED,"Dein Sicherheitscode ist zu lang bzw zu kurz ( 4 - 10 Zeichen )");
                    return ShowPlayerDialog(playerid,DIALOG_SECURECODE_REGISTER,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Sicherheitscode:", COLOR_HEX_WHITE"Bitte gib unten deinen persönlichen Sicherheitscode ein.\nDieser wird genutzt, um dich zukünftig eindeutig zu identifizieren.\n\nDein Sicherheitscode muss zwischen 4 und 10 Zeichen haben\n, darf Zahlen und Sonderzeichen enthalten.\n\nBitte merke dir dein Sicherheitscode(!) gut","Bestätigen","");
                }
                mysql_real_escape_string(inputtext,securecode,gSQL,sizeof(securecode) );
                format(string,sizeof(string),"UPDATE `accounts` SET `SecureCode` = '%s' WHERE `Name` = '%s'",securecode,GetName(playerid));
                mysql_pquery(string,THREAD_SET_SECURECODE,playerid,gSQL,MySQLThreadOwner);

                format(string,sizeof(string),"Dein Sicherheitscode wurde gespeichert! ( %s )",securecode);
                SendClientMessage(playerid,COLOR_YELLOW,string);

                // Tutorial starten
                SendClientMessage(playerid,COLOR_WHITE,"Du hast ein Großteil geschaft! Jetzt bekommst du noch eine schnell Server Einführung,");
                SendClientMessage(playerid,COLOR_WHITE,"lehne dich zurück und schaue es dir an");
                ShowPlayerDialog(playerid, DIALOG_TUT_2, DIALOG_STYLE_MSGBOX, COLOR_HEX_LIGHTBLUE"Tutorial: Fragen",string, "Weiter", "Abbrechen");
                //ALT TUTORIAL SpawnPlayer(playerid);
            }
            else {
                return ShowPlayerDialog(playerid,DIALOG_SET_SECURECODE,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Sicherheitscode:", COLOR_HEX_WHITE"Bitte gib unten deinen persönlichen Sicherheitscode ein.\nDieser wird genutzt, um dich zukünftig eindeutig zu identifizieren.\n\nDein Sicherheitscode muss zwischen 4 und 10 Zeichen haben\n, darf Zahlen und Sonderzeichen enthalten.\n\nBitte merke dir dein Sicherheitscode(!) gut","Bestätigen","");
            }
        }
        case DIALOG_WLAGERCOP: {
            if(response) {
                if(listitem == 0 ) {
                    GivePlayerWeapon(playerid, 24, 100);
                }
                else if(listitem == 1 ) {
                    GivePlayerWeapon(playerid, 31, 150);
                }
                else if(listitem == 2 ) {
                    GivePlayerWeapon(playerid, 25, 200);
                }
                else if(listitem == 3 ) {
                    GivePlayerWeapon(playerid, 34, 200);
                }
                else if(listitem == 4 ) {
                    GivePlayerWeapon(playerid, 17, 10);
                }
                else if(listitem == 5 ) {
                    GivePlayerWeapon(playerid, 43, 30);
                }
                else if(listitem == 6 ) {
                    GivePlayerWeapon(playerid, 46, 1);
                }
            }
        }
        case DIALOG_STARTBONUS: {
            if(response) {
                if( Spieler[playerid][pStartbonus] ) return 1;
                new
                    geld,
                    respekt,
                    String[128];
                if(listitem == 0 ) {
                    respekt = 3;
                    format(String,sizeof(String),"Du hast folgenden Startbonus gewählt: %d Respektpunkte",respekt);
                }
                else if(listitem == 1 ) {
                    geld = 15000;
                    format(String,sizeof(String),"Du hast folgenden Startbonus gewählt: +$%s", AddDelimiters(geld));
                }
                // Zufall
                else if(listitem == 2 ) {
                    if( random(2) == 0 ) {
                        geld = 18000;
                        respekt = 2;
                    }
                    else {
                        geld = 8000;
                        respekt = 4;
                    }
                    format(String,sizeof(String),"Du hast den Zufalls Startbonus gewählt: %d Respektpunkte und +$%s",respekt, AddDelimiters(geld));
                }
                // 1 Level + 2 Spielstunden
                else if(listitem == 3 ) {
                	Spieler[playerid][pHours] = 4;
                    Spieler[playerid][pLevel] = 4;
            		SetPlayerScore(playerid, 4);
                    format(String,sizeof(String),"Du hast folgenden Startbonus gewählt 4 Level up + 4 Spielstunden", AddDelimiters(geld));
                }
                GivePlayerRP(playerid, respekt);
                GivePlayerCash(playerid,geld);

                SendClientMessage(playerid,COLOR_LIGHTRED2,String);
                Spieler[playerid][pStartbonus] = 1;
                format(String,sizeof(String),"UPDATE `accounts` SET `Startbonus` = 1 WHERE `Name` = '%s'",GetName(playerid) );
                mysql_pquery( String , THREAD_STARTBONUS , playerid, gSQL,MySQLThreadOwner);
                SaveAccount(playerid);
            }
        }
        case DIALOG_CMDHELP: {
            if(response) {
                if(listitem == 0 ) {
                    new String[128];
                    format(String, sizeof(String), "%s{DEA81A}- | LyD ~ Hilfsdatenbank | -{FFFFFF}\n\nGebe hier dein Suchbegriff ein:", String);
                    ShowPlayerDialog(playerid,DIALOG_ANTWORT,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE "Hilfsdatenbank", String, "Suchen", "Abbrechen");
                }
                if(listitem == 1 ) {//AllgemeinHelp
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t\t{DEA81A}- | LyD ~ Übersicht der allgemeinen Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(StandartHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, StandartHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, StandartHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der allgemeinen Befehle | -", String, "OK", "");
                }
                else if(listitem == 2 ) {//MoneyHelp
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Finanz-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(MoneyHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, MoneyHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, MoneyHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Finanz-Befehle | -", String, "OK", "");
                }
                else if(listitem == 3 ) {//DeathmatchHelp
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Deathmatch-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(DeathmatchHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, DeathmatchHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, DeathmatchHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Deathmatch-Befehle | -", String, "OK", "");
                }
                else if(listitem == 4 ) {//SellHelp
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Verkaufen-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(SellHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, SellHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, SellHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Verkaufen-Befehle | -", String, "OK", "");
                }
                else if(listitem == 5 ) {//CasinoHelp
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Casino-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(CasinoHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, CasinoHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, CasinoHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Casino-Befehle | -", String, "OK", "");
                }
                else if(listitem == 6 ) {//VehicleHelp
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Fahrzeug-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(VehicleHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, VehicleHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, VehicleHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Fahrzeug-Befehle | -", String, "OK", "");
                }
                else if(listitem == 7 ) {//HouseHelp
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t\t{DEA81A}- | LyD ~ Übersicht der Haus-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(HouseHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, HouseHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, HouseHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Haus-Befehle | -", String, "OK", "");
                }
                else if(listitem == 8 ) {//BizHelp
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t\t{DEA81A}- | LyD ~ Übersicht der Business-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(BizHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, BizHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, BizHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Business-Befehle | -", String, "OK", "");
                }
                else if(listitem == 9 ) {//TankstelleHelp
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t\t\t{DEA81A}- | LyD ~ Übersicht der Tankstellen-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(TankstelleHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, TankstelleHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, TankstelleHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Tankstellen-Befehle | -", String, "OK", "");
                }
                else if(listitem == 10 ) {//FirmenHelp
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Firmen-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(FirmenHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, FirmenHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, FirmenHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Firmen-Befehle | -", String, "OK", "");
                }
                else if(listitem == 11){//ChatHelp
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Chat-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(ChatHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, ChatHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, ChatHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Chat-Befehle | -", String, "OK", "");
                }
                else if(listitem == 12){//HaustierHelp
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Haustier-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(HaustierHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, HaustierHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, HaustierHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Haustier-Befehle | -", String, "OK", "");
                }
                else if(listitem == 13){//LeaderHelp
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Leader-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(LeaderHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, LeaderHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, LeaderHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Leader-Befehle | -", String, "OK", "");
                }else if(listitem == 14){//Job1Help
                    new maxcmdcount = 0, String[4128];
                    format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Job-Befehle | -{FFFFFF}\n\n", String);

                    if(Spieler[playerid][pJob] != 22 && Spieler[playerid][pJob] != 19 && Spieler[playerid][pJob] != 14) {
                        format(String, sizeof(String), "%s/showjob, ", String);

                        if(Spieler[playerid][pJob] != 14 && Spieler[playerid][pJob] != 17 && Spieler[playerid][pJob] != 18 && Spieler[playerid][pJob] != 21)
                            format(String, sizeof(String), "%s/jobkleidung, ", String);
                    }
                    
                    if(Spieler[playerid][pJob] == 1){
                        for(new i = 0; i < sizeof(Job1Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job1Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job1Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 2){
                        for(new i = 0; i < sizeof(Job2Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job2Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job2Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 3){
                        for(new i = 0; i < sizeof(Job3Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job3Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job3Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 4){
                        for(new i = 0; i < sizeof(Job4Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job4Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job4Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 5){
                        for(new i = 0; i < sizeof(Job5Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job5Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job5Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 6){
                        for(new i = 0; i < sizeof(Job6Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job6Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job6Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 7){
                        for(new i = 0; i < sizeof(Job7Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job7Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job7Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 8){
                        for(new i = 0; i < sizeof(Job8Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job8Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job8Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 9){
                        for(new i = 0; i < sizeof(Job9Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job9Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job9Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 10){
                        for(new i = 0; i < sizeof(Job10Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job10Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job10Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 11){
                        for(new i = 0; i < sizeof(Job11Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job11Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job11Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 12){
                        for(new i = 0; i < sizeof(Job12Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job12Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job12Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 13){
                        for(new i = 0; i < sizeof(Job13Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job13Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job13Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 14){
                        for(new i = 0; i < sizeof(Job14Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job14Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job14Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 15){
                        for(new i = 0; i < sizeof(Job15Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job15Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job15Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 16){
                        for(new i = 0; i < sizeof(Job16Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job16Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job16Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 17){
                        for(new i = 0; i < sizeof(Job17Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job17Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job17Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 18){
                        for(new i = 0; i < sizeof(Job18Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job18Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job18Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 19){
                        for(new i = 0; i < sizeof(Job19Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job19Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job19Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 20){
                        for(new i = 0; i < sizeof(Job20Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job20Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job20Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 21){
                        for(new i = 0; i < sizeof(Job21Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job21Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job21Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else if(Spieler[playerid][pJob] == 22){
                        for(new i = 0; i < sizeof(Job22Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job22Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job22Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }/*
                    else if(Spieler[playerid][pJob] == 23){
                        for(new i = 0; i < sizeof(Job23Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job23Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job23Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }*/
                    else if(Spieler[playerid][pJob] == 23){
                        for(new i = 0; i < sizeof(Job23Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Job23Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Job23Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }
                    else{
                        format(String, sizeof(String), "%sDu hast keinen Job!", String);
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Job-Befehle | -", String, "OK", "");
                }
                else if(listitem == 15){//Frakhelp
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Fraktions-Befehle | -{FFFFFF}\n\n", String);
                    if(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18){
                        for(new i = 0; i < sizeof(Frak1Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Frak1Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Frak1Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }else if(Spieler[playerid][pFraktion] == 3){
                        for(new i = 0; i < sizeof(Frak3Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Frak3Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Frak3Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }else if(Spieler[playerid][pFraktion] == 4){
                        for(new i = 0; i < sizeof(Frak4Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Frak4Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Frak4Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }else if(Spieler[playerid][pFraktion] == 5){
                        for(new i = 0; i < sizeof(Frak5Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Frak5Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Frak5Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }else if(Spieler[playerid][pFraktion] == 6 || Spieler[playerid][pFraktion] == 7 || Spieler[playerid][pFraktion] == 6
                    || Spieler[playerid][pFraktion] == 10 || Spieler[playerid][pFraktion] == 11 || Spieler[playerid][pFraktion] == 12
                    || Spieler[playerid][pFraktion] == 13 || Spieler[playerid][pFraktion] == 20 || Spieler[playerid][pFraktion] == 21){
                        for(new i = 0; i < sizeof(FrakGangHelp); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, FrakGangHelp[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, FrakGangHelp[i]);
                            }
                            maxcmdcount++;
                        }
                    }else if(Spieler[playerid][pFraktion] == 14){
                        for(new i = 0; i < sizeof(Frak14Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Frak14Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Frak14Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }else if(Spieler[playerid][pFraktion] == 15){
                        for(new i = 0; i < sizeof(Frak15Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Frak15Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Frak15Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }else if(Spieler[playerid][pFraktion] == 15){
                        for(new i = 0; i < sizeof(Frak19Help); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Frak19Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Frak19Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }else if(Spieler[playerid][pFraktion] == 22) {
                        for(new i = 0; i < sizeof(Frak1Help); i++){
                        	if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Frak1Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Frak1Help[i]);
                            }
                            maxcmdcount++;
                        }
                    }else if(Spieler[playerid][pFraktion] == 9) {
                        for(new i = 0; i < sizeof(Frak9Help); i++){
                        	if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, Frak9Help[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, Frak9Help[i]);
                            }
                            maxcmdcount++;
                        }
					}else{
                        format(String, sizeof(String), "%sDu bist in keiner Fraktion!", String);
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Fraktions-Befehle | -", String, "OK", "");
                }else if(listitem == 16){
                    return cmd_adminhelp(playerid, "");
                }

            }
        }
        case DIALOG_AHELP:
        {
            if(response){
                if(Spieler[playerid][pFV] == 1){//Frakverwalter
                    if(listitem == 0){
                        new maxcmdcount = 0, String[2048];
                        format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Fraktionsverwalter-Befehle | -{FFFFFF}\n\n", String);
                        for(new i = 0; i < sizeof(FraktionsverwalterHelp); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, FraktionsverwalterHelp[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, FraktionsverwalterHelp[i]);
                            }
                            maxcmdcount++;
                        }
                        format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                        ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Fraktionsverwalter-Befehle | -", String, "OK", "");
                    }else if(listitem == 1){//Supporter
                        new maxcmdcount = 0, String[2048];
                        format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Supporter-Befehle | -{FFFFFF}\n\n", String);
                        for(new i = 0; i < sizeof(SupporterHelp); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, SupporterHelp[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, SupporterHelp[i]);
                            }
                            maxcmdcount++;
                        }
                        format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                        ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Supporter-Befehle | -", String, "OK", "");
                    }else if(listitem == 2){//Event Supporter
                        new maxcmdcount = 0, String[2048];
                        format(String, sizeof(String), "%s\t\t\t\t{DEA81A}- | LyD ~ Übersicht der Event-Supporter-Befehle | -{FFFFFF}\n\n", String);
                        for(new i = 0; i < sizeof(EventSupporterHelp); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, EventSupporterHelp[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, EventSupporterHelp[i]);
                            }
                            maxcmdcount++;
                        }
                        format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                        ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Event-Supporter-Befehle | -", String, "OK", "");
                    }else if(listitem == 3){//Mod
                        new maxcmdcount = 0, String[2048];
                        format(String, sizeof(String), "%s\t\t\t\t{DEA81A}- | LyD ~ Übersicht der Moderator-Befehle | -{FFFFFF}\n\n", String);
                        for(new i = 0; i < sizeof(ModeratorHelp); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, ModeratorHelp[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, ModeratorHelp[i]);
                            }
                            maxcmdcount++;
                        }
                        format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                        ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Moderator-Befehle | -", String, "OK", "");
                    }else if(listitem == 4){//Admin
                        new maxcmdcount = 0, String[2048];
                        format(String, sizeof(String), "%s\t\t\t\t{DEA81A}- | LyD ~ Übersicht der Administrator-Befehle | -{FFFFFF}\n\n", String);
                        for(new i = 0; i < sizeof(AdministratorHelp); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, AdministratorHelp[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, AdministratorHelp[i]);
                            }
                            maxcmdcount++;
                        }
                        format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                        ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Administrator-Befehle | -", String, "OK", "");
                    }else if(listitem == 5){//Benny Vertretung
                        new maxcmdcount = 0, String[2048];
                        format(String, sizeof(String), "%s\t\t{DEA81A}- | LyD ~ Übersicht der Management Befehle | -{FFFFFF}\n\n", String);
                        for(new i = 0; i < sizeof(VertretungBennyHelp); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, VertretungBennyHelp[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, VertretungBennyHelp[i]);
                            }
                            maxcmdcount++;
                        }
                        format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                        ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Management Befehle | -", String, "OK", "");
                    }else if(listitem == 6){//Server Manager
                        new maxcmdcount = 0, String[2048];
                        format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Server Manager-Befehle | -{FFFFFF}\n\n", String);
                        for(new i = 0; i < sizeof(ManagerHelp); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, ManagerHelp[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, ManagerHelp[i]);
                            }
                            maxcmdcount++;
                        }
                        format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                        ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Server Manager-Befehle | -", String, "OK", "");
                    }else if(listitem == 7){//Projektleiter
                        new maxcmdcount = 0, String[2048];
                        format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Projektleiter-Befehle | -{FFFFFF}\n\n", String);
                        for(new i = 0; i < sizeof(ProjektleiterHelp); i++){
                            if(maxcmdcount == 8){
                                format(String, sizeof(String), "%s\n", String);
                                maxcmdcount = 0;
                            }
                            if(maxcmdcount == 0){
                                format(String, sizeof(String), "%s/%s", String, ProjektleiterHelp[i]);
                            }else{
                                format(String, sizeof(String), "%s, /%s", String, ProjektleiterHelp[i]);
                            }
                            maxcmdcount++;
                        }
                        format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                        ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Projektleiter-Befehle | -", String, "OK", "");
                    }
                    return 1;
                }
                if(listitem == 0){//Supporter
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Supporter-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(SupporterHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, SupporterHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, SupporterHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Supporter-Befehle | -", String, "OK", "");
                }else if(listitem == 1){//Event Supporter
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t\t{DEA81A}- | LyD ~ Übersicht der Event-Supporter-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(EventSupporterHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, EventSupporterHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, EventSupporterHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Event-Supporter-Befehle | -", String, "OK", "");
                }else if(listitem == 2){//Mod
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t\t{DEA81A}- | LyD ~ Übersicht der Moderator-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(ModeratorHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, ModeratorHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, ModeratorHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Moderator-Befehle | -", String, "OK", "");
                }else if(listitem == 3){//Admin
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t\t{DEA81A}- | LyD ~ Übersicht der Administrator-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(AdministratorHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, AdministratorHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, AdministratorHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Administrator-Befehle | -", String, "OK", "");
                }else if(listitem == 4){//Benny Vertretung
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t{DEA81A}- | LyD ~ Übersicht der Benny Vertretung-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(VertretungBennyHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, VertretungBennyHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, VertretungBennyHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Benny Vertretung-Befehle | -", String, "OK", "");
                }else if(listitem == 5){//Server Manager
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Server Manager-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(ManagerHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, ManagerHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, ManagerHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Server Manager-Befehle | -", String, "OK", "");
                }else if(listitem == 6){//Projektleiter
                    new maxcmdcount = 0, String[2048];
                    format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Übersicht der Projektleiter-Befehle | -{FFFFFF}\n\n", String);
                    for(new i = 0; i < sizeof(ProjektleiterHelp); i++){
                        if(maxcmdcount == 8){
                            format(String, sizeof(String), "%s\n", String);
                            maxcmdcount = 0;
                        }
                        if(maxcmdcount == 0){
                            format(String, sizeof(String), "%s/%s", String, ProjektleiterHelp[i]);
                        }else{
                            format(String, sizeof(String), "%s, /%s", String, ProjektleiterHelp[i]);
                        }
                        maxcmdcount++;
                    }
                    format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der Projektleiter-Befehle | -", String, "OK", "");
                }
            }
        }
        case DIALOG_ANTWORT:
        {
            if(response)
            {
                new String[2048];
                format(String, sizeof(String), "%s\t\t\t{DEA81A}- | LyD ~ Ergebnis der Suche | -{FFFFFF}\n\n", String);
                for(new i = 0; i < sizeof(StandartHelpText); i++){
                    if(strfind(StandartHelpText[i], inputtext, true) != -1){
                        format(String, sizeof(String), "%s/%s - %s\n", String, StandartHelp[i], StandartHelpText[i]);
                    }
                }
                for(new i = 0; i < sizeof(BizHelpText); i++){
                    if(strfind(BizHelpText[i], inputtext, true) != -1){
                        format(String, sizeof(String), "%s/%s - %s\n", String, BizHelp[i], BizHelpText[i]);
                    }
                }
                for(new i = 0; i < sizeof(CasinoHelpText); i++){
                    if(strfind(CasinoHelpText[i], inputtext, true) != -1){
                        format(String, sizeof(String), "%s/%s - %s\n", String, CasinoHelp[i], CasinoHelpText[i]);
                    }
                }
                for(new i = 0; i < sizeof(ChatHelpText); i++){
                    if(strfind(ChatHelpText[i], inputtext, true) != -1){
                        format(String, sizeof(String), "%s/%s - %s\n", String, ChatHelp[i], ChatHelpText[i]);
                    }
                }
                for(new i = 0; i < sizeof(DeathmatchHelpText); i++){
                    if(strfind(DeathmatchHelpText[i], inputtext, true) != -1){
                        format(String, sizeof(String), "%s/%s - %s\n", String, DeathmatchHelp[i], DeathmatchHelpText[i]);
                    }
                }
                for(new i = 0; i < sizeof(FirmenHelpText); i++){
                    if(strfind(FirmenHelpText[i], inputtext, true) != -1){
                        format(String, sizeof(String), "%s/%s - %s\n", String, FirmenHelp[i], FirmenHelpText[i]);
                    }
                }
                for(new i = 0; i < sizeof(HaustierHelpText); i++){
                    if(strfind(HaustierHelpText[i], inputtext, true) != -1){
                        format(String, sizeof(String), "%s/%s - %s\n", String, HaustierHelp[i], HaustierHelpText[i]);
                    }
                }
                for(new i = 0; i < sizeof(HouseHelpText); i++){
                    if(strfind(HouseHelpText[i], inputtext, true) != -1){
                        format(String, sizeof(String), "%s/%s - %s\n", String, HouseHelp[i], HouseHelpText[i]);
                    }
                }
                for(new i = 0; i < sizeof(LeaderHelpText); i++){
                    if(strfind(LeaderHelpText[i], inputtext, true) != -1){
                        format(String, sizeof(String), "%s/%s - %s\n", String, LeaderHelp[i], LeaderHelpText[i]);
                    }
                }
                for(new i = 0; i < sizeof(MoneyHelpText); i++){
                    if(strfind(MoneyHelpText[i], inputtext, true) != -1){
                        format(String, sizeof(String), "%s/%s - %s\n", String, MoneyHelp[i], MoneyHelpText[i]);
                    }
                }
                for(new i = 0; i < sizeof(SellHelpText); i++){
                    if(strfind(SellHelpText[i], inputtext, true) != -1){
                        format(String, sizeof(String), "%s/%s - %s\n", String, SellHelp[i], SellHelpText[i]);
                    }
                }
                for(new i = 0; i < sizeof(TankstelleHelpText); i++){
                    if(strfind(TankstelleHelpText[i], inputtext, true) != -1){
                        format(String, sizeof(String), "%s/%s - %s\n", String, TankstelleHelp[i], TankstelleHelpText[i]);
                    }
                }
                for(new i = 0; i < sizeof(VehicleHelpText); i++){
                    if(strfind(VehicleHelpText[i], inputtext, true) != -1){
                        format(String, sizeof(String), "%s/%s - %s\n", String, VehicleHelp[i], VehicleHelpText[i]);
                    }
                }
                format(String, sizeof(String), "%s\n\nFalls du Fragen oder Probleme hast, kannst du mit '{EE600F}/Sup{FFFFFF}' ein Support-Ticket eröffnen.\nEin Supporter wird dir bestimmt weiterhelfen können!", String);
                ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "- | LyD ~ Übersicht der allgemeinen Befehle | -", String, "OK", "");
            }
        }
        case DIALOG_DRINKS: {
            if(response) {
                new
                    String[128];
                if( CheckMoney(playerid) < g_Drinks[listitem][D_iPrice] ) {
                    SendClientMessage(playerid,COLOR_LIGHTRED2,"Du besitzt nicht genug Geld für diesen Drink");
                    return 1;
                }
                KillTimer( Spieler[playerid][tDrink] );
                Spieler[playerid][tDrink] = SetTimerEx("cancelDrink", g_Drinks[listitem][D_iTime] * 1000 , false,"d",playerid);
                format(String,sizeof(String),"Du hast für $%d folgendes Getränk gekauft: %s",g_Drinks[listitem][D_iPrice],g_Drinks[listitem][D_sName]);
                SendClientMessage(playerid,COLOR_BLUE,String);
                GivePlayerCash(playerid,-g_Drinks[listitem][D_iPrice]);
                SetPlayerSpecialAction( playerid , g_Drinks[listitem][D_iAnimation] );
            }
        }
        case DIALOG_TAXI: {
            UnfreezePlayer(playerid);
            if(response) {
                new
                    vehicleid,
                    modelid;
                vehicleid = GetPlayerVehicleID(playerid);
                if( _:g_t3dTaxi[vehicleid] != INVALID_3DTEXT_ID ) {
                    modelid = GetVehicleModel(vehicleid);
                    if(  modelid == 420  ||  modelid == 438 ) {
                        new
                            driver,
                            String[128];
                        driver = VehicleDriverID(vehicleid);
                        if( IsPlayerConnected(driver) ) {
                            format(String,sizeof(String),"Fahrgast %s hat deine Taxifahrt bestätigt.",GetName(playerid));
                            SendClientMessage(driver,COLOR_GREEN,String);
                            format(String,sizeof(String),"Deine Taxifahrt beginnt nun. Die Fahrt kostet dich $%d pro 100m Fahrt!",Spieler[driver][pTaxiPreis]);
                            SendClientMessage(playerid,COLOR_ORANGE,String);

                            AddPlayerTaxiSlot(driver,playerid);

                            //Spieler[driver][tTaxi] = SetTimerEx("Pulse_Taxi",3253,true,"d",driver);
                            return 1;
                        }
                    }
                }
                SendClientMessage(playerid,COLOR_RED,"Du bist nicht mehr im Taxi");
            }
            else {
                RemovePlayerFromVehicle(playerid);
            }
        }
        case DIALOG_CLUBSHOP_DEL: {
            if(response) {
                SendClientMessage(playerid,COLOR_YELLOW,"Das Item wurde entfernt");
                RemovePlayerAttachedObject(playerid, ATTACHED_INDEX_CLUB_SHOP);
            }
        }
        case DIALOG_CLUBSHOP: {
            if(response) {
                if( Spieler[playerid][pDonateRank] < 1) {
                    return SendClientMessage(playerid,COLOR_RED,"Dieser Shop ist nur für Clubmitglieder.");
                }
                if( CheckMoney(playerid) < g_ClubShopItems[listitem][CSI_iPrice] ) {
                    return SendClientMessage(playerid,COLOR_YELLOW,"Du besitzt nicht genug Geld für dieses Item.");
                }
                /*if( !IsPlayerInRangeOfPoint(playerid,5.0,2316.5325,-1010.7850,1054.7188)) {
                    return SendClientMessage(playerid,COLOR_RED,"Du bist nicht an der Club-Garderobe.");
                }*/
                new
                    String[128];
                format(String,sizeof(String),"Du hast folgendes Item ausgewählt: %s  (-$%d)",g_ClubShopItems[listitem][CSI_sName],g_ClubShopItems[listitem][CSI_iPrice]);
                SendClientMessage(playerid,COLOR_YELLOW,String);
                SetPlayerAttachedObject(playerid,
                    ATTACHED_INDEX_CLUB_SHOP,
                    g_ClubShopItems[listitem][CSI_iModel],
                    g_ClubShopItems[listitem][CSI_iBone],
                    g_ClubShopItems[listitem][CSI_fX],
                    g_ClubShopItems[listitem][CSI_fY],
                    g_ClubShopItems[listitem][CSI_fZ],
                    g_ClubShopItems[listitem][CSI_fRotX],
                    g_ClubShopItems[listitem][CSI_fRotY],
                    g_ClubShopItems[listitem][CSI_fRotZ],
                    g_ClubShopItems[listitem][CSI_fScaleX],
                    g_ClubShopItems[listitem][CSI_fScaleY],
                    g_ClubShopItems[listitem][CSI_fScaleZ]);
            }
        }
        case DIALOG_GANGSHOP: 
        {
            if(response) 
            {
                if (CheckMoney(playerid) < g_GangShopItems[listitem][GSI_iPrice]) return SendClientMessage(playerid, COLOR_YELLOW, "Du besitzt nicht genug Geld für dieses Item!");
                new String[128];
                format(String, sizeof(String), "Du hast folgendes Item ausgewählt: %s  (-$%d)", g_GangShopItems[listitem][GSI_sName], g_GangShopItems[listitem][GSI_iPrice]);
                SendClientMessage(playerid, COLOR_YELLOW, String);
                GivePlayerCash(playerid, -g_GangShopItems[listitem][GSI_iPrice]);
                SetPlayerAttachedObject(playerid,
                ATTACHED_INDEX_GANG_SHOP,
                g_GangShopItems[listitem][GSI_iModel],
                g_GangShopItems[listitem][GSI_iBone],
                g_GangShopItems[listitem][GSI_fX],
                g_GangShopItems[listitem][GSI_fY],
                g_GangShopItems[listitem][GSI_fZ],
                g_GangShopItems[listitem][GSI_fRotX],
                g_GangShopItems[listitem][GSI_fRotY],
                g_GangShopItems[listitem][GSI_fRotZ],
                g_GangShopItems[listitem][GSI_fScaleX],
                g_GangShopItems[listitem][GSI_fScaleY],
                g_GangShopItems[listitem][GSI_fScaleZ]);
            }
        }
        case DIALOG_GANGSHOP_DEL: {
            if(response) {
                SendClientMessage(playerid,COLOR_YELLOW,"Das Item wurde entfernt");
                RemovePlayerAttachedObject(playerid, ATTACHED_INDEX_GANG_SHOP);
            }
        }
        case DIALOG_FSKIN: {
            if (response) {
                new skin;
                sscanf(inputtext,"d",skin);
                if (skin == 0)
                    return SendClientMessage(playerid, COLOR_RED, "Ungültige Skin-ID!");

                if (Spieler[playerid][pFraktion] == 15)
                    SetPlayerSkinEx(playerid, skin);
                else
                    SetPlayerSkin(playerid,skin);
            }
        }
        case DIALOG_HITMEN_AUFTRAG: {
            if(response) {
                new
                    String[128],
                    auftraggeber,
                    kopfgeld,
                    opfer;
                auftraggeber = SelectedPlayer[playerid];
                if( Spieler[auftraggeber][pKopfgeldStatus] == true ) {
                    SendClientMessage(playerid,COLOR_YELLOW,"Der Auftrag wurde bereits von einem Agency-Mitglied angenommen.");
                    return 1;
                }
                if(KillSperre[opfer] >= 3 && KillBlackSperre[opfer] == 0) return SCMFormatted(playerid,COLOR_RED,"[SPERRE]{FFFFFF} Auf %s wurden bereits 3 Aufträge gesetzt.",GetName(opfer));
                if(KillSperre[opfer] >= 7 && KillBlackSperre[opfer] == 1) return SCMFormatted(playerid,COLOR_RED,"[SPERRE]{FFFFFF} Auf %s wurden bereits 7 Aufträge gesetzt.",GetName(opfer));
                opfer = Spieler[auftraggeber][pKopfgeldID];
                kopfgeld = Spieler[auftraggeber][pKopfgeld];
                Spieler[auftraggeber][pKopfgeldStatus] = true;
                format(String,sizeof(String),"Dein Auftrag wurde von einem Auftragkiller entgegen genommen und wird %s auslöschen!",GetName(opfer));
                SendClientMessage(auftraggeber,COLOR_YELLOW,String);
                format(String,sizeof(String),"Du hast den Auftrag erfolgreich angenommen. (Zielperson: %s, Kopfgeld: $%s)",GetName(opfer), AddDelimiters(kopfgeld));
                SendClientMessage(playerid,COLOR_YELLOW,String);
                Spieler[playerid][pHitmenAuftragID] = auftraggeber;
                if(Spieler[playerid][pFraktion] == 14){format(String, sizeof(String), "Agency-Mitglied %s hat den Killauftrag von %s angenommen. Zielperson: %s ($%s)",GetName(playerid),GetName(auftraggeber),GetName(opfer), AddDelimiters(kopfgeld));}
                SendFraktionMessage(14, COLOR_YELLOW, String);

                format(String,sizeof(String),"%s hat den Killauftrag von %s angenommen. Zielperson: %s ($%s)",GetName(playerid),GetName(auftraggeber),GetName(opfer), AddDelimiters(kopfgeld));
                HitmanLog(String);
            }
            return 1;
        }
        case DIALOG_HITMEN_LIST:
        {
            if(response) {
                new
                    auftraggeber,
                    opfer;
                auftraggeber = GetPlayerHitmenIndex(listitem);
                if( auftraggeber != INVALID_PLAYER_ID ) {
                    new
                        kopfgeld = Spieler[auftraggeber][pKopfgeld],
                        String[160];
                    opfer = Spieler[auftraggeber][pKopfgeldID];
                    SelectedPlayer[playerid] = auftraggeber;
                    format(String,sizeof(String),"Auftraggeber: %s ( %d )\nGesuchter Spieler: %s ( %d )\nKopfgeld: $%s",GetName(auftraggeber),auftraggeber,GetName(opfer),opfer, AddDelimiters(kopfgeld));
                    ShowPlayerDialog(playerid,DIALOG_HITMEN_AUFTRAG,DIALOG_STYLE_MSGBOX,"Hitmen Auftrag",String,"Annehmen","Abbruch");
                }
            }
            return 1;
        }
        case DIALOG_WERBUNG:
        {
            if(response) {
                new
                    tick = gettime(),
                    len,
                    preis;
                len = strlen(inputtext);

                if( !IsPlayerInRangeOfPoint(playerid, 5.0, 1412.1915,-1700.3817,13.5395) && !IsPlayerInRangeOfPoint(playerid, 5.0, 2008.1722,1169.3364,10.8203))return SendClientMessage(playerid, COLOR_RED, "Du bist nicht am Werbe-Platz.");
                if( g_unixWerbung > tick ) {
                    return SendClientMessage(playerid, COLOR_RED, "Die Letzte Werbung ist noch keine 3 Minuten alt.");
                }
                preis = len * 150;
                if( preis > CheckMoney(playerid) ) {
                    return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genug Geld um eine Werbung zu schreiben!");
                }
                new
                    String[128];
                SendClientMessageToAll(COLOR_GREEN,inputtext);
                format(String,sizeof(String),"Werbung von %s, Telnr. %d",GetName(playerid),Spieler[playerid][pHandyNr]);
                SendClientMessageToAll(COLOR_GREEN,String);
                GivePlayerCash(playerid,-preis);
                g_unixWerbung = tick + 3 * 60;
                return 1;
            }
        }
        case DIALOG_HWERBUNG:
        {
            if(response) {
                new tick = gettime(),
                    len,
                    preis;
                len = strlen(inputtext);

                /*if(!IsPlayerInRangeOfPoint(playerid, 5.0, HITMANBASE_AD_POINT)) {
                    return SendClientMessage(playerid, COLOR_RED, "Du bist nicht am Werbeplatz.");
                }*/
                if( g_unixWerbungHitman > tick ) {
                    return SendClientMessage(playerid, COLOR_RED, "Die letzte Werbung ist noch keine 10 Minuten alt.");
                }
                preis = len * 100;
                if( preis > CheckMoney(playerid) ) {
                    return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genug Geld um eine Werbung zu schreiben!");
                }

                new String[128];
                SendClientMessageToAll(COLOR_GREEN,inputtext);
                format(String,sizeof(String),"Werbung von Anonym, Kontakt: /Killauftrag");
                SendClientMessageToAll(COLOR_GREEN,String);
                GivePlayerCash(playerid,-preis);
                g_unixWerbungHitman = tick + 8 * 60;
                return 1;
            }
        }
        case DIALOG_TABMENU_CALL:
        {
            if(response) {
                new
                    giveid = SelectedPlayer[playerid],
                    eingabe[64];
                //printf("DIALOG_TABMENU_CALL giveid:%d",giveid);
                format(eingabe,sizeof(eingabe),"%d",Spieler[giveid][pHandyNr]);
                return cmd_anrufen(playerid,eingabe);
            }
        }
        case DIALOG_TABMENU_SMS:
        {
            if(response) {
                new
                    giveid = SelectedPlayer[playerid],
                    eingabe[128];
                //printf("DIALOG_TABMENU_SMS giveid:%d",giveid);
                format(eingabe,sizeof(eingabe),"%d %s",Spieler[giveid][pHandyNr],inputtext);
                return cmd_sms(playerid,eingabe);
            }
        }
        case DIALOG_TABMENU:
        {
            if(response) {
                if(listitem == 0 ) { // Anrufen
                    ShowPlayerDialog(playerid, DIALOG_TABMENU_CALL, DIALOG_STYLE_MSGBOX, "Spieler Anrufen", "Willst du den Spieler wirklich anrufen?", "Anrufen", "Abbrechen");
                }
                else if(listitem == 1) { // SMS Senden
                    ShowPlayerDialog(playerid, DIALOG_TABMENU_SMS, DIALOG_STYLE_INPUT, "SMS Versenden", "Gib unten die Nachricht ein,die du an den Spieler senden möchtest", "Senden", "Abbrechen");
                }
                else if(listitem == 2 ) {
                    if(Spieler[playerid][pFraktion] == 5)
                    {
                        new string1[256];
                        new string2[256];
                        new string3[256];
                        new string4[768];
                        format(string1, sizeof(string1), "Widerstand gegen Beamte\nErweit. Widerstand gegen Beamte\nSachbeschädigung\nBehinderung eines Beamten\nStVO Verstoß\n");
                        format(string2, sizeof(string2), "Beleidigung/Bedrohung\nIlleg. Waffen/Drogen/Waffenteile/Codes/Spice\nFahrzeugdiebstahl\n");
                        format(string3, sizeof(string4), "Diebstahl eines Dienstfahrzeuges\nBedrohung von Zivilisten/Beamten/Zivilisten\nMissa. des Platzverweises\nBestechungsversuch\nNotrufmissbrauch\nBeschuss auf Beamte\nFahren ohne Lizenz");
                        format(string4, sizeof(string4), "%s%s%s", string1, string2, string3);
                        ShowPlayerDialog(playerid, DIALOG_TABMENU_VKO, DIALOG_STYLE_LIST, "Verbrecherkatalog", string4, "Auswählen", "Abbrechen");
                    }
                }
                return 1;
            }
        }
        case DIALOG_TABMENU_VK:
        {
            if(response)
            {
                if (Spieler[playerid][pTot]) return SendClientMessage(playerid, COLOR_RED, "Du bist tot und kannst daher keine Wanteds vergeben.");
                if(listitem == 0)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 5;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen (Beschuss auf Beamte) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 5 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Beschuss auf Beamte, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 1)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Beschuss auf Zivilisten) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Beschuss auf Zivilisten, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 2)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Handgreiflicher Angriff auf Beamte) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Handgreiflicher Angriff auf Beamte, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 3)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Handgreiflicher Angriff auf Zivilisten) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Handgreiflicher Angriff auf Zivilisten, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 4)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Widerstand gegen die Staatsgewalt) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Widerstand gegen die Staatsgewalt, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 5)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 4;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Erweiterter Widerstand gegen die Staatsgewalt) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 4 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Erweiterter Widerstand gegen die Staatsgewalt, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 6)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Behilfe zur Flucht) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Beihilfe zur Flucht, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 7)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Behinderung der Justiz) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Behinderung der Justiz, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 8)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Gefährlicher Angriff ins Luft/Straßenverkehr) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Gefährlicher Angriff ins Luft/Straßenverkehr, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 9)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 6;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Überfall/Raub) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 6 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Überfall/Raub, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 10)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 4;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Entführung) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 4 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Entführung, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 11)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Freiheitsberaubung - Einsperren ins GangJail) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Freiheitsberaubung - Einsperren ins GangJail, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 12)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 1;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Sachbeschädigung) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 1 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Sachbeschädigung, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 13)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Beleidigung/Bedrohung) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Beleidigung/Bedrohung, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 14)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Verkehrsunfallflucht) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Verkehrsunfallflucht, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 15)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Fahren ohne Lizenz) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Fahren ohne Lizenz, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 16)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 4;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Illegales eindringen ins Polizeisystem) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 4 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Illegales eindringen ins Polizeisystem, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 17)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Illegales mitführen von Schusswaffen/Drogen/Waffenteile/Spice) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Illegales mitführen von Schusswaffen/Drogen/Waffenteile/Spice, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 18)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Fahrzeugdiebstahl) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Fahrzeugdiebstahl, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 19)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 4;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Diebstahl eines Dienstfahrzeuges) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 4 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Diebstahl eines Dienstfahrzeuges, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 20)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Diebstahl) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Diebstahl, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 21)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 4;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Beamten-/Zivilisten Mord) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 4 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Beamten-/Zivilisten Mord, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 22)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Illegales Straßenrennen) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Illegales Straßenrennen, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 23)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Notruf-Missbrauch) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Notruf-Missbrauch, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 24)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Unerlaubtes betreten eines Grundstücks) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Unerlaubtes betreten eines Grundstücks, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 25)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 5;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Anschlag) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 5 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Anschlag, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 26)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Bestechungsversuch) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Bestechungsversuch, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 27)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Illegales züchten von Spicepflanzen) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Illegales züchten von Spicepflanzen, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 28)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Brandstiftung) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Brandstiftung, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 29)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 4;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Gefangenenbefreiung) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 4 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Gefangenenbefreiung, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 30)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 4;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Gefängnisausbruch) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 4 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Gefängnisausbruch, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
					SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
            }
        }
        case DIALOG_TABMENU_VKO:
        {
            if(response)
            {
                if(listitem == 0)
                {
                    new string[128];
                    if(Spieler[SelectedPlayer[playerid]][pAdminDienst]) return SCMFormatted(playerid,COLOR_RED,"%s ist im Admindienst.",GetName(SelectedPlayer[playerid]));
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen (Widerstand gegen die Staatsgewalt) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Widerstand gegen die Staatsgewalt, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 1)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Erweiterte Widerstand gegen die Staatsgewalt) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Erweiterte Widerstand gegen die Staatsgewalt, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 2)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Sachbeschädigung) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Sachbeschädigung, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 3)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 1;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Behinderung eines Beamten) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 1 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Behinderung eines Beamten, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 4)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Gefährlicher Eingriff in den Straßen-/Luftverkehr) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Gefährlicher Eingriff in den Straßen-/Luftverkehr, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 5)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Beleidigung/Bedrohung) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Beleidigung/Bedrohung, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 6)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Illegale Mitnahme von Drogen/Spice/Waffen/Waffenteile/Codes) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Illegale Mitnahme von Drogen/Spice/Waffen/Waffenteile/Codes, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 7)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Fahrzeugdiebstahl) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Fahrzeugdiebstahl, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 8)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Diebstahl eines Behördenfahrzeuges) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Diebstahl eines Behördenfahrzeuges, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 9)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Bedrohung von Beamten/Zivilisten) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Bedrohung von Beamten/Zivilisten, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 10)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Missachtung des Platzverweises) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Missachtung des Platzverweises, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 11)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Bestechungsversuch) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Bestechungsversuch, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 12)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 2;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Notrufmissbrauch) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 2 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Notrufmissbrauch, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 13)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 5;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Beschuss auf Beamte) Reporter: Ordnungsbeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 5 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Ordnungsbeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Beschuss auf Beamte, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(5, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
                if(listitem == 14)
                {
                    new string[128];
                    Spieler[SelectedPlayer[playerid]][pWanteds] += 3;
                    format(string, sizeof(string), "Du hast ein Verbrechen begangen. (Fahren ohne Lizenz) Reporter: Polizeibeamter %s", GetName(playerid));
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Du hast 3 Wanteds erhalten!");
                    SendClientMessage(SelectedPlayer[playerid], COLOR_DARKRED, string);
                    format(string, sizeof(string), "Dein Aktuelles Wanted Level: %d", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendClientMessage(SelectedPlayer[playerid], COLOR_YELLOW, string);
                    format(string, sizeof(string), "HQ: AN ALLE EINHEITEN, Reporter: Polizeibeamter %s, Gesuchter: %s (ID: %d) over.", GetName(playerid), GetName(SelectedPlayer[playerid]), SelectedPlayer[playerid], GetName(playerid));
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    format(string, sizeof(string), "HQ: Verbrechen: Fahren ohne Lizenz, Aktuelles Wantedlevel: %d, over.", Spieler[SelectedPlayer[playerid]][pWanteds]);
                    SendFraktionMessage(1, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(2, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(16, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(18, COLOR_COP_MELDUNG, string);
                    SendFraktionMessage(22, COLOR_COP_MELDUNG, string);
                    //SetPlayerWantedLevel(SelectedPlayer[playerid], Spieler[SelectedPlayer[playerid]][pWanteds]);
                }
            }
        }
        case DIALOG_ASHOP:
        {
            if(response)
            {
                new bIndex = GetBizIndexByID(56);
                if(listitem==0)
                {
                    if(Spieler[playerid][pAngel] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits eine Angel.");
                    if(CheckMoney(playerid) < 750)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    if(Biz[bIndex][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht genügend Waren!");
                    GivePlayerCash(playerid, -750);
                    Spieler[playerid][pAngel] = 1;
                    Biz[bIndex][bKasse] += 750;
                    Biz[bIndex][bWaren] -= 2;
                    SendClientMessage(playerid, COLOR_WHITE, COLOR_HEX_WHITE"Du hast dir die"COLOR_HEX_BLUE" Angel"COLOR_HEX_WHITE" erfolgreich gekauft!");
                    ShowPlayerDialog(playerid, DIALOG_ASHOP, DIALOG_STYLE_LIST, "Angelshop", COLOR_HEX_WHITE"Angel kaufen "COLOR_HEX_ORANGE"($750)"COLOR_HEX_WHITE"\n10 Köder kaufen "COLOR_HEX_ORANGE"($100)"COLOR_HEX_WHITE"\nAngelschein kaufen "COLOR_HEX_ORANGE"($1.000)"COLOR_HEX_WHITE"\nFische verkaufen "COLOR_HEX_ORANGE"(30$ pro Fisch)", "Auswählen", "Abbrechen");
                }
                if(listitem==1)
                {
                    if(CheckMoney(playerid) < 100)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    if(Biz[bIndex][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                    GivePlayerCash(playerid, -100);
                    Biz[bIndex][bKasse] += 100;
                    Biz[bIndex][bWaren] -= 2;
                    Spieler[playerid][pKoeder] += 10;
                    SendClientMessage(playerid, COLOR_WHITE, COLOR_HEX_WHITE"Du hast dir "COLOR_HEX_BLUE"10 Köder"COLOR_HEX_WHITE" erfolgreich gekauft!");
                    ShowPlayerDialog(playerid, DIALOG_ASHOP, DIALOG_STYLE_LIST, "Angelshop", COLOR_HEX_WHITE"Angel kaufen "COLOR_HEX_ORANGE"($750)"COLOR_HEX_WHITE"\n10 Köder kaufen "COLOR_HEX_ORANGE"($100)"COLOR_HEX_WHITE"\nAngelschein kaufen "COLOR_HEX_ORANGE"($1.000)"COLOR_HEX_WHITE"\nFische verkaufen "COLOR_HEX_ORANGE"(30$ pro Fisch)", "Auswählen", "Abbrechen");
                }
                if(listitem==2)
                {
                    if(Spieler[playerid][pFishLic] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Angelschein.");
                    if(CheckMoney(playerid) < 1000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    if(Biz[bIndex][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                    GivePlayerCash(playerid, -1000);
                    Biz[bIndex][bKasse] += 1000;
                    Biz[bIndex][bWaren] -= 2;
                    Spieler[playerid][pFishLic] = 1;
                    SendClientMessage(playerid, COLOR_WHITE, COLOR_HEX_WHITE"Du hast dir den "COLOR_HEX_BLUE"Angelschein"COLOR_HEX_WHITE" erfolgreich gekauft!");
                    ShowPlayerDialog(playerid, DIALOG_ASHOP, DIALOG_STYLE_LIST, "Angelshop", COLOR_HEX_WHITE"Angel kaufen "COLOR_HEX_ORANGE"($750)"COLOR_HEX_WHITE"\n10 Köder kaufen "COLOR_HEX_ORANGE"($100)"COLOR_HEX_WHITE"\nAngelschein kaufen "COLOR_HEX_ORANGE"($1.000)"COLOR_HEX_WHITE"\nFische verkaufen "COLOR_HEX_ORANGE"(30$ pro Fisch)", "Auswählen", "Abbrechen");
                }
                if(listitem==3)
                {
                    new string[128];
                    format(string, sizeof(string), COLOR_HEX_WHITE"Bitte tippe ein, wieviele Fische du verkaufen möchtest. "COLOR_HEX_BLUE"(30$ pro Fisch)\n\n"COLOR_HEX_WHITE"Du hast derzeit "COLOR_HEX_BLUE"%d Fische "COLOR_HEX_WHITE"dabei!", Spieler[playerid][pFische]);
                    ShowPlayerDialog(playerid, DIALOG_SELLFISH, DIALOG_STYLE_INPUT, "Angelshop", "Bitte tippe ein, wieviele Fische du verkaufen möchtest. (30$ pro Fisch)", "Verkaufen", "Abbrechen");
                }
            }
            if(!response)return 1;
        }
        case DIALOG_SELLFISH:
        {
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_ASHOP, DIALOG_STYLE_LIST, "Angelshop", COLOR_HEX_WHITE"Angel kaufen "COLOR_HEX_ORANGE"($750)"COLOR_HEX_WHITE"\n10 Köder kaufen "COLOR_HEX_ORANGE"($100)"COLOR_HEX_WHITE"\nAngelschein kaufen "COLOR_HEX_ORANGE"($1.000)"COLOR_HEX_WHITE"\nFische verkaufen "COLOR_HEX_ORANGE"(30$ pro Fisch)", "Auswählen", "Abbrechen");
                return 1;
            }
            if(response)
            {
                if(!strlen(inputtext))
                {
                    ShowPlayerDialog(playerid, DIALOG_SELLFISH, DIALOG_STYLE_INPUT, "Angelshop", "Bitte tippe ein, wieviele Fische du verkaufen möchtest. (30$ pro Fisch)", "Verkaufen", "Abbrechen");
                    SendClientMessage(playerid, COLOR_RED, "* Ungültige Eingabe!");
                    return 1;
                }
                new fische = strval(inputtext);
                //if(fische < 1 || fische > 20)return SendClientMessage(playerid,  COLOR_RED, "Der Wert sollte zwischen 1 und 20 liegen.");
                if(fische > Spieler[playerid][pFische])return SendClientMessage(playerid, COLOR_RED, "Soviele Fische hast du nicht!");
                if(fische < 0)return GiveCheckpointPrison(playerid, 120, "Bugusing, Gruß das Entwickler-Team (Angelshop).");
                new tempRechnung = fische*30;
                GivePlayerCash(playerid, tempRechnung);
                Spieler[playerid][pFische] -= fische;
                new string[128];
                format(string, sizeof(string), COLOR_HEX_WHITE"Du hast erfolgreich "COLOR_HEX_BLUE"%d Fische"COLOR_HEX_WHITE" für"COLOR_HEX_BLUE" $%s"COLOR_HEX_WHITE" verkauft.", fische, AddDelimiters(tempRechnung));
                SendClientMessage(playerid, COLOR_WHITE, string);
                ShowPlayerDialog(playerid, DIALOG_ASHOP, DIALOG_STYLE_LIST, "Angelshop", COLOR_HEX_WHITE"Angel kaufen "COLOR_HEX_ORANGE"($750)"COLOR_HEX_WHITE"\n10 Köder kaufen "COLOR_HEX_ORANGE"($100)"COLOR_HEX_WHITE"\nAngelschein kaufen "COLOR_HEX_ORANGE"($1.000)"COLOR_HEX_WHITE"\nFische verkaufen "COLOR_HEX_ORANGE"(30$ pro Fisch)", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_STADTHALLE:
        {
            if(response)
            {
                if(listitem==0)
                {
                    if(Spieler[playerid][pPerso] == 0)
                    {
                        if(CheckMoney(playerid) >= 200)
                        {
                            Spieler[playerid][pPerso] = 1;
                            GivePlayerCash(playerid, -200);
                            SendClientMessage(playerid, COLOR_GREEN, "Du hast erfolgreich einen Personalausweis beantragt.");
                            return cmd_stadthalle(playerid);
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld.");
                            return 1;
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du besitzt den Personalausweis bereits.");
                        return 1;
                    }
                }
                else if (listitem==1 || listitem == 5 || listitem == 2)
                {
                    new
                        String[128];
                    /*if( gettime() < Spieler[playerid][pJobWechsel] ) {
                        SendClientMessage(playerid, COLOR_RED, "Du hast erst vor kurzem dein Beruf gewechselt, bitte warte einen Moment!");
                        return 1;
                    }*/
                    ShowPlayerDialog(playerid, DIALOG_STADTHALLE, DIALOG_STYLE_LIST, "Stadthalle", String, "Auswählen", "Abbrechen");
                }
                else if(listitem==3)
                {
                    /*if( gettime() < Spieler[playerid][pJobWechsel] ) {
                        SendClientMessage(playerid, COLOR_RED, "Du hast erst vor kurzem dein Beruf gewechselt, bitte warte einen Moment!");
                        return 1;
                    }*/
                    ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
                }
                else if(listitem==4)
                {
                    /*if( gettime() < Spieler[playerid][pJobWechsel] ) {
                        SendClientMessage(playerid, COLOR_RED, "Du hast erst vor kurzem dein Beruf gewechselt, bitte warte einen Moment!");
                        return 1;
                    }*/
                   ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
                }
                else if(listitem == 6) {
                    if( Spieler[playerid][pHartz4] == 0 ) {
                        if( Spieler[playerid][pJob] == 0 ) {
                            Spieler[playerid][pHartz4] = 1;
                            SendClientMessage(playerid,COLOR_YELLOW,"Du hast Hartz 4 beantragt und erhältst nun pro PayDay $"#HARTZ4_GELD".");
                        }
                        else {
                            SendClientMessage(playerid,COLOR_YELLOW,"Da du einen Job hast, kannst du kein Hartz 4 beantragen.");
                        }
                    }
                    else {
                        Spieler[playerid][pHartz4] = 0;
                        SendClientMessage(playerid,COLOR_YELLOW,"Du beziehst ab nun kein Hartz 4 mehr.");
                    }
                }
            }
            if(!response)
            {
                return 1;
            }
        }
        case DIALOG_STAATSANGEHORIGKEIT:
        {
            if(response)
            {
            	new
                    staatsa[128],
                    string[128],
                    len;
                len = strlen(inputtext);
                if( !(4 <= len <= 20) ) {
                    SendClientMessage(playerid,COLOR_RED,"Deine Staatsangehörigkeit ist zu lang / zu kurz (4-20 Zeichen)");
                    return ShowPlayerDialog(playerid,DIALOG_STAATSANGEHORIGKEIT, DIALOG_STYLE_INPUT,""COLOR_HEX_ORANGE"Staatsangehörigkeit","{FFFFFF}Bitte gebe nun deine Staatsangehörigkeit ein:","Akzeptieren","Abbrechen");
                }
                mysql_real_escape_string(inputtext,staatsa,gSQL,sizeof(staatsa) );
                format(string,sizeof(string),"UPDATE `accounts` SET `Staat` = '%s' WHERE `Name` = '%s'",staatsa,GetName(playerid));
                mysql_pquery(string,THREAD_SET_STAATSANGEHORIGKEIT,playerid,gSQL,MySQLThreadOwner);
                format(Spieler[playerid][pStaat],30,"%s",staatsa);
                GivePlayerCash(playerid, -100000);
                Kasse[Staat] += 100000;
		        SCMFormatted(playerid,COLOR_GREEN,"[INFO] {FFFFFF}Du hast deine Staatsangehörigkeit auf %s geändert.",staatsa);
		        SendClientMessage(playerid,COLOR_RED,"Beachte, dass der Missbrauch der Staatsangehörigkeit zu Sanktionen führen kann.");
                return 1;
            }
        }
        case DIALOG_SUICIDEARREST:
        {
            if(response)
            {
                KillTimer(SuicidePlayer[playerid]);
                SuicidePlayer[playerid] = INVALID_TIMER_ID;
                new string[128];
                format(string,sizeof(string),"%s ist vor den 5 Minuten anwesend und wird daher nicht verhaftet.",GetName(playerid));
                SendFraktionMessage(1, COLOR_WHITE, string);
                SendFraktionMessage(2, COLOR_WHITE, string);
                SendFraktionMessage(16, COLOR_WHITE, string);
                SendFraktionMessage(18, COLOR_WHITE, string);
                SendFraktionMessage(22, COLOR_WHITE, string);
            }
        }
        case DIALOG_SELBSTBERUF:
        {
            if(response)
            {
                if(listitem==0)
                {
                    if(!(Spieler[playerid][pJob] == 0))
                    {
                        Spieler[playerid][pJob] = 0;
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast deinen Job gekündigt.");
                        ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
                        Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                        return 1;
                    }
                    else
                    {
                        ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
                        SendClientMessage(playerid, COLOR_RED, "Du besitzt gar keinen Job.");
                        return 1;
                    }
                }
                if(Spieler[playerid][pHartz4]) {
                    SendClientMessage(playerid, COLOR_RED, "Du kannst keinen Job annehmen, da du noch Hartz 4 beziehst.");
                    return 1;
                }
                if(listitem==1)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_KFZ, DIALOG_STYLE_MSGBOX, "Arbeitsamt: KFZ-Mechatroniker", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" KFZ-Mechatroniker\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Keine\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==2)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_ANWALT, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Anwalt", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Anwalt\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Mindestlevel 3\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Nein\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Mandant verweigert Kaution zurückzuzahlen.", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==3)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_JOBTAXI, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Taxifahrer", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Taxifahrer\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Kunden ohne Geld", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==4)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_EISMANN, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Eisverkäufer", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Eisverkäufer\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==5)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_DEDEKTIV, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Detektiv", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Detektiv\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Keine\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Nein\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==6)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_PIZZAMAN, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Pizzalieferant", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Pizzalieferant\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Keine\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==7)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_JOBHOTDOG, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Hotdog Verkäufer", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Hotdog Verkäufer\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==8)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "ILLEGALE BERUFE", COLOR_HEX_WHITE"Illegale Berufe erhältst du nur bei Jeff,\nder bei seinem Van in der Gasse\nhinter dem 24/7 östlich der Stadthalle steht.", "Ok", "");
                    return 1;
                }
                /*if(listitem==23)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(23);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Zugfahrer\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%d\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Gefühl fürs Zugfahren\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],gehalt);
                    ShowPlayerDialog(playerid, DIALOG_ZUGFAHRER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Zugfahrer", String , "Annehmen", "Abbrechen");
                    return 1;
                }*/
            }
            if(!response)
            {
                return 1;
            }
        }

        case DIALOG_AMT:
        {
            if(response)
            {
                if(listitem==0)
                {
                    if(!(Spieler[playerid][pJob] == 0))
                    {
                        Spieler[playerid][pJob] = 0;
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast deinen Job gekündigt.");
                        ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreinger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
                        Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                        return 1;
                    }
                    else
                    {
                        ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreinger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
                        SendClientMessage(playerid, COLOR_RED, "Du besitzt gar keinen Job.");
                        return 1;
                    }
                }
                if(Spieler[playerid][pHartz4]) {
                    SendClientMessage(playerid, COLOR_RED, "Du kannst keinen Job annehmen, da du noch Hartz 4 beziehst.");
                    return 1;
                }
                if(listitem==1)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(1);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Bauer\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer], AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_FARMER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Bauer", String , "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==2)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(2);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Busfahrer\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_BUSFAHRER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Busfahrer", String , "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==3)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(3);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Trucker\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" LKW-Schein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_TRUCKER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Trucker", String , "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==4)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(4);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Pilot\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $8500\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Flugschein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],gehalt);
                    ShowPlayerDialog(playerid, DIALOG_PILOT, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Pilot", String , "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==5)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(7);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Straßenreiniger\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_STRASSE, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Straßenreiniger", String , "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==6)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(8);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Müllmann\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_MULLMANN, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Müllmann", String , "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==7)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(9);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Gärtnerei\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Keine\n"COLOR_HEX_BLUE"Job Fahrzeuge"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_GARTEN, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Gärtnerei", String , "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==8)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(10);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Bauarbeiter\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" LKW-Schein und Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_BAUARBEITER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Bauarbeiter", String , "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==9)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(11);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Schiff-Fahrer\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Bootsschein\n"COLOR_HEX_BLUE"Job Fahrzeuge"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_SCHIFFFAHRER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Schiff-Fahrer", String, "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==10)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(12);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Geld-Tansportfahrer\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%s\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Überfallen zu werden",g_Firma[firmenindex][F_sBesitzer],AddDelimiters(gehalt));
                    ShowPlayerDialog(playerid, DIALOG_GELDT, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Geld-Transportfahrer", String, "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==11)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "ILLEGALE BERUFE", COLOR_HEX_WHITE"Illegale Berufe erhältst du nur bei Jeff,\nder bei seinem Van in der Gasse\nhinter dem 24/7 östlich der Stadthalle steht.", "OK", "");
                    return 1;
                }
                /*if(listitem==23)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(23);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Zugfahrer\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%d\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Gefühl fürs Zugfahren\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],gehalt);
                    ShowPlayerDialog(playerid, DIALOG_ZUGFAHRER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Zugfahrer", String , "Annehmen", "Abbrechen");
                    return 1;
                }*/
            }
            if(!response)
            {
                return 1;
            }
        }

        case DIALOG_SCHWARZBERUF:
        {
            if(response)
            {
                if(listitem==0)
                {
                    if(!(Spieler[playerid][pJob] == 0))
                    {
                        Spieler[playerid][pJob] = 0;
                        SendClientMessage(playerid, COLOR_WHITE, "Du hast deinen Job gekündigt.");
                        ShowPlayerDialog(playerid, DIALOG_SCHWARZBERUF, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nWaffendealer\nTaschendieb\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
                        Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                        return 1;
                    }
                    else
                    {
                        ShowPlayerDialog(playerid, DIALOG_SCHWARZBERUF, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nWaffendealer\nTaschendieb\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
                        SendClientMessage(playerid, COLOR_RED, "Du besitzt gar keinen Job.");
                        return 1;
                    }
                }
                /*if(listitem==1)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_DDEALER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Drogendealer", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Drogendealer\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Mindestlevel 3\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Erwischt werden durch Beamte", "Annehmen", "Abbrechen");
                    return 1;
                }*/
                if(listitem==1)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_WDEALER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Waffendealer", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Waffendealer\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Mindestlevel 3\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Erwischt werden durch Beamte", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==2)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_TASCHENDIEB, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Taschendieb", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Taschendieb\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Mindestlevel 3\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Nein\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Erwischt werden durch Beamte", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==3)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_HURE, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Prostituierte", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Prostituierte\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Keine\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Nein\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Aidsgefahr", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==4)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_JOBWANTED, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Wanted-Hacker", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Wanted-Hacker\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Keine\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Nein\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Erwischt werden durch Beamte", "Annehmen", "Abbrechen");
                    return 1;
                }
                if(listitem==5)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_JOBAUTODIEB, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Autodieb", COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Autodieb\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" Unterschiedlich\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Autoschein\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Nein\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Erwischt werden durch Beamte", "Annehmen", "Abbrechen");
                    return 1;
                }
                /*if(listitem==23)
                {
                    if(Spieler[playerid][pJob] > 0)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Job.");
                        return 1;
                    }
                    new
                        gehalt,
                        firmenindex,
                        String[256];
                    firmenindex = GetJobFirmaIndex(23);
                    gehalt = g_Firma[firmenindex][F_iGehalt];
                    format(String,sizeof(String),COLOR_HEX_BLUE"Beruf:"COLOR_HEX_WHITE" Zugfahrer\n"COLOR_HEX_BLUE"Firmeninhaber:"COLOR_HEX_WHITE" %s\n"COLOR_HEX_BLUE"PayDay Gehalt:"COLOR_HEX_WHITE" $%d\n"COLOR_HEX_BLUE"Voraussetzungen:"COLOR_HEX_WHITE" Gefühl fürs Zugfahren\n"COLOR_HEX_BLUE"Job Fahrzeuge:"COLOR_HEX_WHITE" Ja\n"COLOR_HEX_BLUE"Risiken:"COLOR_HEX_WHITE" Keine",g_Firma[firmenindex][F_sBesitzer],gehalt);
                    ShowPlayerDialog(playerid, DIALOG_ZUGFAHRER, DIALOG_STYLE_MSGBOX, "Arbeitsamt: Zugfahrer", String , "Annehmen", "Abbrechen");
                    return 1;
                }*/
            }
            if(!response)
            {
                return 1;
            }
        }
        case DIALOG_CHATOFF:
        {
            if (!response) return 1;
            if (listitem < 0 || listitem >= sizeof(g_ChatNames) || !IsBeamter(playerid) && listitem == sizeof(g_ChatNames)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER]{FFFFFF}Ungültige Auswahl.");
            pChatSettings[playerid][listitem] = !pChatSettings[playerid][listitem];
            SCMFormatted(playerid, pChatSettings[playerid][listitem] ? COLOR_GREEN : COLOR_RED, "[INFO] {FFFFFF}Du hast den %s %s.",\
                g_ChatNames[listitem], pChatSettings[playerid][listitem] ? "angeschaltet" : "ausgeschaltet");
            return cmd_chatoff(playerid);
        }
        case DIALOG_GOTOLISTE:
        {
            if(response)
            {
                SetPlayerInterior(playerid, 0);
                SetPlayerVirtualWorld(playerid, 0);
                new vID = GetPlayerVehicleID(playerid);
                if(listitem==0)//LS
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1480.4305,-1745.5150,13.6281);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1480.4305,-1745.5150,13.6281);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid,  1480.4305,-1745.5150,13.6281);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==1)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1218.5142,-919.5847,43.0938);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1218.5142,-919.5847,43.0938);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1218.5142,-919.5847,43.0938);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==2)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1365.7517,-1288.5110,13.5469);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1365.7517,-1288.5110,13.5469);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1365.7517,-1288.5110,13.5469);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==3)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 666.8114,-1880.4503,5.4600);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 666.8114,-1880.4503+2,5.4600);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 666.8114,-1880.4503,5.4600);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==4)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1234.4102,-1823.8929,13.5910);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1234.4102,-1823.8929,13.5910);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1234.4102,-1823.8929,13.5910);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==5)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1804.6133,-1890.9283,13.4073);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1804.6133,-1890.9283,13.4073);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1804.6133,-1890.9283,13.4073);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==6)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 216.247497,-1442.859252,13.154298);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 216.247497,-1442.859252,13.154298);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 216.247497,-1442.859252,13.154298);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==7)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1144.016357,-1330.051025,13.542300);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1144.016357,-1330.051025,13.542300);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1144.016357,-1330.051025,13.542300);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==8)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1460.0717,-1027.2748,23.8281);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1460.0717,-1027.2748,23.8281);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1460.0717,-1027.2748,23.8281);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==9)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 960.548889,-1598.319702,13.621998);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 960.548889,-1598.319702,13.621998);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 960.548889,-1598.319702,13.621998);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==10)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 2509.174804,-1514.432373,24.000000);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 2509.174804,-1514.432373,24.000000);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 2509.174804,-1514.432373,24.000000);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==11)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1841.7158,-2568.3242,13.5469);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1841.7158,-2568.3242,13.5469);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1841.7158,-2568.3242,13.5469);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==12)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 805.7107,-1335.6899,13.5469);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 805.7107,-1335.6899,13.5469);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 805.7107,-1335.6899,13.5469);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==13)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1023.3541,-1134.1473,23.8203);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1023.3541,-1134.1473,23.8203);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1023.3541,-1134.1473,23.8203);
                        SetCameraBehindPlayer(playerid);
                    }
                }
                if(listitem==14)
                {
                    if(IsPlayerInAnyVehicle(playerid))
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i])
                            {
                                if(GetPlayerVehicleID(i) == vID)
                                {
                                    new Seat = GetPlayerVehicleSeat(i);
                                    SetVehiclePos(vID, 1310.3245,-1383.1377,13.7432);
                                    PutPlayerInVehicle(i, vID, Seat);
                                    if(IsTrailerAttachedToVehicle(vID))
                                    {
                                        new trID = GetVehicleTrailer(vID);
                                        SetVehiclePos(trID, 1310.3245,-1383.1377,13.7432);
                                        AttachTrailerToVehicle(trID, vID);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        SetPlayerPos(playerid, 1310.3245,-1383.1377,13.7432);
                        SetCameraBehindPlayer(playerid);
                    }
                }
            }
        }
        case DIALOG_HANDYSHOP: {
            if(response) {
                if(listitem == 0) {
                    ShowPlayerHandyList(playerid);
                }
                else if(listitem==1) {
                    /*
                    if(Spieler[playerid][pHandyNr] != 0)
                    {
                        return SendClientMessage(playerid, COLOR_RED , "Du besitzt bereits ein Handy");
                    }
                    */
                    if( Spieler[playerid][pHandyGeld] == HANDY_VERTRAG ) {
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast deinen Handy-Vertrag gekündigt.");
                        Spieler[playerid][pHandyGeld] = 0;
                        Spieler[playerid][pHandyNr] = 0;
                        ShowBuyInformation(playerid,"~y~Handyvertrag ~w~gekuendigt!");
                    }
                    else {
                        if(CheckMoney(playerid) < 4000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                        if(Biz[HandyShopBiz_Index][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                        Biz[HandyShopBiz_Index][bWaren] -= 5;
                        Biz[HandyShopBiz_Index][bKasse] += 4000*20/100;
                        GivePlayerCash(playerid, -4000);
                        SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Handy-Vertrag für $4.000 gekauft.");
                        Spieler[playerid][pHandyGeld] = HANDY_VERTRAG;
                        ShowBuyInformation(playerid,"~y~Handyvertag ~w~gekauft!");
                        GetFreePhoneNumber(playerid);
                    }
                }
                else if (listitem == 2) { // Kamera kaufen
                    if (CheckMoney(playerid) < 15000) return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                    if (Biz[HandyShopBiz_Index][bWaren] < 1) return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                    if (Spieler[playerid][pLevel] < 3) return SendClientMessage(playerid, COLOR_RED, "Du kannst dir erst ab Level 3 eine Kamera kaufen.");
                    Biz[HandyShopBiz_Index][bWaren] -= 3;
                    Biz[HandyShopBiz_Index][bKasse] += 15000*20/100;
                    GivePlayerCash(playerid, -15000);
                    SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir eine Kamera mit einem Film für 50 Fotos gekauft!");
                    ShowBuyInformation(playerid,"~y~Kamera ~w~gekauft!");
                    GivePlayerWeapon(playerid, WEAPON_CAMERA, 50);
                }
                else if (listitem == 3) {
                    if (Spieler[playerid][pMP3Player]) return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits einen Musikkit.");
                    if (CheckMoney(playerid) < 20500) return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                    if (Biz[HandyShopBiz_Index][bWaren] < 3) return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                    Biz[HandyShopBiz_Index][bWaren] -= 3;
                    Biz[HandyShopBiz_Index][bKasse] += 20500*20/100;
                    GivePlayerCash(playerid, -20500);
                    Spieler[playerid][pMP3Player] = 1;
                    SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Musikkit gekauft.");
                    ShowBuyInformation(playerid,"~y~Musikkit ~w~gekauft!");
                }
                else if(listitem==4) { //Call-Ya Handy-Karte Kaufen
                    if( Spieler[playerid][pHandyGeld] == HANDY_VERTRAG ) return SendClientMessage(playerid, COLOR_RED, "Du musst erst deinen Handyvertrag kündigen!");
                    if(CheckMoney(playerid) < 300 )return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                    if(Biz[HandyShopBiz_Index][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                    Biz[HandyShopBiz_Index][bWaren] -= 3;
                    Biz[HandyShopBiz_Index][bKasse] += 300;
                    GivePlayerCash(playerid, -300);
                    SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir eine Call-Ya Handykarte für $300 gekauft!");
                    Spieler[playerid][pHandyGeld] = 0;
                    ShowBuyInformation(playerid,"~y~Call Ya Handykarte ~w~gekauft!");
                    GetFreePhoneNumber(playerid);
                }
                else if(listitem==5) { //Call-Ya Guthaben Kaufen
                    ShowPlayerDialog(playerid, DIALOG_HANDYAUFLADEN, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Handy-Shop - Call-Ya Guthaben", "$100\n$500\n$1.000\n$5.000\n$10.000", "Auswählen", "Abbrechen");
                }
            }
        }
        case DIALOG_MARKT:
		{
			if(response)
			{
                new pVW = GetBizIndexByID(GetPlayerVirtualWorld(playerid));
				if(listitem==0)//Telefonbuch
				{
					if(CheckMoney(playerid) < 15000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
					if(Biz[pVW][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nichtmehr genügend Waren!");
					Biz[pVW][bWaren] -= 10;
					Biz[pVW][bKasse] += 15000;
					GivePlayerCash(playerid, -15000);
					Spieler[playerid][pPhoneBook] = 1;
					SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir das Telefonbuch für 15.000$ gekauft.");
					SendClientMessage(playerid, COLOR_WHITE, "* Du kannst nun die Nummern anderer Spieler per /Nummer [ID] herausfinden.");
					ShowBuyInformation(playerid,"~y~Telefonbuch ~w~gekauft!");
				}
				if(listitem==1)//Kekse
				{
                    new String[128];
                    format(String, sizeof(String),"{FFFFFF}Willkommen im Supermarkt.\n\nHier kannst du Kekse erwerben.\nDu hast gerade %i Kekse\nKekse erwerben:",Spieler[playerid][pKekse]);
                    ShowPlayerDialog(playerid, DIALOG_KEKSE, DIALOG_STYLE_INPUT, "Supermarkt: Kekse", String, "Kaufen", "Abbrechen");
				}
				if(listitem==2)//Zigs
				{
					if(CheckMoney(playerid) < 2225)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
					if(Biz[pVW][bWaren] < 10)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
					Biz[pVW][bWaren] -= 10;
					Biz[pVW][bKasse] += 2225;
					GivePlayerCash(playerid, -2225);
					Spieler[playerid][pZigaretten] += 10;
                	SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir 10 Zigaretten für 225$ gekauft. Verwende sie per /Rauchzig.");
					ShowBuyInformation(playerid,"~y~Zigeretten ~w~gekauft!");
				}
				if(listitem==3)//Helm
				{
				    new preis = 10000;
					if( Spieler[playerid][pHelm] ) {
						return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits einen Helm");
					}
					if(CheckMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
					if(Biz[pVW][bWaren] < 10)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
					Biz[pVW][bWaren] -= 10;
					Biz[pVW][bKasse] += preis;
					GivePlayerCash(playerid, -preis);
					Spieler[playerid][pHelm]++;
					SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Motorrad Helm gekauft.");
					ShowBuyInformation(playerid,"~y~Helm ~w~gekauft!");
				}
				if(listitem==4)//MP3Player
				{
				    new preis = 22500;
					if( Spieler[playerid][pMP3Player] ) {
						return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits einen MP3Player");
					}
					if(CheckMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
					if(Biz[pVW][bWaren] < 15)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
					Biz[pVW][bWaren] -= 15;
					Biz[pVW][bKasse] += preis;
					GivePlayerCash(playerid, -preis);
					Spieler[playerid][pMP3Player]++;
					SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen MP3-Player gekauft.");
					ShowBuyInformation(playerid,"~y~MP3Player ~w~gekauft!");
				}
				if(listitem==5)//Koffer
				{
				    new preis = 10500;
					if( Spieler[playerid][pKoffer] ) {
						return SendClientMessage(playerid, COLOR_RED, "Du besitzt bereits einen Koffer");
					}
					if(CheckMoney(playerid) < preis)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
					if(Biz[pVW][bWaren] < 10)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
					Biz[pVW][bWaren] -= 10;
					Biz[pVW][bKasse] += preis;
					GivePlayerCash(playerid, -preis);
					Spieler[playerid][pKoffer] = true;
					SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Koffer gekauft.");
					ShowBuyInformation(playerid,"~y~Koffer ~w~gekauft!");
				}
				if(listitem==6)//Fallschirm
				{
					if(CheckMoney(playerid) < 10200)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
					if(Biz[pVW][bWaren] < 10)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
					Biz[pVW][bWaren] -= 10;
					Biz[pVW][bKasse] += 10200;
					GivePlayerCash(playerid, -10200);
					GivePlayerWeapon(playerid, 46, 1);
					SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Fallschirm für 10.200$ gekauft.");
					SendClientMessage(playerid, COLOR_WHITE, "* Mit der Taste Enter kannst du es im Sprung in die Tiefe öffnen.");
				}
				if(listitem==7)//Pfand
				{
					if(Spieler[playerid][pPfand] == 0)return SendClientMessage(playerid,COLOR_RED,"Du hast keine Pfandflaschen!");
	                new ppreis = Spieler[playerid][pPfand] * 1500; // pro Pfandflasche kriegt man $1.500
	                SCMFormatted(playerid,COLOR_WHITE,"* Du hast %d Pfandflaschen für $%s an den Supermarkt verkauft!",Spieler[playerid][pPfand], AddDelimiters(ppreis));
	                PlayerPlaySound(playerid, 1054, 0.0, 0.0, 0.0);
	                GivePlayerCash(playerid, ppreis);
                    if (Biz[pVW][bWaren] < 5000) {
	                    Biz[pVW][bWaren] += 50 * Spieler[playerid][pPfand];
                    }
	                Biz[pVW][bKasse] -= ppreis;
                    Spieler[playerid][pPfand] = 0;
	                UnfreezePlayer(playerid);
					ShowBuyInformation(playerid,"~y~Pfandflaschen ~w~verkauft!");
				}
				if(listitem==8)//Booster
				{
					if(CheckMoney(playerid) < 20000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
					if(Biz[pVW][bWaren] < 15)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                    if(Spieler[playerid][pBooster] >= 4) return SendClientMessage(playerid,COLOR_RED,"Du kannst nur 4 Booster kaufen.");
					Biz[pVW][bWaren] -= 15;
					Biz[pVW][bKasse] += 20000*20/100;
					GivePlayerCash(playerid, -20000);
                    Spieler[playerid][pBooster] ++;
					SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir einen Booster für 20.000$ gekauft.");
					SendClientMessage(playerid, COLOR_WHITE, "* Mit /booster kannst du ihn verwenden.");
				}
				if(listitem==9)//Power Riegel
				{
                    new String[128];
                    format(String, sizeof(String),"{FFFFFF}Willkommen im Supermarkt.\n\nHier kannst du Power-Riegel erwerben.\nDu hast gerade %i Power-Riegel\nPower-Riegel erwerben:",Spieler[playerid][pPowerRiegel]);
                    ShowPlayerDialog(playerid, DIALOG_POWERRIEGEL, DIALOG_STYLE_INPUT, "Supermarkt: Power-Riegel", String, "Kaufen", "Abbrechen");
				}
                if(listitem==10)//Schaufel
                {
                    if(CheckMoney(playerid) < 25000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
                    if(Biz[pVW][bWaren] < 10)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                    Biz[pVW][bWaren] -= 10;
                    Biz[pVW][bKasse] += 25000;
                    GivePlayerCash(playerid, -25000);
                    Spieler[playerid][pSchaufel] += 1;
                    SendClientMessage(playerid, COLOR_WHITE, "* Du hast dir eine Schaufel für 25.000$ gekauft.");
                }
			}
			if(!response)return 1;
		}
        case DIALOG_POWERRIEGEL:
        {
            if(response){
                new pVW = GetBizIndexByID(GetPlayerVirtualWorld(playerid));
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new PowerRiegel = strval(inputtext);
				if(CheckMoney(playerid) < PowerRiegel*5000) return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
				if(Biz[pVW][bWaren] < 15) return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
                if(Spieler[playerid][pPowerRiegel] >= 20) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur 20 Power Riegel kaufen.");
                if(PowerRiegel > 20) return SendClientMessage(playerid, COLOR_RED, "Du kannst nur 20 Power Riegel kaufen.");
				Biz[pVW][bWaren] -= 15;
				Biz[pVW][bKasse] += PowerRiegel*1000;
				GivePlayerCash(playerid, - PowerRiegel*5000);
                Spieler[playerid][pPowerRiegel] += PowerRiegel;
				SCMFormatted(playerid, COLOR_WHITE, "* Du hast dir %d Power Riegel für %d$ gekauft.",PowerRiegel,PowerRiegel*5000);
				SendClientMessage(playerid, COLOR_WHITE, "* Mit /Riegel kannst du ihn verwenden.");
                ShowBuyInformation(playerid,"~y~Power-Riegel ~w~gekauft!");
			}
        }
        case DIALOG_KEKSE:
        {
            if(response){
                new pVW = GetBizIndexByID(GetPlayerVirtualWorld(playerid));
                if(sscanf(inputtext, "{i}")) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du hast eine ungültige Eingabe getätigt!");
                if(!IsNumeric(inputtext)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur eine Zahl angeben!");
                new Kekse = strval(inputtext);
                if(CheckMoney(playerid) < Kekse*750)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld!");
				if(Biz[pVW][bWaren] < 150)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht mehr genügend Waren!");
				Biz[pVW][bWaren] -= 150;
				Biz[pVW][bKasse] += Kekse*150;
				GivePlayerCash(playerid, - Kekse*750);
				Spieler[playerid][pKekse] += Kekse;
				SCMFormatted(playerid, COLOR_WHITE, "* Du hast dir %d Kekse für %d$ gekauft. Verwende sie per /Isskeks. Sie bringen dir +2HP.",Kekse,Kekse*750);
				ShowBuyInformation(playerid,"~y~Kekse ~w~gekauft!");
            }
        }
        case DIALOG_SERVICE:
        {
            new string[128];
            if(response)
            {
                if(listitem==0)//Polizei
                {
                    if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid, COLOR_RED, "Du bist in einem Gebäude!");
                    if (Spieler[playerid][pJailed] != 0) return SendClientMessage(playerid, COLOR_RED, "Du kannst hier keinen Notruf abgeben!");
                    return cmd_anrufen(playerid,"110");
                }
                if(listitem==1)//Sani
                {
                    // if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid, COLOR_RED, "Du bist in einem Gebäude!");
                    if (Spieler[playerid][pJailed] != 0) return SendClientMessage(playerid, COLOR_RED, "Du kannst hier keine Sanitäter rufen!");
                    return cmd_anrufen(playerid,"112");
                }
                if(listitem==2)//KFZ-Mechatroniker
                {
                    if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid, COLOR_RED, "Du bist in einem Gebäude!");
                    if (Spieler[playerid][pJailed] != 0) return SendClientMessage(playerid, COLOR_RED, "Du kannst das hier nicht!");
                    SendClientMessage(playerid, COLOR_BLUE, "Dein Mechaniker-Ruf wurde abgeschickt! Warte auf eine Rückmeldung.");
                    if(NeedKFZ[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen KFZ-Mechatroniker gerufen, warte auf die Annahme!");
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 5)
                            {
                                format(string, sizeof(string), "* %s (ID: %d) benötigt einen Mechatroniker! Verwende /Acceptkfz [ID]", GetName(playerid), playerid);
                                SendClientMessage(i, COLOR_BLUE, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es sind keine KFZ-Mechatroniker online!");
                        return 1;
                    }
                    NeedKFZ[playerid] = 1;
                }
                if(listitem==3)//OAMT
                {
                    if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid, COLOR_RED, "Du bist in einem Gebäude!");
                    if (Spieler[playerid][pJailed] != 0) return SendClientMessage(playerid, COLOR_RED, "Du kannst hier das Ordnungsamt nicht anrufen.");
                    SendClientMessage(playerid, COLOR_RED, "Hier ist der Notruf der Los Santos Verkehrsüberwachung!");
                    SendClientMessage(playerid, COLOR_BLUE, "Ihr Notruf ist in die Notrufzentrale eingegangen, warten Sie auf eine Rückmeldung!");
                    if(NeedOAMT[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Ordnungsbeamten gerufen, warte auf die Annahme!");
                    new bool: IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pFraktion] == 5)
                            {
                                format(string, sizeof(string), "[ZENTRALE] Bürger %s (ID: %d)(Nummer: %d) benötigt einen Ordnungsbeamten! Verwende /Acceptoamt [ID]", GetName(playerid), playerid, Spieler[playerid][pHandyNr]);
                                SendClientMessage(i, COLOR_BLUE, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Ordnungsbeamter online.");
                        return 1;
                    }
                    NeedOAMT[playerid] = 1;
                }
                if(listitem==4)//Taxi
                {
                    if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid, COLOR_RED, "Du bist in einem Gebäude!");
                    if (Spieler[playerid][pJailed] != 0) return SendClientMessage(playerid, COLOR_RED, "Du kannst hier kein Taxi rufen!");
                    SendClientMessage(playerid, COLOR_BLUE, "Dein Taxiruf wurde abgeschickt, warte auf eine Rückmeldung!");
                    if(NeedTAXI[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits ein Taxi gerufen, warte auf die Annahme!");
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 16)
                            {
                                format(string, sizeof(string), "* %s (ID: %d) ruft ein Taxi! Verwende /Accepttaxi [ID]", GetName(playerid), playerid);
                                SendClientMessage(i, COLOR_BLUE, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Taxifahrer online.");
                        return 1;
                    }
                    NeedTAXI[playerid] = 1;
                }
                if(listitem==5)//Pizza
                {
                    if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid, COLOR_RED, "Du bist in einem Gebäude!");
                    if (Spieler[playerid][pJailed] != 0) return SendClientMessage(playerid, COLOR_RED, "Du kannst hier keine Pizza bestellen!");
                    SendClientMessage(playerid, COLOR_BLUE, "Deine Bestellung wurde abgeschickt, warte auf eine Rückmeldung!");
                    if(NeedPIZZA[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits eine Pizza bestellt, warte auf die Annahme!");
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 15)
                            {
                                format(string, sizeof(string), "* %s (ID: %d) bestellt eine Pizza! Verwende /Acceptpizza [ID]", GetName(playerid), playerid);
                                SendClientMessage(i, COLOR_BLUE, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Pizzalieferant online.");
                        return 1;
                    }
                    NeedPIZZA[playerid] = 1;
                }
                if(listitem==6)//Wheelman
                {
                    if(GetPlayerInterior(playerid) > 0)return SendClientMessage(playerid, COLOR_RED, "Du bist in einem Gebäude!");
                    SendClientMessage(playerid, COLOR_BLUE, "Dein Agency Auftrag wurde verschickt. Warte auf eine Annahme!");
                    if(NeedWHEEL[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits ein Agency-Mitglied gerufen, warte auf die Annahme!");
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pFraktion] == 14)
                            {
                                format(string, sizeof(string), "* %s (ID: %d) benötigt ein Agency-Mitglied Verwende /Acceptag [ID]", GetName(playerid), playerid);
                                SendClientMessage(i, COLOR_BLUE, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Agency-Mitglied online.");
                        return 1;
                    }
                    NeedWHEEL[playerid] = 1;
                }
                if(listitem==7)//Anwalt
                {
                    if (Spieler[playerid][pJailed] == 0) return SendClientMessage(playerid, COLOR_RED, "Du bist nicht im Gefängnis!");
                    if (Spieler[playerid][pJailed] != 1) return SendClientMessage(playerid, COLOR_RED, "Du kannst hier keinen Anwalt rufen!");
                    SendClientMessage(playerid, COLOR_BLUE, "Du hast einen Anwalt beantragt, warte auf eine Rückmeldung!");
                    if(NeedAWALT[playerid] == 1)return SendClientMessage(playerid, COLOR_RED, "Du hast bereits einen Anwalt gerufen, warte auf die Annahme!");
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 6)
                            {
                                format(string, sizeof(string), "* %s (ID: %d) ist im Los Santos Police Dep. inhaftiert und benötigt einen Anwalt! Verwende /Acceptanwalt [ID]", GetName(playerid), playerid);
                                SendClientMessage(i, COLOR_BLUE, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Anwalt online.");
                        return 1;
                    }
                    NeedAWALT[playerid] = 1;
                }
            }
            if(!response)return 1;
        }
  		case DIALOG_WMENU:
		{
			if(response){
                new index = GetBizIndexByID(GetPlayerVirtualWorld(playerid));
				if( index == 0 ) return 0;{
					if(Biz[index][bWaren] < 1)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft ist ausverkauft!");
					if(listitem==0){
						if(CheckMoney(playerid) < 1500)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
						GivePlayerWeapon(playerid, 1, 1);
						GivePlayerCash(playerid, -1500);
						Biz[index][bKasse] += 1500*20/100;
						Biz[index][bWaren] -= 7;
					}
					if(listitem==1){
						if(CheckMoney(playerid) < 1800)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
						GivePlayerWeapon(playerid, 5, 1);
						GivePlayerCash(playerid, -1800);
						Biz[index][bKasse] += 1800*20/100;
						Biz[index][bWaren] -= 7;
					}
					if(listitem==2){
						if(CheckMoney(playerid) < 1800)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
						GivePlayerWeapon(playerid, 6, 1);
						GivePlayerCash(playerid, -1800);
						Biz[index][bKasse] += 1800*20/100;
						Biz[index][bWaren] -= 7;
					}
					if(listitem==3){
						if(CheckMoney(playerid) < 4000)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
						SetPlayerArmour(playerid,100);
						GivePlayerCash(playerid, -4000);
						Biz[index][bKasse] += 4000*20/100;
						Biz[index][bWaren] -= 12;
					}
					if(listitem==4){
					    if(!Spieler[playerid][pGunLic]) return SendClientMessage(playerid,COLOR_RED,"Du  benötigt die Waffenschein Klasse A für diese Waffe");
						if(CheckMoney(playerid) < 4200)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
						GivePlayerWeapon(playerid, 22, 50);
						GivePlayerCash(playerid, -4200);
						Biz[index][bKasse] += 4200*20/100;
						Biz[index][bWaren] -= 12;
					}
					if(listitem==5){
					    if(!Spieler[playerid][pGunLic]) return SendClientMessage(playerid,COLOR_RED,"Du  benötigt die Waffenschein Klasse A für diese Waffe");
						if(CheckMoney(playerid) < 5200)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
						GivePlayerWeapon(playerid, 23, 50);
						GivePlayerCash(playerid, -5200);
						Biz[index][bKasse] += 5200*20/100;
						Biz[index][bWaren] -= 12;
					}
					if(listitem==6){
					    if(!Spieler[playerid][pGunLic]) return SendClientMessage(playerid,COLOR_RED,"Du  benötigt die Waffenschein Klasse A für diese Waffe");
						if(CheckMoney(playerid) < 6600)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
						GivePlayerWeapon(playerid, 24, 50);
						GivePlayerCash(playerid, -6600);
						Biz[index][bKasse] += 6600*20/100;
						Biz[index][bWaren] -= 20;
					}
					if(listitem==7){
					    if(!Spieler[playerid][pGunLic]) return SendClientMessage(playerid,COLOR_RED,"Du  benötigt die Waffenschein Klasse A für diese Waffe");
						if(CheckMoney(playerid) < 12800)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
						GivePlayerWeapon(playerid, 25, 20);
						GivePlayerCash(playerid, -12800);
						Biz[index][bKasse] += 12800*20/100;
						Biz[index][bWaren] -= 20;
					}
					if(listitem==8){
					    if(!Spieler[playerid][pGunLicB]) return SendClientMessage(playerid,COLOR_RED,"Du  benötigt die Waffenschein Klasse B für diese Waffe");
						if(CheckMoney(playerid) < 12600)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
						GivePlayerWeapon(playerid, 29, 130);
						GivePlayerCash(playerid, -12600);
						Biz[index][bKasse] += 12600*20/100;
						Biz[index][bWaren] -= 20;
					}
					if(listitem==9){
					    if(!Spieler[playerid][pGunLicB]) return SendClientMessage(playerid,COLOR_RED,"Du  benötigt die Waffenschein Klasse B für diese Waffe");
						if(CheckMoney(playerid) < 22000)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
						GivePlayerWeapon(playerid, 31, 130);
						GivePlayerCash(playerid, -22000);
						Biz[index][bKasse] += 22000*20/100;
						Biz[index][bWaren] -= 20;
					}
					if(listitem==10){
					    if(!Spieler[playerid][pGunLicB]) return SendClientMessage(playerid,COLOR_RED,"Du  benötigt die Waffenschein Klasse B für diese Waffe");
						if(CheckMoney(playerid) < 22400)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
						GivePlayerWeapon(playerid, 30, 130);
						GivePlayerCash(playerid, -22400);
						Biz[index][bKasse] += 22400*20/100;
						Biz[index][bWaren] -= 20;
					}
					if(listitem==11){
					    if(!Spieler[playerid][pGunLicB]) return SendClientMessage(playerid,COLOR_RED,"Du  benötigt die Waffenschein Klasse B für diese Waffe");
						if(CheckMoney(playerid) < 24000)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
						GivePlayerWeapon(playerid, 33, 30);
						GivePlayerCash(playerid, -24000);
						Biz[index][bKasse] += 24000*20/100;
						Biz[index][bWaren] -= 20;
					}
                    if(listitem == 12){
                        SelectedItem[playerid] = 0;
						ShowPlayerDialog(playerid,DIALOG_WAFFENBUENDEL,DIALOG_STYLE_LIST,"Waffenbündel","Schutzweste, Deagle, Shotgun (23.400$ 30 | 50 Munition)\nSchutzweste, Deagle, MP5 (24.200$ 30 | 130 Munition)\nSchutzweste, Deagle, Shotgun, M4 (43.400$ 30 | 50 | 130 Munition)\nSchutzweste, Deagle, M4, Rifle (56.600$ 30 | 130 | 30 Munition)","Kaufen","Abbrechen");
                    }
                    if(listitem == 13){
						if(CheckMoney(playerid) < 5000000)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        if( Spieler[playerid][pSpawnWeste] > gettime() ) return SendClientMessage(playerid, COLOR_RED, "Deine Spawn Weste läuft noch.");
						SetPlayerArmour(playerid,100);
						GivePlayerCash(playerid, -5000000);
						Biz[index][bWaren] -= 100;
						Biz[index][bKasse] += 200000;
                        Spieler[playerid][pSpawnWeste] = gettime() + 10*24*60*60;
                    }
				}
			}
            if(listitem != 12 && response) ShowBuyInformation(playerid,"~y~Waffen ~w~gekauft!");
			if(!response)return 1;
		}
        case CDIALOG_WMENU:
        {
            if(response){
           	    if(GetPlayerInterior(playerid) == 9 || GetPlayerInterior(playerid) == 3){
					if(listitem==0){
					    if(CheckMoney(playerid) < 800)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 1, 1);
                        GivePlayerCash(playerid, -800);
                    }
                    if(listitem==1){
                        if(CheckMoney(playerid) < 1200)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 5, 1);
                        GivePlayerCash(playerid, -1200);
                    }
                    if(listitem==2){
                        if(CheckMoney(playerid) < 1200)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 6, 1);
                        GivePlayerCash(playerid, -1200);
                    }
                    if(listitem==3){
                        if(CheckMoney(playerid) < 2400)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        SetPlayerArmour(playerid,100);
                        GivePlayerCash(playerid, -2400);
                    }
                    if(listitem==4){
                        if(!Spieler[playerid][pGunLic]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse A für diese Waffe.");
                        if(CheckMoney(playerid) < 3000)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 22, 100);
                        GivePlayerCash(playerid, -3000);
                    }
                    if(listitem==5){
                        if(!Spieler[playerid][pGunLic]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse A für diese Waffe.");
                        if(CheckMoney(playerid) < 2600)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 23, 100);
                        GivePlayerCash(playerid, -2600);
                    }
                    if(listitem==6){
                        if(!Spieler[playerid][pGunLic]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse A für diese Waffe.");
                        if(CheckMoney(playerid) < 5200)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 24, 100);
                        GivePlayerCash(playerid, -5200);
                    }
                    if(listitem==7){
                        if(!Spieler[playerid][pGunLic]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse A für diese Waffe.");
                        if(CheckMoney(playerid) < 10000)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 25, 50);
                        GivePlayerCash(playerid, -10000);
                    }
                    if(listitem==8){
                        if(!Spieler[playerid][pGunLicB]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse B für diese Waffe.");
                        if(CheckMoney(playerid) < 10400)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 29, 150);
                        GivePlayerCash(playerid, -10400);
                    }
                    if(listitem==9){
                        if(!Spieler[playerid][pGunLicB]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse B für diese Waffe.");
                        if(CheckMoney(playerid) < 16400)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 31, 200);
                        GivePlayerCash(playerid, -16400);
                    }
                    if(listitem==10){
                        if(!Spieler[playerid][pGunLicB]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse B für diese Waffe.");
                        if(CheckMoney(playerid) < 18400)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 30, 200);
                        GivePlayerCash(playerid, -18400);
                    }
                    if(listitem==11){
                        if(!Spieler[playerid][pGunLicB]) return SendClientMessage(playerid,COLOR_RED,"Du benötigt die Waffenschein Klasse B für diese Waffe.");
                        if(CheckMoney(playerid) < 20000)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        GivePlayerWeapon(playerid, 33, 50);
                        GivePlayerCash(playerid, -20000);
                    }
                    if(listitem == 12){
                        SelectedItem[playerid] = 1;
						ShowPlayerDialog(playerid,DIALOG_WAFFENBUENDEL,DIALOG_STYLE_LIST,"Waffenbündel","Schutzweste, Deagle, Shotgun (17.600$ 100 | 50 Munition)\nSchutzweste, Deagle, MP5 (18.000$ 100 | 150 Munition)\nSchutzweste, Deagle, Shotgun, M4 (34.000$ 100 | 50 | 200 Munition)\nSchutzweste, Deagle, M4, Rifle (48.000$ 100 | 200 | 50 Munition)","Kaufen","Abbrechen");
                    }
                    if(listitem == 13){
						if(CheckMoney(playerid) < 3750000)return SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genügend Geld!");
                        if( Spieler[playerid][pSpawnWeste] > gettime() ) return SendClientMessage(playerid, COLOR_RED, "Deine Spawn Weste läuft noch.");
						SetPlayerArmour(playerid,100);
						GivePlayerCash(playerid, -3750000);
                        Spieler[playerid][pSpawnWeste] = gettime() + 10*24*60*60;
                    }
                }
                if(listitem != 12 && response) ShowBuyInformation(playerid,"~y~Waffen ~w~gekauft!");
            }
            if (!response) return 1;
        }
        case DIALOG_WAFFENBUENDEL:
        {
            if (!response) return 1;
            new index = GetBizIndexByID(GetPlayerVirtualWorld(playerid));
            if (listitem == 0){
                SetPlayerArmour(playerid,100);
                GivePlayerWeapon(playerid,24,SelectedItem[playerid] ? 100 : 30);
                GivePlayerWeapon(playerid,25,30);
                GivePlayerCash(playerid,SelectedItem[playerid] ?  -17600 : -23400);
				if(!SelectedItem[playerid]) Biz[index][bKasse] += 23400*20/100,Biz[index][bWaren] -= 15;
                SelectedItem[playerid] = 0;
            }
            if (listitem == 1){
                SetPlayerArmour(playerid,100);
                GivePlayerWeapon(playerid,24,SelectedItem[playerid] ? 100 : 30);
                GivePlayerWeapon(playerid,29,SelectedItem[playerid] ? 150 : 130);
                GivePlayerCash(playerid,SelectedItem[playerid] ?  -18000 : -24200);
				if(!SelectedItem[playerid]) Biz[index][bKasse] += 24200*20/100,Biz[index][bWaren] -= 20;
                SelectedItem[playerid] = 0;
            }
            if (listitem == 2){
                SetPlayerArmour(playerid,100);
                GivePlayerWeapon(playerid,24,SelectedItem[playerid] ? 100 : 30);
                GivePlayerWeapon(playerid,25,30);
                GivePlayerWeapon(playerid,31,SelectedItem[playerid] ? 200 : 130);
                GivePlayerCash(playerid,SelectedItem[playerid] ?  -34000 : -43400);
				if(!SelectedItem[playerid]) Biz[index][bKasse] += 43400*20/100,Biz[index][bWaren] -= 25;
                SelectedItem[playerid] = 0;
            }
            if (listitem == 3){
                SetPlayerArmour(playerid,100);
                GivePlayerWeapon(playerid,24,SelectedItem[playerid] ? 100 : 30);
                GivePlayerWeapon(playerid,31,SelectedItem[playerid] ? 200 : 130);
                GivePlayerWeapon(playerid,33,SelectedItem[playerid] ? 50 : 30);
                GivePlayerCash(playerid,SelectedItem[playerid] ?  -48000 : -56600);
				if(!SelectedItem[playerid]) Biz[index][bKasse] += 56600*20/100,Biz[index][bWaren] -= 30;
                SelectedItem[playerid] = 0;
            }
            ShowBuyInformation(playerid,"~y~Waffen ~w~gekauft!");
        }
        case DIALOG_MAXBENZIN:
        {
            if(response)
            {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe einer Tankstelle.");
                if(listitem==0)
                {
                    if(CheckMoney(playerid) < 10000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Tanke[t][tMaxBenzin] = 1000;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Literstand auf 1000 Liter gesetzt.");
                    GivePlayerCash(playerid, -10000);
                    UpdateTankeText(t);
                }
                if(listitem==1)
                {
                    if(CheckMoney(playerid) < 20000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Tanke[t][tMaxBenzin] = 2000;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Literstand auf 2000 Liter gesetzt.");
                    GivePlayerCash(playerid, -20000);
                    UpdateTankeText(t);
                }
                if(listitem==2)
                {
                    if(CheckMoney(playerid) < 30000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Tanke[t][tMaxBenzin] = 3000;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Literstand auf 3000 Liter gesetzt.");
                    GivePlayerCash(playerid, -30000);
                    UpdateTankeText(t);
                }
                if(listitem==3)
                {
                    if(CheckMoney(playerid) < 40000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Tanke[t][tMaxBenzin] = 4000;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Literstand auf 4000 Liter gesetzt.");
                    GivePlayerCash(playerid, -40000);
                    UpdateTankeText(t);
                }
                if(listitem==4)
                {
                    if(CheckMoney(playerid) < 50000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Tanke[t][tMaxBenzin] = 5000;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Literstand auf 5000 Liter gesetzt.");
                    GivePlayerCash(playerid, -50000);
                    UpdateTankeText(t);
                }
            }
        }
        case DIALOG_MAXWAREN:
        {
            if(response)
            {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Du bist nicht in der Nähe eines Geschäftes.");
                if(listitem==0)
                {
                    if(CheckMoney(playerid) < 5000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Biz[b][bMaxWaren] = 100;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Warenstand auf 100 Waren gesetzt.");
                    GivePlayerCash(playerid, -5000);
                    UpdateBizText(b);
                }
                if(listitem==1)
                {
                    if(CheckMoney(playerid) < 10000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Biz[b][bMaxWaren] = 200;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Warenstand auf 200 Waren gesetzt.");
                    GivePlayerCash(playerid, -10000);
                    UpdateBizText(b);
                }
                if(listitem==2)
                {
                    if(CheckMoney(playerid) < 15000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Biz[b][bMaxWaren] = 300;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Warenstand auf 300 Waren gesetzt.");
                    GivePlayerCash(playerid, -15000);
                    UpdateBizText(b);
                }
                if(listitem==3)
                {
                    if(CheckMoney(playerid) < 20000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Biz[b][bMaxWaren] = 400;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Warenstand auf 400 Waren gesetzt.");
                    GivePlayerCash(playerid, -20000);
                    UpdateBizText(b);
                }
                if(listitem==4)
                {
                    if(CheckMoney(playerid) < 25000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    Biz[b][bMaxWaren] = 500;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast den Warenstand auf 500 Waren gesetzt.");
                    GivePlayerCash(playerid, -25000);
                    UpdateBizText(b);
                }
            }
            if(!response)return 1;
        }
        case DIALOG_CONFIGBIZ:
        {
            if(response)
            {
                if(listitem==0)//Rauswerfen des Besitzers
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    new dStr[256];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Besitzer "COLOR_HEX_ORANGE"%s "COLOR_HEX_WHITE"aus dem Geschäft schmeißen?", Biz[b][bBesitzer]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_RAUSWERFEN, DIALOG_STYLE_MSGBOX, "Konfigurieren des Geschäftes", dStr, "Ja", "Nein");
                }
                if(listitem==1)//Kaufpreis
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    new dStr[256];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Kaufpreis ändern?\nDer derzeitige Kaufpreis beträgt:"COLOR_HEX_ORANGE" $%s", AddDelimiters(Biz[b][bPreis]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_KAUFPREIS, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ja", "Nein");
                }
                if(listitem==2)//Warenpreis
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    new dStr[256];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Warenpreis ändern?\nDer derzeitige Warenpreis beträgt:"COLOR_HEX_ORANGE" $%s", AddDelimiters(Biz[b][bWarenPreis]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_WARENPREIS, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ja", "Nein");
                }
                if(listitem==3)//Status
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_LOCKSTATUS, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", COLOR_HEX_WHITE"Möchtest du wirklich den Status des Geschäftes ändern?\nDann tippe nun "COLOR_HEX_ORANGE"AUF "COLOR_HEX_WHITE"oder "COLOR_HEX_ORANGE"ZU "COLOR_HEX_WHITE"um den Status zu ändern.", "Ändern", "Abbrechen");
                }
                if(listitem==4)//Beschreibung
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    new dStr[256];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Beschreibung des Geschäft ändern?\nDerzeitige Beschreibung: "COLOR_HEX_ORANGE"%s", Biz[b][bName]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_NAME, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                }
                if(listitem==5)//Maximale Waren
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_MAXWAREN, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "100 Waren\n200 Waren\n300 Waren\n400 Waren\n500 Waren\n1000 Waren\n3000 Waren\n5000 Waren", "Ändern", "Abbrechen");
                }
                if(listitem==6)//Waren
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    new dStr[256];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Waren ändern?\nDerzeitiger Warenstand: "COLOR_HEX_ORANGE"%d", Biz[b][bWaren]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_WAREN, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                }
                if(listitem==7)//Öffnungszeiten
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    new dStr[256];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Öffnungszeiten ändern?\nDerzeitige  Öffnungszeiten: "COLOR_HEX_ORANGE"%d Uhr bis %d Uhr\n\n"COL_DEFAULT"Gib die Öffnungszeiten mit LEERZEICHEN ein.\nBeispiel: 8 21\nErgibt Öffnungszeiten von 8 Uhr bis 21 Uhr", Biz[b][bLadenAuf], Biz[b][bLadenZu]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_ZEITEN, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                }
                if(listitem==8)//Bizkassestand
                {
                    new b = IsPlayerAtBiz(playerid);
                    if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                    new dStr[256];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Bizkassenstand ändern?\nDerzeitiger Stand: "COLOR_HEX_ORANGE"$%s\n\n", AddDelimiters(Biz[b][bKasse]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_KASSE, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                }
            }
            if(!response)return 1;
        }
        case DIALOG_CONFIGBIZ_KASSE: {
            if (!response) return 1;
            if (Spieler[playerid][pAdmin] < 4) return ERROR_RANG_MSG(playerid);
            new b = IsPlayerAtBiz(playerid);
            if (b == 999) return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
            new amount;
            if (sscanf(inputtext, "d", amount)) {
                new dStr[256];
                format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Bizkassenstand ändern?\nDerzeitiger Stand: "COLOR_HEX_ORANGE"$%s\n\n", AddDelimiters(Biz[b][bKasse]));
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_KASSE, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
            }

            Biz[b][bKasse] = amount;
            return SCMFormatted(playerid, COLOR_GREEN, "Du hast den Bizkassenstand auf $%s gesetzt.", AddDelimiters(amount));
        }
        case DIALOG_CONFIGBIZ_ZEITEN: {
            if(response) {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                new
                    auf,zu;
                if(sscanf(inputtext,"dd",auf,zu)) {
                    new dStr[256];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Öffnungszeiten ändern?\nDerzeitige  Öffnungszeiten: "COLOR_HEX_ORANGE"%d Uhr bis %d Uhr\n\n"COL_DEFAULT"Gib die Öffnungszeiten mit LEERZEICHEN ein.\nBeispiel:8 21\nErgibt Öffnungszeiten von 8 Uhr bis 21 Uhr\nAchtung: 0 bis 24 ", Biz[b][bLadenAuf], Biz[b][bLadenZu]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_ZEITEN, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                    return 1;
                }
                if( !( 0 <= auf <= 24 ) || !( 0 <= zu <= 24 ))
                {
                    new dStr[256];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Öffnungszeiten ändern?\nDerzeitige  Öffnungszeiten: "COLOR_HEX_ORANGE"%d Uhr bis %d Uhr\n\n"COL_DEFAULT"Gib die Öffnungszeiten mit LEERZEICHEN ein.\nBeispiel:8 21\nErgibt Öffnungszeiten von 8 Uhr bis 21 Uhr\nAchtung: 0 bis 24 ", Biz[b][bLadenAuf], Biz[b][bLadenZu]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_ZEITEN, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                    return 1;
                }
                if( auf == zu ) {
                    new dStr[256];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Öffnungszeiten ändern?\nDerzeitige  Öffnungszeiten: "COLOR_HEX_ORANGE"%d Uhr bis %d Uhr\n\n"COL_DEFAULT"Gib die Öffnungszeiten mit LEERZEICHEN ein.\nBeispiel:8 21\nErgibt Öffnungszeiten von 8 Uhr bis 21 Uhr\nAchtung: 0 bis 24 ", Biz[b][bLadenAuf], Biz[b][bLadenZu]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_ZEITEN, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                    return 1;
                }
                new
                    Str[128];
                format(Str, sizeof(Str), "Der Öffnungszeiten wurden geändert von %d bis %d auf %d Uhr bis %d Uhr geändert.", Biz[b][bLadenAuf],Biz[b][bLadenZu],auf,zu);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                Biz[b][bLadenAuf] = auf;
                Biz[b][bLadenZu] = zu;
                UpdateBizText(b);
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungsze", "Auswählen", "Abbrechen");
            }
            return 1;
        }
        case DIALOG_CONFIGBIZ_WAREN:
        {
            if(response)
            {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                new entry = strval(inputtext);
                if(entry < 1 || entry > Biz[b][bMaxWaren])
                {
                    SendClientMessage(playerid, COLOR_ORANGE, "Die Waren dürfen nicht unter 1 oder über die Maximale Warenanzahl sein!");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Waren ändern?\nDerzeitiger Warenstand: "COLOR_HEX_ORANGE"%d", Biz[b][bWaren]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_WAREN, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                    return 1;
                }
                new Str[128];
                new oldwaren = Biz[b][bWaren];
                new newwaren = entry;
                Biz[b][bWaren] = entry;
                UpdateBizText(b);
                format(Str, sizeof(Str), "Der Waren-Stand wurde von %d in %d geändert.", oldwaren, newwaren);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");

            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGBIZ_MAXWAREN:
        {
            if(response)
            {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                if(listitem==0)
                {
                    Biz[b][bMaxWaren] = 100;
                    UpdateBizText(b);
                    SendClientMessage(playerid, COLOR_WHITE, "Die Maximalen Waren wurden auf 100 gesetzt.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                }
                if(listitem==1)
                {
                    Biz[b][bMaxWaren] = 200;
                    UpdateBizText(b);
                    SendClientMessage(playerid, COLOR_WHITE, "Die Maximalen Waren wurden auf 200 gesetzt.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                }
                if(listitem==2)
                {
                    Biz[b][bMaxWaren] = 300;
                    UpdateBizText(b);
                    SendClientMessage(playerid, COLOR_WHITE, "Die Maximalen Waren wurden auf 300 gesetzt.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                }
                if(listitem==3)
                {
                    Biz[b][bMaxWaren] = 400;
                    UpdateBizText(b);
                    SendClientMessage(playerid, COLOR_WHITE, "Die Maximalen Waren wurden auf 400 gesetzt.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                }
                if(listitem==4)
                {
                    Biz[b][bMaxWaren] = 500;
                    UpdateBizText(b);
                    SendClientMessage(playerid, COLOR_WHITE, "Die Maximalen Waren wurden auf 500 gesetzt.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                }
                if(listitem==5)
                {
                    Biz[b][bMaxWaren] = 1000;
                    UpdateBizText(b);
                    SendClientMessage(playerid, COLOR_WHITE, "Die Maximalen Waren wurden auf 1000 gesetzt.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                }
                if(listitem==6)
                {
                    Biz[b][bMaxWaren] = 3000;
                    UpdateBizText(b);
                    SendClientMessage(playerid, COLOR_WHITE, "Die Maximalen Waren wurden auf 3000 gesetzt.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                }
                if(listitem==7)
                {
                    Biz[b][bMaxWaren] = 5000;
                    UpdateBizText(b);
                    SendClientMessage(playerid, COLOR_WHITE, "Die Maximalen Waren wurden auf 5000 gesetzt.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                }
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGBIZ_NAME:
        {
            if(response)
            {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                if(strlen(inputtext) < 2)
                {
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Beschreibung des Geschäft ändern?\nDerzeitige Beschreibung: "COLOR_HEX_ORANGE"%s", Biz[b][bName]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_NAME, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ändern", "Abbrechen");
                    SendClientMessage(playerid, COLOR_RED, "Die Beschreibung muss mindestens 2 Zeichen lang sein.");
                    return 1;
                }
                new oldname[32];
                format(oldname, sizeof(oldname), "%s", Biz[b][bName]);
                format(Biz[b][bName], 32, "%s", inputtext);
                new Str[128];
                format(Str, sizeof(Str), "Die Beschreibung wurde von %s in %s geändert.", oldname, inputtext);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                UpdateBizText(b);
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGBIZ_LOCKSTATUS:
        {
            if(response)
            {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                if(strlen(inputtext) < 2)
                {
                    SendClientMessage(playerid, COLOR_RED, "Fehlerhafte Eingabe!");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_LOCKSTATUS, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", COLOR_HEX_WHITE"Möchtest du wirklich den Status des Geschäftes ändern?\nDann tippe nun "COLOR_HEX_ORANGE"AUF "COLOR_HEX_WHITE"oder "COLOR_HEX_ORANGE"ZU "COLOR_HEX_WHITE"um den Status zu ändern.", "Ändern", "Abbrechen");
                    return 1;
                }
                if(strcmp(inputtext, "AUF", true) == 0)
                {
                    Biz[b][bLock] = 0;
                    SendClientMessage(playerid, COLOR_WHITE, "Das Geschäft ist nun geöffnet.");
                    UpdateBizText(b);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                    return 1;
                }
                else if(strcmp(inputtext, "ZU", true) == 0)
                {
                    Biz[b][bLock] = 1;
                    SendClientMessage(playerid, COLOR_WHITE, "Das Geschäft ist nun geschlossen.");
                    UpdateBizText(b);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                    return 1;
                }
                else
                {
                    SendClientMessage(playerid, COLOR_RED, "Fehlerhafte Eingabe!");
                    return 1;
                }
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                return 1;
            }
        }


        case DIALOG_CONFIGBIZ_WARENPREIS:
        {
            if(response)
            {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                new entry = strval(inputtext);
                if(entry < 1 || entry > 500)
                {
                    SendClientMessage(playerid, COLOR_RED, "Der Warenpreis muss zwischen $1 und $500 liegen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Warenpreis ändern?\nDer derzeitige Warenpreis beträgt:"COLOR_HEX_ORANGE" $%d", Biz[b][bWarenPreis]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_WARENPREIS, DIALOG_STYLE_INPUT, "Konfiguration des Geschäftes", dStr, "Ja", "Nein");
                    return 1;
                }
                new Str[128];
                new oldprice = Biz[b][bWarenPreis];
                new newprice = entry;
                Biz[b][bWarenPreis] = entry;
                UpdateBizText(b);
                format(Str, sizeof(Str), "Der Warenpreis wurde von $%d in $%d geändert.", oldprice, newprice);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGBIZ_KAUFPREIS:
        {
            if(response)
            {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                new entry = strval(inputtext);
                if(entry < 1 || entry > 1000000000)
                {
                    SendClientMessage(playerid, COLOR_RED, "Der Kaufpreis muss zwischen $1 und $1.000.000.000 liegen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Kaufpreis ändern?\nDer derzeitige Kaufpreis beträgt:"COLOR_HEX_ORANGE" $%s", AddDelimiters(Biz[b][bPreis]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ_KAUFPREIS, DIALOG_STYLE_INPUT, "Konfigurieren des Geschäftes", dStr, "Ja", "Nein");
                    return 1;
                }
                new Str[128];
                new oldprice = Biz[b][bPreis];
                new newprice = entry;
                Biz[b][bPreis] = entry;
                UpdateBizText(b);
                format(Str, sizeof(Str), "Der Kaufpreis wurde von $%s in $%s geändert.", AddDelimiters(oldprice), AddDelimiters(newprice));
                SendClientMessage(playerid, COLOR_WHITE, Str);
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGBIZ_RAUSWERFEN:
        {
            if(response)
            {
                new b = IsPlayerAtBiz(playerid);
                if(b == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Geschäft befindest, wurde die Aktion abgebrochen.");
                SendClientMessage(playerid, COLOR_RED, "Der Besitzer wurde aus seinem Geschäft rausgeworfen.");
                format(Biz[b][bBesitzer], MAX_PLAYER_NAME, "Niemand");
                UpdateBizText(b);
                //new query[128];
                //format(query, sizeof(query), "UPDATE `accounts` SET `BizKey` = '999' WHERE `BizKey` = %d", b);
                //mysql_pquery(query,THREAD_CONFIGBIZ_RAUSWERFEN,playerid,gSQL,MySQLThreadOwner);
                Biz[b][bKasse] = 0;
                for(new i = 0 ; i < MAX_PLAYERS ; i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        if(Spieler[i][pPlayerBiz] == b)
                        {
                            Spieler[i][pPlayerBiz] = 999;
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du wurdest aus deinem Geschäft rausgeschmissen.");
                            return 1;
                        }
                    }
                }
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGBIZ, DIALOG_STYLE_LIST, "Konfigurieren des Geschäftes", "Besitzer rauswerfen\nKaufpreis ändern\nWarenpreis ändern\nStatus\nBeschreibung\nMaximale Waren\nWaren\nÖffnungzeiten", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGTANKE:
        {
            if(response)
            {
                if(listitem==0)//Rauswerfen des Besitzers
                {
                    new t = IsPlayerAtTanke(playerid);
                    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Besitzer rauswerfen?\nDerzeitiger Besitzer: "COLOR_HEX_ORANGE"%s", Tanke[t][tBesitzer]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_RAUSWERFEN, DIALOG_STYLE_MSGBOX, "Konfigurieren der Tankstelle", dStr, "Ja", "Nein");
                }
                if(listitem==1)//Kaufpreis ändern
                {
                    new t = IsPlayerAtTanke(playerid);
                    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Kaufpreis ändern?\nDerzeitiger Kaufpreis: "COLOR_HEX_ORANGE"%d", Tanke[t][tPreis]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_KAUFPREIS, DIALOG_STYLE_INPUT, "Konfigurieren der Tankstelle", dStr, "Ja", "Nein");
                }
                if(listitem==2)//Benzinkosten ändern
                {
                    new t = IsPlayerAtTanke(playerid);
                    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Benzinkosten ändern?\nDerzeitige Benzinkosten: "COLOR_HEX_ORANGE"%d", Tanke[t][tFillCost]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_BENZINKOSTEN, DIALOG_STYLE_INPUT, "Konfigurieren der Tankstelle", dStr, "Ja", "Nein");
                }
                if(listitem==3)//Beschreibung
                {
                    new t = IsPlayerAtTanke(playerid);
                    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Beschreibung ändern?\nDerzeitige Beschreibung: "COLOR_HEX_ORANGE"%s", Tanke[t][tName]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_NAME, DIALOG_STYLE_INPUT, "Konfigurieren der Tankstelle", dStr, "Ja", "Nein");
                }
                if(listitem==4)//Max Benzin
                {
                    new t = IsPlayerAtTanke(playerid);
                    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_MAXBENZIN, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "1000 Liter\n2000 Liter\n3000 Liter\n4000 Liter\n5000 Liter", "Auswählen", "Abbrechen");
                }
                if(listitem==5)//Benzinstand
                {
                    new t = IsPlayerAtTanke(playerid);
                    if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                    new string[200];
                    format(string,sizeof(string),COLOR_HEX_WHITE"Möchtest du wirklich den Benzinstand ändern?\nDerzeitiger Warenstand: "COLOR_HEX_ORANGE"%d", Tanke[t][tBenzin]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_BENZIN, DIALOG_STYLE_INPUT, "Konfigurieren der Tankstelle", string , "Ändern", "Abbrechen");
                }
            }
            if(!response)return 1;
        }
        case DIALOG_CONFIGTANKE_BENZIN: {
            if(response) {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                new val;
                sscanf(inputtext,"d",val);
                if(val < 1 || val > Tanke[t][tMaxBenzin])
                {
                    SendClientMessage(playerid, COLOR_ORANGE, "Der Benzinstand darf nicht unter 1 oder über dem Maximale Benzinstand sein!");
                    return 1;
                }
                new Str[128];
                new oldbenzin = Tanke[t][tBenzin];
                new newbenzin = val;
                Tanke[t][tBenzin] = val;
                UpdateTankeText(t);
                format(Str, sizeof(Str), "Der Benzinstand wurde von %d in %d geändert.", oldbenzin, newbenzin);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
            }
            else
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGTANKE_MAXBENZIN:
        {
            if(response)
            {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                if(listitem==0)
                {
                    Tanke[t][tMaxBenzin] = 1000;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Maximale Literstand auf 1000 Liter gesetzt.");
                }
                if(listitem==1)
                {
                    Tanke[t][tMaxBenzin] = 2000;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Maximale Literstand auf 2000 Liter gesetzt.");
                }
                if(listitem==2)
                {
                    Tanke[t][tMaxBenzin] = 3000;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Maximale Literstand auf 3000 Liter gesetzt.");
                }
                if(listitem==3)
                {
                    Tanke[t][tMaxBenzin] = 4000;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Maximale Literstand auf 4000 Liter gesetzt.");
                }
                if(listitem==4)
                {
                    Tanke[t][tMaxBenzin] = 5000;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Maximale Literstand auf 5000 Liter gesetzt.");
                }
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGTANKE_NAME:
        {
            if(response)
            {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                if(strlen(inputtext) < 2)
                {
                    SendClientMessage(playerid, COLOR_RED, "Die Beschreibung muss mindestens 2 Zeichen enthalten!");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Beschreibung ändern?\nDerzeitige Beschreibung: "COLOR_HEX_ORANGE"%s", Tanke[t][tName]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_NAME, DIALOG_STYLE_INPUT, "Konfigurieren der Tankstelle", dStr, "Ja", "Nein");
                    return 1;
                }
                new oldname[32];
                format(oldname, sizeof(oldname), "%s", Tanke[t][tName]);
                format(Tanke[t][tName], 32, "%s", inputtext);
                new Str[128];
                format(Str, sizeof(Str), "Die Beschreibung wurde von %s in %s geändert.", oldname, inputtext);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                UpdateTankeText(t);
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGTANKE_BENZINKOSTEN:
        {
            if(response)
            {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                new entry = strval(inputtext);
                if(entry < 1 || entry > 200)
                {
                    SendClientMessage(playerid, COLOR_RED, "Die Benzinkosten müssen zwischen $1 und $200 liegen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Benzinkosten ändern?\nDerzeitige Benzinkosten: "COLOR_HEX_ORANGE"%d", Tanke[t][tFillCost]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_BENZINKOSTEN, DIALOG_STYLE_INPUT, "Konfigurieren der Tankstelle", dStr, "Ja", "Nein");
                    return 1;
                }
                new Str[128];
                new oldprice = Tanke[t][tFillCost];
                new newprice = entry;
                Tanke[t][tFillCost] = entry;
                UpdateTankeText(t);
                format(Str, sizeof(Str), "Die Benzinkosten wurden von $%d in $%d geändert.", oldprice, newprice);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGTANKE_KAUFPREIS:
        {
            if(response)
            {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                new entry = strval(inputtext);
                if(entry < 1 || entry > 1000000000)
                {
                    SendClientMessage(playerid, COLOR_RED, "Der Kaufpreis muss zwischen $1 und $1.000.000.000 liegen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Kaufpreis ändern?\nDerzeitiger Kaufpreis: "COLOR_HEX_ORANGE"$%s", AddDelimiters(Tanke[t][tPreis]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE_KAUFPREIS, DIALOG_STYLE_INPUT, "Konfigurieren der Tankstelle", dStr, "Ja", "Nein");
                    return 1;
                }
                new Str[128];
                new oldprice = Tanke[t][tPreis];
                new newprice = entry;
                Tanke[t][tPreis] = entry;
                UpdateTankeText(t);
                format(Str, sizeof(Str), "Der Kaufpreis wurde von $%s in $%s geändert.", AddDelimiters(oldprice), AddDelimiters(newprice));
                SendClientMessage(playerid, COLOR_WHITE, Str);
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGTANKE_RAUSWERFEN:
        {
            if(response)
            {
                new t = IsPlayerAtTanke(playerid);
                if(t == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keiner Tankstelle befindest wurde die Aktion abgebrochen.");
                format(Tanke[t][tBesitzer], MAX_PLAYER_NAME, "Niemand");
                UpdateTankeText(t);
                //new query[128];
                //format(query, sizeof(query), "UPDATE `accounts` SET `TankKey` = '999' WHERE `TankKey` = %d", t);
                //mysql_pquery(query,THREAD_CONFIGTANKE_RAUSWERFEN,playerid,gSQL,MySQLThreadOwner);
                Tanke[t][tKasse] = 0;
                for(new i = 0 ; i < MAX_PLAYERS ; i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        if(Spieler[i][pPlayerTank] == t)
                        {
                            Spieler[i][pPlayerTank] = 999;
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Du wurdest aus deinem Geschäft rausgeschmissen.");
                            return 1;
                        }
                    }
                }
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGTANKE, DIALOG_STYLE_LIST, "Konfigurieren der Tankstelle", "Besitzer rauswerfen\nKaufpreis ändern\nBenzinkosten ändern\nBeschreibung\nMax. Benzin ändern\nBenzinstand ändern", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGHOUSE:
        {
            if(response)
            {
                if(listitem==0)//Rauswerfen der Bewohner und des Besitzers
                {
                    new h = IsPlayerAtHouse(playerid);
                    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich alle "COLOR_HEX_ORANGE"Bewohner "COLOR_HEX_WHITE"und den "COLOR_HEX_ORANGE"Besitzer %s "COLOR_HEX_WHITE"aus dem Haus rausschmeißen?", Haus[h][hBesitzer]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_RAUSWERFEN, DIALOG_STYLE_MSGBOX, "Konfigurieren des Hauses", dStr, "Ja", "Nein");
                }
                if(listitem==1)//Kaufpreis ändern
                {
                    new h = IsPlayerAtHouse(playerid);
                    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Kaufpreis ändern?\nDer derzeitige Kaufpreis beträgt:"COLOR_HEX_ORANGE" $%s", AddDelimiters(Haus[h][hPreis]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_KAUFPREIS, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                }
                if(listitem==2)//Mietpreis ändern
                {
                    new h = IsPlayerAtHouse(playerid);
                    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Mietpreis ändern?\nDer derzeitige Mietpreis beträgt:"COLOR_HEX_ORANGE" $%s", AddDelimiters(Haus[h][hPreis]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_MIETPREIS, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                }
                if(listitem==3)//Miet-Status
                {
                    new h = IsPlayerAtHouse(playerid);
                    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                    new dStr[164];
                    new rentable[12];
                    if(Haus[h][hMieten]==0){rentable="Nein";}
                    else if(Haus[h][hMieten]==1){rentable="Ja";}
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Miet-Status des Hauses ändern?\nKann gemietet werden: "COLOR_HEX_ORANGE"%s\n"COLOR_HEX_WHITE"Tippe "COLOR_HEX_ORANGE"JA"COLOR_HEX_WHITE" oder "COLOR_HEX_ORANGE"NEIN"COLOR_HEX_WHITE".", rentable);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_MIETSTATUS, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                }
                if(listitem==4)//Status (Lock)
                {
                    new h = IsPlayerAtHouse(playerid);
                    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                    new dStr[164];
                    new status[12];
                    if(Haus[h][hLock] == 0){status="Offen";}
                    else if(Haus[h][hLock] == 1){status="Geschlossen";}
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Lock-Status des Hauses ändern?\nDerzeitiger Lock-Status: "COLOR_HEX_ORANGE"%s\n"COLOR_HEX_WHITE"Tippe "COLOR_HEX_ORANGE"AUF"COLOR_HEX_WHITE" oder "COLOR_HEX_ORANGE"ZU"COLOR_HEX_WHITE".", status);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_LOCKSTATUS, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                }
                if(listitem==5)//Interior
                {
                    new h = IsPlayerAtHouse(playerid);
                    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_INTERIOR, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Interior 1\nInterior 2\nInterior 3\nInterior 4\nInterior 5\nInterior 6\nInterior 7\nInterior 8\nInterior 9\nInterior 10\nInterior 11\nInterior 12\nInterior 13\nInterior 14\nInterior 15\nInterior 16\nInterior 17\nInterior 18\nInterior 19\nInterior 20", "Auswählen", "Abbrechen");
                }
                if(listitem==6)//Beschreibung(Name)
                {
                    new h = IsPlayerAtHouse(playerid);
                    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Beschreibung des Hauses ändern?\nDerzeitige Beschreibung: "COLOR_HEX_ORANGE"%s", Haus[h][hName]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_NAME, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                }
                if(listitem==7)//Maximal Anzahl an Mietern
                {
                    new h = IsPlayerAtHouse(playerid);
                    if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                    new dStr[200];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die maximale Anzahl an Mietern des Hauses ändern?\nDerzeitige maximale Anzahl: "COLOR_HEX_ORANGE"%d"COLOR_HEX_WHITE"\nDerzeitige Mieter Anzahl: "COLOR_HEX_ORANGE"%d", Haus[h][hMieterMax], Haus[h][hMieterAnzahl]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_MAXMIETER, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                }
            }
            if(!response)return 1;
        }
        case DIALOG_CONFIGHOUSE_MAXMIETER: {
            if(response)
            {
                new h = IsPlayerAtHouse(playerid);
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                new anzahl;
                if(sscanf(inputtext,"d",anzahl)) return SendClientMessage(playerid, COLOR_RED, "Wert muss zwischen 1 und 10 liegen");
                if( anzahl < 1 || anzahl > 10 ) return SendClientMessage(playerid, COLOR_RED, "Wert muss zwischen 1 und 10 liegen");
                if( anzahl < Haus[h][hMieterAnzahl] ) return SendClientMessage(playerid, COLOR_RED, "Es sind zu viele Spieler in das Haus eingemietet, um die Grenze auf diesen Wert festzulegen");
                new Str[128];
                format(Str, sizeof(Str), "Die maximale Anzahl an Mietern wurde auf %d geändert", anzahl);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                Haus[h][hMieterMax] = anzahl;
                UpdateHouseText(h);
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGHOUSE_NAME:
        {
            if(response)
            {
                new h = IsPlayerAtHouse(playerid);
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                if(strlen(inputtext) < 2)
                {
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich die Beschreibung des Hauses ändern?\nDerzeitige Beschreibung: "COLOR_HEX_ORANGE"%s", Haus[h][hName]);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_NAME, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                    SendClientMessage(playerid, COLOR_RED, "Die Beschreibung des Hauses muss mindestens 2 Zeichen haben!");
                    return 1;
                }
                new oldname[32];
                format(oldname, sizeof(oldname), "%s", Haus[h][hName]);
                format(Haus[h][hName], 32, "%s", inputtext);
                new Str[128];
                format(Str, sizeof(Str), "Die Beschreibung wurde von %s in %s geändert.", oldname, inputtext);
                SendClientMessage(playerid, COLOR_WHITE, Str);
                UpdateHouseText(h);
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_CONFIGHOUSE_INTERIOR:
        {
            if(response)
            {
                new h = IsPlayerAtHouse(playerid);
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                Haus[h][HouseInteriorID] = listitem + 1;
                SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
                /*
                if(listitem==0)//Interior 1
                {
                    Haus[h][hInterior] = 3;
                    Haus[h][ExitX] = 235.508994;
                    Haus[h][ExitY] = 1189.169897;
                    Haus[h][ExitZ] = 1080.339966;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==1)//Interior 2
                {
                    Haus[h][hInterior] = 2;
                    Haus[h][ExitX] = 225.756989;
                    Haus[h][ExitY] = 1240.000000;
                    Haus[h][ExitZ] = 1082.149902;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==2)//Interior 3
                {
                    Haus[h][hInterior] = 1;
                    Haus[h][ExitX] = 223.043991;
                    Haus[h][ExitY] = 1289.259888;
                    Haus[h][ExitZ] = 1082.199951;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==3)//Interior 4
                {
                    Haus[h][hInterior] = 7;
                    Haus[h][ExitX] = 225.630997;
                    Haus[h][ExitY] = 1022.479980;
                    Haus[h][ExitZ] = 1084.069946;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==4)//Interior 5
                {
                    Haus[h][hInterior] = 15;
                    Haus[h][ExitX] = 295.138977;
                    Haus[h][ExitY] = 1474.469971;
                    Haus[h][ExitZ] = 1080.519897;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==5)//Interior 6
                {
                    Haus[h][hInterior] = 15;
                    Haus[h][ExitX] = 328.493988;
                    Haus[h][ExitY] = 1480.589966;
                    Haus[h][ExitZ] = 1084.449951;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==6)//Interior 7
                {
                    Haus[h][hInterior] = 15;
                    Haus[h][ExitX] = 385.803986;
                    Haus[h][ExitY] = 1471.769897;
                    Haus[h][ExitZ] = 1080.209961;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==7)//Interior 8
                {
                    Haus[h][hInterior] = 1;
                    Haus[h][ExitX] = 244.411987;
                    Haus[h][ExitY] = 305.032989;
                    Haus[h][ExitZ] = 999.148437;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==8)//Interior 9
                {
                    Haus[h][hInterior] = 2;
                    Haus[h][ExitX] = 266.8322;
                    Haus[h][ExitY] = 304.8475;
                    Haus[h][ExitZ] = 999.1484;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==9)//Interior 10
                {
                    Haus[h][hInterior] = 2;
                    Haus[h][ExitX] = 2468.0276;
                    Haus[h][ExitY] = -1698.2456;
                    Haus[h][ExitZ] = 1013.5078;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==10)//Interior 11
                {
                    Haus[h][hInterior] = 12;
                    Haus[h][ExitX] = 2324.419921;
                    Haus[h][ExitY] = -1145.568359;
                    Haus[h][ExitZ] = 1050.710083;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==11)//Interior 12
                {
                    Haus[h][hInterior] = 2;
                    Haus[h][ExitX] = 2237.5356;
                    Haus[h][ExitY] = -1080.9913;
                    Haus[h][ExitZ] = 1049.0234;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==12)//Interior 13
                {
                    Haus[h][hInterior] = 5;
                    Haus[h][ExitX] = 1261.2876;
                    Haus[h][ExitY] = -785.7022;
                    Haus[h][ExitZ] = 1091.9063;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==13)//Interior 14
                {
                    Haus[h][hInterior] = 10;
                    Haus[h][ExitX] = 421.7847;
                    Haus[h][ExitY] = 2536.4045;
                    Haus[h][ExitZ] = 10.0000;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==14)//Interior 15
                {
                    Haus[h][hInterior] = 5;
                    Haus[h][ExitX] = 226.7315;
                    Haus[h][ExitY] = 1114.2902;
                    Haus[h][ExitZ] = 1080.9951;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==15)//Interior 16
                {
                    Haus[h][hInterior] = 2;
                    Haus[h][ExitX] = 446.9980;
                    Haus[h][ExitY] = 1397.4573;
                    Haus[h][ExitZ] = 1084.3047;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==16)//Interior 17
                {
                    Haus[h][hInterior] = 10;
                    Haus[h][ExitX] = 23.8505;
                    Haus[h][ExitY] = 1340.4427;
                    Haus[h][ExitZ] = 1084.3750;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==17)//Interior 18
                {
                    Haus[h][hInterior] = 5;
                    Haus[h][ExitX] = 140.3000;
                    Haus[h][ExitY] = 1366.2676;
                    Haus[h][ExitZ] = 1083.8594;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==18)//Interior 19
                {
                    Haus[h][hInterior] = 6;
                    Haus[h][ExitX] = 234.0007;
                    Haus[h][ExitY] = 1064.0911;
                    Haus[h][ExitZ] = 1084.2117;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                if(listitem==19)//Interior 20
                {
                    Haus[h][hInterior] = 8;
                    Haus[h][ExitX] = 2365.5159;
                    Haus[h][ExitY] = -1135.0269;
                    Haus[h][ExitZ] = 1050.8750;
                    SendClientMessage(playerid, COLOR_WHITE, "Der Interior wurde geändert.");
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                */
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGHOUSE_LOCKSTATUS:
        {
            if(response)
            {
                new h = IsPlayerAtHouse(playerid);
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                if(strlen(inputtext) < 2)
                {
                    new dStr[164];
                    new status[12];
                    if(Haus[h][hLock] == 0){status="Offen";}
                    else if(Haus[h][hLock] == 1){status="Geschlossen";}
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Lock-Status des Hauses ändern?\nDerzeitiger Lock-Status: "COLOR_HEX_ORANGE"%s\n"COLOR_HEX_WHITE"Tippe "COLOR_HEX_ORANGE"AUF"COLOR_HEX_WHITE" oder "COLOR_HEX_ORANGE"ZU"COLOR_HEX_WHITE".", status);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_LOCKSTATUS, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                    return 1;
                }
                if(strcmp(inputtext, "AUF", true) == 0)
                {
                    Haus[h][hLock] = 0;
                    SendClientMessage(playerid, COLOR_WHITE, "Das Haus ist nun geöffnet.");
                    UpdateHouseText(h);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                else if(strcmp(inputtext, "ZU", true) == 0)
                {
                    Haus[h][hLock] = 1;
                    SendClientMessage(playerid, COLOR_WHITE, "Das Haus ist nun geschlossen.");
                    UpdateHouseText(h);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                SendClientMessage(playerid, COLOR_RED, "Fehlerhafte eingabe.");
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGHOUSE_MIETSTATUS:
        {
            if(response)
            {
                new h = IsPlayerAtHouse(playerid);
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                if(strlen(inputtext) < 2)
                {
                    new dStr[164];
                    new rentable[12];
                    if(Haus[h][hMieten]==0){rentable="Nein";}
                    else if(Haus[h][hMieten]==1){rentable="Ja";}
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Miet-Status des Hauses ändern?\nKann gemietet werden: "COLOR_HEX_ORANGE"%s\n"COLOR_HEX_WHITE"Tippe "COLOR_HEX_ORANGE"JA"COLOR_HEX_WHITE" oder "COLOR_HEX_ORANGE"NEIN"COLOR_HEX_WHITE".", rentable);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_MIETSTATUS, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                    return 1;
                }
                if(strcmp(inputtext, "JA", true) == 0)
                {
                    Haus[h][hMieten] = 1;
                    SendClientMessage(playerid, COLOR_WHITE, "In diesem Haus kann nun gemietet werden!");
                    UpdateHouseText(h);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                else if(strcmp(inputtext, "NEIN", true) == 0)
                {
                    Haus[h][hMieten] = 0;
                    SendClientMessage(playerid, COLOR_WHITE, "In diesem Haus kann nicht mehr gemietet werden!");
                    UpdateHouseText(h);
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                    return 1;
                }
                SendClientMessage(playerid, COLOR_RED, "Fehlerhafte eingabe.");
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGHOUSE_RAUSWERFEN:
        {
            if(response)
            {
                new h = IsPlayerAtHouse(playerid);
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                SendClientMessage(playerid, COLOR_RED, "Alle Bewohner und der Besitzer wurden aus dem Haus rausgeworfen.");
                new owner;
                sscanf(Haus[h][hBesitzer],"u",owner);
                format(Haus[h][hBesitzer], MAX_PLAYER_NAME, "Niemand");
                new query[128];
                format(query, sizeof(query), "UPDATE `accounts` SET `HouseMieteKey` = '999' WHERE `HouseMieteKey` = %d", Haus[h][hID] );
                mysql_pquery(query,THREAD_CONFIGHOUSE_RAUSWERFEN,playerid,gSQL,MySQLThreadOwner);
                Haus[h][hKasse] = 0;
                Haus[h][hMieterMax] = 10;
                Haus[h][hMieterAnzahl] = 0;
                Haus[h][hMieten] = 0;
                for(new i = 0 ; i < MAX_PLAYERS ; i++)
                {
                    if(IsPlayerConnected(i))
                    {
                        if(Spieler[i][pHouseMieteKey] == h)
                        {
                            Spieler[i][pSpawnChange] = 0;
                            Spieler[i][pHouseMieteKey] = 999;
                            SendClientMessage(i, COLOR_LIGHTBLUE, "Du wurdest aus deinem Haus geschmissen.");
                        }
                    }
                }
                for(new i ; i < MAX_HAUS_MOEBEL ; i++) {
                    query[0] = '\0';
                    format(query,sizeof(query),"DELETE FROM `hausmoebel` WHERE `id` = %d", g_HausMoebelObjekt[h][i][HMO_iID]);
                    mysql_oquery( query , THREAD_DELETEHAUSMOEBEL , playerid ,gSQL);
                    Hausmoebel_ResetHausMoebel(h,i);
                }
                UpdateHouseText(h);
                if( IsPlayerConnected(owner)) {
                    CheckPlayerHouse(owner);
                }
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGHOUSE_KAUFPREIS:
        {
            if(response)
            {
                new h = IsPlayerAtHouse(playerid);
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                new entry = strval(inputtext);
                if(entry < 1 || entry > 1000000000)
                {
                    SendClientMessage(playerid, COLOR_RED, "Der Kaufpreis sollte zwischen $1 und $1.000.000.000 liegen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Kaufpreis ändern?\nDer derzeitige Kaufpreis beträgt:"COLOR_HEX_ORANGE" $%s", AddDelimiters(Haus[h][hPreis]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_KAUFPREIS, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                    return 1;
                }
                new Str[128];
                new oldprice = Haus[h][hPreis];
                new newprice = entry;
                Haus[h][hPreis] = entry;
                UpdateHouseText(h);
                format(Str, sizeof(Str), "Der Kaufpreis wurde von $%s in $%s geändert.", AddDelimiters(oldprice), AddDelimiters(newprice));
                SendClientMessage(playerid, COLOR_WHITE, Str);
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
        }

        case DIALOG_CONFIGHOUSE_MIETPREIS:
        {
            if(response)
            {
                new h = IsPlayerAtHouse(playerid);
                if(h == 999)return SendClientMessage(playerid, COLOR_RED, "Da du dich an keinem Haus befindest wurde die Aktion abgebrochen.");
                new entry = strval(inputtext);
                if(entry < 1 || entry > 1000)
                {
                    SendClientMessage(playerid, COLOR_RED, "Der Mietpreis sollte zwischen $1 und $1.000 liegen.");
                    new dStr[128];
                    format(dStr, sizeof(dStr), COLOR_HEX_WHITE"Möchtest du wirklich den Mietpreis ändern?\nDer derzeitige Mietpreis beträgt:"COLOR_HEX_ORANGE" $%s", AddDelimiters(Haus[h][hPreis]));
                    ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE_MIETPREIS, DIALOG_STYLE_INPUT, "Konfigurieren des Hauses", dStr, "Ändern", "Abbrechen");
                    return 1;
                }
                new Str[128];
                new oldprice = Haus[h][hMietPreis];
                new newprice = entry;
                Haus[h][hMietPreis] = entry;
                UpdateHouseText(h);
                format(Str, sizeof(Str), "Der Kaufpreis wurde von $%s in $%s geändert.", AddDelimiters(oldprice), AddDelimiters(newprice));
                SendClientMessage(playerid, COLOR_WHITE, Str);
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_CONFIGHOUSE, DIALOG_STYLE_LIST, "Konfigurieren des Hauses", "Bewohner und Besitzer rauswerfen\nKaufpreis ändern\nMietpreis ändern\nMieten zulassen\nStatus\nInterior\nBeschreibung\nMaximale Anzahl an Mietern", "Auswählen", "Abbrechen");
                return 1;
            }
        }
        case DIALOG_NAVI:
        {
            if(response)
            {
                if(listitem == 0)
                {
                    ShowPlayerDialog(playerid, BEHORDEN, DIALOG_STYLE_LIST, "Ämter u. Behörden", "Los Santos Stadthalle (Arbeitsamt & Meldeamt)\nLos Santos Posthaus\nLos Santos Zulassungsstelle\nLos Santos Standesamt (Hochzeit)\nLos Santos TÜV-Amt für Autos u. Motorräder\nLos Santos TÜV-Amt für Flugobjekte", "Auswählen","Beenden");
                }
                if(listitem == 1)
                {
                    ShowPlayerDialog(playerid, NOTDIENSTNAVI, DIALOG_STYLE_LIST, "Polizei u. Notdienste", "Los Santos Polizestation\nSan Andreas FBI\nLos Santos Krankenhaus\nLos Santos Ordnungsamt", "Auswählen","Beenden");
                }
                if(listitem == 2)
                {
                    ShowPlayerDialog(playerid, NAVIFAHRSCHULE, DIALOG_STYLE_LIST, "Fahrschule", "Los Santos Fahrschule", "Auswählen","Beenden");
                }
                if(listitem == 3)
                {
                    new dialogText[512];
                    for (new i; i < sizeof(g_vehicleDealership); i++)
                        format(dialogText, sizeof(dialogText), "%s\n%s", dialogText, g_vehicleDealership[i][VEHICLE_DEALERSHIP_NAME]);

                    ShowPlayerDialog(playerid, AUTOHAUSER, DIALOG_STYLE_LIST, "Fahrzeugverkauf", dialogText, "Auswählen", "Beenden");
                }
                if(listitem == 4)
                {
                    ShowPlayerDialog(playerid, CARSHARING, DIALOG_STYLE_LIST, "CarSharing-Station", "Station am Pizza Stack in Downtown, Los Santos\nStation am Neulingsspawn in Los Santos\nStation nähe Neulingsspawn in Los Santos\nStation am Hauptammunation in Los Santos\nStation Nähe dem Subway in Los Santos\nStation am Los Santos Strand\nStation in Las Venturas\nFlugzeugverleih in Los Santos\nBootsverleih in Los Santos", "Auswählen","Beenden");
                }
                if(listitem == 5)
                {
                    ShowPlayerDialog(playerid, HOTELNAVI, DIALOG_STYLE_LIST, "Hotel", "Hotel im Zentrum von Los Santos", "Auswählen","Beenden");
                }
                if(listitem == 6)
                {
                    ShowPlayerDialog(playerid, BANKEN, DIALOG_STYLE_LIST, "Banken", "Zentralbank der Stadt Los Santos\nZentralbank der Stadt Las Venturas", "Auswählen","Beenden");
                }
                if(listitem == 7)
                {
                    ShowPlayerDialog(playerid, VERSICHERUNGENAVI, DIALOG_STYLE_LIST, "Versicherungen", "Krankenversicherung\nKFZ-Versicherung\nRechtsschutz-Versicherung", "Auswählen","Beenden");
                }
                if(listitem == 8)
                {
                    ShowPlayerDialog(playerid, DIESHOPS, DIALOG_STYLE_LIST, "24/7 Shops", "24/7 Shop in Los Santos, Nähe dem LSPD\n24/7 Shop in Los Santos, Nähe dem Subway\n24/7 Shop in Los Santos, Nähe der Grove Street\n24/7 Shop im Los Santos Shopping Markt\n24/7 Shop an der Stadthalle", "Auswählen", "Abbrechen");
                }
                if(listitem == 9)
                {
                    ShowPlayerDialog(playerid, TANKSTELLEN, DIALOG_STYLE_LIST, "Tankstellen", "Tankstelle - Los Santos, Nähe BSN\nTankstelle - Los Santos, Nähe Alhambra\nTankstelle - Dillimore\nTankstelle - Landstraße Los Santos -> San Fierro\nTankstelle - San Fierro, Nähe Hbf-SF\nTankstelle - San Fierro, Nähe SFPD\nTankstelle - Wüstengebiet in Las Venturas\nTankstelle - Las Venturas, Nähe BanditoArena\nTankstelle - Los Santos, Nähe Bauernfarm\nTankstelle - Las Venturas, Nähe LVPD", "Auswählen","Beenden");
                }
                if(listitem == 10)
                {
                    ShowPlayerDialog(playerid, KLEIDERLADEN, DIALOG_STYLE_LIST, "Kleidergeschäfte", "ZIP in Los Santos, Nähe der Bank\nBinco in Los Santos, Nähe der Grove Street\nVictim in Los Santos, Nähe Strand\nClub-Kleidergeschäft in Los Santos\nClub-Kleidergeschäft in Las Venturas", "Auswählen", "Beenden");
                }
                if(listitem == 11)
                {
                    ShowPlayerDialog(playerid, RESTO, DIALOG_STYLE_LIST, "Restaurant", "Subway in Los Santos\nBurger Shot South in Los Santos\nPizzaria in Los Santos\nCluckin' Bell North in Los Santos\nCluckin' Bell South in Los Santos\nPizzaria in Las Venturas, Nähe des LVPD\nCluckin' Bell in Las Venturas, Nähe des LVPD", "Auswählen","Beenden");
                }
                if(listitem == 12)
                {
                    ShowPlayerDialog(playerid, CASINOSORT, DIALOG_STYLE_LIST, "Casinos", "Los Santos - Casino", "Auswählen", "Abbrechen");
                }
                if(listitem == 13)
                {
                    ShowPlayerDialog(playerid, AMMUORTE, DIALOG_STYLE_LIST, "Waffenshops", "Haupt-Ammunation in Los Santos\nAmmunation in Downtown, Los Santos\nAmmunation in Las Venturas\nAmmunation an der Stadthalle", "Auswählen", "Abbrechen");
                }
                if(listitem == 14)
                {
                    ShowPlayerDialog(playerid, VERKAUFH, DIALOG_STYLE_LIST, "Weitere Verkaufshäuser", "Elektromarkt in Los Santos\nAngelshop in Los Santos\nTierhandel in Los Santos\nMünzkassette", "Auswählen", "Abbrechen");
                }
                if(listitem == 15)
                {
                    ShowPlayerDialog(playerid, TUNINGGARAGE, DIALOG_STYLE_LIST, "Tuning-Garagen", "Motorrad Tuningwerkstatt in Los Santos\nTuningwerkstatt in Los Santos (Normal)\nTuningwerkstatt in San Fierro (Normal)\nTuningwerkstatt in Los Santos (Ältere Fahrzeuge)\nTuningwerkstatt in San Fierro (Spezialfahrzeuge)\nLackierstation für Spezialfahrzeug in Las Venturas\nLackierstation für Flugzeuge in Los Santos\nAbbauwerkstatt für Auto- u. Motorradtuning", "Auswählen", "Abbrechen");
                }
                if(listitem == 16)
                {
                    ShowPlayerDialog(playerid, JOBINNAVI, DIALOG_STYLE_LIST, "Job und Firmen Orte", "Pilot\nMüllmann\nStraßenreiniger\nPizzalieferant\nGärtner\nSchiffsfahrer\nBusfahrer\nAnwalt\nGeld Transportfahrer\nEisverkäufer\nBauer\nProduktlieferant\nBauarbeiter\nTaxizentrale\nHotdogverkauf", "Auswählen", "Abbrechen");
                }
                if(listitem == 17)
                {
                    ShowPlayerDialog(playerid, GANGFRAKBASE, DIALOG_STYLE_LIST, "Gang/Mafien Base", "Ballas Base\nAztecas Base\nVagos Base\nYakuza Base\nCali Kartell Base\nGrove Steet Base\nTriaden Base\nLa Cosa Nostra Base", "Auswählen", "Abbrechen");
                }
                if(listitem == 18)
                {
                    ShowPlayerDialog(playerid, ILLEGALEORTE, DIALOG_STYLE_LIST, "Illegale Orte", "Illegale Berufe\nSafebox Drogen/Waffenteile in Los Santos\nSafebox Drogen/Waffenteile in Las Venturas\nSafebox Drogen/Waffenteile in San Fierro\nGangjail\nWaffendealer Platz\nDrogendealer Platz\nWanted-Hacker Codes\nAutodieb Kran SF\nSchmied (Befreiung von Handschellen)\nSchwarzmarkt\nSpice-Lager", "Auswählen", "Abbrechen");
                }
                if(listitem == 19)
                {
                    ShowPlayerDialog(playerid, WORTE, DIALOG_STYLE_LIST, "Weitere Orte", "Los Santos Flughafen\nSan Fierro Flughafen\nLas Venturas Flughafen\nClubVilla in Los Santos\nClubVilla in Las Venturas\nNeulingsspawn\nLas Venturas Öl-Raffinerie\nLas Venturas Waren-Vergabe\nSan Fierro Hafen\nAngelplatz\nWerbeagentur in Los Santos\nWerbeagentur in Las Venturas\nPaintball Arena\nSportstudio\nShisha-Bar\nSan News Agency\nHall of Fame\nMinenjob\nCoin-Shop", "Auswählen", "Abbrechen");
                }
                if (listitem == 20) return cmd_suchatm(playerid);
            }
        }
        case BEHORDEN:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, CITYHALL_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI4);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Los Santos Stadthalle wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 914.3174,-1004.0942,37.9902, 2.0, CP_NAVI1);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Posthaus in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, REGISTRATIONOFFICE_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI77);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die San Andreas Zulassungsstelle wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, WEDDING_COORDS, 2.0, CP_NAVI38);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das San Andreas Standesamt wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, TUEV_INFO_POINT, 2.0, CP_NAVI3);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Los Santos TÜV-Amt für Autos und Motorräder wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, TUEV_AIRCRAFT_POINT, 2.0, CP_NAVI3);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Los Santos TÜV-Amt für Helikopter und Flugzeuge wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case NOTDIENSTNAVI:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, LSPD_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI1);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Los Santos Police Department wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, FBI_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI2);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das San Andreas FBI wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, SAMD_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI2);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Los Santos Medical Department wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, POO_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI3);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Los Santos Ordnungsamt wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }

        case NAVIFAHRSCHULE:
        {
            if(response)
            {

                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1489.0573,-1771.7749,18.7958, 2.0, CP_NAVI5);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Los Santos Fahrschule wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case VERSICHERUNGENAVI:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, SAMD_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI8);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Versicherungspolice für Krankenversicherung wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, REGISTRATIONOFFICE_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI9);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Versicherungspolice für KFZ-Versicherung wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, CITYHALL_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI9);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Versicherungspolice für Rechtsschutz wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case BANKEN:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, BANKINTERIORLS_ENTER_COORDS, 2.0, CP_NAVI8);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Zentralbank in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, BANKINTERIORLV_ENTER_COORDS, 2.0, CP_NAVI9);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Zentralbank in Las Venturas wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }

        case AUTOHAUSER:
        {
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
            if (listitem < 0 || listitem > sizeof(g_vehicleDealership)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] Keine gültige Auswahl.");
            SetPlayerCheckpointEx(playerid, g_vehicleDealership[listitem][VEHICLE_DEALERSHIP_COORD_X], g_vehicleDealership[listitem][VEHICLE_DEALERSHIP_COORD_Y],
                g_vehicleDealership[listitem][VEHICLE_DEALERSHIP_COORD_Z], 2.0, CP_NAVI9);
            SCMFormatted(playerid, COLOR_GREEN, "[GPS] {FFFF00}%s {FFFFFF}wurde Rot markiert.", g_vehicleDealership[listitem][VEHICLE_DEALERSHIP_NAME]);
            if(adminnavi[playerid] == true)
            {
                adminnavi[playerid] = false;
                return cmd_gotomarker(playerid, "");
            }
        }
        case CARSHARING:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, CARRENTALSTATIONS_COORDS_IDLEWOOD, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Fahrzeugverleih am Pizzastack in Downtown, Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, CARRENTALSTATIONS_COORDS_NOOB, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Fahrzeugverleih am Neulingsspawn in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, CARRENTALSTATIONS_COORDS_NOOB2, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Fahrzeugverleih in Los Santos, Nähe dem Neulingsspawn, wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, CARRENTALSTATIONS_COORDS_AMMU, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Fahrzeugverleih am Hauptammunation in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, CARRENTALSTATIONS_COORDS_BSN, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Fahrzeugverleih in Los Santos, Nähe dem Subway, wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, CARRENTALSTATIONS_COORDS_LSBEACH, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Fahrzeugverleih am Los Santos Strand wurde auf der Karte Rot markiert.");
                }
                if(listitem==6)
                {
                    SetPlayerCheckpointEx(playerid, CARRENTALSTATIONS_COORDS_LV, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Fahrzeugverleih in Las Venturas wurde auf der Karte Rot markiert.");
                }
                if(listitem==7)
                {
                    SetPlayerCheckpointEx(playerid, 1470.7415,-2410.9363,13.5547, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Flugzeugverleih in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==8)
                {
                    SetPlayerCheckpointEx(playerid, BOATRENTAL_COORDS, 2.0, CP_NAVI11);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Bootsverleih in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case RESTO:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, SUBWAY_DRIVEIN_COORDS, 2.0, CP_NAVI12);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Subway in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 817.6655,-1618.9307,13.7034,2.0, CP_NAVI13);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Burger Shot South in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, 2098.0144,-1806.8236,13.5541,2.0, CP_NAVI14);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Pizzaria in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, 925.6447,-1352.1470,13.3761,2.0, CP_NAVI15);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Cluckin' Bell North in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, 2422.1592,-1508.4604,23.9922,2.0, CP_NAVI16);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Cluckin' Bell South in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, 2082.9170,2224.1670,11.0234,2.0, CP_NAVI75);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Pizzaria in Las Venturas, Nähe des LVPD, wurde auf der Karte Rot markiert.");
                }
                if(listitem==6)
                {
                    SetPlayerCheckpointEx(playerid, 2102.3757,2229.0376,11.0234,2.0, CP_NAVI75);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Cluckin' Bell in Las Venturas, Nähe des LVPD, wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case TANKSTELLEN:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1005.5800,-941.1790,42.1320,2.0, CP_NAVI17);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle in Los Santos, Nähe dem BSN, wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 1944.0356,-1771.8125,13.3906,2.0, CP_NAVI18);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle in Los Santos, Nähe dem Club Alhambra, wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, 653.1495,-570.1783,16.3359,2.0, CP_NAVI19);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle in Los Santos, Nähe des FBI, wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, -99.1346,-1166.1656,2.5805,2.0, CP_NAVI20);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle - Landstraße Los Santos, Richtung San Fierro, wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, -2023.9924,156.4616,28.8359,2.0, CP_NAVI21);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle in San Fierro, Nähe dem Hauptbahnhof San Fierro, wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, -1676.5607,412.4557,7.1797,2.0, CP_NAVI22);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle in San Fierro, Nähe des SFPD, wurde auf der Karte Rot markiert.");
                }
                if(listitem==6)
                {
                    SetPlayerCheckpointEx(playerid, 612.2504,1694.3873,6.9922,2.0, CP_NAVI23);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle im Wüstengebiet Las Venturas wurde auf der Karte Rot markiert.");
                }
                if(listitem==7)
                {
                    SetPlayerCheckpointEx(playerid, 1596.0598,2198.7400,10.8203,2.0, CP_NAVI24);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle in Las Venturas, Nähe des LVPD, wurde auf der Karte Rot markiert.");
                }
                if(listitem==8)
                {
                    SetPlayerCheckpointEx(playerid, 1380.9908,457.3878,19.9316,2.0, CP_NAVI74);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle in Los Santos, Nähe der Bauernfarm, wurde auf der Karte Rot markiert.");
                }
                if(listitem==9)
                {
                    SetPlayerCheckpointEx(playerid, 2201.8096,2475.6104,10.8203,2.0, CP_NAVI82);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tankstelle in Las Venturas, Nähe des LVPD, wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case KLEIDERLADEN:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1457.8679,-1140.2852,24.0735,2.0, CP_NAVI25);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das ZIP Kleidergeschäft in Los Santos, Nähe der Bank, wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 2244.6521,-1664.0035,15.4766,2.0, CP_NAVI26);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Binco Kleidergeschäft in Los Santos, Nähe der Grove Street, wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, 461.0692,-1501.0800,31.0574,2.0, CP_NAVI26);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Victim Kleidergeschäft in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, 1022.5134,-1123.2565,23.8703,2.0, CP_NAVI73);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Club-Skinshop in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, 2127.5486,2378.9626,10.8203,2.0, CP_NAVI73);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Club-Skinshop in Las Venturas wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case DIESHOPS:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1350.0214,-1754.2931,13.3554,2.0, CP_NAVI27);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der 24/7 Shop in Los Santos, Nähe der Stadthalle, wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 1316.0682,-906.5001,38.3864,2.0, CP_NAVI28);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der 24/7 Shop in Los Santos, Nähe des Subway, wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, 2423.7568,-1742.3107,13.5469,2.0, CP_NAVI28);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der 24/7 Shop in Los Santos, Nähe der Grove Street, wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, 1154.7301,-1457.9226,15.7969,2.0, CP_NAVI28);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der 24/7 Shop im Shopping Market in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, 1503.8788,-1637.4789,14.5078, 2.0, CP_NAVI28);//1522.9300, -1755.8000, 13.5200
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der 24/7 Shop an der Stadthalle, wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case CASINOSORT:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1498.3309,-1585.8683,13.5469, 2.0, CP_NAVI44);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Casino in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case VERKAUFH:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, ELECTRONICSSHOP_COORDS, 2.0, CP_NAVI39);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Elektromarkt in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, FISHINGSHOP_COORDS, 2.0, CP_NAVI39);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Angelshop in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, PETSHOP_COORDS, 2.0, CP_NAVI76);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Tierhandel in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case GANGFRAKBASE:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, g_fraktion[7][Fr_EnterX],g_fraktion[7][Fr_EnterY],g_fraktion[7][Fr_EnterZ],2.0, CP_NAVI44);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Ballas Base wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, g_fraktion[11][Fr_EnterX],g_fraktion[11][Fr_EnterY],g_fraktion[11][Fr_EnterZ],2.0, CP_NAVI45);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Aztecas Base wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, g_fraktion[13][Fr_EnterX],g_fraktion[13][Fr_EnterY],g_fraktion[13][Fr_EnterZ],2.0, CP_NAVI46);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Vagos Base wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, g_fraktion[10][Fr_EnterX], g_fraktion[10][Fr_EnterY], g_fraktion[10][Fr_EnterZ], 2.0, CP_NAVI47);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Yakuza Base wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, g_fraktion[12][Fr_EnterX],g_fraktion[12][Fr_EnterY],g_fraktion[12][Fr_EnterZ], 2.0, CP_NAVI48);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Cali Kartell Base wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, g_fraktion[6][Fr_EnterX],g_fraktion[6][Fr_EnterY],g_fraktion[6][Fr_EnterZ],2.0, CP_NAVI48);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Grove Street Base wurde auf der Karte Rot markiert.");
                }
                if(listitem==6)
                {
                    SetPlayerCheckpointEx(playerid, g_fraktion[21][Fr_EnterX],g_fraktion[21][Fr_EnterY],g_fraktion[21][Fr_EnterZ], 2.0, CP_NAVI49);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Triaden Base wurde auf der Karte Rot markiert.");
                }
                if(listitem==7)
                {
                    SetPlayerCheckpointEx(playerid, g_fraktion[20][Fr_EnterX],g_fraktion[20][Fr_EnterY],g_fraktion[20][Fr_EnterZ],2.0, CP_NAVI49);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die La Cosa Nostra Base wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case JOBINNAVI:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1930.3031,-2344.5083,13.5469,2.0, CP_NAVI50);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Flughafen wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 2112.8987,-2098.1521,13.5469,2.0, CP_NAVI51);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Mülldepo wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, 2059.0566,-1910.7906,13.5469,2.0, CP_NAVI52);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Stadtreinigung wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, 2118.1602,-1775.5365,13.3916,2.0, CP_NAVI53);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Pizzaria wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, 1565.7582,23.2893,24.1641,2.0, CP_NAVI54);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Gärtnerei wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, 2516.5254,-2253.6462,13.3321,2.0, CP_NAVI55);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Schiffshafen wurde auf der Karte Rot markiert.");
                }
                if(listitem==6)
                {
                    SetPlayerCheckpointEx(playerid, 1257.3948,-1379.4574,13.2933,2.0, CP_NAVI56);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Buszentrale wurde auf der Karte Rot markiert.");
                }
                if(listitem==7)
                {
                    SetPlayerCheckpointEx(playerid, LSPD_INTERIOR_ENTER_COORDS, 2.0, CP_NAVI57);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Los Santos Police Department wurde auf der Karte Rot markiert.");
                }
                if(listitem==8)
                {
                    SetPlayerCheckpointEx(playerid, 1564.5618,-1020.5309,23.9063, 2.0, CP_NAVI58);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Geldtransport Firma wurde auf der Karte Rot markiert.");
                }
                if(listitem==9)
                {
                    SetPlayerCheckpointEx(playerid, 1003.8848,-1350.9558,13.3388, 2.0, CP_NAVI59);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Eisverkauf wurde auf der Karte Rot markiert.");
                }
                if(listitem==10)
                {
                    SetPlayerCheckpointEx(playerid, -12.3201,28.1475,3.1172, 2.0, CP_NAVI60);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Bauern Farm wurde auf der Karte Rot markiert.");
                }
                if(listitem==11)
                {
                    SetPlayerCheckpointEx(playerid, 62.1230,-247.9869,1.5781, 2.0, CP_NAVI61);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Fernfahrer Hof wurde auf der Karte Rot markiert.");
                }
                if(listitem==12)
                {
                    SetPlayerCheckpointEx(playerid, 846.9400,885.9145,13.3516, 2.0, CP_NAVI62);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Baustelle wurde auf der Karte Rot markiert.");
                }
                if(listitem==13)
                {
                    SetPlayerCheckpointEx(playerid, TAXISTATIONS_JOBSKIN_POINT_CITYHALL, 2.0, CP_NAVI80);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Taxizentrale wurde auf der Karte Rot markiert.");
                }
                if(listitem==14)
                {
                    SetPlayerCheckpointEx(playerid, 2390.9146,-1920.6163,13.3828, 2.0, CP_NAVI80);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Hotdogverkauf wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case ILLEGALEORTE:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, JEFF_COORDS, 2.0, CP_NAVI64);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der illegale Berufsmarkt wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, SAFEBOX_COORDS_LS, 2.0, CP_NAVI64);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Safebox in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, SAFEBOX_COORDS_LV, 2.0, CP_NAVI64);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Safebox in Las Venturas wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, SAFEBOX_COORDS_SF, 2.0, CP_NAVI87);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Safebox in San Fierro wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, 2160.315186, -97.976898, 3.429407, 2.0, CP_NAVI65);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Gangjail wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, 2298.2554,-2350.6294,13.5469, 2.0, CP_NAVI66);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Waffendealer Platz wurde auf der Karte Rot markiert.");
                }
                if(listitem==6)
                {
                    SetPlayerCheckpointEx(playerid, 318.9959,-60.6508,1.5781, 2.0, CP_NAVI67);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Drogendealer Platz wurde auf der Karte Rot markiert.");
                }
                if(listitem==7)
                {
                    SetPlayerCheckpointEx(playerid, WANTEDHACKERBASE_POINT, 2.0, CP_NAVI78);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der WantedCode - Hacker Computer wurde auf der Karte Rot markiert.");
                }
                if(listitem==8)
                {
                    SetPlayerCheckpointEx(playerid, -1548.0554,125.1203,3.5547, 2.0, CP_NAVI79);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Autodieb Kran wurde auf der Karte Rot markiert.");
                }
                if(listitem==9)
                {
                    SetPlayerCheckpointEx(playerid, -382.0342,-1426.4521,26.0822, 2.0, CP_NAVI72);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Schmied, der von Handschellen befreit, wurde auf der Karte Rot markiert.");
                }
                if(listitem==10)
                {
                    SetPlayerCheckpointEx(playerid, -1154.0834,-2857.0581,61.0985, 2.0, CP_NAVI85);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Schwarzmarkt wurde auf der Karte Rot markiert.");
            	}
            	if(listitem==11)
                {
                    SetPlayerCheckpointEx(playerid, NDAUFBRECHEN_COORDS, 2.0, CP_NAVI86);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Spice-Lager wurde auf der Karte Rot markiert.");
            	}
        	    if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case TUNINGGARAGE:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1702.9427,-1470.3704,13.5469, 2.0, CP_NAVI68);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Motorrad Tuninggarage wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 1041.0613,-1028.3164,32.1016, 2.0, CP_NAVI69);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die normale Tuninggarage in Las Venturas wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, -1935.8890,236.2874,34.3125, 2.0, CP_NAVI70);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die normale Tuninggarage in San Fierro wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, 2645.2095,-2035.3197,13.5540, 2.0, CP_NAVI71);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tuninggarage in Los Santos für Oldtimer wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, -2713.5679,217.3422,4.2651, 2.0, CP_NAVI72);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Tuninggarage in Los Santos für Spezialefahrzeuge wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, 1763.4915,2080.2959,10.8203, 2.0, CP_NAVI72);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Lackierstation für Spezialfahrzeuge in Las Venturas wurde auf der Karte Rot markiert.");
                }
                if(listitem==6)
                {
                    SetPlayerCheckpointEx(playerid, AIRPORTLS_PAINTJOB_POINT, 2.0, CP_NAVI72);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Lackierstation für Flugzeuge in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==7)
                {
                    SetPlayerCheckpointEx(playerid, 1782.8275,-1702.7240,13.5096, 2.0, CP_NAVI72);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Abbauwerkstatt für Auto- und Motorradtuning in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case HOTELNAVI:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1329.4666,-1559.4634,13.5469, 2.0, CP_NAVI76);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Hotel in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case AMMUORTE:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1365.9547,-1279.0731,13.5469, 2.0, CP_NAVI33);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Haupt-Ammunation in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, 2400.5369,-1981.5837,13.5469, 2.0, CP_NAVI81);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Ammunation in Downtown, Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, 2159.1836,943.2106,10.8203, 2.0, CP_NAVI83);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Ammunation in Las Venturas wurde auf der Karte Rot markiert.");
                }
                if (listitem == 3) {
                    SetPlayerCheckpointEx(playerid, 1510.7117,-1679.9557,13.5171, 2.0, CP_NAVI83);//1549.18, -1773.3, 13.52
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Ammunation an der Stadthalle wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case WORTE:
        {
            if(response)
            {
                if(listitem==0)
                {
                    SetPlayerCheckpointEx(playerid, 1959.5519,-2180.7378,13.5469, 2.0, CP_NAVI29);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Los Santos Flughafen wurde auf der Karte Rot markiert.");
                }
                if(listitem==1)
                {
                    SetPlayerCheckpointEx(playerid, -1547.0936,-431.9405,6.0073, 2.0, CP_NAVI30);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der San Fierro Flughafen wurde auf der Karte Rot markiert.");
                }
                if(listitem==2)
                {
                    SetPlayerCheckpointEx(playerid, 1711.9429,1604.6927,10.0079, 2.0, CP_NAVI31);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Las Venturas Flughafen wurde auf der Karte Rot markiert.");
                }
                if(listitem==3)
                {
                    SetPlayerCheckpointEx(playerid, CLUBINTERIORLS_ENTER_COORDS, 2.0, CP_NAVI32);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die ClubVilla in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==4)
                {
                    SetPlayerCheckpointEx(playerid, 2127.5486,2378.9626,10.8203, 2.0, CP_NAVI32);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die ClubVilla in Las Venturas wurde auf der Karte Rot markiert.");
                }
                if(listitem==5)
                {
                    SetPlayerCheckpointEx(playerid, NOOBSPAWN_STARTBONUS_POINT, 2.0, CP_NAVI34);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Neulingsspawn in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==6)
                {
                    SetPlayerCheckpointEx(playerid, 268.9609,1384.2981,10.1610, 2.0, CP_NAVI35);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Las Venturas Öl-Raffinerie wurde auf der Karte Rot markiert.");
                }
                if(listitem==7)
                {
                    SetPlayerCheckpointEx(playerid, 577.4390,1221.7273,11.2689, 2.0, CP_NAVI36);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Las Venturas Waren Vergabe wurde auf der Karte Rot markiert.");
                }
                if(listitem==8)
                {
                    SetPlayerCheckpointEx(playerid, -1707.6189,10.5305,3.6368, 2.0, CP_NAVI37);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der San Fierro Hafen wurde auf der Karte Rot markiert.");
                }
                if(listitem==9)
                {
                    SetPlayerCheckpointEx(playerid, FISHINGSHOP_COORDS, 2.0, CP_NAVI40);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Angelplatz wurde auf der Karte Rot markiert.");
                }
                if(listitem==10)
                {
                    SetPlayerCheckpointEx(playerid, 1413.4673,-1698.6144,13.5395, 2.0, CP_NAVI41);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Werbeagentur in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==11)
                {
                    SetPlayerCheckpointEx(playerid, 2008.1722,1169.3364,10.8203, 2.0, CP_NAVI41);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Werbeagentur in Las Venturas wurde auf der Karte Rot markiert.");
                }
                if(listitem==12)
                {
                    SetPlayerCheckpointEx(playerid, 1738.5869,-1586.3961,13.5555, 2.0, CP_NAVI76);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Paintball Anlage wurde auf der Karte Rot markiert.");
                }
                if(listitem==13)
                {
                    SetPlayerCheckpointEx(playerid, 660.3523,-1869.5139,5.5537, 2.0, CP_NAVI76);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Das Sportstudio in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==14)
                {
                    SetPlayerCheckpointEx(playerid, SHISHABAR_ENTER_COORDS, 2.0, CP_NAVI76);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Shisha-Bar in Los Santos wurde auf der Karte Rot markiert.");
                }
                if(listitem==15)
                {
                    SetPlayerCheckpointEx(playerid, SANABASE_DONATION_POINT, 2.0, CP_NAVI76);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die San News Agency wurde auf der Karte Rot markiert.");
                }
                if(listitem==16)
                {
                    SetPlayerCheckpointEx(playerid, HALL_OF_FAME_COORDS, 2.0, CP_NAVI76);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Die Hall of Fame wurde auf der Karte Rot markiert.");
                }
                if(listitem==17)
                {
                    SetPlayerCheckpointEx(playerid, 807.5915,843.0824,9.6279, 2.0, CP_NAVI84);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Minenjob wurde auf der Karte Rot markiert.");
                }
                if(listitem==18)
                {
                    SetPlayerCheckpointEx(playerid, COINSHOP_COORDS, 2.0, CP_NAVI84);
                    SendClientMessage(playerid, COLOR_SAMP, "GPS: Der Coinshop wurde auf der Karte Rot markiert.");
                }
                if(adminnavi[playerid] == true)
                {
                    adminnavi[playerid] = false;
                    return cmd_gotomarker(playerid, "");
                }
            }
            if(!response){
                adminnavi[playerid] = false;
                return 1;
            }
        }
        case DIALOG_MIETEN:
        {
            if (response)
            {
                if (listitem < 0 || listitem > 3)
                    return SendClientMessage(playerid, COLOR_RED, "Kein gültiges Fahrzeug ausgewählt!");

                new noMoneyMessage[64];

                new rentBike[2][4] = {{250, 300, 250, 500}, {509, 510, 481, 462}};
                if (CheckMoney(playerid) < rentBike[0][listitem]) {
                    format(noMoneyMessage, sizeof noMoneyMessage, "Du besitzt nicht genug Geld. ($%s)", AddDelimiters(rentBike[0][listitem]));
                    return SendClientMessage(playerid, COLOR_WHITE, noMoneyMessage);
                }

                new Float:pX, Float:pY, Float:pZ;
                GetPlayerPos(playerid, pX, pY, pZ);
                pCar[playerid] = CreateVehicle(rentBike[1][listitem], pX, pY, pZ, 353.9787, 1, 1, -1);
                aiVehicles[pCar[playerid]] = VEH_CAR;
                GivePlayerCash(playerid, -rentBike[0][listitem]);
                Biz[GetBizIndexByID(48)][bKasse] += rentBike[0][listitem];
                PutPlayerInVehicle(playerid, pCar[playerid], 0);
                SendClientMessage(playerid, COLOR_WHITE, "Zum Abschließen tippe /Lock.");
                SendClientMessage(playerid, COLOR_WHITE, "Zum Abgeben des Fahrzeuges tippe /Entmieten.");
                LockCar(pCar[playerid]);
                GameTextForPlayer(playerid, "~w~Miet-Fahrzeug~n~~r~Abgeschlossen", 3000, 4);
                gGas[pCar[playerid]] = GetMaxTank(pCar[playerid]);
                gMaxGas[pCar[playerid]] = GetMaxTank(pCar[playerid]);
            }
            if(!response){return 1;}
        }

        case DIALOG_FARMER:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 1;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Farmer. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_BUSFAHRER:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 2;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Busfahrer. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        /*case DIALOG_ZUGFAHRER:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 23;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Pilot. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nKFZ-Mechatroniker\nAnwalt\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nTaxifahrer\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }*/

        case DIALOG_TRUCKER:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 3;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Trucker. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_PILOT:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 4;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Pilot. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_KFZ:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 5;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun KFZ-Mechatroniker. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_ANWALT:
        {
            if( Spieler[playerid][pLevel] < 3 ) {
                return SendClientMessage(playerid, COLOR_RED, "Um diesen Beruf ausführen zu können, musst du Level 3 erreicht haben!");
            }
            if(response)
            {
                Spieler[playerid][pJob] = 6;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Anwalt. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_STRASSE:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 7;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Straßenreiniger. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_MULLMANN:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 8;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Müllmann. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_GARTEN:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 9;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Gärtner. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_BAUARBEITER:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 10;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Bauarbeiter. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_SCHIFFFAHRER:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 11;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Schiffs-Fahrer. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_GELDT:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 12;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Geld Transportfahrer. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_AMT, DIALOG_STYLE_LIST, "Arbeitsamt", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nBauer\nBusfahrer\nTrucker\nPilot\nStraßenreiniger\nMüllmann\nGärtner\nBauarbeiter\nSchiffs-Fahrer\nGeld-Transportfahrer\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_EISMANN:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 13;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Eismann. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_PIZZAMAN:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 15;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Pizzalieferant. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_DEDEKTIV:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 14;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Detektiv. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }
        case DIALOG_JOBTAXI:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 16;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Taxifahrer. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }
        case DIALOG_JOBHOTDOG:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 24;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Hotdog Verkäufer. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SELBSTBERUF, DIALOG_STYLE_LIST, "Selbstständigkeit", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nKFZ-Mechatroniker\nAnwalt\nTaxifahrer\nEisverkäufer\nDetektiv\nPizzalieferant\nHotdogmann\n=> Illegale Berufe", "Auswählen", "Abbrechen");
            }
        }
        case DIALOG_DDEALER:
        {
            if( Spieler[playerid][pLevel] < 3 ) {
                return SendClientMessage(playerid, COLOR_RED, "Um diesen Beruf ausführen zu können, musst du Level 3 erreicht haben!");
            }
            if(response)
            {
                Spieler[playerid][pJob] = 17;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_WHITE, "Jeff sagt: Hier hast du deinen Job. Jetzt hau ab, bevor uns jemand sieht!");
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Drogendealer. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SCHWARZJOBS, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nDrogendealer\nWaffendealer\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_WDEALER:
        {
            if( Spieler[playerid][pLevel] < 3 ) {
                return SendClientMessage(playerid, COLOR_RED, "Um diesen Beruf ausführen zu können, musst du Level 3 erreicht haben!");
            }
            if(response)
            {
                Spieler[playerid][pJob] = 18;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_WHITE, "Jeff sagt: Hier hast du deinen Job. Jetzt hau ab, bevor uns jemand sieht!");
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Waffendealer. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SCHWARZJOBS, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nDrogendealer\nWaffendealer\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
            }
        }
        case DIALOG_TASCHENDIEB:
        {
            if( Spieler[playerid][pLevel] < 3 ) {
                return SendClientMessage(playerid, COLOR_RED, "Um diesen Beruf ausführen zu können, musst du Level 3 erreicht haben!");
            }
            if(response)
            {
                Spieler[playerid][pJob] = 19;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_WHITE, "Jeff sagt: Hier hast du deinen Job. Jetzt hau ab, bevor uns jemand sieht!");
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun Taschendieb. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SCHWARZJOBS, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nDrogendealer\nWaffendealer\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
            }
        }
        case DIALOG_HURE:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 20;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_WHITE, "Jeff sagt: Hier hast du deinen Job. Jetzt hau ab, bevor uns jemand sieht!");
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun eine Hure. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SCHWARZJOBS, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nDrogendealer\nWaffendealer\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
            }
        }
            case DIALOG_JOBWANTED:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 21;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_WHITE, "Jeff sagt: Hier hast du deinen Job. Jetzt hau ab, bevor uns jemand sieht!");
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun ein Wanted-Hacker. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SCHWARZJOBS, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nDrogendealer\nWaffendealer\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
            }
        }
        case DIALOG_JOBAUTODIEB:
        {
            if(response)
            {
                Spieler[playerid][pJob] = 22;
                Spieler[playerid][pJobWechsel] = gettime() + (60*60);
                SendClientMessage(playerid, COLOR_WHITE, "Jeff sagt: Hier hast du deinen Job. Jetzt hau ab, bevor uns jemand sieht!");
                SendClientMessage(playerid, COLOR_LIGHTRED, "Du bist nun ein Autodieb. Tippe /Help für Befehle!");
            }
            if(!response)
            {
                ShowPlayerDialog(playerid, DIALOG_SCHWARZJOBS, DIALOG_STYLE_LIST, "ILLEGALE JOBS", COLOR_HEX_WHITE">> aktuellen Beruf kündigen\nDrogendealer\nWaffendealer\nProstituierte\nWanted-Hacker\nAutodieb", "Auswählen", "Abbrechen");
            }
        }

        case DIALOG_LISTE:
        {
            new string[128];
            new str2[2048];
            if(response)
            {
                if(listitem==0)//Busfahrerliste
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 2)
                            {
                                format(string, sizeof(string), "Busfahrer %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                strcat(str2, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Busfahrer online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_BUSLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Busfahrer-Liste",str2, "Schließen", "");
                }
                if(listitem==1)//Trucker
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 3)
                            {
                                format(string, sizeof(string), "Trucker %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                strcat(str2, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Trucker online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_TRUCKLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Truck-Liste",str2, "Schließen", "");
                }
                if(listitem==2)//Pilot
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 4)
                            {
                                format(string, sizeof(string), "Pilot %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                strcat(str2, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Pilot online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_PILOTLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Pilot-Liste",str2, "Schließen", "");
                }
                if(listitem==3)//KFZ
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 5)
                            {
                                format(string, sizeof(string), "KFZ-Mech. %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                strcat(str2, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es sind keine Mechatroniker online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_KFZLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"KFZ-Mech.-Liste",str2, "Schließen", "");
                }
                if(listitem==4)//Anwalt
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 6)
                            {
                                format(string, sizeof(string), "Anwalt %s (ID: %i) (Tel: %d) (Skilllvl: %d)\n", GetName(i), i, Spieler[i][pHandyNr],GetPlayerLawyerLevel(i));
                                strcat(str2, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Anwalt online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_ANWALTLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Anwalt-Liste",str2, "Schließen", "");
                }
                if(listitem==5)//Taxi
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pJob] == 16)
                            {
                                format(string, sizeof(string), "Taxifahrer %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                strcat(str2, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Taxifahrer online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_TAXITLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Taxi-Liste",str2, "Schließen", "");
                }
                if(listitem==6)//Admins
                {
                    new query[160];
    				format(query, sizeof(query), "SELECT `Name`, `Level`, `Admin` FROM `accounts` WHERE `Admin` > 0 ORDER BY `Admin` DESC LIMIT 0,30", Spieler[playerid][pAdmin]);
    				mysql_pquery(query,THREAD_ADMINLIST,playerid,gSQL,MySQLThreadOwner);
                }
                if(listitem==7)//SA-NA
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pFraktion] == 4)
                            {
                                    format(string, sizeof(string), "News Reporter %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                    strcat(str2, string);
                                    IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein News Reporter online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_REPLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"News Reporter Liste",str2, "Schließen", "");
                }
                if(listitem==8)//SAMD
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pFraktion] == 3)
                            {
                                    format(string, sizeof(string), "Sanitäter %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                    strcat(str2, string);
                                    IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Sanitäter online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_SANILISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Sanitäter Liste",str2, "Schließen", "");
                }
                if(listitem==9)//OAMT
                {
                    new bool:IsOnline;
                    for(new i = 0 ; i < MAX_PLAYERS ; i++)
                    {
                        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                        {
                            if(Spieler[i][pFraktion] == 5)
                            {
                                    format(string, sizeof(string), "Ordnungsbeamter %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                    strcat(str2, string);
                                    IsOnline = true;
                            }
                        }
                    }
                    if(!IsOnline)
                    {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Ordnungsbeamter online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_OAMTLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Ordnungsbeamten Liste",str2, "Schließen", "");
                }
                if(listitem==10)//LSPD
                {
                    new bool:IsOnline;
                    foreach(new i : Player) {
                        if (IsPlayerConnected(i) && gPlayerLogged[i] == 1) {
                            if (Spieler[i][pFraktion] == 1 && pUnderCover[i] == 0) {
                                format(string, sizeof(string), "Polizeibeamter %s (ID: %i) (Tel: %d)\n", GetName(i), i, Spieler[i][pHandyNr]);
                                strcat(str2, string);
                                IsOnline = true;
                            }
                        }
                    }
                    if (!IsOnline) {
                        SendClientMessage(playerid, COLOR_RED, "Es ist kein Polizeibeamter online.");
                        return 1;
                    }
                    ShowPlayerDialog(playerid, DIALOG_OAMTLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Polizei Liste",str2, "Schließen", "");
                }
                if(listitem==11) {
                    cmd_leader(playerid, "");
                }
                if(listitem==12)//Gesuchte und Tote
                {
                    if(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16)
                    {
                        new bool:IsOnline;
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                            {
                                if(Spieler[i][pWanteds] >= 1)
                                {
                                        format(string, sizeof(string), "Verbrecher %s (ID: %i) (Wantedlevel: %i)\n", GetName(i), i, Spieler[i][pWanteds]);
                                        strcat(str2, string);
                                        IsOnline = true;
                                }
                            }
                        }
                        if(!IsOnline)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Es sind keine Verbrecher online.");
                            return 1;
                        }
                        ShowPlayerDialog(playerid, DIALOG_WTDLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Verbrecher Liste",str2, "Schließen", "");
                    }
                    else if(Spieler[playerid][pFraktion] == 3)
                    {
                        new bool:IsOnline;
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
                            {
                                if(Spieler[i][pTotTime] >= 1)
                                {
                                    format(string, sizeof(string), "Toter %s (ID: %i) (Zeit: %i)\n", GetName(i), i, Spieler[i][pTotTime]);
                                    strcat(str2, string);
                                    IsOnline = true;
                                }
                            }
                        }
                        if(!IsOnline)
                        {
                            SendClientMessage(playerid, COLOR_RED, "Es ist niemand tot.");
                            return 1;
                        }
                        ShowPlayerDialog(playerid, DIALOG_TOTLISTE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Gestorbenenliste",str2, "Schließen", "");
                    }
                }

            }
            if(!response)
            {
                return 1;
            }
        }
        case DIALOG_REG_STEP_1:
        {
            if(response)
            {
                //Regeln Akzeptiert
                ShowPlayerDialog(playerid, DIALOG_REG_STEP_2,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Registrierung:", COLOR_HEX_WHITE"Willkommen auf "COLOR_HEX_ORANGE"LyD - Roleplay\n"COLOR_HEX_WHITE"Registriere dich bitte nun!\n\n"COLOR_HEX_GREEN"Gib bitte nun ein sicheres Passwort ein!\nHINWEIS: Dein Passwort muss mind. 8 stellig sein und 2 Zahlen enthalten,\naußerdem sollte es keine persönlichen Daten beinhaltet!", "OK", "Abbrechen");
                // SetPlayerCameraPos(playerid, 369.8176, -1869.0303, 22.6842);//Brücke Verona Beach
                // SetPlayerCameraLookAt(playerid, 369.7982, -1868.0253, 22.8143);
                // SetPlayerPos(playerid, 381.1510, -1881.4520, 3.7626);
                // SetPlayerView(playerid);
            }
            if(!response)
            {
                //Regeln nicht akzeptiert
                SendClientMessage(playerid, COLOR_RED, "Du hast die Regeln nicht akzeptiert, aus diesem Grund wurdest du gekickt! Versuche es später erneut.");
                Kick(playerid);
            }
        }
        case DIALOG_REG_STEP_2:
        {
            if(response)
            {
                if( IsSecurePassword(inputtext) )
                {
                    new
                        escaped_password[30];
                    mysql_real_escape_string( inputtext, escaped_password );
                    if( !strcmp( inputtext , escaped_password ) ) {
                        CreateAccount(playerid, inputtext);
                        format(Spieler[playerid][pStaat],30,"Ausländer");
                        Spieler[playerid][pBankKonto] = 0;
                        Spieler[playerid][pBankKontoPin] = 0;
                        SaveAccount(playerid);
                        pMakeTutorial[playerid] = 1;
                        Spieler[playerid][pLevel] = 1;
                        Spieler[playerid][pHandy] = 0; // 0815 Handy
                        // ShowPlayerDialog(playerid, DIALOG_REG_STEP_5, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: Geschlecht", COLOR_HEX_WHITE"Bitte gebe nun dein Geschlecht ein.\n \nTipp: Gebe entweder "COLOR_HEX_ORANGE"MANN "COLOR_HEX_WHITE"oder "COLOR_HEX_ORANGE"FRAU "COLOR_HEX_WHITE"ein.", "Absenden", "Abbrechen");
                        ShowPlayerDialog(playerid, DIALOG_REG_STEP_3, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: Vorname", COLOR_HEX_WHITE"Bitte gib nun deinen Vornamen ein.\nDein Vorname wird nicht öffentlich angezeigt, sondern dient lediglich der Authentifizierung und Benachrichtigung.\n\nTipp: Dein Vorname muss mindestens 3 Buchstaben haben, keine Sonderzeichen oder Ziffern", "Absenden", "Abbrechen");
                        gPlayerLogged[playerid] = 1;
                    }
                    else {
                        // Sonderzeichen wurden escaped.
                        ShowPlayerDialog(playerid,DIALOG_REG_STEP_2,DIALOG_STYLE_INPUT,COLOR_HEX_LIGHTBLUE"Registrierung:",COLOR_HEX_WHITE"Willkommen auf "COLOR_HEX_ORANGE"LyD - Roleplay\n"COLOR_HEX_WHITE"Registriere dich bitte nun!\n\n"COLOR_HEX_RED"Gib bitte nun ein sicheres Passwort ein!\nHINWEIS: Dein Passwort muss mind. 8 stellig sein und aus 2 Zahlen bestehen,\naußerdem sollte es keine persönlichen Daten beinhaltet!\n\nDein Passwort enthält ungültige Zeichen!", "OK", "Abbrechen");
                    }

                }
                else
                {
                    ShowPlayerDialog(playerid, DIALOG_REG_STEP_2 ,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Registrierung:",  COLOR_HEX_WHITE"Willkommen auf "COLOR_HEX_ORANGE"LyD - Roleplay\n"COLOR_HEX_WHITE"Bitte wiederhole nochmal dein Passwort.\n\n"COLOR_HEX_GREEN"Gib bitte nun ein sicheres Passwort ein!", "OK", "Abbrechen");
                    SendClientMessage(playerid, COLOR_RED, "Dein Passwort sollte mindestens 8 Zeichen besitzen.\nDavon müssen zwei eine Zahl sein ( 0-9 ).");
                }
            }
            else
            {
                //Registrierung abgebrochen
                SendClientMessage(playerid, COLOR_RED, "Schade, dass du die Registration beendet hast! Aus diesem Grund wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
            }
        }
        case DIALOG_REG_STEP_4: {
            if(response) {
                new email[64];
                mysql_real_escape_string(inputtext,email);
                if( IsValidEmail(email)) {
                    new String[128];
                    format(String,sizeof(String),"UPDATE `accounts` SET `email` = '%s' WHERE `Name` = '%s'",email,GetName(playerid));
                    mysql_pquery(String,THREAD_DUMMY,playerid,gSQL,MySQLThreadOwner);
                    format(String,sizeof(String),"Deine E-Mail Adresse wurde gespeichert! (%s)",email);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                    ShowPlayerDialog(playerid, DIALOG_REG_STEP_5, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: Geschlecht", COLOR_HEX_WHITE"Bitte gebe nun dein Geschlecht ein.\n \nTipp: Gebe entweder "COLOR_HEX_ORANGE"MANN "COLOR_HEX_WHITE"oder "COLOR_HEX_ORANGE"FRAU "COLOR_HEX_WHITE"ein.", "Absenden", "Abbrechen");
                }
                else {
                    SendClientMessage(playerid,COLOR_RED,"Ungültiger E-Mail Adresse!");
                    ShowPlayerDialog(playerid, DIALOG_REG_STEP_4, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: E-Mail", COLOR_HEX_WHITE"Bitte gib nun deine E-Mail Adresse ein.\nDeine E-Mail Adresse wird nicht öffentlich angezeigt, sondern dient lediglich der Authentifizierung und Benachrichtigung.\n\nTipp: Es muss sich um eine gültige E-Mail Adresse handeln", "Absenden", "Abbrechen");
                }
            }
            else
            {
                //Registrierung abgebrochen
                SendClientMessage(playerid, COLOR_RED, "Schade, dass du die Registration beendet hast! Aus diesem Grund wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
            }
            return 1;
        }
        case DIALOG_REG_STEP_3:
        {
            if(response) {
                new vorname[64];
                mysql_real_escape_string(inputtext,vorname);
                if( IsValidVorname(vorname)) {
                    new String[128];
                    format(String,sizeof(String),"UPDATE `accounts` SET `vorname` = '%s' WHERE `Name` = '%s'",vorname,GetName(playerid));
                    mysql_pquery(String,THREAD_DUMMY,playerid,gSQL,MySQLThreadOwner);
                    format(String,sizeof(String),"Dein Vorname wurde gespeichert! (%s)",vorname);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                    ShowPlayerDialog(playerid, DIALOG_REG_STEP_4, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: E-Mail", COLOR_HEX_WHITE"Bitte gib nun deine E-Mail Adresse ein.\nDeine E-Mail Adresse wird nicht öffentlich angezeigt, sondern dient lediglich der Authentifizierung und Benachrichtigung.\n\nTipp: Es muss sich um eine gültige E-Mail Adresse handeln", "Absenden", "Abbrechen");
                }
                else {
                    SendClientMessage(playerid,COLOR_RED,"Ungültiger Vorname!");
                    ShowPlayerDialog(playerid, DIALOG_REG_STEP_3, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: Vorname", COLOR_HEX_WHITE"Bitte gib nun deinen Vornamen ein.\nDein Vorname wird nicht öffentlich angezeigt, sondern dient lediglich der Authentifizierung und Benachrichtigung.\n\nTipp: Dein Vorname muss mindestens 3 Buchstaben haben, keine Sonderzeichen oder Ziffern", "Absenden", "Abbrechen");
                }
            }
            else
            {
                //Registrierung abgebrochen
                SendClientMessage(playerid, COLOR_RED, "Schade, dass du die Registration beendet hast! Aus diesem Grund wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
            }
            return 1;
        }
        case DIALOG_LOGIN:
        {
            if (response)
            {
                if(strlen(inputtext) == 0 )
                {
                    // Spieler[playerid][pTut] = 1;
                    ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, COLOR_HEX_LIGHTBLUE"Anmeldung:", COLOR_HEX_WHITE"Willkommen auf "COLOR_HEX_ORANGE"LyD - Roleplay\n"COLOR_HEX_WHITE"Ein Account unter diesem Namen ist bei uns registriert!\nSollte es dein Account sein, dann Logge dich bitte nun ein.\n \n"COLOR_HEX_GREEN"Bitte halte dein Passwort immer für dich!\n"COLOR_HEX_RED">Passwort vergessen?< - kontaktiere uns: Admin@LyD-Roleplay.de", "OK", "Abbrechen");
                    KillTimer(Spieler[playerid][tLoginTimeout]);
                    Spieler[playerid][tLoginTimeout] = SetTimerEx("PlayerLoginTimeout",30011,false,"d",playerid);
                    Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",5003,false,"dd",playerid,1); // Muss,sonst klappt Spectate nicht
                    return 1;
                }

                LoadPlayer(playerid, inputtext);
                //ShowPlayerDialog(playerid, DIALOG_LOGMSG, DIALOG_STYLE_MSGBOX, "LyD - Roleplay - Willkommen", "Schön das du wieder zu uns gefunden hast!\nProjektdaten:\nServer IP: Server.LyD-Roleplay.de\nTeamspeak IP: TS.LyD-Roleplay.de\nForum Adresse: www.LyD-Roleplay.de\nFalls du noch kein Forum Account besitzt, bitten wir dich eins zu erstellen!\nHalte dich an die Server Verordnung!", "Akzeptieren", "Ablehnen");
                //TogglePlayerSpectating(playerid,false);
            }
            else
            {
                SendClientMessage(playerid, COLOR_RED, "Da du dich nicht einloggen wolltest, wurdest du gekickt. Versuche es später erneut.");
                Kick(playerid);
            }
        }
        case DIALOG_VORNAME: {
            if(response) {
                new vorname[64];
                mysql_real_escape_string(inputtext,vorname);
                if( IsValidVorname(vorname)) {
                    new String[128];
                    format(String,sizeof(String),"UPDATE `accounts` SET `vorname` = '%s' WHERE `Name` = '%s'",vorname,GetName(playerid));
                    mysql_pquery(String,THREAD_DUMMY,playerid,gSQL,MySQLThreadOwner);
                    format(String,sizeof(String),"Dein Vorname wurde gespeichert! (%s)",vorname);
                    SendClientMessage(playerid,COLOR_YELLOW,String);
                    IsValidEmailDB(playerid);
                }
                else {
                    SendClientMessage(playerid,COLOR_RED,"Ungültiger Vorname!");
                    ShowPlayerDialog(playerid,DIALOG_VORNAME,DIALOG_STYLE_INPUT,"Vorname",COLOR_HEX_WHITE "Gib deinen Vornamen an.\n\nDein Vorname wird nicht öffentlich angezeigt, sondern dient lediglich\nder Authentifizierung und Benachrichtigung.","Weiter","Abbruch");
                }
            }
            else {
                SendClientMessage(playerid, COLOR_RED, "Du musst deinen Vornamen angeben.");
                ShowPlayerDialog(playerid,DIALOG_VORNAME,DIALOG_STYLE_INPUT,"Vorname",COLOR_HEX_WHITE "Gib deinen Vornamen an.\n\nDein Vorname wird nicht öffentlich angezeigt, sondern dient lediglich\nder Authentifizierung und Benachrichtigung.","Weiter","Abbruch");
            }
        }
        case DIALOG_EMAIL: {
            if(response) {
                new email[64];
                mysql_real_escape_string(inputtext,email);
                if( IsValidEmail(email)) {
                    new String[128];
                    format(String,sizeof(String),"UPDATE `accounts` SET `email` = '%s' WHERE `Name` = '%s'",email,GetName(playerid));
                    mysql_pquery(String,THREAD_DUMMY,playerid,gSQL,MySQLThreadOwner);
                    format(String,sizeof(String),"Deine E-Mail Adresse wurde gespeichert! (%s)",email);
                    SendClientMessage(playerid,COLOR_YELLOW,String);

                    TogglePlayerSpectating(playerid,false);
                    SpawnPlayerEx(playerid);
                    SetCameraBehindPlayer(playerid);
                }
                else {
                    SendClientMessage(playerid,COLOR_RED,"Ungültige E-Mail Adresse!");
                    ShowPlayerDialog(playerid,DIALOG_EMAIL,DIALOG_STYLE_INPUT,"E-Mail",COLOR_HEX_WHITE "Gib deine E-Mail Adresse an.\n\nDeine E-Mail Adresse wird nicht öffentlich angezeigt,\nsondern dient lediglich der Authentifizierung und Benachrichtigung.","Weiter","Abbruch");
                }
            }
            else {
                SendClientMessage(playerid, COLOR_RED, "Du musst deinen Vornamen angeben.");
                ShowPlayerDialog(playerid,DIALOG_EMAIL,DIALOG_STYLE_INPUT,"E-Mail",COLOR_HEX_WHITE "Gib deine E-Mail Adresse an.\n\nDeine E-Mail Adresse wird nicht öffentlich angezeigt,\nsondern dient lediglich der Authentifizierung und Benachrichtigung.","Weiter","Abbruch");
            }
        }
        case DIALOG_REG_STEP_6,DIALOG_GEBURTSTAG:
        {
            if(response) {
                new
                    String[128],
                    geburtstag[20],
                    tag,
                    monat,
                    jahr;
                if(sscanf(inputtext,"p<.>ddd",tag,monat,jahr)) {
                    return ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_INPUT,"Geburtstag",COLOR_HEX_WHITE "Gib dein Geburtstag in folgendem Format ein:\n dd.mm.yyy = z.B. 4.5.1992","Weiter","");
                }
                if( !(1 <= tag <= 31 ) || ! (1 <= monat <= 12 ) || !( 1960 <= jahr <= 2012 ) ) {
                    return ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_INPUT,"Geburtstag",COLOR_HEX_WHITE "Gib dein Geburtstag in folgendem Format ein:\n dd.mm.yyy = z.B. 4.5.1992","Weiter","");
                }
                format(geburtstag,sizeof(geburtstag),"%02d.%02d.%d",tag,monat,jahr);
                format(String,sizeof(String),"Du hast folgendes Geburtsdatum angegeben: %s",geburtstag);
                SendClientMessage(playerid,COLOR_WHITE,String);
                format(Spieler[playerid][pGeburtstag],20,geburtstag);

                if( dialogid == DIALOG_GEBURTSTAG ) {
                    IsValidVornameDB(playerid);
                }
                else {
                    ShowPlayerDialog(playerid,DIALOG_REG_STEP_7,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Geworben von:", COLOR_HEX_WHITE"Falls du von einem Spieler angeworben wurdest,\nkannst du diesen unten Eintragen.\n\nSolltest du nicht angeworben worden sein,kannst du die Eingabe Überspringen","Bestätigen","Überspringen");
                }

                /*
                if(dialogid == DIALOG_REG_STEP_6 ) {
                }
                else {
                    //
                    SpawnPlayerEx(playerid);
                    SetCameraBehindPlayer(playerid);
                }*/

                format(String,sizeof(String),"UPDATE `accounts` SET `Geburtstag` = '%s' WHERE `Name` = '%s'",geburtstag,GetName(playerid)),
                mysql_pquery(String,THREAD_GEBURTSTAG,playerid,gSQL,MySQLThreadOwner);

            }
            else {
                return ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_INPUT,"Geburtstag","Gib dein Geburtstag in folgendem Format ein:\n dd.mm.yyy = z.B. 4.5.1992","Weiter","");
            }
        }
        case DIALOG_REG_STEP_7:
        {
            if(response) {
                // Name
                new
                    String[256];
                mysql_real_escape_string( inputtext, String , gSQL ,sizeof(String) );
                PlayerSQLExtra(playerid,String);
                format(String,sizeof(String),"SELECT `id` FROM `accounts` WHERE `Name` = '%s'",String);
                mysql_pquery(String,THREAD_ANGEWORBEN,playerid,gSQL,MySQLThreadOwner);
            }
            else {
                ShowPlayerDialog(playerid,DIALOG_SECURECODE_REGISTER,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Sicherheitscode:", COLOR_HEX_WHITE"Bitte gib unten deinen persönlichen Sicherheitscode ein.\nDieser wird genutzt, um dich zukünftig eindeutig zu identifizieren.\n\nDein Sicherheitscode muss zwischen 4 und 10 Zeichen haben\n, darf Zahlen und Sonderzeichen enthalten.\n\nBitte merke dir dein Sicherheitscode(!) gut","Bestätigen","");
            }
        }
        case DIALOG_REG_STEP_5:
        {
            if(response)
            {
                if(strlen(inputtext) < 4)
                {
                    ShowPlayerDialog(playerid, DIALOG_TUT_1, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: Geschlecht", COLOR_HEX_WHITE"Bitte gebe nun dein Geschlecht ein.\n \nTipp: Gebe entweder "COLOR_HEX_ORANGE"MANN "COLOR_HEX_WHITE"oder "COLOR_HEX_ORANGE"FRAU "COLOR_HEX_WHITE"ein.", "Absenden", "Abbrechen");
                    return 1;
                }
                if(strcmp(inputtext, "MANN", true) == 0)
                {
                    Spieler[playerid][pSex] = 1;
                    new string[256];
                    SetPlayerSkinEx(playerid, 101);
                    format(string, sizeof(string), COLOR_HEX_WHITE"Okay, du bist also "COLOR_HEX_ORANGE"Männlich.\n \n"COLOR_HEX_WHITE"Gib dein Geburtstag in folgendem Format ein:\n dd.mm.yyy = z.B. 4.5.1992");
                    // ShowPlayerDialog(playerid, DIALOG_TUT_2, DIALOG_STYLE_MSGBOX, COLOR_HEX_LIGHTBLUE"Tutorial: Fragen",string, "Weiter", "Abbrechen");
                    ShowPlayerDialog(playerid,DIALOG_REG_STEP_6,DIALOG_STYLE_INPUT,"Geburtstag", string ,"Weiter","");
                    SetPlayerCameraPos(playerid, 447.5718, -1750.7904, 17.8588); //PnS Verona Beach
                    SetPlayerCameraLookAt(playerid, 448.5773, -1750.8137, 17.8939);
                    SetPlayerPos(playerid, 483.1288, -1762.5616, 7.1238);
                    return 1;
                }
                else if(strcmp(inputtext, "FRAU", true) == 0)
                {
                    Spieler[playerid][pSex] = 2;
                    new string[256];
                    SetPlayerSkinEx(playerid, 56);
                    format(string, sizeof(string), COLOR_HEX_WHITE"Okay, du bist also "COLOR_HEX_ORANGE"Weiblich.\n \n"COLOR_HEX_WHITE"Gib dein Geburtstag in folgendem Format ein:\n dd.mm.yyy = z.B. 4.5.1992");
                    //ShowPlayerDialog(playerid, DIALOG_TUT_2, DIALOG_STYLE_MSGBOX,  COLOR_HEX_LIGHTBLUE"Tutorial: Fragen",string, "Weiter", "Abbrechen");
                    ShowPlayerDialog(playerid,DIALOG_REG_STEP_6,DIALOG_STYLE_INPUT,"Geburtstag", string ,"Weiter","");
                    SetPlayerCameraPos(playerid, 447.5718, -1750.7904, 17.8588); //PnS Verona Beach
                    SetPlayerCameraLookAt(playerid, 448.5773, -1750.8137, 17.8939);
                    SetPlayerPos(playerid, 483.1288, -1762.5616, 7.1238);
                    return 1;
                }
                ShowPlayerDialog(playerid, DIALOG_REG_STEP_5, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Tutorial: Geschlecht", COLOR_HEX_WHITE"Bitte gebe nun dein Geschlecht ein.\n \nTipp: Gebe entweder "COLOR_HEX_ORANGE"MANN "COLOR_HEX_WHITE"oder "COLOR_HEX_ORANGE"FRAU "COLOR_HEX_WHITE"ein.", "Absenden", "Abbrechen");
                return 1;
            }
            if(!response)
            {
                SendClientMessage(playerid, COLOR_RED, "Da du das Tutorial nicht machen wolltest, wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
                return 1;
            }
        }
        case DIALOG_TUT_2:
        {
            if(response)
            {
                new
                    String[128];
                ShowPlayerDialog(playerid, DIALOG_TUT_3, DIALOG_STYLE_MSGBOX, COLOR_HEX_LIGHTBLUE"INFORMATION", COLOR_HEX_WHITE"Jetzt beginnt eine kleine Einführung, bitte lese die Hilfetexte gründlich durch,\num dich auf dem Server zurecht zu finden! ", "Weiter", "Abbrechen");
                format(String,sizeof(String),"Wir begrüßen ganz herzlich unseren neuen Spieler %s!",GetName(playerid));
                SendClientMessageToAll(0xFF00B9FF,String);
                Spieler[playerid][pTut] = 1;
            }
            if(!response)
            {
                SendClientMessage(playerid, COLOR_RED, "Da du das Tutorial nicht machen wolltest, wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
                return 1;
            }
        }
        case DIALOG_TUT_3:
        {
            if(response)
            {
                if(listitem!=2)
                {
                    ShowPlayerDialog(playerid, DIALOG_TUT_4, DIALOG_STYLE_MSGBOX, COLOR_HEX_LIGHTBLUE"Hilfetext 1/4", COLOR_HEX_WHITE"Mit /Help werden Dir alle nötigen Serverbefehle aufgelistet, mit /Navi findest du alle wichtigen Orte.\nBei weiteren Fragen oder Problem bitten wir dich unsere Support-Ticket Funktion in Anspruch zu nehmen.\nMit dem Befehl /Sup erstellt du ein Support-Ticket was an einem Supporter/Admin gesendet wird. ", "Weiter", "Ausloggen");
                }
            }
            if(!response)
            {
                SendClientMessage(playerid, COLOR_RED, "Da du das Tutorial nicht machen wolltest, wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
                return 1;
            }
        }
        case DIALOG_TUT_4:
        {
            if(response)
            {
                if(listitem!=3)
                {
                    ShowPlayerDialog(playerid, DIALOG_TUT_5, DIALOG_STYLE_MSGBOX, COLOR_HEX_LIGHTBLUE"Hilfetext 2/4", COLOR_HEX_WHITE"Du darfst maximal 5 Privatfahrzeuge bei uns besitzen.\nEs gibt eine große Auswahl an Geschäften zum Verkauf, z.B Tankstellen,Restaurants,Kleidergeschäfte,Shops und vieles mehr!\nAußerdem gibt es eine große Auswahl an Häusern und Hotels die du auch kaufen und mieten kannst.", "Weiter", "Ausloggen");
                }
            }
            if(!response)
            {
                SendClientMessage(playerid, COLOR_RED, "Da du das Tutorial nicht machen wolltest, wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
                return 1;
            }
        }
        case DIALOG_TUT_5:
        {
            if(response)
            {
                if(listitem!=2)
                {
                    ShowPlayerDialog(playerid, DIALOG_TUT_6, DIALOG_STYLE_MSGBOX, COLOR_HEX_LIGHTBLUE"Hilfetext 3/4", COLOR_HEX_WHITE"Wir weisen dich nochmal draufhin, dass dies ein Roleplay/Reallife Server ist, wir bitten dich Roleplaymäßig zu spielen!\nDieser Server basiert auf ein 100 Prozentiges Selfmade Script mit einzigartigen Systemen, überzeuge dich selbst!", "Weiter", "Ausloggen");
                }
            }
            if(!response)
            {
                SendClientMessage(playerid, COLOR_RED, "Da du das Tutorial nicht machen wolltest, wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
                return 1;
            }
        }
        case DIALOG_TUT_6:
        {
            if(response)
            {
                if(listitem!=2)
                {
                    ShowPlayerDialog(playerid, DIALOG_TUT_7, DIALOG_STYLE_MSGBOX, "Hilfetext 4/4: Spawn", COLOR_HEX_WHITE"Vielen Dank, dass du Dir Zeit genommen hast, um die Hilfetexte zu lesen.\nWir empfehlen dir, direkt ein Personalausweiß, Führerschein und ein Job zu besorgen.\nProjektdaten:\nForum Adresse: www.LyD-Roleplay.de\nTeamspeak IP: TS.LyD-Roleplay.de\nBitte melde dich auch in unserem Forum an!", "Spawn", "");
                    return 1;
                }
            }
            if(!response)
            {
                SendClientMessage(playerid, COLOR_RED, "Da du das Tutorial nicht machen wolltest, wurdest du gekickt. Versuche es später erneut!");
                Kick(playerid);
                return 1;
            }
        }
        case DIALOG_TUT_7:
        {
            SpawnPlayerEx(playerid);
            GivePlayerCash(playerid, 40000);
            Spieler[playerid][pLevel] = 1;
            SetPlayerScore(playerid, 1);
        }
        case DIALOG_LINIE:
        {
            if(response)
            {
                new
                    vehicleid = GetPlayerVehicleID(playerid);
                if(vehicleid) {
                    new
                        busIndex = GetBusIndex(vehicleid);
                    if( busIndex != -1 ) {
                        new
                            String[256];
                        DestroyDynamic3DTextLabel(t3dBus[busIndex]);
                        t3dBus[busIndex] = Text3D:CreateDynamic3DTextLabel("Initialisierung...", 0x00FFFFFF, 0.0, 0.0, 0.0 , 14.0 , .attachedvehicle = vehicleid, .testlos = 1 , .streamdistance = 30.0 );

                        Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , t3dBus[busIndex] , E_STREAMER_ATTACH_OFFSET_X , 0.0 );
                        Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , t3dBus[busIndex] , E_STREAMER_ATTACH_OFFSET_Y , 0.0 );
                        Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , t3dBus[busIndex] , E_STREAMER_ATTACH_OFFSET_Z , 1.5 );
                        KillTimer(buswait[playerid]);
                        buswait[playerid] = INVALID_TIMER_ID;
                        UnfreezePlayer(playerid);
                        PlayerTextDrawHide(playerid, BusMessage[playerid]);
                        DisablePlayerCheckpointEx(playerid);
                        if(listitem==0)
                        {
                            SetPlayerCheckpointEx(playerid, 1466.5648,-1729.4851,13.3828, 5.0, CP_BUSLINIE1CP1);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nächste Haltestelle: Los Santos Stadthalle");
                            strcat(String,sBusLinie1);
                        }
                        if(listitem==1)
                        {
                            SetPlayerCheckpointEx(playerid, 1360.7312,-1224.7466,14.2254, 5.0, CP_BUSLINIE2CP1);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nächste Haltestelle: Hauptammunation");
                            strcat(String,sBusLinie2);
                        }
                        if(listitem==2)
                        {
                            SetPlayerCheckpointEx(playerid, 1639.4159,-1875.4596,13.3828, 5.0, CP_BUSLINIE3CP1);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nächste Haltestelle: Motorradhaus");
                            strcat(String,sBusLinie3);
                        }
                        if(listitem==3)
                        {
                            SetPlayerCheckpointEx(playerid, -111.3457,-1169.6807,2.7028, 5.0, CP_BUSLINIE4CP1);
                            SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nächste Haltestelle: Tankstelle am LS/SF Zoll");
                            strcat(String,sBusLinie4);
                        }
                        if(listitem==4) {
                            ShowPlayerDialog(playerid, DIALOG_SEV, DIALOG_STYLE_LIST,"Schienenersatzverkehr - Auswahl","San Fierro Bahnhof\nLas Venturas Bahnhof","Start","Abbrechen");
						}
                        format(String,sizeof(String),"%s\n\n"#COL_YELLOW"Ticketpreis: %d$",String,BUS_TICKET_PRICE);
                        UpdateDynamic3DTextLabelText(t3dBus[busIndex],COLOR_LIGHTBLUE, String );
                        Spieler[playerid][tickJobCheckpoint] = gettime() + (5*60);
                    }
                }
            }
            return 1;
        }
        case DIALOG_SEV: {
            if(response)
			{
                new vehicleid = GetPlayerVehicleID(playerid);
               	if(vehicleid) {
    				new busIndex = GetBusIndex(vehicleid);
        			if( busIndex != -1 ) {
						DestroyDynamic3DTextLabel(t3dBus[busIndex]);
						t3dBus[busIndex] = Text3D:CreateDynamic3DTextLabel("Schienenersatzverkehr", 0x00FFFFFF, 0.0, 0.0, 0.0 , 14.0 , .attachedvehicle = vehicleid, .testlos = 1 , .streamdistance = 30.0 );

						Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , t3dBus[busIndex] , E_STREAMER_ATTACH_OFFSET_X , 0.0 );
						Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , t3dBus[busIndex] , E_STREAMER_ATTACH_OFFSET_Y , 0.0 );
						Streamer_SetFloatData( STREAMER_TYPE_3D_TEXT_LABEL , t3dBus[busIndex] , E_STREAMER_ATTACH_OFFSET_Z , 1.5 );
						KillTimer(buswait[playerid]);
						buswait[playerid] = INVALID_TIMER_ID;
						UnfreezePlayer(playerid);
						PlayerTextDrawHide(playerid, BusMessage[playerid]);
						DisablePlayerCheckpointEx(playerid);
		                if(listitem==0) {
		                    // San Fierro
		                    SetPlayerCheckpointEx(playerid, -1987.7780,136.9616,27.5391, 5.0, CP_SEV1CP1);
		                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nächste Haltestelle: San Fierro Bahnhof");
		                }
		                if(listitem==1) {
		                    // Las Venturas
		                    SetPlayerCheckpointEx(playerid, 2833.2529,1290.4922,10.7771, 5.0, CP_SEV2CP1);
		                    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Nächste Haltestele: Las Venturas Bahnhof");
		                }
       				}
          		}
           	}
        }
        case DIALOG_SELLCAR_ECPIN: {
            if(response) { // EC Karte
                new
                    pin;
                pin = strval(inputtext);
                if( pin != Spieler[playerid][pBankKontoPin] ) {
                    FreezePlayer(playerid);
                    RemovePlayerFromVehicle(playerid);
                    UnfreezePlayer(playerid);
                    return SendClientMessage(playerid,COLOR_RED,"Die Bankpinnummer war nicht korrekt! Kauf abgebrochen");
                }
                SendClientMessage(playerid,COLOR_GREEN,"EC-Pin akzeptiert. Kauf wird durchgeführt!");
                BuyCar(playerid,2);
            }
            else {
                FreezePlayer(playerid);
                RemovePlayerFromVehicle(playerid);
                UnfreezePlayer(playerid);
            }
        }
        case DIALOG_SELLCAR_PAYMETHOD: {
            if(response) { // EC Karte
                    if (PlayerHaveCar[playerid][PlayerKey[playerid]]) {
                         FreezePlayer(playerid);
                         RemovePlayerFromVehicle(playerid);
                         UnfreezePlayer(playerid);
                         return SendClientMessage(playerid, COLOR_ORANGE, "Du hast bereits ein Fahrzeug auf diesem Carkey. Wechsele ihn per /Carkey.");
                    }
                    ShowPlayerDialog(playerid, DIALOG_SELLCAR_ECPIN, DIALOG_STYLE_INPUT, "{3F62DA}Autohaus - Bankpin", "Bitte geben Sie den EC Pin ein", "Bestätigen", "Abbruch");
            }
            else {
                // Bar
                    if (PlayerHaveCar[playerid][PlayerKey[playerid]]) {
                         FreezePlayer(playerid);
                         RemovePlayerFromVehicle(playerid);
                         UnfreezePlayer(playerid);
                         return SendClientMessage(playerid, COLOR_ORANGE, "Du hast bereits ein Fahrzeug auf diesem Carkey. Wechsele ihn per /Carkey.");
                    }

                    BuyCar(playerid, 1);
            }
        }
        case DIALOG_SELLCAR: {
            if(response) {
                new
                    typ,
                    vehicleid;
                vehicleid = GetPlayerVehicleID(playerid);
                typ = IsAutohausCar(vehicleid);
                if( !(typ==-1) )
                {
                    if (PlayerHaveCar[playerid][PlayerKey[playerid]]) {
                        FreezePlayer(playerid);
                        RemovePlayerFromVehicle(playerid);
                        UnfreezePlayer(playerid);
                        return SendClientMessage(playerid, COLOR_ORANGE, "Du hast bereits ein Fahrzeug auf diesem Carkey. Wechsele ihn per /Carkey.");
                    }
                    ShowPlayerDialog(playerid, DIALOG_SELLCAR_PAYMETHOD, DIALOG_STYLE_MSGBOX, "{3F62DA}Autohaus", "{FFFFFF}Wie möchten Sie bezahlen?", "EC-Karte", "Barzahlung");
                }
            }
            else {
                    FreezePlayer(playerid);
                    RemovePlayerFromVehicle(playerid);
                    // SendClientMessage(playerid, COLOR_WHITE, "Auf diesem Schlüssel ist bereits ein Fahrzeug!");
                    UnfreezePlayer(playerid);
            }
        }
		case DIALOG_CARKEY:
        {
            if (!response) return 1;
            if (listitem < 0 || listitem >= (Spieler[playerid][pPremiumCarSlot] ? MaxVeh : MaxVeh - 1))
                return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Keine gültige Auswahl.");

            PlayerKey[playerid] = listitem;
            return 1;
        }
        case DIALOG_MOVECARKEY1:
        {
            if (!response) return 1;
            if (listitem < 0 || listitem >= (Spieler[playerid][pPremiumCarSlot] ? MaxVeh : MaxVeh - 1))
                return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Keine gültige Auswahl.");

            SCMFormatted(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Du hast Slot %i (%s) zum Verschieben ausgewählt.", listitem + 1,\
                !PlayerHaveCar[playerid][listitem] ? "FREI" : CarName[PlayerCar[playerid][listitem][CarModel] - 400]);

            SetPVarInt(playerid, "MOVE.CARKEY", listitem);
            return ShowPlayerCarkeys(playerid, CARKEY_TYPE_MOVE2);
        }
        case DIALOG_EVENTREWARDS: {
            if (!response) return 1;
            if (listitem < 0 || listitem > sizeof(g_EventRewards)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Keine gültige Auswahl.");
            if (g_EventRewards[listitem][EVENT_REWARD_POINTS] > Spieler[playerid][pEventPoints])
                return SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Dafür hast du nicht genügend Eventpunkte.");

            return SendClientMessage(playerid, COLOR_ORANGE, "[INFO] {FFFFFF}Melde dich bei einem Moderator oder höher um diesen Preis einzulösen.");
        }
       case DIALOG_MOVECARKEY2:
        {
            if (!response) return ShowPlayerCarkeys(playerid, CARKEY_TYPE_MOVE1);
            if (listitem < 0 || listitem >= (Spieler[playerid][pPremiumCarSlot] ? MaxVeh : MaxVeh - 1))
                return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Keine gültige Auswahl.");

            new firstSlot = GetPVarInt(playerid, "MOVE.CARKEY"), temp[cInfo], temp2[cInfo];
            if (firstSlot == listitem) {
                SendClientMessage(playerid, COLOR_ORANGE, "[INFO] {FFFFFF}Wieso willst du... das ergibt doch... ach versuch's einfach nochmal!");
                return ShowPlayerCarkeys(playerid, CARKEY_TYPE_MOVE1);
            }

            SCMFormatted(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Du hast Slot %i (%s) mit Slot %i (%s) getauscht.", firstSlot + 1,\
                !PlayerHaveCar[playerid][firstSlot] ? "FREI" : CarName[PlayerCar[playerid][firstSlot][CarModel] - 400], listitem + 1,\
                !PlayerHaveCar[playerid][listitem] ? "FREI" : CarName[PlayerCar[playerid][listitem][CarModel] - 400]);

            temp = PlayerCar[playerid][listitem];
            temp2 = PlayerCar[playerid][firstSlot];
            PlayerCar[playerid][listitem] = temp2;
            PlayerCar[playerid][firstSlot] = temp;

            new temp3 = PlayerHaveCar[playerid][listitem];
            PlayerHaveCar[playerid][listitem] = PlayerHaveCar[playerid][firstSlot];
            PlayerHaveCar[playerid][firstSlot] = temp3;
            return ShowPlayerCarkeys(playerid, CARKEY_TYPE_MOVE1);
        }
        case DIALOG_MUSIK:
        {
            if(response) {
                // ATTACHED_INDEX_MUSIK 19421
                if(listitem == 0 ) {
                    RemovePlayerAttachedObject(playerid,ATTACHED_INDEX_MUSIK);
                    StopAudioStreamForPlayer(playerid);
                    SetPVarInt(playerid, "MP3.PLAYER", 0);
                    return 1;
                    //StopYoutubeVideoForPlayer(playerid);
                }
                else if(listitem == 1 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://www.wdr.de/wdrlive/media/einslive.m3u");
                }
                else if(listitem == 2 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://listen.technobase.fm/tunein-dsl-pls");
                }
                else if(listitem == 3 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://listen.hardbase.fm/tunein-mp3-pls");
                }
                else if(listitem == 4 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "https://streams.ilovemusic.de/iloveradio1.mp3");
                }
                else if(listitem == 5 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://breakz.us/radio/listen.m3u");
                }
                else if(listitem == 6 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://metafiles.gl-systemhaus.de/hr/youfm_2.m3u");
                }
                else if(listitem == 7 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://streams.planetradio.de/planetradio/mp3/hqlivestream.m3u");
                }
                else if(listitem == 8 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://streams.planetradio.de/plrchannels/mp3/hqtheclub.m3u");
                }
                else if(listitem == 9 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://streams.planetradio.de/plrchannels/mp3/hqnightwax.m3u");
                }
                else if(listitem == 10 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "https://streams.ilovemusic.de/iloveradio5.mp3");
                }
                else if(listitem == 11 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://skyserver5.skydisc.net:8000/listen.pls");
                }
                else if(listitem == 12 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "https://streams.ilovemusic.de/iloveradio3.mp3");
                }
                else if(listitem == 13 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "https://streams.ilovemusic.de/iloveradio2.mp3");
                }
                else if(listitem == 14 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, URL_LOGINMUSIC);
                }
                else if(listitem == 15 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://mp3.planetradio.de/plrchannels/hqitunes.mp3");
                }
                else if(listitem == 16 ) {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    PlayAudioStreamForPlayer(playerid, "http://217.74.72.11:8000/rmf_maxxx");
                }
                else if(listitem == 17){
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
					ShowPlayerDialog(playerid,DIALOG_YSTREAM,DIALOG_STYLE_INPUT,"Eigene Musik","Füge einen Steaminglink ein. Diese Enden z.B. mit .mp3, .asx, .m3u","Hören","Abbrechen");
				}
                SetPVarInt(playerid, "MP3.PLAYER", 1);
                /*else if(listitem==16)
                {
                    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_MUSIK, 19421, 2, 0.035, 0.000000, 0.000000, 90.000000, 0.000000, 270.000000, 1.000000, 1.000000, 1.000000 ); // headphones01 - kopfhörer
                    ShowPlayerDialog(playerid,DIALOG_YSTREAM,DIALOG_STYLE_INPUT,"Eigene Musik","Füge bitte einen Link der Musik ein (z.B. ein Youtube Link)","Hören","Abbrechen");
                }*/
            }
        }
        case DIALOG_RADIO:
        {
            if(response)
            {
                if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
                {
                    if (GetPVarInt(playerid, "MP3.PLAYER")) {
                        RemovePlayerAttachedObject(playerid, ATTACHED_INDEX_MUSIK);
                        SetPVarInt(playerid, "MP3.PLAYER", 0);
                    }

                    new vID = GetPlayerVehicleID(playerid);
                    new mod = GetVehicleModel(vID);
                    if(IsBicycle(mod))return SendClientMessage(playerid, COLOR_RED, "Du kannst kein Radio auf einem Fahrrad hören.");
                    if(listitem==0)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                StopAudioStreamForPlayer(i);
                                //StopYoutubeVideoForPlayer(i);
                            }
                        }
                        RadioSender[vID] = 0;
                    }
                    if(listitem==1)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://www.wdr.de/wdrlive/media/einslive.m3u");
                            }
                        }
                        RadioSender[vID] = 1;
                    }
                    if(listitem==2)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://listen.technobase.fm/tunein-dsl-pls");
                            }
                        }
                        RadioSender[vID] = 2;
                    }
                    if(listitem==3)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://listen.hardbase.fm/tunein-mp3-pls");
                            }
                        }
                        RadioSender[vID] = 3;
                    }
                    if(listitem==4)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "https://streams.ilovemusic.de/iloveradio1.mp3");
                            }
                        }
                        RadioSender[vID] = 4;
                    }
                    if(listitem==5)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://breakz.us/radio/listen.m3u");
                            }
                        }
                        RadioSender[vID] = 5;
                    }
                    if(listitem==6)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://metafiles.gl-systemhaus.de/hr/youfm_2.m3u");
                            }
                        }
                        RadioSender[vID] = 6;
                    }
                    if(listitem==7)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://streams.planetradio.de/planetradio/mp3/hqlivestream.m3u");
                            }
                        }
                        RadioSender[vID] = 7;
                    }
                    if(listitem==8)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://streams.planetradio.de/plrchannels/mp3/hqtheclub.m3u");
                            }
                        }
                        RadioSender[vID] = 8;
                    }
                    if(listitem==9)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://streams.planetradio.de/plrchannels/mp3/hqnightwax.m3u");
                            }
                        }
                        RadioSender[vID] = 9;
                    }
                    if(listitem==10)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "https://streams.ilovemusic.de/iloveradio5.mp3");
                            }
                        }
                        RadioSender[vID] = 10;
                    }
                    if(listitem==11)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://skyserver5.skydisc.net:8000/listen.pls");
                            }
                        }
                        RadioSender[vID] = 11;
                    }
                    if(listitem==12)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "https://streams.ilovemusic.de/iloveradio3.mp3");
                            }
                        }
                        RadioSender[vID] = 12;
                    }
                    if(listitem==13)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "https://streams.ilovemusic.de/iloveradio2.mp3");
                            }
                        }
                        RadioSender[vID] = 14;
                    }
                    if(listitem==14)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, URL_LOGINMUSIC);
                            }
                        }
                        RadioSender[vID] = 15;
                    }
                    if(listitem==15)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://mp3.planetradio.de/plrchannels/hqitunes.mp3");
                            }
                        }
                        RadioSender[vID] = 16;
                    }
                    if(listitem==16)
                    {
                        for(new i = 0 ; i < MAX_PLAYERS ; i++)
                        {
                            if(GetPlayerVehicleID(i) == vID)
                            {
                                PlayAudioStreamForPlayer(i, "http://217.74.72.11:8000/rmf_maxxx");
                            }
                        }
                        RadioSender[vID] = 17;
                    }
                    if(listitem==17)
                    {
                        RadioSender[vID] = 18;
                        ShowPlayerDialog(playerid,DIALOG_YSTREAM,DIALOG_STYLE_INPUT,"Eigene Musik","Füge einen Steaminglink ein. Diese Enden z.B. mit .mp3, .asx, .m3u","Hören","Abbrechen");
                    }
                }
            }
        }
        case DIALOG_ABHEBEN:
        {
            ClearAnimations(playerid);
            if(response)
            {
                new value = strval(inputtext);
                if(!strlen(inputtext))
                {
                    SendClientMessage(playerid, COLOR_RED, "Der Betrag war ungültig.");
                    ShowPlayerDialog(playerid, DIALOG_ABHEBEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du abheben?", "Abheben", "Abbrechen");
                    return 1;
                }
                /*if(!IsNumeric(inputtext))
                {
                    SendClientMessage(playerid, COLOR_RED, "Der Betrag war ungültig.");
                    ShowPlayerDialog(playerid, DIALOG_ABHEBEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du abheben?", "Abheben", "Abbrechen");
                    return 1;
                }*/
                if(value < 1 || value > 100000000)
                {
                    ShowPlayerDialog(playerid, DIALOG_ABHEBEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du abheben?", "Abheben", "Abbrechen");
                    SendClientMessage(playerid, COLOR_RED, "Du kannst nur Beträge von $1 bis $100.000.000 abheben.");
                    return 1;
                }
                if(value > Spieler[playerid][pBank])
                {
                    ShowPlayerDialog(playerid, DIALOG_ABHEBEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du abheben?", "Abheben", "Abbrechen");
                    SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht auf der Bank.");
                    return 1;
                }
                GivePlayerCash(playerid, value);
                Spieler[playerid][pBank] -= value;
                new string[128];
                format(string, sizeof(string), "Du hast $%s von deinem Konto abgehoben. Neuer Kontostand: $%s", AddDelimiters(value), AddDelimiters(Spieler[playerid][pBank]));
                SendClientMessage(playerid, COLOR_GREEN, string);
                new log[156];
                new playerIP[16], ort[24];
                GetPlayer2DZone(playerid, ort, 24);
                GetPlayerIp(playerid, playerIP, 16);
                format(log, sizeof(log), "Name: %s (IP: %s) - Geld: $%s - Ort: %s", GetName(playerid), playerIP, AddDelimiters(value), ort);
                AuszahlenLog(log);
            }
            if(!response)
            {
                return 1;
            }
        }

        case DIALOG_ANLEGEN:
        {
            ClearAnimations(playerid);
            if(response)
            {
                new value = strval(inputtext);
                if(!strlen(inputtext))
                {
                    ShowPlayerDialog(playerid, DIALOG_ANLEGEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du anlegen?", "Anlegen", "Abbrechen");
                    SendClientMessage(playerid, COLOR_RED, "Der Betrag war ungültig.");
                    return 1;
                }
                if(value < 1 || value > 100000000)
                {
                    ShowPlayerDialog(playerid, DIALOG_ANLEGEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du anlegen?", "Anlegen", "Abbrechen");
                    SendClientMessage(playerid, COLOR_RED, "Du kannst nur Beträge von $1 bis $100.000.000 einzahlen.");
                    return 1;
                }
                if(value > CheckMoney(playerid))
                {
                    SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht dabei.");
                    ShowPlayerDialog(playerid, DIALOG_ANLEGEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du anlegen?", "Anlegen", "Abbrechen");
                    return 1;
                }
                new string[128];
                GivePlayerCash(playerid, -value);
                Spieler[playerid][pBank] += value;
                format(string, sizeof(string), "Du hast $%s auf dein Konto angelegt. Neuer Kontostand: $%s", AddDelimiters(value), AddDelimiters(Spieler[playerid][pBank]));
                SendClientMessage(playerid, COLOR_GREEN, string);
                new log[156];
                new playerIP[16], ort[24];
                GetPlayer2DZone(playerid, ort, 24);
                GetPlayerIp(playerid, playerIP, 16);
                format(log, sizeof(log), "Name: %s (IP: %s) - Geld: $%s - Ort: %s", GetName(playerid), playerIP, AddDelimiters(value), ort);
                EinzahlenLog(log);
            }
            if(!response)
            {
                return 1;
            }
        }
        case DIALOG_ATM:
        {
            if(response)
            {
                if(listitem==0)
                {
                    ShowPlayerDialog(playerid, DIALOG_ABHEBEN_PIN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Bestätige zunächst mit deinem PIN", "Weiter", "Abbrechen");
                }
                else if(listitem==1)
                {
                    ShowPlayerDialog(playerid, DIALOG_ANLEGEN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Bankautomat", COLOR_HEX_WHITE"Wieviel Geld möchtest du anlegen?", "Anlegen", "Abbrechen");
                }
                else if(listitem==2)
                {
                    new
                        String[128];
                    format(String,sizeof(String),"Bankkonto von: %s\nAktueller Kontostand: $%s",GetName(playerid), AddDelimiters(Spieler[playerid][pBank]));
                    ShowPlayerDialog(playerid, DIALOG_KONTOSTAND, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE"Kontostand", String , "Zurück", "");
                }
                else if(listitem==3)
                {
                    ShowPlayerDialog(playerid, DIALOG_UEBERWEISEN, DIALOG_STYLE_MSGBOX, "ONLINEBANKING", "Eine Überweisung kann nur über das OnlineBanking unter www.Bank.LyD-Roleplay.de durchgeführt werden!\nIhr Geld wird mit einem SICHEREN Transfer an den gewünschen Empfänger sofort überwiesen.\nSie haben auch eine Übersicht all Ihrer getätigten Überweisungen und können Ihre Bankpin beliebig ändern.\n\nDas ist unser Service für Sie!\n-Ihre Bank", "OK", "");
                    ClearAnimations(playerid);
                }
                else if(listitem == 4){
                    if(Spieler[playerid][pWantedCodes] < 10){
                        ClearAnimations(playerid);
                        SendClientMessage(playerid, COLOR_RED, "Du benötigst mindestens 10 Hackercodes!");
                        return 1;
                    }
                    SendClientMessage(playerid, COLOR_DARKRED, "[HACKEN]{FFFFFF} Du bist dabei, den Bankautomaten zu hacken!");
                    SendClientMessage(playerid, COLOR_DARKRED, "[HACKEN]{FFFFFF} Wähle einen Code aus.");
                    new String[128];
                    new zoneText[MAX_ZONE_NAME];
                    GetPlayer2DZone(playerid, zoneText, sizeof(zoneText));
                    format(String, sizeof(String), "[ATM] {FFFFFF}Ein Bankautomat in %s meldet verdächtige Aktivitäten!", zoneText);
                    SendFraktionMessage(1, COLOR_DARKYELLOW, String);
                    SendFraktionMessage(2, COLOR_DARKYELLOW, String);
                    SendFraktionMessage(16, COLOR_DARKYELLOW, String);
                    SendFraktionMessage(18, COLOR_DARKYELLOW, String);
                    SendFraktionMessage(22, COLOR_DARKYELLOW, String);
                    ShowPlayerDialog(playerid, DIALOG_ATMHACK, DIALOG_STYLE_LIST, "Bankautomaten hacken", "{209F0E}1245-8585-8552-0011\n{0E9F85}5775-2995-0002-4512\n{1261AA}3852-5858-4045-1221\n{6012AA}4755-2222-9987-1200\n{AA1263}9352-0000-8012-0001\n{AA1212}1428-6588-1557-1220\n{AA8A12}3666-5412-1566-9900\n{8EAA12}3522-6588-1990-1455\n{6AAA12}3211-7701-6688-4551\n{65A3A3}7771-0012-7459-4541", "Hacken", "Abbrechen");
                }
                /*
                else if(listitem==3) {
                    ShowPlayerDialog(playerid, DIALOG_PIN_AENDERN_PIN, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"BankPin", COLOR_HEX_WHITE"Bestätige zunächst mit deinem PIN"  , "Fertig", "");
                }
                else if(listitem==4) {
                    if( HasPlayerChecks(playerid) ) {
                        new
                            String[256];
                        for(new i ; i < MAX_PLAYERS ; i++) {
                            if( IsPlayerConnected(i)) {
                                if( Spieler[i][pGeldcheckID] == playerid ) {
                                    // ACHTUNG !!! NICHT DAS FORMAT DER AUSGABE ÄNDERN !!!!!
                                    // NUR NACH RÜCKSPRACHE!!!
                                    format(String,sizeof(String),"%s%s - %d$\n",String,GetName(i),Spieler[i][pGeldcheckBetrag]);
                                }
                            }
                        }
                        ShowPlayerDialog(playerid, DIALOG_CHECKAUSWAHL, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Check einläsen", String  , "Einlösen", "Abbruch");
                        return 1;
                    }
                    else {
                        ClearAnimations(playerid);
                        return SendClientMessage(playerid,COLOR_RED,"Dir wurden keine Geldchecks ausgestellt!");
                    }
                }
*/
            }
            if(!response)
            {
                ClearAnimations(playerid);
                return 1;
            }
        }
        case DIALOG_ATMHACK: {
            ClearAnimations(playerid);
            if(response) {
                new breakingNewsMessage[145];
                Spieler[playerid][pWanteds] += 3;
                SendClientMessage(playerid, COLOR_DARKRED, "Du hast ein Verbrechen begangen! (Hacken eines Bankautomaten) Reporter: Polizeizentrale");
                format(breakingNewsMessage, sizeof(breakingNewsMessage), "Dein Aktuelles Wanted Level: %d", Spieler[playerid][pWanteds]);
                SendClientMessage(playerid, COLOR_YELLOW, breakingNewsMessage);
                format(breakingNewsMessage, sizeof(breakingNewsMessage), "HQ: %s (ID: %d) hat ein Verbrechen begangen: Hacken eines Bankautomaten, over.", GetName(playerid), playerid);
                SendFraktionMessage(1, COLOR_LIGHTRED, breakingNewsMessage);
                SendFraktionMessage(2, COLOR_LIGHTRED, breakingNewsMessage);
                SendFraktionMessage(16, COLOR_LIGHTRED, breakingNewsMessage);
                SendFraktionMessage(18, COLOR_LIGHTRED, breakingNewsMessage);
                SendFraktionMessage(22, COLOR_LIGHTRED, breakingNewsMessage);
                format(breakingNewsMessage, sizeof(breakingNewsMessage), "HQ: Reporter: Polizeizentrale, Aktuelles Wantedlevel: %d, over", Spieler[playerid][pWanteds]);
                SendFraktionMessage(1, COLOR_LIGHTRED, breakingNewsMessage);
                SendFraktionMessage(2, COLOR_LIGHTRED, breakingNewsMessage);
                SendFraktionMessage(16, COLOR_LIGHTRED, breakingNewsMessage);
                SendFraktionMessage(18, COLOR_LIGHTRED, breakingNewsMessage);
                SendFraktionMessage(22, COLOR_LIGHTRED, breakingNewsMessage);
                Spieler[playerid][pWantedCodes] -= 10;
                new randomz = RandomEx(0, 9);
                if(listitem == randomz){
                    new randombelohnung = RandomEx(50000, 125000);
                    GivePlayerCash(playerid, randombelohnung);
                    SCMFormatted(playerid, COLOR_DARKRED, "[HACKEN] {FFFFFF}Das Hacken war erfolgreich! Belohnung: %i", randombelohnung);
                }else{
                    SendClientMessage(playerid, COLOR_DARKRED, "[HACKEN] {FFFFFF}Das Hacken ist fehlgeschlagen!");
                }
            }
        }
        case DIALOG_CHECKAUSWAHL: {
            ClearAnimations(playerid);
            if(response) {
                new
                    betrag,
                    giveid;
                if(sscanf(inputtext,"p<->u{s[10}",giveid)) {
                    //printf("lulz fehler '%s'",inputtext);
                }
                betrag = Spieler[giveid][pGeldcheckBetrag];
                if( !IsPlayerConnected(giveid)) {
                    return SendClientMessage(playerid,COLOR_RED,"Der Check ist nicht mehr gültig");
                }
                new
                    String[128];
                format(String,sizeof(String),"Du hast den Geldcheck von %s in Höhe von $%s eingelößt",GetName(giveid), AddDelimiters(betrag));
                SendClientMessage(playerid,COLOR_YELLOW,String);
                format(String,sizeof(String),"%s hat deinen Geldcheck in Höhe von $%s eingelößt",GetName(playerid), AddDelimiters(betrag));
                SendClientMessage(giveid,COLOR_YELLOW,String);
                GivePlayerCash(playerid,betrag);
                Spieler[giveid][pGeldcheckBetrag] = 0;
                Spieler[giveid][pGeldcheckID] = INVALID_PLAYER_ID;
            }
        }
        case DIALOG_KONTOSTAND:
        {
            ClearAnimations(playerid);
            cmd_automat(playerid,"");
            return 1;
        }
        case DIALOG_SKINS:
        {
            if(response){
                if(Spieler[playerid][pFraktion] == 0){   
                    SetPlayerSkin(playerid, skins_array[listitem]);
                    Spieler[playerid][pSkin] = skins_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 1){   
                    SetPlayerSkin(playerid, skins_pd_array[listitem]);
                    Spieler[playerid][pSkin] = skins_pd_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 2){
                    SetPlayerSkin(playerid, skins_fbi_array[listitem]);
                    Spieler[playerid][pSkin] = skins_fbi_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 3){
                    SetPlayerSkin(playerid, skins_samd_array[listitem]);
                    Spieler[playerid][pSkin] = skins_samd_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 4){   
                    SetPlayerSkin(playerid, skins_news_array[listitem]);
                    Spieler[playerid][pSkin] = skins_news_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 5){   
                    SetPlayerSkin(playerid, skins_oamt_array[listitem]);
                    Spieler[playerid][pSkin] = skins_oamt_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 6){   
                    SetPlayerSkin(playerid, skins_gsf_array[listitem]);
                    Spieler[playerid][pSkin] = skins_gsf_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 7){   
                    SetPlayerSkin(playerid, skins_ballas_array[listitem]);
                    Spieler[playerid][pSkin] = skins_ballas_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 9){   
                    SetPlayerSkin(playerid, skins_regierung_array[listitem]);
                    Spieler[playerid][pSkin] = skins_regierung_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 10){   
                    SetPlayerSkin(playerid, skins_yakuza_array[listitem]);
                    Spieler[playerid][pSkin] = skins_yakuza_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 11){   
                    SetPlayerSkin(playerid, skins_aztecas_array[listitem]);
                    Spieler[playerid][pSkin] = skins_aztecas_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 12){   
                    SetPlayerSkin(playerid, skins_cali_array[listitem]);
                    Spieler[playerid][pSkin] = skins_cali_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 13){   
                    SetPlayerSkin(playerid, skins_vagos_array[listitem]);
                    Spieler[playerid][pSkin] = skins_vagos_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 14){   
                    SetPlayerSkin(playerid, skins_array[listitem]);
                    Spieler[playerid][pSkin] = skins_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 15){   
                    SetPlayerSkin(playerid, skins_nd_array[listitem]);
                    Spieler[playerid][pSkin] = skins_nd_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 19){   
                    SetPlayerSkin(playerid, skins_terrorist_array[listitem]);
                    Spieler[playerid][pSkin] = skins_terrorist_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 20){   
                    SetPlayerSkin(playerid, skins_lcn_array[listitem]);
                    Spieler[playerid][pSkin] = skins_lcn_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 21){   
                    SetPlayerSkin(playerid, skins_triaden_array[listitem]);
                    Spieler[playerid][pSkin] = skins_triaden_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 22){
                    SetPlayerSkin(playerid, skins_zollamt_array[listitem]);
                    Spieler[playerid][pSkin] = skins_zollamt_array[listitem];
                }else{
                    SetPlayerSkin(playerid, skins_array[listitem]);
                    Spieler[playerid][pSkin] = skins_array[listitem];
                }
            }
        }
        case DIALOG_SKINS_EINGELADEN:
        {
            if(response){
                if(Spieler[playerid][pFraktion] == 0){   
                    SetPlayerSkin(playerid, skins_array[listitem]);
                    Spieler[playerid][pSkin] = skins_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 1){   
                    SetPlayerSkin(playerid,skins_pd_array[listitem]);
                    Spieler[playerid][pSkin] = skins_pd_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 2){
                    SetPlayerSkin(playerid, skins_fbi_array[listitem]);
                    Spieler[playerid][pSkin] = skins_fbi_array[listitem];
				}else if(Spieler[playerid][pFraktion] == 3){
                    SetPlayerSkin(playerid, skins_samd_array[listitem]);
                    Spieler[playerid][pSkin] = skins_samd_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 4){   
                    SetPlayerSkin(playerid, skins_news_array[listitem]);
                    Spieler[playerid][pSkin] = skins_news_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 5){   
                    SetPlayerSkin(playerid, skins_oamt_array[listitem]);
                    Spieler[playerid][pSkin] = skins_oamt_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 6){   
                    SetPlayerSkin(playerid, skins_gsf_array[listitem]);
                    Spieler[playerid][pSkin] = skins_gsf_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 7){   
                    SetPlayerSkin(playerid, skins_ballas_array[listitem]);
                    Spieler[playerid][pSkin] = skins_ballas_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 9){   
                    SetPlayerSkin(playerid, skins_regierung_array[listitem]);
                    Spieler[playerid][pSkin] = skins_regierung_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 10){   
                    SetPlayerSkin(playerid, skins_yakuza_array[listitem]);
                    Spieler[playerid][pSkin] = skins_yakuza_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 11){   
                    SetPlayerSkin(playerid, skins_aztecas_array[listitem]);
                    Spieler[playerid][pSkin] = skins_aztecas_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 12){   
                    SetPlayerSkin(playerid, skins_cali_array[listitem]);
                    Spieler[playerid][pSkin] = skins_cali_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 13){   
                    SetPlayerSkin(playerid, skins_vagos_array[listitem]);
                    Spieler[playerid][pSkin] = skins_vagos_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 14){   
                    SetPlayerSkin(playerid, skins_array[listitem]);
                    Spieler[playerid][pSkin] = skins_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 15){   
                    SetPlayerSkin(playerid, skins_nd_array[listitem]);
                    Spieler[playerid][pSkin] = skins_nd_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 19){   
                    SetPlayerSkin(playerid, skins_terrorist_array[listitem]);
                    Spieler[playerid][pSkin] = skins_terrorist_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 20){   
                    SetPlayerSkin(playerid, skins_lcn_array[listitem]);
                    Spieler[playerid][pSkin] = skins_lcn_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 21){   
                    SetPlayerSkin(playerid, skins_triaden_array[listitem]);
                    Spieler[playerid][pSkin] = skins_triaden_array[listitem];
                }else if(Spieler[playerid][pFraktion] == 22){
                    SetPlayerSkin(playerid, skins_zollamt_array[listitem]);
                    Spieler[playerid][pSkin] = skins_zollamt_array[listitem];
                }
				else{
                    SetPlayerSkin(playerid, skins_array[listitem]);
                    Spieler[playerid][pSkin] = skins_array[listitem];
                }
                Spieler[playerid][pSpawnChange] = 2;
                SpawnPlayerEx(playerid);
                SaveAccount(playerid);
            }

        }
        case DIALOG_HANDYAUFLADEN:
        {
            if(response)
            {
                if( Spieler[playerid][pHandyGeld] == HANDY_VERTRAG ) {
                    return SendClientMessage(playerid,COLOR_YELLOW,"Du hast einen Handy-Vertrag.");
                }
                new bizIndex = HandyShopBiz_Index;
                if(listitem==0)
                {
                    if(Biz[bizIndex][bWaren] < 2)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht genügend Waren.");
                    if(Spieler[playerid][pCash] < 100)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dabei.");
                    GivePlayerCash(playerid, -100);
                    Spieler[playerid][pHandyGeld] += 100;
                    Biz[bizIndex][bWaren] -= 2;
                    Biz[bizIndex][bKasse] += 100;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast dein Call-Ya Guthaben mit $100 aufgeladen.");
                }
                if(listitem==1)
                {
                    if(Biz[bizIndex][bWaren] < 5)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht genügend Waren.");
                    if(Spieler[playerid][pCash] < 500)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dabei.");
                    GivePlayerCash(playerid, -500);
                    Spieler[playerid][pHandyGeld] += 500;
                    Biz[bizIndex][bWaren] -= 5;
                    Biz[bizIndex][bKasse] += 500;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast dein Call-Ya Guthaben mit $500 aufgeladen.");
                }
                if(listitem==2)
                {
                    if(Biz[bizIndex][bWaren] < 5)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht genügend Waren.");
                    if(Spieler[playerid][pCash] < 1000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dabei.");
                    GivePlayerCash(playerid, -1000);
                    Spieler[playerid][pHandyGeld] += 1000;
                    Biz[bizIndex][bWaren] -= 5;
                    Biz[bizIndex][bKasse] += 1000;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast dein Call-Ya Guthaben mit $1.000 aufgeladen.");
                }
                if(listitem==3)
                {
                    if(Biz[bizIndex][bWaren] < 25)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht genügend Waren.");
                    if(Spieler[playerid][pCash] < 5000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dabei.");
                    GivePlayerCash(playerid, -5000);
                    Spieler[playerid][pHandyGeld] += 5000;
                    Biz[bizIndex][bWaren] -= 25;
                    Biz[bizIndex][bKasse] += 5000;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast dein Call-Ya Guthaben mit $5.000 aufgeladen.");
                }
                if(listitem==4)
                {
                    if(Biz[bizIndex][bWaren] < 50)return SendClientMessage(playerid, COLOR_RED, "Das Geschäft hat nicht genügend Waren.");
                    if(Spieler[playerid][pCash] < 10000)return SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dabei.");
                    GivePlayerCash(playerid, -10000);
                    Spieler[playerid][pHandyGeld] += 10000;
                    Biz[bizIndex][bWaren] -= 50;
                    Biz[bizIndex][bKasse] += 10000;
                    SendClientMessage(playerid, COLOR_WHITE, "Du hast dein Call-Ya Guthaben mit $10.000 aufgeladen.");
                }
            }
            if(!response)return 1;
        }
        case DIALOG_BANKWERT:
        {
            if(response)
            {
                new betrag=strval(inputtext);
                if(betrag >= 1 && betrag <= 100000000)
                {
                    if(Spieler[playerid][pBank] >= betrag)
                    {
                        BankWert[playerid] = betrag;
                        ShowPlayerDialog(playerid, DIALOG_BANKSPIELER, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Überweisung", COLOR_HEX_WHITE"Wem möchtest du das Geld überweisen? (Tippe die ID oder den Namen)", "Überweisen", "Abbrechen");
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Soviel Geld hast du nicht auf der Bank.");
                        return 1;
                    }
                }
                else {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Du kannst maximal $100.000.000 überweisen.");
                    return ShowPlayerDialog(playerid, DIALOG_BANKWERT, DIALOG_STYLE_INPUT, COLOR_HEX_ORANGE"Überweisung", COLOR_HEX_WHITE"Bitte gebe den gewünschten Betrag an.", "Weiter", "Abbrechen");
                }
            }
            if(!response)
            {
                BankWert[playerid] = 0;
                BankAn[playerid] = 999;
                return 1;
            }
        }
        case DIALOG_BANKSPIELER:
        {
            if (!response) {
                BankWert[playerid] = 0;
                BankAn[playerid] = 999;
                return 1;
            }

            sscanf(inputtext, "u", BankAn[playerid]);
            if (!gPlayerLogged[BankAn[playerid]]) {
                BankWert[playerid] = 0;
                BankAn[playerid] = 999;
                return SendClientMessage(playerid, COLOR_RED, "Der Spieler ist nicht eingeloggt.");
            }

            if (BankAn[playerid] == playerid) {
                BankWert[playerid] = 0;
                BankAn[playerid] = 999;
                return SendClientMessage(playerid, COLOR_RED, "Warum willst du dir selber Geld überweisen?");
            }

            if (Spieler[BankAn[playerid]][pLevel] < 4) {
                BankWert[playerid] = 0;
                BankAn[playerid] = 999;
                return SendClientMessage(playerid, COLOR_RED, "Der Empfänger muss mindestens Level 4 sein!");
            }

            new string[512], oldkonto = Spieler[playerid][pBank], playerName[MAX_PLAYER_NAME], payeeName[MAX_PLAYER_NAME];
            new transferAmountString[64];
            transferAmountString = AddDelimiters(BankWert[playerid]), playerName = GetName(playerid), payeeName = GetName(BankAn[playerid]);
            Spieler[playerid][pBank] -= BankWert[playerid];
            Spieler[BankAn[playerid]][pBank] += BankWert[playerid];
            format(string, sizeof(string), COLOR_HEX_ORANGE "======== KONTOAUSZUG ========\n" COLOR_HEX_WHITE "Überweisungsbetrag: $%s\nEmpfänger: %s\n"\
                "Alter Kontostand: $%s\nNeuer Kontostand: $%s", transferAmountString, payeeName, AddDelimiters(oldkonto), AddDelimiters(Spieler[playerid][pBank]));

            ShowPlayerDialog(playerid, DIALOG_BANKENDE, DIALOG_STYLE_MSGBOX, COLOR_HEX_ORANGE "Bank", string, "Schließen", "");
            format(string, sizeof(string), "[Bank] {FFFFFF}Überweisung an {00BB88}%s {FFFFFF}in Höhe von {00BB88}$%s", payeeName, transferAmountString);
            SendClientMessage(playerid, COLOR_GREEN, string);
            format(string, sizeof(string), "[Bank] {FFFFFF}Überweisung von {009D00}%s {FFFFFF}in Höhe von {009D00}$%s", playerName, transferAmountString);
            SendClientMessage(BankAn[playerid], 0x00BB88FF, string);

            new playerIP[16], BankAnIP[16], banklog[156];
            GetPlayerIp(playerid, playerIP, 16);
            GetPlayerIp(BankAn[playerid], BankAnIP, 16);
            format(banklog, sizeof(banklog), "Name: %s (IP: %s) - An: %s (IP: %s) - Geld: %s", playerName, playerIP, payeeName, BankAnIP, transferAmountString);
            BankLog(banklog);
            if (BankWert[playerid] >= MONEY_ALERT_VALUE) sendMoneyAlert(playerid, BankAn[playerid], transferAmountString, (""));
            BankAn[playerid] = 999;
            BankWert[playerid] = 0;
        }
        case DIALOG_FCAROAMT:
         {
            if(response)
            {
                if(CheckMoney(playerid) >= 160000)
                {
                    new
                        vID,
                        fraktion;
                    vID = GetPlayerVehicleID(playerid);
                    fraktion = GetVehicleFraktion(vID);
                    if(fraktion == Spieler[playerid][pFraktion])
                    {
                        if(Spieler[playerid][pCash] < 160000 ) return SendClientMessage(playerid, COLOR_LIGHTRED, "* Du Kaution des Ordnungsamtes beträgt 80.000$. Du besitzt leider nicht so viel Geld");
                        FrakCarInfo[vID][fA_x] = 0.0;
	    			    FrakCarInfo[vID][fA_y] = 0.0;
	    			    FrakCarInfo[vID][fA_z] = 0.0;
	    			    FrakCarInfo[vID][fA_angle] = 0.0;
	    			    FrakCarInfo[vID][f_sperre] = false;

                        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast dein Fahrzeug erfolgreich freigekauft!");
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Das Fraktionsfahrzeug spawnt wieder wie gewohnt.");
                        GameTextForPlayer(playerid, "~r~-$160000", 2000, 1);
                        GivePlayerCash(playerid, -160000);
                        Kasse[Oamt] += 160000;
                        UnfreezePlayer(playerid);
                        ShowBuyInformation(playerid,"~y~Fahrzeug ~w~freigekauft!");
                        return 1;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer!");
                        FreezePlayer(playerid);
                        UnfreezePlayer(playerid);
                        RemovePlayerFromVehicle(playerid);
                        return 1;
                    }
                }
                else
                {
                    RemovePlayerFromVehicle(playerid);
                    UnfreezePlayer(playerid);
                    SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    return 1;
                }
            }
            if(!response)
            {
                RemovePlayerFromVehicle(playerid);
                UnfreezePlayer(playerid);
                return 1;
            }
        }
        case DIALOG_CAROAMT:
        {
            if(response)
            {
                if(CheckMoney(playerid) >= 70000)
                {
                    new vID = GetPlayerVehicleID(playerid);
                    if(GetCarOwner(vID) == playerid)
                    {
                        new slot = GetCarOwnerSlot(playerid, vID);
                        PlayerCar[playerid][slot][CarState] = e_Vehicle_Status_Normal;
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Du hast dein Fahrzeug erfolgreich freigekauft!");
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Denke daran, es wieder per /Parken umzuparken.");
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Und nächstesmal, parke lieber richtig.");
                        GameTextForPlayer(playerid, "~r~-$70.000", 2000, 1);
                        GivePlayerCash(playerid, -70000);
                        Kasse[Oamt] += 70000;
                        UnfreezePlayer(playerid);
                        ShowBuyInformation(playerid,"~y~Fahrzeug ~w~freigekauft!");
                        return 1;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "Du bist nicht der Besitzer!");
                        FreezePlayer(playerid);
                        UnfreezePlayer(playerid);
                        RemovePlayerFromVehicle(playerid);
                        return 1;
                    }
                }
                else
                {
                    RemovePlayerFromVehicle(playerid);
                    UnfreezePlayer(playerid);
                    SendClientMessage(playerid, COLOR_RED, "Du hast nicht genügend Geld.");
                    return 1;
                }
            }
            if(!response)
            {
                RemovePlayerFromVehicle(playerid);
                UnfreezePlayer(playerid);
                return 1;
            }
        }
        case DIALOG_SZETTEL:
        {
            new string[128];
            if(response)
            {
                if(ZettelID[playerid] != 999)
                {
                    if(IsPlayerConnected(ZettelID[playerid]))
                    {
                        GivePlayerCash(playerid, -ZettelPreis[playerid]);
                        format(string, sizeof(string), "* Du hast den Strafzettel von %s für $%s bezahlt.", GetName(ZettelID[playerid]), AddDelimiters(ZettelPreis[playerid]));
                        SendClientMessage(playerid, COLOR_LIGHTRED2, string);
                        format(string, sizeof(string), "* %s hat deinen Strafzettel in Höhe von $%s bezahlt.", GetName(playerid), AddDelimiters(ZettelPreis[playerid]));
                        SendClientMessage(ZettelID[playerid], COLOR_LIGHTRED2, string);
                        ZettelPreis[playerid] = 0;
                        ZettelID[playerid] = 999;
                    }
                }
            }
            if(!response)
            {
                format(string, sizeof(string), "* %s hat deinen Strafzettel abgelehnt.", GetName(playerid));
                SendClientMessage(ZettelID[playerid], COLOR_RED, string);
                format(string, sizeof(string), "* Du hast den Strafzettel von %s abgelehnt.", GetName(ZettelID[playerid]));
                SendClientMessage(playerid, COLOR_RED, string);
                ZettelPreis[playerid] = 0;
                ZettelID[playerid] = 999;
            }
        }
        case DIALOG_SZETTEL1:
        {
            new string[128];
            if(response)
            {
                if(ZettelID[playerid] != 999)
                {
                    if(IsPlayerConnected(ZettelID[playerid]))
                    {
                        GivePlayerCash(playerid, -ZettelPreis[playerid]);
                        format(string, sizeof(string), "* Du hast die Rechnung von %s für $%s bezahlt.", GetName(ZettelID[playerid]), AddDelimiters(ZettelPreis[playerid]));
                        SendClientMessage(playerid, COLOR_LIGHTRED2, string);
                        format(string, sizeof(string), "* %s hat deinen Rechnung in Höhe von $%s bezahlt.", GetName(playerid), AddDelimiters(ZettelPreis[playerid]));
                        SendClientMessage(ZettelID[playerid], COLOR_LIGHTRED2, string);
                        ZettelPreis[playerid] = 0;
                        ZettelID[playerid] = 999;
                    }
                }
            }
            if(!response)
            {
                format(string, sizeof(string), "* %s hat deine Rechnung abgelehnt.", GetName(playerid));
                SendClientMessage(ZettelID[playerid], COLOR_RED, string);
                format(string, sizeof(string), "* Du hast deine Rechnung von %s abgelehnt.", GetName(ZettelID[playerid]));
                SendClientMessage(playerid, COLOR_RED, string);
                ZettelPreis[playerid] = 0;
                ZettelID[playerid] = 999;
            }
        }

        case DIALOG_REVIVE_SPAWN:
        {
            if(response)
            {
                if(listitem==0)
                {
                    Spieler[playerid][pTotTime] = 0;
					Spieler[playerid][pTot] = 0;
					DisablePlayerCheckpointEx(playerid);
               		SpawnPlayerEx(playerid);
               		Spieler[playerid][aufgenommen] = 0;
               		Spieler[playerid][pTotTime] = 0;
					Spieler[playerid][pTot] = 0;
					if( HasKrankenversicherung(playerid) ) {
					    ReStore_PlayerWeapons(playerid);
    					SendClientMessage(playerid,COLOR_YELLOW,"[INFO] {FFFFFF}Aufgrund deiner aktiven Krankenversicherung, erhältst du deine Waffen zurück.");
					}
     			}
				if(listitem==1)
                {
                    SetPlayerVirtualWorld(playerid, 0);
					Spieler[playerid][pTotTime] = 0;
					Spieler[playerid][pTot] = 0;
					DisablePlayerCheckpointEx(playerid);
    				new Float:x, Float:y, Float:z, Float:distance, Float:smallestDistance = 10000, index = 0;
					GetPlayerPos(playerid, x, y, z);
    				for (new i = 0; i < sizeof(HOSPITAL_SPAWN_POS); i++)
					if ((distance = GetDistance(x, y, z, HOSPITAL_SPAWN_POS[i][0], HOSPITAL_SPAWN_POS[i][1], HOSPITAL_SPAWN_POS[i][2])) < smallestDistance) index = i, smallestDistance = distance;
					SetPlayerPos(playerid, HOSPITAL_SPAWN_POS[index][0], HOSPITAL_SPAWN_POS[index][1], HOSPITAL_SPAWN_POS[index][2]);
    				UnfreezePlayer(playerid);
    				SetCameraBehindPlayer(playerid);
    				Spieler[playerid][aufgenommen] = 0;
    				SetPlayerHealth(playerid,100);
    				Spieler[playerid][pTotTime] = 0;
					Spieler[playerid][pTot] = 0;
					if( HasKrankenversicherung(playerid) ) {
					    ReStore_PlayerWeapons(playerid);
    					SendClientMessage(playerid,COLOR_YELLOW,"[INFO] {FFFFFF}Aufgrund deiner aktiven Krankenversicherung, erhältst du deine Waffen zurück.");
					}
   				}
			}
   			if(!response)
			{
				Spieler[playerid][pTotTime] = 0;
				Spieler[playerid][pTot] = 0;
				DisablePlayerCheckpointEx(playerid);
               	SpawnPlayerEx(playerid);
               	Spieler[playerid][aufgenommen] = 0;
               	Spieler[playerid][pTotTime] = 0;
				Spieler[playerid][pTot] = 0;
				if( HasKrankenversicherung(playerid) ) {
	   				ReStore_PlayerWeapons(playerid);
   					SendClientMessage(playerid,COLOR_YELLOW,"[INFO] {FFFFFF}Aufgrund deiner aktiven Krankenversicherung, erhältst du deine Waffen zurück.");
				}
			}
		}
        case DIALOG_FINDFCAR: {
            if(response){
                new count;
                for(new i; i < MAX_VEHICLES; i++){
                    if(Spieler[playerid][pFraktion] == FrakCarInfo[i][f_frak]){
                        if(count == listitem){
                            SendClientMessage(playerid, COLOR_YELLOW, "[FRAKTION] {FFFFFF}Das Fahrzeug wurde dir auf der Karte markiert!");
                            new Float:vehx, Float:vehy, Float:vehz;
                            GetVehiclePos(FrakCarInfo[i][f_veh], vehx, vehy, vehz);
                            SetPlayerCheckpointEx(playerid, vehx, vehy, vehz, 5.0, CP_FINDFCAR);
                        }
                        count++;
                    }
                }
            }
        }
        case DIALOG_FPUNKTE_LIST:
        {
            if(response)
            {
                new dialogText[1028];
                if(listitem == 0)
                {
                    pSelectedFpunkte[playerid] = 1;
                }
                else if(listitem == 1)
                {
                    pSelectedFpunkte[playerid] = 2;
                }
                format(dialogText,sizeof(dialogText),"Auto-Schein\nMotorrad-Schein\nLKW-Schein\nFlugschein");
                return ShowPlayerDialog(playerid, DIALOG_FPUNKTE, DIALOG_STYLE_LIST, "{FF9900}Strafpunkte vergeben", dialogText, "Bestätigen", "Schließen");
            }
        }
        case DIALOG_FPUNKTE: 
        {
            if(response)
            {
                new dialogText[1028];
                if(listitem == 0)
                {
                    pSelectedSchein[playerid] = 1;
                    format(dialogText,sizeof(dialogText),"Absichtliches Anfahren\nEinfluss von Suchtgiften\nFahren über Rot\nFalsche Straßenseite\nBehinderung von Einsatzfahrzeugen\nVerursachen eines Unfalles\nFahren ohne Licht\nAbseits der Straße\nZerstörung von Ampelanlagen");
                    if(pSelectedFpunkte[playerid] == 1)
                    {
                        ShowPlayerDialog(playerid, DIALOG_FPUNKTE_VERGABE, DIALOG_STYLE_LIST, "{FF9900}Strafpunkte - Auto", dialogText, "Bestätigen", "Schließen");
                    }
                    else if(pSelectedFpunkte[playerid] == 2)
                    {
                        ShowPlayerDialog(playerid, DIALOG_FPUNKTE_ENTFERNEN, DIALOG_STYLE_LIST, "{FF9900}Strafpunkte - Auto", dialogText, "Bestätigen", "Schließen");
                    }
                }
                else if(listitem == 1)
                {
                    pSelectedSchein[playerid] = 3;
                    format(dialogText,sizeof(dialogText),"Absichtliches Anfahren\nEinfluss von Suchtgiften\nFahren über Rot\nFalsche Straßenseite\nBehinderung von Einsatzfahrzeugen\nVerursachen eines Unfalles\nFahren ohne Licht\nAbseits der Straße\nZerstörung von Ampelanlagen\nFahren ohne Helm");
                    if(pSelectedFpunkte[playerid] == 1)
                    {
                        ShowPlayerDialog(playerid, DIALOG_FPUNKTE_VERGABE, DIALOG_STYLE_LIST, "{FF9900}Strafpunkte - Motorrad", dialogText, "Bestätigen", "Schließen");
                    }
                    else if(pSelectedFpunkte[playerid] == 2)
                    {
                        ShowPlayerDialog(playerid, DIALOG_FPUNKTE_ENTFERNEN, DIALOG_STYLE_LIST, "{FF9900}Strafpunkte - Motorrad", dialogText, "Bestätigen", "Schließen");
                    }
                }
                else if(listitem == 2)
                {
                    pSelectedSchein[playerid] = 4;
                    format(dialogText,sizeof(dialogText),"Absichtliches Anfahren\nEinfluss von Suchtgiften\nFahren über Rot\nFalsche Straßenseite\nBehinderung von Einsatzfahrzeugen\nVerursachen eines Unfalles\nFahren ohne Licht\nAbseits der Straße\nZerstörung von Ampelanlagen");
                    if(pSelectedFpunkte[playerid] == 1)
                    {
                        ShowPlayerDialog(playerid, DIALOG_FPUNKTE_VERGABE, DIALOG_STYLE_LIST, "{FF9900}Strafpunkte - LKW", dialogText, "Bestätigen", "Schließen");
                    }
                    else if(pSelectedFpunkte[playerid] == 2)
                    {
                        ShowPlayerDialog(playerid, DIALOG_FPUNKTE_ENTFERNEN, DIALOG_STYLE_LIST, "{FF9900}Strafpunkte - LKW", dialogText, "Bestätigen", "Schließen");
                    }
                }
                else if(listitem == 3)
                {
                    pSelectedSchein[playerid] = 2;
                    format(dialogText,sizeof(dialogText),"Absichtliches Anfahren\nEinfluss von Suchtgiften\nFahren über Rot\nFalsche Straßenseite\nBehinderung von Einsatzfahrzeugen\nVerursachen eines Unfalles\nFahren ohne Licht\nAbseits der Straße\nZerstörung von Ampelanlagen\n\nTiefflug");
                    if(pSelectedFpunkte[playerid] == 1)
                    {
                        ShowPlayerDialog(playerid, DIALOG_FPUNKTE_VERGABE, DIALOG_STYLE_LIST, "{FF9900}Strafpunkte - Flugschein", dialogText, "Bestätigen", "Schließen");
                    }
                    else if(pSelectedFpunkte[playerid] == 2)
                    {
                        ShowPlayerDialog(playerid, DIALOG_FPUNKTE_ENTFERNEN, DIALOG_STYLE_LIST, "{FF9900}Strafpunkte - Flugschein", dialogText, "Bestätigen", "Schließen");
                    }
                }
            }
        }
        case DIALOG_FPUNKTE_VERGABE:
        {
            if(response)
            {
                new string[128], sGrund[128], anzahl;  
                if(listitem == 0)
                {
                    sGrund = "Absichtliches Anfahren";
                    anzahl = 10;

                }
                else if(listitem == 1)
                {
                    sGrund = "Fahren unter beeinträchtigung durch Suchtgift";
                    anzahl = 10;
                    
                }
                else if(listitem == 2)
                {
                    sGrund = "Fahren über Rot";
                    anzahl = 7;
                    
                }
                else if(listitem == 3)
                {
                    sGrund = "Fahren auf der falschen Straßenseite";
                    anzahl = 6;
                    
                }
                else if(listitem == 4)
                {
                    sGrund = "Behinderung von Einsatzfahrzeugen";
                    anzahl = 5;  
                }
                else if(listitem == 5)
                {
                    sGrund = "Verursachen eines Vekehrsunfalls";
                    anzahl = 4;  
                }
                else if(listitem == 6)
                {
                    sGrund = "Fahren ohne Licht";
                    anzahl = 3;  
                }
                else if(listitem == 7)
                {
                    sGrund = "Fahren abseits der Straße";
                    anzahl = 3;  
                }
                else if(listitem == 8)
                {
                    sGrund = "Absichtliches Zerstören von Verkehrsanlagen";
                    anzahl = 5;  
                }                
                else if(listitem == 9)
                {
                    if(pSelectedSchein[playerid] == 3)
                    {
                        sGrund = "Fahren ohne Helm";
                        anzahl = 3;  
                    }
                    else if(pSelectedSchein[playerid] == 2)
                    {
                        sGrund = "Tiefflug";
                        anzahl = 10;  
                    }
                }
                format(string, sizeof(string), "Du hast Spieler %s[ID:%d] %d Strafpunkte auf seinen Autoschein eingetragen. Grund: %s", GetName(pFpunkteID[playerid]), pFpunkteID[playerid], anzahl, sGrund);
                SendClientMessage(playerid, COLOR_YELLOW, string);
                format(string, sizeof(string), "{FF3A3A}Ordnungsbeamter {FF6E00}%s {FF3A3A} hat Ihnen {FF6E00}%d{FF3A3A} Strafpunkte auf Ihren Autoschein eingetragen.", GetName(playerid), anzahl);
                SendClientMessage(pFpunkteID[playerid], COLOR_RED, string);
                format(string, sizeof(string), "Der Grund dafür lautet: %s", sGrund);
                SendClientMessage(pFpunkteID[playerid], COLOR_RED, string);
                format(string, sizeof(string), "Beamter %s hat %s auf den Autoschein %d Strafpunkte eingetragen, Grund: %s", GetName(playerid), GetName(pFpunkteID[playerid]), anzahl, sGrund);
                SendFraktionMessage(1, COLOR_YELLOW, string);
                SendFraktionMessage(2, COLOR_YELLOW, string);
                SendFraktionMessage(5, COLOR_YELLOW, string);
                SendFraktionMessage(16, COLOR_YELLOW, string);
                GivePlayerStrafpunkte(pFpunkteID[playerid],pSelectedSchein[playerid],anzahl);
            }
        }
        case DIALOG_FPUNKTE_ENTFERNEN:
        {
            if(response)
            {
                new string[128], sGrund[128], anzahl;  
                if(listitem == 0)
                {
                    sGrund = "Absichtliches Anfahren";
                    anzahl = -10;

                }
                else if(listitem == 1)
                {
                    sGrund = "Fahren unter beeinträchtigung durch Suchtgift";
                    anzahl = -10;
                    
                }
                else if(listitem == 2)
                {
                    sGrund = "Fahren über Rot";
                    anzahl = -7;
                    
                }
                else if(listitem == 3)
                {
                    sGrund = "Fahren auf der falschen Straßenseite";
                    anzahl = -6;
                    
                }
                else if(listitem == 4)
                {
                    sGrund = "Behinderung von Einsatzfahrzeugen";
                    anzahl = -5;  
                }
                else if(listitem == 5)
                {
                    sGrund = "Verursachen eines Vekehrsunfalls";
                    anzahl = -4;  
                }
                else if(listitem == 6)
                {
                    sGrund = "Fahren ohne Licht";
                    anzahl = -3;  
                }
                else if(listitem == 7)
                {
                    sGrund = "Fahren abseits der Straße";
                    anzahl = -3;  
                }
                else if(listitem == 8)
                {
                    sGrund = "Absichtliches Zerstören von Verkehrsanlagen";
                    anzahl = -5;  
                }                
                else if(listitem == 9)
                {
                    if(pSelectedSchein[playerid] == 3)
                    {
                        sGrund = "Fahren ohne Helm";
                        anzahl = -3;  
                    }
                    else if(pSelectedSchein[playerid] == 2)
                    {
                        sGrund = "Tiefflug";
                        anzahl = -10;  
                    }
                }
                format(string, sizeof(string), "Du hast Spieler %s[ID:%d] %d Strafpunkte auf seinen Autoschein eingetragen. Grund: %s", GetName(pFpunkteID[playerid]), pFpunkteID[playerid], anzahl, sGrund);
                SendClientMessage(playerid, COLOR_YELLOW, string);
                format(string, sizeof(string), "{FF3A3A}Ordnungsbeamter {FF6E00}%s {FF3A3A} hat Ihnen {FF6E00}%d{FF3A3A} Strafpunkte auf Ihren Autoschein eingetragen.", GetName(playerid), anzahl);
                SendClientMessage(pFpunkteID[playerid], COLOR_RED, string);
                format(string, sizeof(string), "Der Grund dafür lautet: %s", sGrund);
                SendClientMessage(pFpunkteID[playerid], COLOR_RED, string);
                format(string, sizeof(string), "Beamter %s hat %s auf den Autoschein %d Strafpunkte eingetragen, Grund: %s", GetName(playerid), GetName(pFpunkteID[playerid]), anzahl, sGrund);
                SendFraktionMessage(1, COLOR_YELLOW, string);
                SendFraktionMessage(2, COLOR_YELLOW, string);
                SendFraktionMessage(5, COLOR_YELLOW, string);
                SendFraktionMessage(16, COLOR_YELLOW, string);
                GivePlayerStrafpunkte(pFpunkteID[playerid],pSelectedSchein[playerid],anzahl);
            }
        }
        case DIALOG_SCHIFF:
        {
            if(response)
            {
                if(listitem == 0)
                {
                    SetPlayerCheckpointEx(playerid, 2631.2749,-2279.3691,-0.0300, 5.0, CP_SCHIFF1);
                    SendClientMessage(playerid, COLOR_GREEN, "Du bist nun im Dienst. Fahre die Marker ab und tue was vorgeschrieben wird!");
                }
                else if(listitem == 1)
                {
                    SetPlayerCheckpointEx(playerid, 2490.5205,-2312.7495,0.1481, 5.0, CP_SCHIFF_FISH1);
                    SendClientMessage(playerid, COLOR_GREEN, "Du bist nun im Dienst. Fahre die Marker ab und tue was vorgeschrieben wird!");
                }
            }
        }
    }
    return 1;
}


public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
    if (source != CLICK_SOURCE_SCOREBOARD || playerid == clickedplayerid)
        return 1;

    new dialogList[128], dialogCaption[64];
    SelectedPlayer[playerid] = clickedplayerid;
    format(dialogCaption, sizeof(dialogCaption), "Spieler: %s", GetName(clickedplayerid));
    dialogList = "Anrufen\nSMS senden";
    if (Spieler[playerid][pFraktion] == 5)
        strcat(dialogList,"\nOAMT - Verbrecher Katalog");

    return ShowPlayerDialog(playerid, DIALOG_TABMENU, DIALOG_STYLE_LIST, dialogCaption, dialogList, "Auswählen", "Abbrechen");
}

stock GetFCarColor(fraktion,&Color1, &Color2)
{
    if(fraktion == 1){
        Color1 = 223;
        Color2 = 90;
    }
    if(fraktion == 2){
        Color1 = 0;
        Color2 = 0;
    }
    if(fraktion == 3){
        Color1 = 3;
        Color2 = 1;
    }
    if(fraktion == 4){
        Color1 = 246;
        Color2 = 1;
    }
    if(fraktion == 5){
        Color1 = 1;
        Color2 = 222;
    }
    if(fraktion == 6){
        Color1 = 86;
        Color2 = 86;
    }
    if(fraktion == 7){
        Color1 = 167;
        Color2 = 167;
    }
    if(fraktion == 8){
        Color1 = 3;
        Color2 = 3;
    }
    if(fraktion == 9){
        Color1 = 1;
        Color2 = 1;
    }
    if(fraktion == 10){
        Color1 = 13;
        Color2 = 13;
    }
    if(fraktion == 11){
        Color1 = 93;
        Color2 = 93;
    }
    if(fraktion == 12){
        Color1 = 168;
        Color2 = 168;
    }
    if(fraktion == 13){
        Color1 = 6;
        Color2 = 6;
    }
    if(fraktion == 14){
        new Color = RandomEx(0,200);
        Color1 = Color;
        Color2 = Color;
    }
    if(fraktion == 15){
        Color1 = 245;
        Color2 = 245;
    }
    if(fraktion == 16){
        Color1 = 0;
        Color2 = 1;
    }
    if(fraktion == 17){
        Color1 = 1;
        Color2 = 1;
    }
    if(fraktion == 18){
        Color1 = 187;
        Color2 = 187;
    }
    if(fraktion == 19){
        Color1 = 173;
        Color2 = 173;
    }
    if(fraktion == 20){
        Color1 = 223;
        Color2 = 223;
    }
    if(fraktion == 21){
        Color1 = 79;
        Color2 = 79;
    }
    if(fraktion == 22){
        Color1 = 0;
        Color2 = 1;
    }
    return 1;
}

stock GetName(playerid)
{
    new gName[MAX_PLAYER_NAME];
    GetPlayerName(playerid, gName, sizeof(gName));
    return gName;
}

stock SendPaintballMessage(color, message[])
{
    for (new i = 0; i <= GetPlayerPoolSize(); i++) if (PlayerIsPaintballing[i]) SendClientMessage(i, color, message);
    return 1;
}

/*
wrgaergrg r/subsifellfor
*/
new
    saveaccount[2300]; // Nicht ändern
    //saveaccount[2500];

stock SaveAccount(playerid)
{
    if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid))
    {
        saveaccount[0] = '\0';
        format(saveaccount,sizeof(saveaccount),"UPDATE `accounts` SET \
                `Level` = %d, \
                `Admin` = %d, \
                `DonateRank` = %d, \
                `Hours` = %d, \
                `Sex` = %d, \
                `Muted` = %d, \
                `Exp` = %d, \
                `Cash` = %d, \
                `Crimes` = %d, \
                `Kills` = %d, \
                `Deaths` = %d, \
                `Arrested` = %d, \
                `WantedDeaths` = %d, \
                `PhoneBook` = %d, \
                `LottoNr` = %d, \
                `Job` = %d, \
                `PayCheck` = %d, \
                `Jailed` = %d, \
                `JailTime` = %d, \
                `Drugs` = %d, \
                `Fraktion` = %d, \
                `Rank` = %d, \
                `Skin` = %d, \
                `Schaufel` = %d," ,
                    Spieler[playerid][pLevel],
                    Spieler[playerid][pAdmin],
                    Spieler[playerid][pDonateRank],
                    Spieler[playerid][pHours],
                    Spieler[playerid][pSex],
                    Spieler[playerid][pMuted],
                    Spieler[playerid][pExp],
                    Spieler[playerid][pCash],
                    Spieler[playerid][pCrimes],
                    Spieler[playerid][pKills],
                    Spieler[playerid][pDeaths],
                    Spieler[playerid][pArrested],
                    Spieler[playerid][pWantedDeaths],
                    Spieler[playerid][pPhoneBook],
                    Spieler[playerid][pLottoNr],
                    Spieler[playerid][pJob],
                    Spieler[playerid][pPayCheck],
                    Spieler[playerid][pJailed],
                    Spieler[playerid][pJailTime],
                    Spieler[playerid][pDrugs],
                    Spieler[playerid][pFraktion],
                    Spieler[playerid][pRank],
                    Spieler[playerid][pSkin],
                    Spieler[playerid][pSchaufel]);

        format(saveaccount,sizeof(saveaccount),"%s \
                `CarLic` = %d, \
                `FlyLic` = %d, \
                `BoatLic` = %d, \
                `GunLic` = %d, \
                `GunLicB` = %d, \
                `LKWLic` = %d, \
                `MotoLic` = %d, \
                `PayDay` = %d, \
                `Tut` = %d, \
                `Warns` = %d, \
                `Perso` = %d, \
                `HandyNr` = %d, \
                `HandyGeld` = %d, \
                `Tot` = %d, \
                `Banned` = %d, \
                `Wanteds` = %d, \
                `Bank` = %d, \
                `JailType` = %d, \
                `TotTime` = %d, \
                `TotX` = %.2f, \
                `TotY` = %.2f, \
                `TotZ` = %.2f, \
                `Kanister` = %d, \
                `Waffenteile` = %d,",
                // `Drogen` = %d,",
                    saveaccount,
                    Spieler[playerid][pCarLic],
                    Spieler[playerid][pFlyLic],
                    Spieler[playerid][pBoatLic],
                    Spieler[playerid][pGunLic],
                    Spieler[playerid][pGunLicB],
                    Spieler[playerid][pLKWLic],
                    Spieler[playerid][pMotoLic],
                    Spieler[playerid][pPayDay],
                    Spieler[playerid][pTut],
                    Spieler[playerid][pWarns],
                    Spieler[playerid][pPerso],
                    Spieler[playerid][pHandyNr],
                    Spieler[playerid][pHandyGeld],
                    Spieler[playerid][pTot],
                    Spieler[playerid][pBanned],
                    Spieler[playerid][pWanteds],
                    Spieler[playerid][pBank],
                    Spieler[playerid][pJailType],
                    Spieler[playerid][pTotTime],
                    Spieler[playerid][pTotX],
                    Spieler[playerid][pTotY],
                    Spieler[playerid][pTotZ],
                    Spieler[playerid][pKanister],
                    Spieler[playerid][pWaffenteile]/*,
                    Spieler[playerid][pDrogen]*/ );

        format(saveaccount,sizeof(saveaccount),"%s \
                `SafeTeile` = %d,\
                `SafeDrogen` = %d, \
                `SpawnChange` = %d, \
                `Kekse` = %d, \
                `Zigaretten` = %d, \
                `FrakLohn` = %d, \
                `TimeBan` = %d, \
                `MuteTime` = %d, \
                `Angel` = %d, \
                `Fische` = %d, \
                `Koeder` = %d, \
                `MaxFishes` = %d, \
                `MaxVerloren` = %d, \
                `FishLic` = %d, \
                `FPunkte` = %d, \
                `FBPunkte` = %d, \
                `FlPunkte` = %d, \
                `GunPunkte` = %d, \
                `LKWPunkte` = %d, \
                `MotoPunkte` = %d,",
                    saveaccount,
                    Spieler[playerid][pSafeTeile],
                    Spieler[playerid][pSafeDrogen],
                    Spieler[playerid][pSpawnChange],
                    Spieler[playerid][pKekse],
                    Spieler[playerid][pZigaretten],
                    Spieler[playerid][pFrakLohn],
                    Spieler[playerid][pTimeBan],
                    Spieler[playerid][pMuteTime],
                    Spieler[playerid][pAngel],
                    Spieler[playerid][pFische],
                    Spieler[playerid][pKoeder],
                    Spieler[playerid][pMaxFishes],
                    Spieler[playerid][pMaxVerloren],
                    Spieler[playerid][pFishLic],
                    Spieler[playerid][pFPunkte],
                    Spieler[playerid][pFBPunkte],
                    Spieler[playerid][pFlPunkte],
                    Spieler[playerid][pGunPunkte],
                    Spieler[playerid][pLKWPunkte],
                    Spieler[playerid][pMotoPunkte]
            );
        format(saveaccount,sizeof(saveaccount),"%s \
                `Marriage` = %d,\
                `FrakSperre` = %d, \
                `Hartz4` = %d, \
                `KFZSteuer` = %d, \
                `WantedCodes` = %d, \
                `SafeWantedCodes` = %d, \
                `HurePoints` = %d, \
                `DetectivPoints` = %d, \
                `Staat` = '%s', \
                `LastSeen` = now(), \
                `BankKonto` = %d, \
                `BankPin` = %d, \
                `Boeller` = %d, \
                `Raketen` = %d, \
                `JobWechsel` = %d, \
                `Krankenversicherung` = %d, \
                `DrogenSamen` = %d, \
                `GangDrogenSamen` = %d, \
                `KrauterMische` = %d, \
                `C4` = %d, \
                `Spice` = %d, \
                `SafeSpice` = %d, \
                `Handy` = %d, \
                `Pfand` = %d, \
                `Brecheisen` = %d ",
                    saveaccount,
                    Spieler[playerid][pMarriage],
                    Spieler[playerid][pFrakSperre],
                    Spieler[playerid][pHartz4],
                    Spieler[playerid][pKFZSteuer],
                    Spieler[playerid][pWantedCodes],
                    Spieler[playerid][pSafeWantedCodes],
                    Spieler[playerid][pHurePoints],
                    Spieler[playerid][pDetektivPoints],
                    Spieler[playerid][pStaat],
                    Spieler[playerid][pBankKonto],
                    Spieler[playerid][pBankKontoPin],
                    Spieler[playerid][pBoeller],
                    Spieler[playerid][pRaketen],
                    Spieler[playerid][pJobWechsel],
                    Spieler[playerid][unixKrankenversicherung],
                    Spieler[playerid][pDrogenSamen],
                    Spieler[playerid][pGangDrogenSamen],
                    Spieler[playerid][pKrauterMische],
                    Spieler[playerid][pC4],
                    Spieler[playerid][pSpice],
                    Spieler[playerid][pSafeSpice],
                    Spieler[playerid][pHandy],
                    Spieler[playerid][pPfand],
                    Spieler[playerid][pBrecheisen]
        );
        format(saveaccount,sizeof(saveaccount),"%s \
                WHERE `Name` = '%s'",
                    saveaccount,
                    GetName(playerid)
        );
        mysql_oquery(saveaccount,THREAD_SAVEACCOUNT,playerid,gSQL);
        saveaccount[0] = '\0';
        format(saveaccount,sizeof(saveaccount),"UPDATE `accounts` SET \
                `SperreFahr` = %d, \
                `SperreBoot` = %d, \
                `SperreFlug` = %d, \
                `SperreWaffe` = %d, \
                `SperreLKW` = %d, \
                `SperreMoto` = %d, \
                `SSteuer` = %d, \
                `Helm` = %d, \
                `Experte` = %d, \
                `Lobe` = %d, \
                `BMOD` = %d, \
                `FV` = %d, \
                `swSpiceSp` = %d, \
                `swDrogenSp` = %d, \
                `swWTSp` = %d, \
                `swCodesSp` = %d, \
                `Kreditwert` = %d, \
                `KreditGezahlt` = %d, \
                `MP3Player` = %d, \
                `PremiumCarSlot` = %d, ",
                    Spieler[playerid][punixFSperre],
                    Spieler[playerid][punixFBSperre],
                    Spieler[playerid][punixFlSperre],
                    Spieler[playerid][punixGunSperre],
                    Spieler[playerid][punixLKWSperre],
                    Spieler[playerid][punixMotoSperre],
                    Spieler[playerid][pSSteuer],
                    Spieler[playerid][pHelm],
                    Spieler[playerid][pExperte],
                    Spieler[playerid][pLobe],
                    Spieler[playerid][pBMOD],
                    Spieler[playerid][pFV],
                    Spieler[playerid][swSpice],
                    Spieler[playerid][swDrogen],
                    Spieler[playerid][swWT],
                    Spieler[playerid][swWCodes],
                    Spieler[playerid][pKreditwert],
                    Spieler[playerid][pKreditGezahlt],
                    Spieler[playerid][pMP3Player],
                    Spieler[playerid][pPremiumCarSlot]
        );
        format(saveaccount,sizeof(saveaccount),"%s \
                `Kampfstyle` = %d, \
                `SpawnX` = %.2f, \
                `SpawnY` = %.2f, \
                `SpawnZ` = %.2f, \
                `SpawnFace` = %.2f, \
                `SpawnInt` = %d, \
                `SpawnVirtual` = %d, \
                `Koffer` = %d, \
                `UpgradeWaffenlager` = %d, \
                `UpgradeSafebox` = %d, \
                `HausWaffenlager` = %d, \
                `HausWaffenlager2` = %d, \
                `HausWaffenlager3` = %d, \
                `HausSafeboxSpice` = %d, \
                `HausSafeboxDrogen` = %d, \
                `Haustier` = %d, \
                `HaustierCooldown` = %d, \
                `HaustierFutter` = %d, \
                `RadarfallenWarnung` = %d, \
                `PremiumBizSlot` = %d, \
                `HouseMieteKey` = %d,",
                    saveaccount,
                    Spieler[playerid][pFightstyle],
                    Spieler[playerid][pSpawnX],
                    Spieler[playerid][pSpawnY],
                    Spieler[playerid][pSpawnZ],
                    Spieler[playerid][pSpawnFace],
                    Spieler[playerid][pSpawnInt],
                    Spieler[playerid][pSpawnVirtual],
                    Spieler[playerid][pKoffer],
                    Spieler[playerid][pUpgradeWaffenlager],
                    Spieler[playerid][pUpgradeSafebox],
                    Spieler[playerid][pHausWaffenlager1],
                    Spieler[playerid][pHausWaffenlager2],
                    Spieler[playerid][pHausWaffenlager3],
                    Spieler[playerid][pHausSafeboxSpice],
                    Spieler[playerid][pHausSafeboxDrogen],
                    Spieler[playerid][pHaustier],
                    Spieler[playerid][pHaustierCooldown],
                    Spieler[playerid][pHaustierFutter],
                    Spieler[playerid][pRadarfallenWarnung],
                    Spieler[playerid][pPremiumBizSlot],
                    Spieler[playerid][pHouseMieteKey]
        );
        new increment = 1, chatBit;
        for (new i = 0; i < 7; i++) {
            chatBit += pChatSettings[playerid][i] ? increment : 0;
            increment *= 2;
        }
        
        new serial[256];
        gpci(playerid, serial,sizeof( serial ) );
        format(saveaccount,sizeof(saveaccount),"%s \
                `PrisonRunCount` = %d, \
                `PrisonRun` = %d, \
                `ZollValid` = %d, \
                `LawyerPoints` = %d, \
                `WaffenSperre` = %d, \
                `KFZVersicherung` = %d, \
                `SpawnWeste` = %d, \
                `Booster` = %d, \
                `PowerRiegel` = %d, \
                `TrakLic` = %d, \
                `CarmALic` = %d, \
                `KillsGangFight` = %d, \
                `PremiumNeon` = %d, \
                `Automatik` = %d, \
                `DrogenPoints` = %d, \
                `WaffenteilePoints` = %d, \
      	 		`SpiceSamenPoints` = %d, \
      	 		`PilotPoints` = %d, \
                `frakwarn` = %d, \
                `Deakacc` = %d, \
                `Schulden` = %d, \
                `Weihnachtsday` = %d, \
                `fahrlehrerboni` = %d, \
                `MarriageName` = '%s', \
                `Deakaccadmin` = '%s', \
                `BwStrafe` = %d, \
                `BwStrafeGrund` = '%s', \
                `Eventpoints` = %d, \
                `AdventDay` = %d, \
                `AdventMin` = %d, \
                `MustUseAC` = %d, \
                `TSFrei` = %d, \
                `KillsStreetwar` = %d, \
                `DmgTogl` = %d, \
                `FradarStat` = %d, \
                `SpawnWaffenUnix` = %d, \
                `SpawnWaffen` = %d, \
                `userPremium` = %d, \
                `hwid` = '%s', \
                `ChatSettings` = %d",
                    saveaccount,
                    Spieler[playerid][pPrisonRunCount],
                    Spieler[playerid][pPrisonRun],
                    Spieler[playerid][pZollValid],
                    Spieler[playerid][pLawyerPoints],
                    Spieler[playerid][pWaffenSperre],
                    Spieler[playerid][pKFZVersicherung],
                    Spieler[playerid][pSpawnWeste],
                    Spieler[playerid][pBooster],
                    Spieler[playerid][pPowerRiegel],
                    Spieler[playerid][pTrakLic],
                    Spieler[playerid][pCarmALic],
                    Spieler[playerid][pKillsGangFight],
                    Spieler[playerid][pPremiumNeon],
                    Spieler[playerid][pAutomatik],
                    Spieler[playerid][pDrogenPoints],
                    Spieler[playerid][pWaffenteilePoints],
                    Spieler[playerid][pSpiceSamenPoints],
                    Spieler[playerid][pPilotPoints],
                    Spieler[playerid][pfrakwarn],
                    Spieler[playerid][pdeacc],
                    Spieler[playerid][pschulden],
                    Spieler[playerid][pWeihnachtsday],
                    fahrlehrerboni[playerid],
                    Spieler[playerid][pMarriageName],
                    pdeaccadmin[playerid],
                    Spieler[playerid][pSuspendedSentence],
                    Spieler[playerid][pSusSentenceReason],
                    Spieler[playerid][pEventPoints],
                    Spieler[playerid][pAdventDay],
                    Spieler[playerid][pAdventMin],
                    Spieler[playerid][pMustUseAC],
                    Spieler[playerid][pTSFrei],
                    Spieler[playerid][pKillsStreetwar],
                    Spieler[playerid][DmgTog],
                    Spieler[playerid][pFRadarStatus],
                    Spieler[playerid][pSpawnWaffenUnix],
                    Spieler[playerid][pSpawnWaffen],
                    Spieler[playerid][pCoins],
                    serial,
                    chatBit);
        format(saveaccount,sizeof(saveaccount),"%s \
                WHERE `Name` = '%s'",
                    saveaccount,
                    GetName(playerid)
        );
        mysql_oquery(saveaccount,THREAD_SAVEACCOUNT,playerid,gSQL);
        if( Spieler[playerid][pDonateRank] > 0 ) {
            SavePremiumWeaponData(playerid);
        }
        return 1;
    }
    return 0;
}

new const PlayerColumns[][] = {
    {"id"},
    {"Name"},
    {"Passwort"},
    {"Level"},
    {"Admin"},
    {"DonateRank"},
    {"Hours"},
    {"Sex"},
    {"Muted"},
    {"Exp"},
    {"MaxExp"},
    {"Cash"},
    {"Crimes"},
    {"Kills"},
    {"Deaths"},
    {"Arrested"},
    {"WantedDeaths"},
    {"PhoneBook"},
    {"LottoNr"},
    {"Job"},
    {"PayCheck"},
    {"Jailed"},
    {"JailTime"},
    {"Mats"},
    {"Drugs"},
    {"Fraktion"},
    {"Rank"},
    {"Skin"},
    {"BizKey"},
    {"CarLic"},
    {"FlyLic"},
    {"BoatLic"},
    {"GunLic"},
    {"LKWLic"},
    {"MotoLic"},
    {"PayDay"},
    {"Tut"},
    {"Warns"},
    {"Perso"},
    {"HandyNr"},
    {"HandyGeld"},
    {"Tot"},
    {"Banned"},
    {"Wanteds"},
    {"Bank"},
    {"JailType"},
    {"TotTime"},
    {"TotX"},
    {"TotY"},
    {"TotZ"},
    {"TotWorld"},
    {"Kanister"},
    {"Waffenteile"},
    {"Drogen"},
    {"SafeTeile"},
    {"SafeDrogen"},
    {"SpawnChange"},
    {"TankKey"},
    {"Kekse"},
    {"Zigaretten"},
    {"FrakLohn"},
    {"TimeBan"},
    {"MuteTime"},
    {"Angel"},
    {"Fische"},
    {"Koeder"},
    {"MaxFishes"},
    {"MaxVerloren"},
    {"FishLic"},
    {"FPunkte"},
    {"FBPunkte"},
    {"FlPunkte"},
    {"GunPunkte"},
    {"LKWPunkte"},
    {"MotoPunkte"},
    {"Marriage"},
    {"FrakSperre"},
    {"Hartz4"},
    {"KFZSteuer"},
    {"GebanntVon"},
    {"BanGrund"},
    {"WantedCodes"},
    {"SafeWantedCodes"},
    {"Startbonus"},
    {"HurePoints"},
    {"DetectivPoints"},
    {"LastSeen"},
    {"SecureCode"},
    {"Staat"},
    {"BankKonto"},
    {"BankPin"},
    {"Boeller"},
    {"Raketen"},
    {"JobWechsel"},
    {"Krankenversicherung"},
    {"DrogenSamen"},
    {"Geburtstag"},
    {"Spice"},
    {"SafeSpice"},
    {"Handy"},
    {"Kampfstyle"},
    {"Brecheisen"},
    {"SperreFahr"},
    {"SperreBoot"},
    {"SperreFlug"},
    {"SperreWaffe"},
    {"SperreLKW"},
    {"SperreMoto"},
    {"HotelKey"},
    {"SSteuer"},
    {"Helm"},
    {"Experte"},
    {"Lobe"},
    {"BMOD"},
    {"Kreditwert"},
    {"KreditGezahlt"},
    {"MP3Player"},
    {"PremiumCarSlot"},
    {"SpawnX"},
    {"SpawnY"},
    {"SpawnZ"},
    {"SpawnFace"},
    {"SpawnInt"},
    {"SpawnVirtual"},
    {"Koffer"},
    {"weapondata_slot00"},
    {"weapondata_slot01"},
    {"weapondata_slot02"},
    {"weapondata_slot03"},
    {"weapondata_slot04"},
    {"weapondata_slot05"},
    {"weapondata_slot06"},
    {"weapondata_slot07"},
    {"weapondata_slot08"},
    {"weapondata_slot09"},
    {"weapondata_slot10"},
    {"weapondata_slot11"},
    {"weapondata_slot12"},
    {"UpgradeWaffenlager"},
    {"UpgradeSafebox"},
    {"HausWaffenlager"},
    {"HausSafeboxSpice"},
    {"HausSafeboxDrogen"},
    {"Haustier"},
    {"HaustierCooldown"},
    {"HaustierFutter"},
    {"ipadresse"},
    {"GunLicB"},
    {"RadarfallenWarnung"},
    {"PremiumBizSlot"},
    {"HouseMieteKey"},
    {"PrisonRunCount"},
    {"PrisonRun"},
    {"ZollValid"},
    {"SaltKey"},
    {"LawyerPoints"},
    {"WaffenSperre"},
    {"KFZVersicherung"},
    {"TrakLic"},
    {"CarmALic"},
    {"KillsGangFight"},
    {"email"},
    {"vorname"},
    {"PremiumNeon"},
    {"Automatik"},
    {"DrogenPoints"},
    {"WaffenteilePoints"},
    {"frakwarn"},
    {"Deakacc"},
    {"Schulden"},
    {"Weihnachtsday"},
    {"fahrlehrerboni"},
    {"MarriageName"},
    {"Deakaccadmin"},
    {"userPremium"},
    {"BWStrafe"},
    {"BWStrafeGrund"},
    {"Eventpoints"},
    {"AdventDay"},
    {"AdventMin"},
    {"Nikolaus"},
    {"MustUseAC"},
    {"KillsStreetwar"},
    {"ChatSettings"},
    {"GangDrogenSamen"},
    {"FV"},
    {"SpiceSamenPoints"},
    {"PilotPoints"},
    {"C4"},
    {"Pfand"},
    {"KrauterMische"},
    {"Oldname"},
    {"swSpiceSp"},
    {"DmgTogl"},
    {"FradarStat"},
    {"swDrogenSp"},
    {"swWTSp"},
    {"swCodesSp"},
    {"PBPoints"},
    {"OverWatch"},
    {"SpielerOnline"},
    {"HausWaffenlager2"},
    {"HausWaffenlager3"},
    {"hwid"},
    {"SpawnWeste"},
    {"Booster"},
    {"PowerRiegel"},
    {"TSFrei"},
    {"SpawnWaffenUnix"},
    {"SpawnWaffen"},
    {"Schaufel"}
};

new
    columns[4096];

stock LoadPlayerColumns() {
    columns[0] = '\0';
    for(new i ; i < sizeof(PlayerColumns) ; i++) {
        if( !isnull(columns) ) {
            format(columns,sizeof(columns),"%s,%s",columns,PlayerColumns[i]);
        }
        else {
            format(columns,sizeof(columns),"%s",PlayerColumns[i]);
        }
    }
    //printf("columns len %d",strlen(columns));
    return true;
}

stock LoadPlayer(playerid, inputtext[])
{
    if(IsPlayerConnected(playerid))
    {
        new
            password[128],
            query[sizeof(columns) + 256];
        mysql_real_escape_string(inputtext, password,gSQL,sizeof(password) );
        format(query,sizeof(query),"SELECT %s \
                                FROM `accounts` \
                                WHERE `Passwort` = SHA2(CONCAT('%s',`SaltKey`),256) AND `Name` = '%s' LIMIT 1",columns,password,GetName(playerid) );
        mysql_pquery(query , THREAD_LOADPLAYER , playerid, gSQL,MySQLThreadOwner);
        // -> THREADED
        PlayerSQLExtra(playerid,inputtext);
    }
    return 1;
}


stock GivePlayerCash(playerid, amount)
{
    Spieler[playerid][pCash] += amount;
    ResetPlayerMoney(playerid);
    GivePlayerMoney(playerid, Spieler[playerid][pCash]);
    if(Spieler[playerid][pCash]<0)
    {
        Spieler[playerid][pschulden]=-Spieler[playerid][pCash];
    }
    else if(Spieler[playerid][pschulden]!=0)
    {
        Spieler[playerid][pschulden]=0;
    }
    return 1;
}
/*forward schuldenset(playerid,schuldensett);
public schuldenset(playerid,schuldensett)
{
    GivePlayerCash(playerid,-schuldensett);
    printf("schulden: %i",-schuldensett);
}*/
stock ResetPlayerCash(playerid)
{
    Spieler[playerid][pCash] = 0;
    ResetPlayerMoney(playerid);
}

stock CheckMoney(playerid)
{
    return Spieler[playerid][pCash];
}

forward OnPlayerMoneyCheck();
public OnPlayerMoneyCheck()
{
    for(new i ; i <= GetPlayerPoolSize() ; i++)
    {
        if( IsPlayerConnected(i) )
        {
            {
                ResetPlayerMoney(i);
                GivePlayerMoney(i, Spieler[i][pCash]);
            }
            if(fuelcountactive[i]==1&&!IsPlayerInAnyVehicle(i))
            {
                GivePlayerCash(i,-100*fuelcount[i]);
                if(fuelcount[i]>=1)
                {
                    new string[200];
                    format(string,200,"Du hast %d Liter verbraucht. Kosten: $%s",fuelcount[i], AddDelimiters(100*fuelcount[i]));
                    SendClientMessage(i,COLOR_ORANGE,string);
                }
                fuelcountactive[i]=0;
                fuelcount[i]=0;
           }
        }
    }
    return 1;
}

stock FreezePlayer(playerid)
{
    TogglePlayerControllable(playerid, 0);
    return 1;
}

stock UnfreezePlayer(playerid)
{
    TogglePlayerControllable(playerid, 1);
    return 1;
}

forward TogglePlayerControllableEx(playerid,toggle);
public TogglePlayerControllableEx(playerid,toggle) {
    TogglePlayerControllable(playerid,toggle);
}

stock SetPlayerSkinEx(playerid, skinid)
{
    SetPlayerSkin(playerid, skinid);
    Spieler[playerid][pSkin] = skinid;
    return 1;
}

stock ClearPlayerChat(playerid)
{
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    SendClientMessage(playerid, COLOR_WHITE, "");
    return 1;
}

public PayDay()
{
    for(new playerid;playerid<MAX_PLAYERS;playerid++)
    {
        if(IsPlayerConnected(playerid) && gPlayerLogged[playerid] == 1&&paydaywait[playerid]==0)
        {
            if( Haustier_OnFoot(playerid) ) 
            {
                if( random(5) == 0 ) 
                {
                    new Float:x, Float:y, Float:z;
                    GetPlayerPos(playerid,x,y,z);
                    if( Spieler[playerid][pHaustier] == 1 ) 
                    {
                        SendRoundMessage(x,y,z, COLOR_WHITE, "Hund bellt: Wauu... Wauuuhh...");
                    }
                    else if( Spieler[playerid][pHaustier] == 2 ) 
                    {
                        SendRoundMessage(x,y,z, COLOR_WHITE, "Papagei: Pieepp.. Piiepp...");
                    }
                    else if( Spieler[playerid][pHaustier] == 3 ) 
                    {
                        SendRoundMessage(x,y,z, COLOR_WHITE, "Schildkröte: Pieeps.. Piieps...");
                    }
                }
            }
            if(Spieler[playerid][pPayDay] < 59 && Spieler[playerid][pJailed] != 3 && Spieler[playerid][pPrisonRun] <= 0) Spieler[playerid][pPayDay]++;
            else if(Spieler[playerid][pPayDay] >= 59)
            {
                Spieler[playerid][pPayDay] = 0;
                Spieler[playerid][pHours]++;
                new check;
                if(Spieler[playerid][pFraktion] == 0)
                {
                    check = 400;
                }
                else if(Spieler[playerid][pFraktion] == 1)
                {
                    if(Kasse[Staat] > Spieler[playerid][pFrakLohn])
                    {
                        if( Spieler[playerid][pDuty] == 1 ) {
                            check += Spieler[playerid][pFrakLohn];
                            Kasse[Staat]-=Spieler[playerid][pFrakLohn];
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Staatskasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 2)
                {
                    if(Kasse[Staat] > Spieler[playerid][pFrakLohn])
                    {
                        if( Spieler[playerid][pDuty] == 1 ) {
                            check += Spieler[playerid][pFrakLohn];
                            Kasse[Staat]-=Spieler[playerid][pFrakLohn];
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Staatskasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 3)
                {
                    if(Kasse[Samd] > Spieler[playerid][pFrakLohn])
                    {
                        if( Spieler[playerid][pDuty] == 1 ) {
                            check += Spieler[playerid][pFrakLohn];
                            Kasse[Samd]-=Spieler[playerid][pFrakLohn];
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der SA-MD Kasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 4)
                {
                    if(Kasse[Sana] > Spieler[playerid][pFrakLohn])
                    {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Sana]-=Spieler[playerid][pFrakLohn];
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der SA-NA Kasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 5)
                {
                    if(Kasse[Oamt] > Spieler[playerid][pFrakLohn])
                    {
                        if( Spieler[playerid][pDuty] == 1 ) {
                            check += Spieler[playerid][pFrakLohn];
                            Kasse[Oamt]-=Spieler[playerid][pFrakLohn];
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Ordnungsamt Kasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 6)
                {
                    if(Kasse[Grove] > Spieler[playerid][pFrakLohn])
                    {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Grove]-=Spieler[playerid][pFrakLohn];
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Grove Street Kasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 7)
                {
                    if(Kasse[Ballas] > Spieler[playerid][pFrakLohn])
                    {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Ballas]-=Spieler[playerid][pFrakLohn];
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Ballas Kasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 8)
                {
                    if(Kasse[Fahrschule] > Spieler[playerid][pFrakLohn])
                    {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Fahrschule]-=Spieler[playerid][pFrakLohn];
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Fahrschul Kasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 9)
                {
                    if(Kasse[Staat] > Spieler[playerid][pFrakLohn])
                    {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Staat]-=Spieler[playerid][pFrakLohn];
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Staatskasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 10)
                {
                    if(Kasse[Yakuza] > Spieler[playerid][pFrakLohn])
                    {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Yakuza]-=Spieler[playerid][pFrakLohn];
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Yakuza Kasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 11)
                {
                    if(Kasse[Aztecas] > Spieler[playerid][pFrakLohn])
                    {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Aztecas]-=Spieler[playerid][pFrakLohn];
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Aztecas Kasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 12)
                {
                    if(Kasse[LCN] > Spieler[playerid][pFrakLohn])
                    {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[LCN]-=Spieler[playerid][pFrakLohn];
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der CK Kasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 13)
                {
                    if(Kasse[Vagos] > Spieler[playerid][pFrakLohn])
                    {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Vagos]-=Spieler[playerid][pFrakLohn];
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Vagos Kasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 14)
                {
                    if(Kasse[Hitman] > Spieler[playerid][pFrakLohn])
                    {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Hitman]-=Spieler[playerid][pFrakLohn];
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Agency Kasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 15)
                {
                    if(Kasse[BBikerZ] > Spieler[playerid][pFrakLohn])
                    {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[BBikerZ]-=Spieler[playerid][pFrakLohn];
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der NineDemons Kasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 16)
                {
                    if(Kasse[Staat] > Spieler[playerid][pFrakLohn])
                    {
                        if( Spieler[playerid][pDuty] == 1 ) {
                            check += Spieler[playerid][pFrakLohn];
                            Kasse[Staat]-=Spieler[playerid][pFrakLohn];
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Staatskasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 17)
                {
                    if(Kasse[Wheelmenk] > Spieler[playerid][pFrakLohn])
                    {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[Wheelmenk]-=Spieler[playerid][pFrakLohn];
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Wheelman Kasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 18)
                {
                    if(Kasse[Staat] > Spieler[playerid][pFrakLohn])
                    {
                        if( Spieler[playerid][pDuty] == 1 ) {
                            check += Spieler[playerid][pFrakLohn];
                            Kasse[Staat]-=Spieler[playerid][pFrakLohn];
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Staatskasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 19)
                {
                    if(Kasse[TerrorK] > Spieler[playerid][pFrakLohn])
                    {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[TerrorK]-=Spieler[playerid][pFrakLohn];
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Terroristen Kasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 20)
                {
                    if(Kasse[OutlawzK] > Spieler[playerid][pFrakLohn])
                    {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[OutlawzK]-=Spieler[playerid][pFrakLohn];
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der La Cosa Nostra Kasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 21)
                {
                    if(Kasse[ndgradethaK] > Spieler[playerid][pFrakLohn])
                    {
                        check += Spieler[playerid][pFrakLohn];
                        Kasse[ndgradethaK]-=Spieler[playerid][pFrakLohn];
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Triaden Kasse ist kein Geld mehr vorhanden!");
                    }
                }
                else if(Spieler[playerid][pFraktion] == 22)
                {
                    if(Kasse[Staat] > Spieler[playerid][pFrakLohn])
                    {
                        if( Spieler[playerid][pDuty] == 1 ) {
                            check += Spieler[playerid][pFrakLohn];
                            Kasse[Staat]-=Spieler[playerid][pFrakLohn];
                        }
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_RED, "In der Staatskasse ist kein Geld mehr vorhanden!");
                    }
                }
                if(Spieler[playerid][pJob] == 22 ) 
                {
                    check += Spieler[playerid][pAutoknackerExtraLohn];
                }
                Spieler[playerid][pAutoknackerExtraLohn] = 0;
                check += Spieler[playerid][pPayCheck];
                new finalcheck, earnedExp;
                finalcheck=check+fahrlehrerboni[playerid];
                if (GetWeekDayNumber() == WEEKDAY_SATURDAY || GetWeekDayNumber() == WEEKDAY_SUNDAY) 
                { // Saturday & Sunday
                    if (Spieler[playerid][pDonateRank] >= 1) earnedExp = 3;
                    else earnedExp = 2;
                } 
                else 
                {
                    if (Spieler[playerid][pDonateRank] >= 1) earnedExp = 2;
                    else earnedExp = 1;
                }
                // Anti-Cheat Bonus
                /*if (CAC_GetStatus(playerid) && !AC_mustUseAC(playerid))
                {
                    finalcheck += 5000;
                    earnedExp += 1;
                }*/
                #if defined WINTER_EVENT
				   earnedExp += 2;
				#endif
                GivePlayerRP(playerid, earnedExp);
                new maxexp = (Spieler[playerid][pLevel] * 4);
                if( 1 <= Spieler[playerid][pHaustier] <= 3 )
                {
                    Spieler[playerid][pHaustierCooldown]--;
                    if( Spieler[playerid][pHaustierCooldown] == 0 )
                    {
                        new string[128];
                        format(string,sizeof(string),"[TIERBEHÖRDE] Tierhalter %s hat sein Haustier verhungern lassen!",GetName(playerid) );
                        SendFraktionMessage(5, COLOR_RED, string);
                        Spieler[playerid][pHaustier] = 0;
                        SendClientMessage(playerid,COLOR_ORANGE,"Dein Haustier ist vor Hunger gestorben. Die Tierbehörde wurde benachrichtigt.");
                    }
                    else if( Spieler[playerid][pHaustierCooldown] > 0 && Spieler[playerid][pHaustierCooldown] <= 80 )
                    {
                        if(random(3))
                        {
                            SendClientMessage(playerid,COLOR_ORANGE,"Dein Haustier hat Hunger. Du kannst es füttern.");
                        }
                    }
                }
                #pragma unused maxexp
                new tempSteuern = floatround(finalcheck/10, floatround_floor)*gSteuern;
                new hausmiete,
                    hausstrom,
                    tankestrom,
                    bizstrom,
                    handyvertrag;
                TreasuryDeposit(tempSteuern);
                new fbz = floatround((Spieler[playerid][pBank] > 50000000 ? 50000000 : Spieler[playerid][pBank]) * 0.001, floatround_floor);
                if (IsADutyFaction(Spieler[playerid][pFraktion]) && Spieler[playerid][pDuty] == 0 ) 
                {
                    SendClientMessage(playerid, COLOR_ORANGE, "Du erhältst keinen extra Lohn, da du nicht im Dienst warst!");
                }
                if (IsAFightFaction(Spieler[playerid][pFraktion])) 
                {
                    new gzCount = GetGangZoneCount(Spieler[playerid][pFraktion]);
                    if (gzCount > 0) 
                    {
                        if (gzCount == 1) SCMFormatted(playerid, COLOR_ORANGE, "Du erhältst $%s für das eine Gangfight-Gebiet, das deine Gang beherrscht.", AddDelimiters(gzCount * 1500), gzCount);
                        else SCMFormatted(playerid, COLOR_ORANGE, "Du erhältst $%s für die %i Gangfight-Gebiete, die deine Gang beherrscht.", AddDelimiters(gzCount * 1500), gzCount);
                        Spieler[playerid][pBank] += gzCount * 1500;
                    }
                    else SendClientMessage(playerid, COLOR_ORANGE, "Du erhältst keine Belohnung, da deine Gang keine Gebiete beherrscht.");
                }
                new hartz4;
                if( Spieler[playerid][pHartz4]==1) 
                {
                    hartz4 = HARTZ4_GELD;
                    Spieler[playerid][pBank] += 2000;
                }
                else 
                {
                    hartz4 = 0;
                }
                new bankmoney=(finalcheck-tempSteuern),hotelkosten;
                Spieler[playerid][pBank] += fbz;
                Spieler[playerid][pBank] +=bankmoney;
                Spieler[playerid][pPayCheck] = 0;
                if( GetPlayerHouse(playerid) != 999 ) 
                {
                    if( Spieler[playerid][pPlayerHouse] == GetPlayerHouse(playerid) )
                    {
                        hausstrom = 5000;
                    }
                }
                if(Spieler[playerid][pPlayerBiz] != 999)
                {
                    bizstrom = 10000;
                }
                if(Spieler[playerid][pPlayerBizEx] != 999)
                {
                    bizstrom += 10000;
                }
                if( Spieler[playerid][pHandyGeld] == HANDY_VERTRAG ) 
                {
                    handyvertrag = 4000;
                }
                if(Spieler[playerid][pPlayerTank] != 999)
                {
                    tankestrom = 10000;
                }
                if( Spieler[playerid][pSSteuer] > 0 ) Spieler[playerid][pBank] -= Spieler[playerid][pSSteuer];
                if(Spieler[playerid][pWanteds] >= 1)
                {
                    if(Spieler[playerid][pDonateRank] == 0)Spieler[playerid][pWanteds] -= 1;
                    else if(Spieler[playerid][pDonateRank] == 1)Spieler[playerid][pWanteds] -= 2;
                    if(Spieler[playerid][pWanteds] < 0)Spieler[playerid][pWanteds] = 0;
                }
                if( Spieler[playerid][pZollValid] < gettime() ) Spieler[playerid][pZollValid] = 0;

                GivePlayerStrafpunkte(playerid,1, -1 );
                GivePlayerStrafpunkte(playerid,2, -1 );
                GivePlayerStrafpunkte(playerid,3, -1 );
                GivePlayerStrafpunkte(playerid,4, -1 );
                GivePlayerStrafpunkte(playerid,5, -1 );
                SendClientMessage(playerid, COLOR_YELLOW, "======================== {FFFFFF}[ PAYDAY ] {FFFF00}========================");
                // Anti-Cheat Bonus
                /*if (CAC_GetStatus(playerid) && !AC_mustUseAC(playerid))
                    SCMFormatted(playerid, COLOR_WHITE, "Da du den Anti-Cheat Clienten auf freiwilliger Basis nutzt, erhältst du einen kleinen Bonus. (+1 Respektpunkt & $%s)", AddDelimiters(5000));*/
                #if defined WINTER_EVENT
				   SendClientMessage(playerid, COLOR_WHITE, "Da wir Weihnachtszeit haben, erhältst du einen kleinen Bonus. (+2 Respektpunkt mehr)");
				#endif
                if (fahrlehrerboni[playerid] == 0)
                    SCMFormatted(playerid,COLOR_WHITE,"Dein Gehalt: "COLOR_HEX_GREEN"$%s"COLOR_HEX_WHITE", Steuerabzug: "COLOR_HEX_RED"-$%s"COLOR_HEX_WHITE\
                        ", HartzIV Zuschlag: "COLOR_HEX_GREEN"+$%s", AddDelimiters(finalcheck), AddDelimiters(tempSteuern), AddDelimiters(hartz4));
                else
                    SCMFormatted(playerid,COLOR_WHITE,"Dein Gehalt: "COLOR_HEX_GREEN"$%s ($%s Fahrlehrerboni)"COLOR_HEX_WHITE", Steuerabzug: "COLOR_HEX_RED"-$%s"COLOR_HEX_WHITE\
                        ", HartzIV Zuschlag: "COLOR_HEX_GREEN"+$%s", AddDelimiters(finalcheck), AddDelimiters(fahrlehrerboni[playerid]), AddDelimiters(tempSteuern), AddDelimiters(hartz4));
                SCMFormatted(playerid,COLOR_WHITE,"Neuer Kontostand: "COLOR_HEX_GREEN"$%s"COLOR_HEX_WHITE", Zinsen: "COLOR_HEX_GREEN"$%s"COLOR_HEX_WHITE", Zinssatz: "COLOR_HEX_GREEN\
                    "0.1 Prozent", AddDelimiters(Spieler[playerid][pBank]), AddDelimiters(fbz));
                SCMFormatted(playerid,COLOR_WHITE,"Respektpunkte: "COLOR_HEX_GREEN"+%d (%d/%d)"COLOR_HEX_WHITE", Wantedanzahl: " COLOR_HEX_RED "%d", earnedExp, Spieler[playerid][pExp],maxexp,Spieler[playerid][pWanteds]);
                SCMFormatted(playerid,COLOR_WHITE,"Wohnungsmiete: "COLOR_HEX_RED"-$%s"COLOR_HEX_WHITE", Hotel Miete: "COLOR_HEX_RED"-$%s"COLOR_HEX_WHITE", Telefonkosten: "\
                    COLOR_HEX_RED"-$%s", AddDelimiters(hausmiete), AddDelimiters(hotelkosten), AddDelimiters(handyvertrag));
                SCMFormatted(playerid,COLOR_WHITE,"Eigentumshaus: "COLOR_HEX_RED"-$%s"COLOR_HEX_WHITE", Inhaberkosten - Geschäft: "COLOR_HEX_RED"-$%s"COLOR_HEX_WHITE\
                    ", Tankstelle: "COLOR_HEX_RED"-$%s", AddDelimiters(hausstrom), AddDelimiters(bizstrom), AddDelimiters(tankestrom));
                SendClientMessage(playerid, COLOR_YELLOW, "|==========================================================|");
                ShowBuyInformation(playerid,"~y~Glueckwunsch,~w~ Zahltag!");

                if (Spieler[playerid][pSuspendedSentence] > 0) 
                {
                    Spieler[playerid][pSuspendedSentence]--;
                    if (Spieler[playerid][pSuspendedSentence] == 0) 
                    {
                        format(Spieler[playerid][pSusSentenceReason], 128, "");
                        SendClientMessage(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Deine Bewährungsstrafe ist abgelaufen.");
                    }
                }

                // Aktivitätsbonus - Coins
                new query[128];
                SendClientMessage(playerid,COLOR_YELLOW,"[INFO] {FFFFFF}Als Aktivitätsbonus erhältst du +"#COINS_AMOUNT" Shop-Coins.");
                Spieler[playerid][pCoins] += COINS_AMOUNT;
                if( GetPlayerHouse(playerid) != 999 ) 
                {
                    if( Spieler[playerid][pPlayerHouse] == GetPlayerHouse(playerid) )
                    {
                        Spieler[playerid][pBank] -= hausstrom;
                        Biz[StromBiz_Index][bKasse] += hausstrom;
                    }
                    else
                    {
                        Spieler[playerid][pBank] -= Haus[ GetPlayerHouse(playerid) ][hMietPreis];
                        Haus[ GetPlayerHouse(playerid) ][hKasse] += Haus[ GetPlayerHouse(playerid) ][hMietPreis];
                        hausmiete = Haus[ GetPlayerHouse(playerid) ][hMietPreis];
                    }
                }
                if(Spieler[playerid][pPlayerBiz] != 999)
                {
                    Spieler[playerid][pBank] -= bizstrom;
                    Biz[ StromBiz_Index ][bKasse] += bizstrom;
                }
                if(Spieler[playerid][pPlayerBizEx] != 999)
                {
                    Spieler[playerid][pBank] -= bizstrom;
                    Biz[ StromBiz_Index ][bKasse] += bizstrom;
                }
                if(Spieler[playerid][pPlayerHotel] != 999)
                {
                    hotelkosten = Hotel[ Spieler[playerid][pPlayerHotel] ][hMietPreis];
                    Biz[ GetBizIndexByID(59) ][bKasse] += hotelkosten;
                    Spieler[playerid][pBank] -= hotelkosten;
                }
                if( Spieler[playerid][pHandyGeld] == HANDY_VERTRAG ) 
                {
                    Spieler[playerid][pBank] -= handyvertrag;
                    Biz[HandyShopBiz_Index][bKasse] += 100;
                    //SendClientMessage(playerid, COLOR_ORANGE, "Handy-Vertrag: -2000$");
                }
                if(Spieler[playerid][pPlayerTank] != 999)
                {
                    Spieler[playerid][pBank] -= tankestrom;
                    Biz[ StromBiz_Index ][bKasse] += tankestrom;
                }
                format(query, sizeof(query), "UPDATE `accounts` SET `userPremium` = %d WHERE `Name` = '%s'", Spieler[playerid][pCoins], GetName(playerid));
                mysql_pquery(query, THREAD_DUMMY, playerid, gSQL, MySQLThreadOwner);
                SaveAccount(playerid);
            }
            UpdatePayDayTextdraw(playerid);
        }
    }
    return 1;
}
stock Scheine(playerid, targetid, modus = 0)
{
    if(IsPlayerConnected(targetid))
    {
        new car[40];
        new fly[40];
        new gun[40];
        new lkw[40];
        new moto[40];
        new fish[40];
        new boat[40];
        if(Spieler[targetid][pCarLic] == 0){car ="{FF0000}Nicht vorhanden";}
        else if(Spieler[targetid][pCarLic] == 1){car ="{00BB00}Vorhanden";}
        if(Spieler[targetid][pMotoLic] == 0){moto ="{FF0000}Nicht vorhanden";}
        else if(Spieler[targetid][pMotoLic] == 1){moto ="{00BB00}Vorhanden";}
        if(Spieler[targetid][pLKWLic] == 0){lkw ="{FF0000}Nicht vorhanden";}
        else if(Spieler[targetid][pLKWLic] == 1){lkw ="{00BB00}Vorhanden";}
        if(Spieler[targetid][pFlyLic] == 0){fly ="{FF0000}Nicht vorhanden";}
        else if(Spieler[targetid][pFlyLic] == 1){fly ="{00BB00}Vorhanden";}
        if(Spieler[targetid][pBoatLic] == 0){boat ="{FF0000}Nicht vorhanden";}
        else if(Spieler[targetid][pBoatLic] == 1){boat ="{00BB00}Vorhanden";}
        if(Spieler[targetid][pFishLic] == 0){fish = "{FF0000}Nicht vorhanden";}
        else if(Spieler[playerid][pFishLic] == 1){fish ="{00BB00}Vorhanden";}
        if(Spieler[targetid][pGunLic] == 1){
            gun ="{00BB00}A";
        }
        else {
            gun ="{FF0000}(A)";
        }
        if(Spieler[targetid][pGunLicB] == 1){
            format(gun,sizeof(gun),"%s {00BB00}B",gun);
        }
        else {
            format(gun,sizeof(gun),"%s {FF0000}(B)",gun);
        }
        if(modus == 0 ) {
            new string1[256];
            new string2[256];
            new string3[256];
            new stringGESAMT[768];
            format(string1, sizeof(string1), "{EEEEEE}Autoschein: %s {FF0000}[%d/10]{EEEEEE}\n{EEEEEE}Motorradschein: %s {FF0000}[%d/10]{EEEEEE}\n", car, Spieler[targetid][pFPunkte], moto, Spieler[targetid][pMotoPunkte]);
            format(string2, sizeof(string2), "{EEEEEE}LKW-Schein: %s {FF0000}[%d/10]{EEEEEE}\n{EEEEEE}{EEEEEE}Flugschein: %s {FF0000}[%d/10]\n{EEEEEE}Bootsschein: %s {FF0000}\n", lkw, Spieler[targetid][pLKWPunkte], fly, Spieler[targetid][pFlPunkte],boat);
            format(string3, sizeof(string3), "{EEEEEE}Angelschein: %s {FF0000}\n{EEEEEE}{EEEEEE}Waffenschein: %s {FF0000}[%d/10]{EEEEEE}\n\n", fish, gun, Spieler[targetid][pGunPunkte]);
            format(stringGESAMT,sizeof(stringGESAMT),"%s\n%s\n%s",string1,string2,string3);
            ShowPlayerDialog(playerid, DIALOG_LICENSES, DIALOG_STYLE_MSGBOX, "Scheine", stringGESAMT, "Ok", "Abbrechen");
        }
        else if(modus == 1 ) {
            new string[128];
            format(string, sizeof(string), "{EEEEEE}Autoschein: %s {FF0000}[%d/10]{EEEEEE}", car, Spieler[targetid][pFPunkte]);
            SendClientMessage(playerid,COLOR_WHITE,string);
            format(string, sizeof(string), "{EEEEEE}Motorradschein: %s {FF0000}[%d/10]{EEEEEE}",moto, Spieler[targetid][pMotoPunkte]);
            SendClientMessage(playerid,COLOR_WHITE,string);
            format(string, sizeof(string), "{EEEEEE}LKW-Schein: %s {FF0000}[%d/10]{EEEEEE}", lkw, Spieler[targetid][pLKWPunkte]);
            SendClientMessage(playerid,COLOR_WHITE,string);
            format(string, sizeof(string), "{EEEEEE}Flugschein: %s {FF0000}[%d/10]{EEEEEE}", fly, Spieler[targetid][pFlPunkte]);
            SendClientMessage(playerid,COLOR_WHITE,string);
            format(string, sizeof(string), "{EEEEEE}Bootschein: %s {FF0000}",boat);
            SendClientMessage(playerid,COLOR_WHITE,string);
            format(string, sizeof(string), "{EEEEEE}Angelschein: %s {FF0000}",fish);
            SendClientMessage(playerid,COLOR_WHITE,string);
            format(string, sizeof(string), "{EEEEEE}Waffenschein: %s {FF0000}[%d/10]{EEEEEE}", gun, Spieler[targetid][pGunPunkte]);
            SendClientMessage(playerid,COLOR_WHITE,string);
        }
    }
    return 1;
}

stock Stats(playerid, targetid)
{
    if(IsPlayerConnected(targetid))
    {
        new team[50], jtext[50], dialogCaption[42], lotto[12];
        ReturnPlayerFraktion(targetid, team);
        ReturnPlayerJob(targetid, jtext);

        if (!Spieler[targetid][pLottoNr]) lotto = "Kein Ticket";
        else format(lotto, sizeof(lotto), "%d", Spieler[targetid][pLottoNr]);
        

        format(dialogCaption, sizeof(dialogCaption), "Statistik von %s", GetName(targetid));
        
        new final[2000];
        format(final, sizeof(final), #COL_LIGHTBLUE "Spielstand:" #COL_DEFAULT "\n\
            Spielername: [%s], Level: [%d], Geburtstag: [%s], Respektpunkte: [%d/%d] \nSpielstunden: [%d], Geschlecht: [%s], PayDay in: [%d Minuten]\n\
            Accounttyp: [%s], Adminrang: [%d], Adminverwarnungen: [%d/3], Fraktionssperre: [%s]\nBargeld: [$%s], Bank: [$%s], Zusätzliche-Steuern: [$%s], Coins: [%d]\n\n\
            " #COL_LIGHTBLUE "Daten:" #COL_DEFAULT "\nTelefonnummer: [%d], Handyvertrag: [%s]\nStaatsangehörigkeit: [%s], Verheiratet mit: [%s]\n\n\
            " #COL_LIGHTBLUE "Beruf:" #COL_DEFAULT "\nFraktion: [%s], Rang: [%s], Fraktionswarns: [%i/3], Beruf: [%s]\n\n\
            " #COL_LIGHTBLUE "Inventare:" #COL_DEFAULT "\nDrogen: [%s], Waffenteile: [%s], Wantedcodes: [%s], Spice: [%s], Brecheisen: [%s]\n\
            Safebox Drogen: [%s], Safebox Waffenteile: [%s], Safebox Wantedcodes: [%s], Safebox Spice: [%s]\n\
            Lotto-Ticket: [%s], Zigaretten: [%s], Kekse: [%s], Tankkanister: [%d]\nFische: [%d], Köder: [%d], Angel: [%s]\n\n\
            " #COL_LIGHTBLUE "Statistiken:" #COL_DEFAULT "\nMorde: [%d], Verbrechen: [%d], Tode: [%d], KD-Rate: [%.2f], Wantedtode: [%d], Wantedlevel: [%d]\
            , Knast: [%d]\nLobe: [%d], Eventpunkte: [%d]\n\n"#COL_LIGHTBLUE "Sonstiges:" #COL_DEFAULT "\n",
            GetName(targetid), Spieler[targetid][pLevel], Spieler[targetid][pGeburtstag], Spieler[targetid][pExp], Spieler[targetid][pLevel] * 4,
            Spieler[targetid][pHours], Spieler[targetid][pSex] == 1 ? "Männlich" : "Weiblich", 60 - Spieler[targetid][pPayDay],
            Spieler[targetid][pDonateRank] == 0 ? "Normaler User" : "Clubmitglied", Spieler[targetid][pAdmin], Spieler[targetid][pWarns],
            Spieler[targetid][pFrakSperre] ? "Ja" : "Nein", AddDelimiters(CheckMoney(targetid)),
            AddDelimiters(Spieler[targetid][pBank]), AddDelimiters(Spieler[targetid][pSSteuer]), Spieler[targetid][pCoins], Spieler[targetid][pHandyNr],
            Spieler[targetid][pHandyGeld] == HANDY_VERTRAG ? "Ja" : "Nein", Spieler[targetid][pStaat], Spieler[targetid][pMarriageName], team, GetRankName(Spieler[targetid][pFraktion], Spieler[targetid][pRank]), Spieler[targetid][pfrakwarn], jtext,
            AddDelimiters(Spieler[targetid][pDrugs]), AddDelimiters(Spieler[targetid][pWaffenteile]), AddDelimiters(Spieler[targetid][pWantedCodes]),
            AddDelimiters(Spieler[targetid][pSpice]), AddDelimiters(Spieler[targetid][pBrecheisen]), AddDelimiters(Spieler[targetid][pSafeDrogen]), AddDelimiters(Spieler[targetid][pSafeTeile]),
            AddDelimiters(Spieler[targetid][pSafeWantedCodes]), AddDelimiters(Spieler[targetid][pSafeSpice]), lotto, AddDelimiters(Spieler[targetid][pZigaretten]),
            AddDelimiters(Spieler[targetid][pKekse]), Spieler[targetid][pKanister], Spieler[targetid][pFische], Spieler[targetid][pKoeder],
            Spieler[targetid][pAngel] ? "Ja" : "Nein", Spieler[targetid][pKills], Spieler[targetid][pCrimes], Spieler[targetid][pDeaths],
            Spieler[targetid][pDeaths] == 0 ? float(Spieler[targetid][pKills]) : float(Spieler[targetid][pKills]) / float(Spieler[targetid][pDeaths]),
            Spieler[targetid][pWantedDeaths], Spieler[targetid][pWanteds], Spieler[targetid][pArrested], Spieler[targetid][pLobe], Spieler[targetid][pEventPoints]
        );

        /*format(final, sizeof(final), #COL_LIGHTBLUE "Spielstand:" #COL_DEFAULT "\n\
            Spielername: [%s], Level: [%d], Respektpunkte: [%d/%d], Geburtstag: [%s], Geschlecht: [%s] \nSpielstunden: [%d], PayDay in: [%d Minuten]\n\
            Accounttyp: [%s], Adminrang: [%d], Adminverwarnungen: [%d/3], Fraktionssperre: [%s]\nBargeld: [$%s], Bank: [$%s], Zusätzliche-Steuern: [$%s], Coins: [%d]\n\n\
            " #COL_LIGHTBLUE "Daten:" #COL_DEFAULT "\nTelefonnummer: [%d], Handyvertrag: [%s]\nStaatsangehörigkeit: [%s], Verheiratet mit: [%s]\n\n\
            " #COL_LIGHTBLUE "Beruf:" #COL_DEFAULT "\nFraktion: [%s], Rang: [%s], Fraktionswarns: [%i/3], Beruf: [%s]\n\n\
            " #COL_LIGHTBLUE "Inventare:" #COL_DEFAULT "\nSafebox Drogen: [%s], Safebox Waffenteile: [%s], Safebox Wantedcodes: [%s], Safebox Spice: [%s]\n\
            Lotto-Ticket: [%s], Angel: [%s]\n\n\
            " #COL_LIGHTBLUE "Statistiken:" #COL_DEFAULT "\nMorde: [%d], Verbrechen: [%d], Tode: [%d], KD-Rate: [%.2f], Wantedtode: [%d], Wantedlevel: [%d]\
            , Knast: [%d]\nLobe: [%d], Eventpunkte: [%d]\n\n"#COL_LIGHTBLUE "Sonstiges:" #COL_DEFAULT "\n",
            GetName(targetid), Spieler[targetid][pLevel], Spieler[targetid][pExp], Spieler[targetid][pLevel] * 4, Spieler[targetid][pGeburtstag],
            Spieler[targetid][pSex] == 1 ? "Männlich" : "Weiblich", Spieler[targetid][pHours], 60 - Spieler[targetid][pPayDay],
            Spieler[targetid][pDonateRank] == 0 ? "Normaler User" : "Clubmitglied", Spieler[targetid][pAdmin], Spieler[targetid][pWarns],
            Spieler[targetid][pFrakSperre] ? "Ja" : "Nein", AddDelimiters(CheckMoney(targetid)),
            AddDelimiters(Spieler[targetid][pBank]), AddDelimiters(Spieler[targetid][pSSteuer]), Spieler[targetid][pCoins], Spieler[targetid][pHandyNr],
            Spieler[targetid][pHandyGeld] == HANDY_VERTRAG ? "Ja" : "Nein", GetPlayerStaat(targetid), Spieler[targetid][pMarriageName], team, rankname, Spieler[targetid][pfrakwarn], jtext,
            AddDelimiters(Spieler[targetid][pSafeDrogen]), AddDelimiters(Spieler[targetid][pSafeTeile]),
            AddDelimiters(Spieler[targetid][pSafeWantedCodes]), AddDelimiters(Spieler[targetid][pSafeSpice]), lotto,
            Spieler[targetid][pAngel] ? "Ja" : "Nein", Spieler[targetid][pKills], Spieler[targetid][pCrimes], Spieler[targetid][pDeaths],
            Spieler[targetid][pDeaths] == 0 ? float(Spieler[targetid][pKills]) : float(Spieler[targetid][pKills]) / float(Spieler[targetid][pDeaths]),
            Spieler[targetid][pWantedDeaths], Spieler[targetid][pWanteds], Spieler[targetid][pArrested], Spieler[targetid][pLobe], Spieler[targetid][pEventPoints]
        );*/


        new index = GetPlayerHouse(targetid);
        if (index == 999) format(final, sizeof(final), "%sHaus: [Kein Haus]\n", final);
        else if (Spieler[targetid][pPlayerHouse] == 999) format(final, sizeof(final),"%sHaus: [%s - [Nr. %d] (Mieter)]\n", final, Haus[index][hName], Haus[index][hID]);
        else format(final, sizeof(final), "%sHaus: [%s - [Nr. %d] (Besitzer), Kasse: $%s]\n", final, Haus[index][hName], Haus[index][hID], AddDelimiters(Haus[index][hKasse]));

        if (Spieler[targetid][pPlayerBiz] == 999) format(final, sizeof(final), "%sGeschäft: [Kein Geschäft]\n", final);
        else format(final, sizeof(final), "%sGeschäft: [%s, Waren: %s, Kasse: $%s]\n", final, Biz[Spieler[targetid][pPlayerBiz]][bName],
           AddDelimiters( Biz[Spieler[targetid][pPlayerBiz]][bWaren]), AddDelimiters(Biz[Spieler[targetid][pPlayerBiz]][bKasse]));

        if (Spieler[targetid][pPlayerBizEx] != 999 && Spieler[targetid][pPremiumBizSlot])
            format(final, sizeof(final),"%sPremium-Geschäft: [%s, Waren: %s, Kasse: $%s]\n", final, Biz[Spieler[targetid][pPlayerBizEx]][bName],
                AddDelimiters(Biz[Spieler[targetid][pPlayerBizEx]][bWaren]), AddDelimiters(Biz[Spieler[targetid][pPlayerBizEx]][bKasse]));

        if (Spieler[targetid][pPlayerTank] == 999) format(final, sizeof(final), "%sTankstelle: [Keine Tankstelle]\n", final);
        else format(final, sizeof(final), "%sTankstelle: [%s, Benzin: %s, Kasse: $%s]\n", final, Tanke[Spieler[targetid][pPlayerTank]][tName],
            AddDelimiters(Tanke[Spieler[targetid][pPlayerTank]][tBenzin]), AddDelimiters(Tanke[Spieler[targetid][pPlayerTank]][tKasse]));

        if (Spieler[targetid][pPlayerFirma] == 999) format(final, sizeof(final), "%sFirma: [Keine Firma]", final);
        else format(final, sizeof(final), "%sFirma: [%s, Gehalt: $%s, Kasse: $%s]", final, g_Firma[Spieler[targetid][pPlayerFirma]][F_sBezeichnung],
            AddDelimiters(g_Firma[Spieler[targetid][pPlayerFirma]][F_iGehalt]), AddDelimiters(g_Firma[Spieler[targetid][pPlayerFirma]][F_iKasse]));

        ShowPlayerDialog(playerid, DIALOG_STATS, DIALOG_STYLE_MSGBOX, dialogCaption, final, "Schließen", "");
    }
    return 1;
}

stock ReturnPlayerJob(playerid, job[50])
{
    if(Spieler[playerid][pJob] == 0){job="Arbeitslos";}
    else if(Spieler[playerid][pJob] == 1){job="Bauer";}
    else if(Spieler[playerid][pJob] == 2){job="Busfahrer";}
    else if(Spieler[playerid][pJob] == 3){job="Trucker";}
    else if(Spieler[playerid][pJob] == 4){job="Pilot";}
    else if(Spieler[playerid][pJob] == 5){job="KFZ-Mechatroniker";}
    else if(Spieler[playerid][pJob] == 6){job="Anwalt";}
    else if(Spieler[playerid][pJob] == 7){job="Straßenreiniger";}
    else if(Spieler[playerid][pJob] == 8){job="Müllmann";}
    else if(Spieler[playerid][pJob] == 9){job="Gärtnerei";}
    else if(Spieler[playerid][pJob] == 10){job="Bauarbeiter";}
    else if(Spieler[playerid][pJob] == 11){job="Schiffs-Fahrer";}
    else if(Spieler[playerid][pJob] == 12){job="Geld-Transportsfahrer";}
    else if(Spieler[playerid][pJob] == 13){job="Eisverkäufer";}
    else if(Spieler[playerid][pJob] == 14){job="Detektiv";}
    else if(Spieler[playerid][pJob] == 15){job="Pizzalieferant";}
    else if(Spieler[playerid][pJob] == 16){job="Taxifahrer";}
    else if(Spieler[playerid][pJob] == 17){job="Drogendealer";}
    else if(Spieler[playerid][pJob] == 18){job="Waffendealer";}
    else if(Spieler[playerid][pJob] == 19){job="Taschendieb";}
    else if(Spieler[playerid][pJob] == 20){job="Prostituierte";}
    else if(Spieler[playerid][pJob] == 21){job="Wanted Hacker";}
    else if(Spieler[playerid][pJob] == 22){job="Autodieb";}
    //else if(Spieler[playerid][pJob] == 23){job="Zugfahrer";}
    else if(Spieler[playerid][pJob] == 23){job="HotDog Verkäufer";}
    return job;
}

stock ReturnPlayerFraktion(playerid, frak[50])
{
    if(Spieler[playerid][pFraktion] == 0)frak ="Zivilist";
    else if(Spieler[playerid][pFraktion] == 1)frak ="LSPD";
    else if(Spieler[playerid][pFraktion] == 2)frak ="FBI";
    else if(Spieler[playerid][pFraktion] == 3)frak ="SAMD";
    else if(Spieler[playerid][pFraktion] == 4)frak ="SA-NA";
    else if(Spieler[playerid][pFraktion] == 5)frak ="Ordnungsamt";
    else if(Spieler[playerid][pFraktion] == 6)frak ="Grove Street";
    else if(Spieler[playerid][pFraktion] == 7)frak ="Ballas";
    else if(Spieler[playerid][pFraktion] == 8)frak ="Fahrschule";
    else if(Spieler[playerid][pFraktion] == 9)frak ="Staat";
    else if(Spieler[playerid][pFraktion] == 10)frak ="Yakuza";
    else if(Spieler[playerid][pFraktion] == 11)frak ="Aztecas";
    else if(Spieler[playerid][pFraktion] == 12)frak ="Cali Kartell";
    else if(Spieler[playerid][pFraktion] == 13)frak ="Vagos";
    else if(Spieler[playerid][pFraktion] == 14)frak ="Agency";
    else if(Spieler[playerid][pFraktion] == 15)frak ="NineDemons";
    else if(Spieler[playerid][pFraktion] == 16)frak ="LVPD";
    else if(Spieler[playerid][pFraktion] == 17)frak ="Wheelman";
    else if(Spieler[playerid][pFraktion] == 18)frak ="Army";
    else if(Spieler[playerid][pFraktion] == 19)frak ="Terrorist";
    else if(Spieler[playerid][pFraktion] == 20)frak ="LCN";
    else if(Spieler[playerid][pFraktion] == 21)frak ="Triaden";
    else if(Spieler[playerid][pFraktion] == 22)frak ="Zollamt";
    return frak;
}

stock ReturnFraktionByID(frakid, frak[50])
{
    if(frakid == 0)frak ="Zivilist";
    else if(frakid == 1)frak ="LSPD";
    else if(frakid == 2)frak ="FBI";
    else if(frakid == 3)frak ="SAMD";
    else if(frakid == 4)frak ="SA-NA";
    else if(frakid == 5)frak ="Ordnungsamt";
    else if(frakid == 6)frak ="Grove Street";
    else if(frakid == 7)frak ="Ballas";
    else if(frakid == 8)frak ="Fahrschule";
    else if(frakid == 9)frak ="Staat";
    else if(frakid == 10)frak ="Yakuza";
    else if(frakid == 11)frak ="Aztecas";
    else if(frakid == 12)frak ="Cali Kartell";
    else if(frakid == 13)frak ="Vagos";
    else if(frakid == 14)frak ="Agency";
    else if(frakid == 15)frak ="NineDemons";
    else if(frakid == 16)frak ="LVPD";
    else if(frakid == 17)frak ="Wheelman";
    else if(frakid == 18)frak ="Army";
    else if(frakid == 19)frak ="Terrorist";
    else if(frakid == 20)frak ="LCN";
    else if(frakid == 21)frak ="Triaden";
    else if(frakid == 22)frak ="Zollamt";
    else frak = "FraktionsName";
    return frak;
}



 
forward WHEELMAN_gateHack_pulse(playerid, unixtime);
public WHEELMAN_gateHack_pulse(playerid, unixtime) {
    if (gettime() >= unixtime) {
        alcatrazGateHackTimestamp = 0;
        alcatrazGateHackTimeout = gettime() + 20;

		new Float:fX, Float:fY, Float:fZ;
        GetDynamicObjectPos(object_alcatraz_entranceGate, fX, fY, fZ);

        MoveDynamicObject(object_alcatraz_entranceGate, fX, fY, ALCATRAZ_ENTRANCEGATE_OPEN_Z, 2);
        return SendClientMessage(playerid, COLOR_GREEN, "Du hast es geschafft, das Alcatraz-Tor zu hacken.");
    }
 
    if (Spieler[playerid][pTot] > 0) {
        alcatrazGateHackTimestamp = 0;
        return SendClientMessage(playerid, COLOR_RED, "Du bist gestorben und hast es nicht geschafft, das Alcatraz-Tor zu hacken.");
    }
 
    if (!IsPlayerInRangeOfPoint(playerid, 10.0, ALCATRAZ_ENTRANCEGATE_FOR_RANGE_COORDS)) {
        alcatrazGateHackTimestamp = 0;
        return SendClientMessage(playerid, COLOR_RED, "Du bist zu weit vom Alcatraz-Tor entfernt. Das Hacken wurde abgebrochen.");
    }
 
    return SetTimerEx("WHEELMAN_gateHack_pulse", 2000, false, "dd", playerid, unixtime);
}



stock IsBicycle(carid)
{
    if(carid == 481 || carid == 509 || carid == 510)
    {
        return 1;
    }
    return 0;
}

stock IsBoot(carid)
{
    if(carid == 430 || carid == 446 || carid == 452 || carid == 453 || carid == 454 || carid == 472 || carid == 473 || carid == 484 || carid == 493 || carid == 595)
    {
        return 1;
    }
    return 0;
}

stock SendGlobalMessage(color, string[])
{
    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerConnected(i))
        {
            if(pChatSettings[i][CHAT_GC])
            {
                SendClientMessage(i, color, string);
            }
        }
    }
}

stock SendFraktionMessage(frakid, color, string[])
{
    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerConnected(i))
        {
            if(Spieler[i][pFraktion] == frakid)
            {
                if(pChatSettings[i][CHAT_FC])
                {
                    SendClientMessage(i, color, string);
                }
            }
        }
    }

    return 1;
}
stock SendClubMessage(color, string[])
{
    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerConnected(i))
        {
            if(Spieler[i][pDonateRank] >= 1)
            {
                if(pChatSettings[i][CHAT_CC])
                {
                    SendClientMessage(i, color, string);
                }
            }
        }
    }
}

stock SendGlobalChatMessage(color, string[])
{
    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerConnected(i))
        {
            if(pChatSettings[i][CHAT_GC])
            {
                SendClientMessage(i, color, string);
            }
        }
    }
}

stock SendJobMessage(job, color, string[])
{
    for(new i=0;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerConnected(i))
        {
            if(Spieler[i][pJob] == job)
            {
                if(pChatSettings[i][CHAT_JC])
                {
                    SendClientMessage(i, color, string);
                }
            }
        }
    }
}

stock SendHelferMessage(color, string[])
{
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
        {
            if(Spieler[i][pAutomatik] >= 1)
            {
                SendClientMessage(i, color, string);
            }
        }
    }
    return 1;
}

stock SendAdminMessage(color, string[])
{
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
        {
            if(Spieler[i][pAdmin] >= 1)
            {
                SendClientMessage(i, color, string);
            }
        }
    }
    return 1;
}

stock SendModMessage(color, string[])
{
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
        {
            if(Spieler[i][pAdmin] >= 3)
            {
                SendClientMessage(i, color, string);
            }
        }
    }
    return 1;
}

stock SendManagerMessage(color, string[])
{
    foreach(new i : Player) {
        if (IsPlayerConnected(i) && gPlayerLogged[i] == 1) {
            if (Spieler[i][pAdmin] >= 5) {
                SendClientMessage(i, color, string);
            }
        }
    }
    return 1;
}

stock SetPlayerCheckpointEx(playerid, Float:x, Float:y, Float:z, Float:size, var) {
    if (!var)
        return DisablePlayerCheckpointEx(playerid);

    DisablePlayerCheckpoint(playerid);
    SetTimerEx("SetCheckpointExFix", 50, 0, "dffffd", playerid, x, y, z, size, var);
    return 1;
}

forward SetCheckpointExFix(playerid, Float:x, Float:y, Float:z, Float:size, var);
public SetCheckpointExFix(playerid, Float:x, Float:y, Float:z, Float:size, var) {
    pCheckpoint[playerid] = var;
    SetPlayerCheckpoint(playerid, x,y,z,size);
    SetPVarFloat(playerid, "MARKER.X", x);
    SetPVarFloat(playerid, "MARKER.Y", y);
    SetPVarFloat(playerid, "MARKER.Z", z);
    SetPVarFloat(playerid, "MARKER.SIZE", size);
    return 1;
}

stock DisablePlayerCheckpointEx(playerid)
{
    pCheckpoint[playerid] = CP_NONE;
    DisablePlayerCheckpoint(playerid);
    DeletePVar(playerid, "MARKER.X");
    DeletePVar(playerid, "MARKER.Y");
    DeletePVar(playerid, "MARKER.Z");
    DeletePVar(playerid, "MARKER.SIZE");
    return 1;
}
forward IsAExhaust(componentid);
public IsAExhaust(componentid)
{
    if(componentid >= 1018 && componentid <= 1022)
    {
        return 1;
    }
    if(componentid >= 1028 && componentid <= 1029)
    {
        return 1;
    }
    if(componentid == 1037 || componentid == 1059 || componentid == 1089 || componentid == 1092 || componentid == 1132)
    {
        return 1;
    }
    if(componentid == 1104 || componentid == 1105 || componentid == 1113 || componentid == 1114 || componentid == 1129)
    {
        return 1;
    }
    if(componentid == 1135 || componentid == 1136)
    {
        return 1;
    }
    if(componentid >= 1043 && componentid <= 1046)
    {
        return 1;
    }
    if(componentid >= 1126 && componentid <= 1127)
    {
        return 1;
    }
    if(componentid >= 1064 && componentid <= 1066)
    {
        return 1;
    }
    return 0;
}

forward IsAWheel(componentid);
public IsAWheel(componentid)
{
    if(componentid >= 1073 && componentid <= 1085)
    {
        return 1;
    }
    if(componentid >= 1096 && componentid <= 1098)
    {
        return 1;
    }
    if(componentid == 1025)
    {
        return 1;
    }
    return 0;
}

forward IsASideR(componentid);
public IsASideR(componentid)
{
    if(componentid == 1007)
    {
        SideL = 1017;
        return 1;
    }
    if(componentid == 1026)
    {
        SideL = 1027;
        return 1;
    }
    if(componentid == 1030)
    {
        SideL = 1031;
        return 1;
    }
    if(componentid == 1040)
    {
        SideL = 1036;
        return 1;
    }
    if(componentid == 1041)
    {
        SideL = 1039;
        return 1;
    }
    if(componentid == 1042)
    {
        SideL = 1099;
        return 1;
    }
    if(componentid == 1051)
    {
        SideL = 1047;
        return 1;
    }
    if(componentid == 1048)
    {
        SideL = 1052;
        return 1;
    }
    if(componentid == 1056)
    {
        SideL = 1062;
        return 1;
    }
    if(componentid == 1063)
    {
        SideL = 1057;
        return 1;
    }
    if(componentid == 1069)
    {
        SideL = 1071;
        return 1;
    }
    if(componentid == 1072)
    {
        SideL = 1070;
        return 1;
    }
    if(componentid == 1094)
    {
        SideL = 1090;
        return 1;
    }
    if(componentid == 1093)
    {
        SideL = 1095;
        return 1;
    }
    if(componentid == 1122)
    {
        SideL = 1101;
        return 1;
    }
    if(componentid == 1102)
    {
        SideL = 1133;
        return 1;
    }
    if(componentid == 1124)
    {
        SideL = 1106;
        return 1;
    }
    if(componentid == 1107)
    {
        SideL = 1108;
        return 1;
    }
    if(componentid == 1118)
    {
        SideL = 1120;
        return 1;
    }
    if(componentid == 1137)
    {
        SideL = 1134;
        return 1;
    }
    return 0;
}

forward IsASideL(componentid);
public IsASideL(componentid)
{
    if(componentid == 1134)
    {
        SideR = 1137;
        return 1;
    }
    if(componentid == 1119)
    {
        SideR = 1121;
        return 1;
    }
    if(componentid == 1120)
    {
        SideR = 1118;
        return 1;
    }
    if(componentid == 1108)
    {
        SideR = 1107;
        return 1;
    }
    if(componentid == 1017)
    {
        SideR = 1007;
        return 1;
    }
    if(componentid == 1027)
    {
        SideR = 1026;
        return 1;
    }
    if(componentid == 1031)
    {
        SideR = 1030;
        return 1;
    }
    if(componentid == 1036)
    {
        SideR = 1040;
        return 1;
    }
    if(componentid == 1039)
    {
        SideR = 1041;
        return 1;
    }
    if(componentid == 1099)
    {
        SideR = 1042;
        return 1;
    }
    if(componentid == 1047)
    {
        SideR = 1051;
        return 1;
    }
    if(componentid == 1052)
    {
        SideR = 1048;
        return 1;
    }
    if(componentid == 1062)
    {
        SideR = 1056;
        return 1;
    }
    if(componentid == 1057)
    {
        SideR = 1063;
        return 1;
    }
    if(componentid == 1071)
    {
        SideR = 1069;
        return 1;
    }
    if(componentid == 1070)
    {
        SideR = 1072;
        return 1;
    }
    if(componentid == 1090)
    {
        SideR = 1094;
        return 1;
    }
    if(componentid == 1095)
    {
        SideR = 1093;
        return 1;
    }
    if(componentid == 1095)
    {
        SideR = 1093;
        return 1;
    }
    if(componentid == 1101)
    {
        SideR = 1122;
        return 1;
    }
    if(componentid == 1133)
    {
        SideR = 1102;
        return 1;
    }
    if(componentid == 1106)
    {
        SideR = 1124;
        return 1;
    }
    return 0;
}

forward IsAFB(componentid);
public IsAFB(componentid)
{
    if(componentid >= 1152 && componentid <= 1153 || componentid >= 1165 && componentid <= 1166)
    {
        return 1;
    }
    if(componentid == 1155 || componentid == 1157 || componentid == 1160 || componentid == 1176 || componentid == 1179 || componentid == 1185)
    {
        return 1;
    }
    if(componentid >= 1169 && componentid <= 1174 || componentid >= 1181 && componentid <= 1182)
    {
        return 1;
    }
    if(componentid >= 1188 && componentid <= 1191)
    {
        return 1;
    }
    return 0;
}

forward IsARB(componentid);
public IsARB(componentid)
{
    if(componentid >= 1140 && componentid <= 1141 || componentid >= 1148 && componentid <= 1151)
    {
        return 1;
    }
    if(componentid == 1154 || componentid == 1156 || componentid == 1159 || componentid == 1161 || componentid == 1175 || componentid == 1180)
    {
        return 1;
    }
    if(componentid >= 1167 && componentid <= 1168 || componentid >= 1177 && componentid <= 1178)
    {
        return 1;
    }
    if(componentid >= 1183 && componentid <= 1184 || componentid >= 1186 && componentid <= 1187)
    {
        return 1;
    }
    if(componentid >= 1192 && componentid <= 1193)
    {
        return 1;
    }
    return 0;
}

forward IsASpoiler(componentid);
public IsASpoiler(componentid)
{
    if(componentid >= 1000 && componentid <= 1003 || componentid >= 1014 && componentid <= 1016)
    {
        return 1;
    }
    if(componentid == 1023 || componentid == 1058 || componentid == 1158)
    {
        return 1;
    }
    if(componentid >= 1049 && componentid <= 1050 || componentid >= 1138 && componentid <= 1139)
    {
        return 1;
    }
    if(componentid >= 1146 && componentid <= 1147 || componentid >= 1162 && componentid <= 1164)
    {
        return 1;
    }
    return 0;
}

forward IsARoof(componentid);
public IsARoof(componentid)
{
    if(componentid >= 1032 && componentid <= 1033 || componentid >= 1053 && componentid <= 1055)
    {
        return 1;
    }
    if(componentid == 1035 || componentid == 1038 || componentid == 1061 || componentid == 1088 || componentid == 1091)
    {
        return 1;
    }
    if(componentid == 1103 || componentid == 1128)
    {
        return 1;
    }
    if(componentid >= 1067 && componentid <= 1068 || componentid >= 1130 && componentid <= 1131)
    {
        return 1;
    }
    return 0;
}

stock LoadPlayerCars(playerid) {
    new
        Query[128];
    for(new i = 0 ; i < MaxVeh ; i++) {
        PlayerCar[playerid][i][CarId] = INVALID_VEHICLE_ID;
        PlayerHaveCar[playerid][i] = 0;
    }
    format(Query,sizeof(Query),"SELECT * FROM `playercar` WHERE `Owner` = '%s' ORDER BY `slot` ASC LIMIT %d", GetName(playerid), MaxVehicles(playerid) );
    mysql_pquery(Query , THREAD_LOADPLAYERCARS , playerid,gSQL,MySQLThreadOwner);
    // -> THREADED
    return 1;
}

stock ini_GetKey( line[] )
{
    new keyRes[256];
    keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] )
{
    new valRes[256];
    valRes[0]=0;
    if ( strfind( line , "=" , true ) == -1 ) return valRes;
    strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
    return valRes;
}




IsAutohausCar(carid)
{
    new i;
    for(i=0; i<sizeof(Kaufliste); i++)
    {
        if(Kaufliste[i][Carid]==carid) { return i; }
    }
    return -1;
}

public PlayerCarSpawn(playerid,Slot)
{
    if(IsPlayerConnected(playerid))
    {
        if(!PlayerHaveCar[playerid][Slot])
        {
            PlayerHaveCar[playerid][Slot] = 1;
            PlayerCar[playerid][Slot][ObjectIDNeon1] = INVALID_OBJECT_ID;
            PlayerCar[playerid][Slot][ObjectIDNeon2] = INVALID_OBJECT_ID;
            PlayerCar[playerid][Slot][CarId] = INVALID_VEHICLE_ID;
            if( PlayerCar[playerid][Slot][CarState] == e_Vehicle_Status_Destroyed ) {
                printf("Ein Fahrzeug von %s wird nicht gespawnt da Destroyed",GetName(playerid));
                return false;
            }
            PlayerCar[playerid][Slot][CarId] = CreateVehicle(PlayerCar[playerid][Slot][CarModel],PlayerCar[playerid][Slot][CarPos_x],PlayerCar[playerid][Slot][CarPos_y],PlayerCar[playerid][Slot][CarPos_z],PlayerCar[playerid][Slot][CarRotate],PlayerCar[playerid][Slot][CarC1],PlayerCar[playerid][Slot][CarC2], 60000);/*vehicle spawn*/
            aiVehicles[PlayerCar[playerid][Slot][CarId]] = VEH_PRIVAT;
            //CreatePeilsender(playerid,Slot);
            //printf("PlayerCarSpawn(%d,%d) %d",playerid,Slot,PlayerCar[playerid][Slot][CarId]);
            //new snp[24];
            //format(snp, 24, "%s", GetName(playerid));
            if( !strcmp(PlayerCar[playerid][Slot][CarNumberplate],KEIN_KENNZEICHEN)) {
                SetVehicleNumberPlate(PlayerCar[playerid][Slot][CarId], "." );
            }
            else {
                SetVehicleNumberPlate(PlayerCar[playerid][Slot][CarId], PlayerCar[playerid][Slot][CarNumberplate] );
            }
            SetVehicleToRespawn( PlayerCar[playerid][Slot][CarId] );
            ChangeVehicleColor(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarC1],PlayerCar[playerid][Slot][CarC2]);
            if(PlayerCar[playerid][Slot][ObjectIDNeon1] > 0 || PlayerCar[playerid][Slot][ObjectIDNeon2] > 0)
            {
                DestroyDynamicObject(PlayerCar[playerid][Slot][ObjectIDNeon1]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][ObjectIDNeon2]);
            }
            if(PlayerCar[playerid][Slot][isSpecialTuned] > 0)
            {
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned1]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned2]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned3]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned4]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned5]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned6]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned7]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned8]);
                DestroyDynamicObject(PlayerCar[playerid][Slot][SpecialTuned9]);
            }
            if(PlayerCar[playerid][Slot][CarPJ] >= 0) {ChangeVehiclePaintjob(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarPJ]);}
            if(PlayerCar[playerid][Slot][CarNitro] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarNitro]);}
            if(PlayerCar[playerid][Slot][CarHyd] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarHyd]);}
            if(PlayerCar[playerid][Slot][CarWheel] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarWheel]);}
            if(PlayerCar[playerid][Slot][CarAusp] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarAusp]);}
            if(PlayerCar[playerid][Slot][CarSideL] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarSideL]);}
            if(PlayerCar[playerid][Slot][CarSideR] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarSideR]);}
            if(PlayerCar[playerid][Slot][CarFB] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarFB]);}
            if(PlayerCar[playerid][Slot][CarRB] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarRB]);}
            if(PlayerCar[playerid][Slot][CarSpoiler] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarSpoiler]);}
            if(PlayerCar[playerid][Slot][CarRoof] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarRoof]);}
            if(PlayerCar[playerid][Slot][CarHood] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarHood]);}
            if(PlayerCar[playerid][Slot][CarVents] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarVents]);}
            if(PlayerCar[playerid][Slot][CarLamps] != 0) {AddVehicleComponent(PlayerCar[playerid][Slot][CarId],PlayerCar[playerid][Slot][CarLamps]);}
            if(PlayerCar[playerid][Slot][CarNeon1] != 0){ PlayerCar[playerid][Slot][ObjectIDNeon1] =CreateDynamicObject(PlayerCar[playerid][Slot][CarNeon1], 0,0,0,0,0,0,0); AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][ObjectIDNeon1] , PlayerCar[playerid][Slot][CarId], -0.8, 0.0, -0.8, 0.0, 0.0, 0.0);}
            if(PlayerCar[playerid][Slot][CarNeon2] != 0){ PlayerCar[playerid][Slot][ObjectIDNeon2] = CreateDynamicObject(PlayerCar[playerid][Slot][CarNeon2], 0,0,0,0,0,0,0); AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][ObjectIDNeon2] , PlayerCar[playerid][Slot][CarId], 0.8, 0.0, -0.8, 0.0, 0.0, 0.0);}
            if(PlayerCar[playerid][Slot][isSpecialTuned] != 0)
            {
                if(PlayerCar[playerid][Slot][isSpecialTuned] == 1)
                {
                    PlayerCar[playerid][Slot][SpecialTuned1] = CreateDynamicObject(1166, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned2] = CreateDynamicObject(1168, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned3] = CreateDynamicObject(1056, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned4] = CreateDynamicObject(1056, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned5] = CreateDynamicObject(1056, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned6] = CreateDynamicObject(1056, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned7] = CreateDynamicObject(1091, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned8] = CreateDynamicObject(1164, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned9] = CreateDynamicObject(1034, 0,0,0,0,0,0,0);
                }
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned1], PlayerCar[playerid][Slot][CarId], 1.024999, 2.080000, -0.090000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned2], PlayerCar[playerid][Slot][CarId], -1.066002, -1.774998, -0.130000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned3], PlayerCar[playerid][Slot][CarId], -0.946998, 0.149999, -0.589998, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned4], PlayerCar[playerid][Slot][CarId], -0.981998, -0.169999, -0.589998, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned5], PlayerCar[playerid][Slot][CarId], 1.008000, -0.169999, -0.589998, 0.000001, -179.995712, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned6], PlayerCar[playerid][Slot][CarId], 0.978000, 0.174999, -0.589998, 0.000001, -179.995712, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned7], PlayerCar[playerid][Slot][CarId], -0.006999, 0.244999, 0.648500, 0.000001, -0.000116, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned8], PlayerCar[playerid][Slot][CarId], 0.000000, -2.470009, 0.368500, 0.000001, -0.000116, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned9], PlayerCar[playerid][Slot][CarId], -0.009999, -0.240000, -0.106499, 0.000001, -0.000116, 0.000000);

                if(PlayerCar[playerid][Slot][isSpecialTuned] == 2)
                {
                    PlayerCar[playerid][Slot][SpecialTuned1] = CreateDynamicObject(18702, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned2] = CreateDynamicObject(18702, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned3] = CreateDynamicObject(18702, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned4] = CreateDynamicObject(18702, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned5] = CreateDynamicObject(18700, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned6] = CreateDynamicObject(18700, 0,0,0,0,0,0,0);
                }
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned1], PlayerCar[playerid][Slot][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned2], PlayerCar[playerid][Slot][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned3], PlayerCar[playerid][Slot][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned4], PlayerCar[playerid][Slot][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned5], PlayerCar[playerid][Slot][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned6], PlayerCar[playerid][Slot][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);

                if(PlayerCar[playerid][Slot][isSpecialTuned] == 3)
                {
                    PlayerCar[playerid][Slot][SpecialTuned1] = CreateDynamicObject(18729, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned2] = CreateDynamicObject(18729, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned3] = CreateDynamicObject(18700, 0,0,0,0,0,0,0);
                    PlayerCar[playerid][Slot][SpecialTuned4] = CreateDynamicObject(18700, 0,0,0,0,0,0,0);
                }
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned1], PlayerCar[playerid][Slot][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 180.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned2], PlayerCar[playerid][Slot][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 180.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned3], PlayerCar[playerid][Slot][CarId], -0.199999, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
                AttachDynamicObjectToVehicle(PlayerCar[playerid][Slot][SpecialTuned4], PlayerCar[playerid][Slot][CarId], 0.300000, -1.100000, -1.300000, 0.000000, 0.000000, 0.000000);
            }

            gGas[PlayerCar[playerid][Slot][CarId]] = PlayerCar[playerid][Slot][CarTank];
            RadioSender[PlayerCar[playerid][Slot][CarId]] = 0;
            gMaxGas[PlayerCar[playerid][Slot][CarId]] = GetMaxTank(PlayerCar[playerid][Slot][CarId]);
            g_VehicleDistance[ PlayerCar[playerid][Slot][CarId] ] = PlayerCar[playerid][Slot][CarDistance];
            ResetFrakInfo(PlayerCar[playerid][Slot][CarId]);
            LockCar(PlayerCar[playerid][Slot][CarId]);
        }
    }
    return true;
}


public OnPlayerCarUpdate(playerid)
{
    for(new x = 0 , j = MaxVehicles(playerid) ; x < j;x++)
    {
        if(PlayerHaveCar[playerid][x])
        {
            if( PlayerCar[playerid][x][CarId] == INVALID_VEHICLE_ID) {
                continue;
            }

            SavePlayerCar(playerid,x);
            DestroyDynamicObject(PlayerCar[playerid][x][ObjectIDNeon1]);
            DestroyDynamicObject(PlayerCar[playerid][x][ObjectIDNeon2]);
            DestroyVehicleEx(PlayerCar[playerid][x][CarId]);
            //DestroyPeilsender(playerid,x);
            aiVehicles[ PlayerCar[playerid][x][CarId] ] = VEH_INVALID;

            if(PlayerCar[playerid][x][isSpecialTuned] > 0)
            {
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned1]);
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned2]);
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned3]);
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned4]);
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned5]);
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned6]);
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned7]);
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned8]);
                DestroyDynamicObject(PlayerCar[playerid][x][SpecialTuned9]);
            }
            PlayerCar[playerid][x][SpecialTuned1] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][SpecialTuned2] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][SpecialTuned3] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][SpecialTuned4] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][SpecialTuned5] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][SpecialTuned6] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][SpecialTuned7] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][SpecialTuned8] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][SpecialTuned9] = INVALID_OBJECT_ID;

            PlayerCar[playerid][x][ObjectIDNeon1] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][ObjectIDNeon2] = INVALID_OBJECT_ID;
            PlayerCar[playerid][x][CarState] = e_Vehicle_Status_Normal;

            PlayerCar[playerid][x][CarId] = INVALID_VEHICLE_ID;
            PlayerCar[playerid][x][Id] = 0;
            PlayerHaveCar[playerid][x] = 0;
        }
    }
    return 1;
}

stock LockCar(carid)
{
    new engine, light, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(carid, engine, light, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(carid, engine, light, alarm, VEHICLE_PARAMS_ON, bonnet, boot, objective);
}

stock UnLockCar(carid)
{
    new engine, light, alarm, doors, bonnet, boot, objective;
    GetVehicleParamsEx(carid, engine, light, alarm, doors, bonnet, boot, objective);
    SetVehicleParamsEx(carid, engine, light, alarm, VEHICLE_PARAMS_OFF, bonnet, boot, objective);
}

forward CheckGas();
public CheckGas()
{
    new engine, light, alarm, doors, bonnet, boot, objective;
    for(new i=1 ; i<GetVehiclePoolSize() ; i++)
    {
        GetVehicleParamsEx(i, engine, light, alarm, doors, bonnet, boot, objective);
        if(!(engine == VEHICLE_PARAMS_UNSET || engine == VEHICLE_PARAMS_OFF))
        {
            // Motor an
            // printf("aiVehicles[%d] = %d",i,aiVehicles[i]);
            //if( !(VEH_DROGEN <= aiVehicles[i] <= VEH_KFZCARS) ) {
                if(!IsBicycle( GetVehicleModel(i) ))
                {
                    if(gGas[i] >= 1)
                    {
                        gGas[i] --;
                        for(new playerid;playerid<MAX_PLAYERS;playerid++)
                        {
                            if(IsPlayerConnected(playerid))
                            {
                                if(!IsPlayerNPC(playerid))
                                {
                                    if(fuelcountactive[playerid]==1&&GetPlayerVehicleID(playerid)==i)
                                    {
                                        fuelcount[playerid]++;
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        GetVehicleParamsEx(i, engine, light, alarm, doors, bonnet, boot, objective);
                        SetVehicleParamsEx(i, VEHICLE_PARAMS_OFF, light, alarm, doors, bonnet, boot, objective);
                    }
                }
            //}
        }
    }
    return 1;
}


// playerid,menge,price,RefuelType[playerid]
forward Fillup(playerid,menge,price,benzinart, method);
public Fillup(playerid,menge,price,benzinart, method)
{
    if(IsPlayerConnected(playerid))
    {
        new vID = GetPlayerVehicleID(playerid);
        new string[128];
        new t = IsPlayerAtTanke(playerid);

        Refueling[playerid] = 0;
        if (vID) vehicleRefueling[vID] = 0;

        if(t == 999)
        {
            SendClientMessage(playerid, COLOR_RED, "Du befindest dich an keiner Tankstelle.");
            UnfreezePlayer(playerid);
            return 1;
        }

        if(!IsPlayerInAnyVehicle(playerid)){
            SendClientMessage(playerid, COLOR_RED, "Du befindest dich in keinem Fahrzeug.");
            UnfreezePlayer(playerid);
            return 1;
        }

        if (!method && Spieler[playerid][pCash] >= price || method && Spieler[playerid][pBank] >= price) {
            gGas[vID] += menge;
            if (gGas[vID] > gMaxGas[vID]) gGas[vID] = gMaxGas[vID];
            Tanke[t][tBenzin] -= menge;
            Tanke[t][tKasse] += price*40/100;
            format(string, sizeof(string), "* Du hast dein Fahrzeug für $%s (%d Liter %s) aufgetankt.", AddDelimiters(price),menge,g_asKraftstoff[benzinart]);
            SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
            UnfreezePlayer(playerid);
            if (!method) GivePlayerCash(playerid, -price);
            else Spieler[playerid][pBank] -= price;
        }
        else
        {
            UnfreezePlayer(playerid);
            SendClientMessage(playerid, COLOR_RED, "Du besitzt nicht genug Geld, um dein Fahrzeug auftanken zu können.");
            return 1;
        }
    }
    return 1;
}

stock IsPlayerAtAngelPlatz(playerid)
{
    for(new a=0;a<iAngel;a++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, Angel[a][PosX], Angel[a][PosY], Angel[a][PosZ]))
        {
            return a;
        }
    }
    return 999;
}

stock IsPlayerAtATM(playerid)
{
    for(new at=0;at<sizeof(ATM);at++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 2.0, ATM[at][0], ATM[at][1], ATM[at][2]))
        {
            return 1;
        }
    }
    return 0;
}

forward ChangeWeather();
public ChangeWeather()
{
    new zuf = 2 + random(18);
    SetWeatherEx(zuf);
    CurWeather = zuf;
    return 1;
}


/*forward IntAndVwWFix();
public IntAndVwWFix()
{
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if( IsPlayerConnected(i) ) {
            if(!(GetPlayerInterior(i) > 0 || GetPlayerVirtualWorld(i) > 0))
            {
                if(pDrogenEinfluss[i] == 0)
                {
                    SetPlayerWeather(i, 0);
                }
                else
                {
                    SetPlayerWeather(i, 2009);
                }
            }
            else
            {
                if(pDrogenEinfluss[i] == 0)
                {
                    SetPlayerWeather(i, 0);
                }
                else
                {
                    SetPlayerWeather(i, 2009);
                }
            }
        }
    }
    return 1;
}*/
/*
stock IsNumeric(const string[]) //By Jan "DracoBlue" Schütze (edited by Gabriel "Larcius" Cordes
{
    new length=strlen(string);
    if(length==0)
    {
        return false;
    }
    for (new i=0; i<length; i++)
    {
        if (!((string[i] <= '9' && string[i] >= '0') || (i==0 && (string[i]=='-' || string[i]=='+'))))
        {
            return false;
        }
    }

    return true;
}
*/

stock isNumeric(const string[])
{
  new length=strlen(string);
  if (length==0) return false;
  for (new i = 0; i < length; i++)
    {
      if (
            (string[i] > '9' || string[i] < '0' && string[i]!='-' && string[i]!='+') // Not a number,'+' or '-'
             || (string[i]=='-' && i!=0)                                             // A '-' but not at first.
             || (string[i]=='+' && i!=0)                                             // A '+' but not at first.
         ) return false;
    }
  if (length==1 && (string[0]=='-' || string[0]=='+')) return false;
  return true;
}

stock IsNumeric(const stringl[])
{
	for(new i=0,j=strlen(stringl);i<j;i++)
	{
		if(stringl[i] > '9' || stringl[i] < '0')return 0;
	}
	return 1;
}

stock ForbiddenGun(playerid)
{
    new weap = GetPlayerWeapon(playerid);
    if (weap == 18 || weap == 36 || weap == 37 || weap == 38 || weap == 44 || weap == 45)
    {
        return 1;
    }
    return 0;
}

stock LoadPlayerWeaponArray(playerid) {
    new
        weapon,
        muni,
        weapondata[47];
    for (new j = 0; j < 13; j++) {
        GetPlayerWeaponData(playerid, j, weapon, muni );
        weapondata[ weapon ] = muni;
    }
    return weapondata;
}

stock HasIllegalWeapon(playerid) {
    new
        forbiddenweapons[] = { 3,4,7,9,10,11,12,13,14,15,16,17,18,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45 },
        weapondata[47];
    weapondata = LoadPlayerWeaponArray(playerid);
    for(new i = 0 ; i < sizeof(forbiddenweapons) ; i++) {
        if( weapondata[ forbiddenweapons[i] ] > 0 ) {
            return 1;
        }
    }
    return 0;
}
forward DetectHacks();
public DetectHacks() {
    new
        now = gettime(),
        speed,
        Float:vx,
        Float:vy,
        Float:vz,
        query[256],
        querystring[256],
        string[128];
    for(new i ; i < MAX_PLAYERS ; i++ ) {
        if( IsPlayerConnected(i) && Spieler[i][pAdmin] < 5) {
            //#if defined USE_NPCS
            if( IsPlayerNPC(i) ) continue;
            //#endif
            // Jetpack
            if( GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK ) {
                format(string, sizeof(string), "[BANNED] Spieler %s wurde vom Server-System gebannt, Grund: Jetpack", GetName(i));
                SendAdminMessage(COLOR_RED, string);
                Spieler[i][pBanned] = 1;

                format(querystring,sizeof(querystring),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",GetName(i),("Server-System"),("Gebannt vom Server-System wegen Jetpack Hack!") );
                mysql_oquery(querystring,THREAD_AKTENEINTRAG,INVALID_PLAYER_ID,gWebSQL);

                format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' , `Banned` = 1 WHERE `Name` = '%s'",
                    ("Server-System"),("Jetpack"),GetName(i));
                mysql_oquery(query,THREAD_JETPACK_HACK, INVALID_PLAYER_ID,gSQL);

                KickDelay(i);
                Ban(i);

                continue;
            }
            // Waffen
            if( Spieler[i][pLevel] < 3 ) {
                if( HasIllegalWeapon(i) ) {
                    printf("Spieler %s ist unter Level 3 und besitzt Illegale Waffen",GetName(i) );
                    format(string, sizeof(string), "[BANNED] Spieler %s wurde vom Server-System gebannt, Grund: Waffenhack", GetName(i));
                    SendAdminMessage(COLOR_RED, string);
                    Spieler[i][pBanned] = 1;

                    format(querystring,sizeof(querystring),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",GetName(i),("Server-System"),("Gebannt vom Server-System wegen Waffenhack!") );
                    mysql_oquery(querystring,THREAD_AKTENEINTRAG,INVALID_PLAYER_ID,gWebSQL);

                    format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' , `Banned` = 1 WHERE `Name` = '%s'",
                        ("Server-System"),("Waffenhack"),GetName(i));
                    mysql_oquery(query,THREAD_WEAPON_HACK, INVALID_PLAYER_ID,gSQL);

                    KickDelay(i);
                    Ban(i);
                    continue;
                }
            }
            if( Spieler[i][pLevel] < 5 ) {
                if( Spieler[i][pCash] >= 2500000 || Spieler[i][pBank] >= 3500000) {
                    format(string, sizeof(string), "[BANNED] Spieler %s wurde vom Server-System gebannt, Grund: Verdacht auf Geldwäsche", GetName(i));
                    SendAdminMessage(COLOR_RED, string);
                    Spieler[i][pBanned] = 1;

                    format(querystring,sizeof(querystring),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",GetName(i),("Server-System"),("Gebannt vom Server-System wegen Verdacht auf Geldhack!") );
                    mysql_oquery(querystring,THREAD_AKTENEINTRAG,INVALID_PLAYER_ID,gWebSQL);

                    format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' , `Banned` = 1 WHERE `Name` = '%s'",
                        ("Server-System"),("Verdacht auf Geldhack"),GetName(i));
                    mysql_oquery(query,THREAD_MONEY_HACK, INVALID_PLAYER_ID,gSQL);

                    KickDelay(i);
                    continue;
                }
            }
            if( Spieler[i][pLevel] < 15 ) {
                if( Spieler[i][pCash] >= 100000000 || Spieler[i][pBank] >= 100000000) {
                    format(string, sizeof(string), "[BANNED] Spieler %s wurde vom Server-System gebannt, Grund: Verdacht auf Geldwäsche", GetName(i));
                    SendAdminMessage(COLOR_RED, string);
                    Spieler[i][pBanned] = 1;

                    format(querystring,sizeof(querystring),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",GetName(i),("Server-System"),("Gebannt vom Server-System wegen Verdacht auf Geldhack!") );
                    mysql_oquery(querystring,THREAD_AKTENEINTRAG,INVALID_PLAYER_ID,gWebSQL);

                    format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' , `Banned` = 1 WHERE `Name` = '%s'",
                        ("Server-System"),("Verdacht auf Geldhack"),GetName(i));
                    mysql_oquery(query,THREAD_MONEY_HACK, INVALID_PLAYER_ID,gSQL);

                    KickDelay(i);
                    continue;
                }
            }
            /*
            else {
                if( HasIllegalWeapon(i) ) {
                    format(string, sizeof(string), "[BANNED] Spieler %s wurde vom Server-System gebannt, Grund: Waffenhack", GetName(i));
                    SendAdminMessage(COLOR_RED, string);
                    Spieler[i][pBanned] = 1;

                    format(querystring,sizeof(querystring),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",GetName(i),("Server-System"),("Waffen Hack per Script gefunden") );
                    mysql_oquery(querystring,THREAD_AKTENEINTRAG,INVALID_PLAYER_ID,gWebSQL);

                    format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' , `Banned` = 1 WHERE `Name` = '%s'",
                        ("Server-System"),("Waffenhack"),GetName(i));
                    mysql_oquery(query,THREAD_WEAPON_HACK, INVALID_PLAYER_ID,gSQL);

                    KickDelay(i);
                    continue;
                }
            }
            */
            // Flyhack
            if( !IsPlayerInAnyVehicle(i) && ( Spieler[i][punixFlyhack] < now ) && (( Spieler[i][unixUpdate] + 5 ) > now ) ) {
                GetPlayerVelocity(i,vx,vy,vz);
                speed = floatround( floatpower( vx * vx + vy * vy + vz * vz , 0.5 )  * 100.0 * 2.0);
                if (speed >= 130) {
                    if (Spieler[i][pAntiSpawnKillOn])
                        return SpawnPlayerEx(i);

                    if(Spieler[i][pAdmin] >= 2) return 1;
                    format(string,sizeof(string),"[ACHTUNG] Spieler %s FlyHack Warnung: %d km/h",GetName(i),speed);
                    SendAdminMessage(COLOR_LIGHTRED2,string);
                    Spieler[i][punixFlyhack] = now + 8;
                }
            }
        }
    }
    return 1;
}



public split(const strsrc[], strdest[][], delimiter)
{
    new i, li;
    new aNum;
    new len;
    while(i <= strlen(strsrc)){
        if(strsrc[i]==delimiter || i==strlen(strsrc)){
            len = strmid(strdest[aNum], strsrc, li, i, 128);
            strdest[aNum][len] = 0;
            li = i+1;
            aNum++;
        }
        i++;
    }
    return 1;
}

stock IsPlayerAFK(playerid){
    new messages = NetStats_MessagesRecvPerSecond(playerid);
    if(messages < 3)return 1;
    return 0;
}

//Bei neuer Hitbox anpassen
//public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
public OnPlayerDamage(&playerid, &Float:amount, &issuerid, &weapon, &bodypart)
{
    if(IsPlayerAFK(playerid) || Spieler[playerid][pAntiSpawnKillOn] == true || IsAFK[playerid] == 1 || Spieler[playerid][pAdminDienst] == 1 || Spieler[playerid][pTot] != 0 || Spieler[playerid][pLevel] <= 2 || Spieler[playerid][pJailed] != 0) return 0;
    //if(IsPlayerAFK(playerid) || IsAFK[playerid] == 1 || Spieler[playerid][pTot] != 0 || Spieler[playerid][pLevel] <= 2 || Spieler[playerid][pJailed] != 0) return 0;
	//if(Spieler[playerid][pAdminDienst] == 1) return SendClientMessage(issuerid, COLOR_RED, "Der Spieler ist im Admin Dienst!!!");
	damagesperre[playerid] = 5;
    g_aiLastDamagedByPlayer[playerid] = issuerid;
    if( issuerid != INVALID_PLAYER_ID) 
    {
        SetPVarString(playerid, "DAMAGE.NAME", GetName(issuerid));
        SetPVarFloat(playerid, "DAMAGE.AMOUNT", amount);
        SetPVarInt(playerid, "DAMAGE.WEAPON", weapon);
        SetPVarInt(playerid, "DAMAGE.TIME", gettime());
        PlayerPlaySound(issuerid,17802,0.0,0.0,0.0);
        
        foreach(new spec : Player) {
            if (IsPlayerConnected(spec) && gPlayerLogged[spec]) {
                if (iSpectatorID[spec] == issuerid) {
                    PlayerPlaySound(spec,17802,0.0,0.0,0.0);
                }
            }
        }

        // Headshot Script von dir, soll NUR für Hitmans eingestellt werden und nur bei der Zielperson funktionieren.
        if (Spieler[issuerid][pFraktion] == 14 && !Spieler[playerid][pAdminDienst]) {
            if (weapon == 34) {
                if (bodypart == 9) {
                    new auftraggeber = Spieler[issuerid][pHitmenAuftragID];
                    if ((auftraggeber != INVALID_PLAYER_ID && IsPlayerConnected(auftraggeber)) || auftraggeber == 199) {
                        if (Spieler[auftraggeber][pKopfgeldID] == playerid) {
                            amount = 200;
                            GameTextForPlayer(playerid, "~r~HEADSHOT", 2000, 1);
                        }
                    }
                }
            }
        }
    }
    return 1;
}


//Bei entfernen der Hitbox wieder rein machen!!!
/*
public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
    if(1 <= Spieler[playerid][pJailed] <= 3)
    {
        FreezePlayer(playerid);
        KillTimer(knastunfreezetimer[playerid]);
        SendClientMessage(playerid, COLOR_ORANGE, "Du wurdest für eine Minute gefreezed wegen Knast-DM.");
        knastunfreezetimer[playerid] = SetTimerEx("KnastUnfreeze", 60000*1, 0, "i", playerid);
    }

    if(playerid != INVALID_PLAYER_ID){
        if(Spieler[damagedid][DmgTog] == 1){
            PlayerPlaySound(damagedid, 1135, 0.0, 0.0, 0.0);
        }
    }

    return 1;
}
*/
//für neue Hitbox reinmachen. Ersatz für OnPlayerGiveDamage
forward OnPlayerDamageDone(playerid, Float:amount, issuerid, weapon, bodypart);

public OnPlayerDamageDone(playerid, Float:amount, issuerid, weapon, bodypart){
    if(issuerid != INVALID_PLAYER_ID){
        if(Spieler[playerid][DmgTog] == 1){
            PlayerPlaySound(playerid, 1135, 0.0, 0.0, 0.0);
        }
    }
    return 1;
}

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
    if (Spieler[playerid][pAdmin] < 3 || !Spieler[playerid][pAdminDienst]) return 1;
    Streamer_UpdateEx(playerid, fX, fY, fZ, .compensatedtime = 1500);
    if (IsPlayerInAnyVehicle(playerid)) {
        new vehicleid = GetPlayerVehicleID(playerid);
        new seat = GetPlayerVehicleSeat(playerid);
        SetVehiclePos(vehicleid, fX, fY, fZ + 1.0);
        PutPlayerInVehicle(playerid, vehicleid, seat);
    } else {
        SetPlayerPos(playerid, fX, fY, fZ + 1.0);
    }	
    return 1;
}

forward MySQL_Connection_Check();
public MySQL_Connection_Check() {
    if( MySQLConnected == 0 ) {
        print("<-| [MYSQL] Es konnte keine Verbindung zur Datenbank hergestellt werden!");
        SendRconCommand("exit");
    }

    #if !defined TEST
        if( MySQLConnected == 1 ) {
            print("<-| [MYSQL] WebSQL Es konnte keine Verbindung zur Datenbank hergestellt werden!");
            SendRconCommand("exit");
        }
    #endif
    
    return 1;
}
stock Connect_To_Database()
{
    //#if defined TEST
      //  mysql_log(LOG_ALL, LOG_TYPE_HTML);
    //#endif

    gSQL = mysql_connect(SQL_HOST, SQL_USER, SQL_DATA, SQL_PASS);
    mysql_oquery("SELECT 1", THREAD_CONNECTION_CHECK1, INVALID_PLAYER_ID ,gSQL);
    tMySQL = SetTimer("MySQL_Connection_Check", 5003, false);
}

stock mysql_CheckAccount(playerid)
{
    new Query[128],pName[MAX_PLAYER_NAME];
    GetPlayerName(playerid, pName, MAX_PLAYER_NAME);
    mysql_real_escape_string(pName, pName,gSQL,sizeof(pName));
    format(Query, sizeof(Query), "SELECT * FROM `accounts` WHERE `Name` = '%s'", pName);
    mysql_pquery(Query,THREAD_CHECKACCOUNT,playerid,gSQL,MySQLThreadOwner);
    // -> THREADED
    return 1;
}

stock CreateAccount(playerid, pass[])
{
    new rndstring[33],query[360],pName[MAX_PLAYER_NAME];
    GetPlayerName(playerid, pName, MAX_PLAYER_NAME);
    mysql_real_escape_string(pName,pName,gSQL,sizeof(pName));
    mysql_real_escape_string(pass,query,gSQL,sizeof(query));
    randomString( rndstring );
    format(query, sizeof(query), "INSERT INTO `accounts` (`Name`, `Passwort`,`SaltKey`) VALUES ('%s', SHA2(CONCAT('%s','%s'),256),'%s')", pName, query,rndstring,rndstring);
    mysql_pquery(query,THREAD_CREATEACCOUNT,playerid,gSQL,MySQLThreadOwner);
    //printf(query);
    return true;
}
/*

stock mysql_ReturnPasswort(pName[])
{
    new query[130], Get[130];
    mysql_real_escape_string(pName, pName);
    format(query, sizeof(query), "SELECT `passwort` FROM `accounts` WHERE `Name` = '%s'", pName);
    mysql_oquery(query);
    mysql_store_result();
    mysql_fetch_row(Get);
    mysql_free_result();
    return Get;
}
stock mysql_SetInt(Table[], Field[], To, Where[], Where2[])
{
    new query[128];
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Where2, Where2);
    format(query, 128, "UPDATE `%s` SET `%s` = %d WHERE `%s` = '%s'", Table, Field, To, Where, Where2);
    mysql_oquery(query);
    return true;
}
stock mysql_SetString(Table[], Field[], To[], Where[], Where2[])
{
    new query[128];
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(To, To);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Where2, Where2);
    format(query, 128, "UPDATE `%s` SET `%s` = '%s' WHERE `%s` = '%s'", Table, Field, To, Where, Where2);
    mysql_oquery(query);
    return true;
}
stock mysql_SetFloat(Table[], Field[], Float:To, Where[], Where2[])
{
    new query[128];
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Where2, Where2);
    format(query, 128, "UPDATE `%s` SET `%s` = %.2f WHERE `%s` = '%s'", Table, Field, To, Where, Where2);
    mysql_oquery(query);
    return true;
}

stock mysql_GetString(Table[], Field[], Where[], Is[])
{
    new query[128], Get[128];
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Is, Is);
    format(query, 128, "SELECT `%s` FROM `%s` WHERE `%s` = '%s'", Field, Table, Where, Is);
    mysql_oquery(query);
    mysql_store_result();
    mysql_fetch_row(Get);
    mysql_free_result();
    return Get;
}

stock mysql_GetInt(Table[], Field[], Where[], Is[])
{
    new query[128];
    mysql_real_escape_string(Table, Table);
    mysql_real_escape_string(Field, Field);
    mysql_real_escape_string(Where, Where);
    mysql_real_escape_string(Is, Is);
    format(query, 128, "SELECT `%s` FROM `%s` WHERE `%s` = '%s'", Field, Table, Where, Is);
    mysql_oquery(query);
    mysql_store_result();
    new sqlint = mysql_fetch_int();
    mysql_free_result();
    return sqlint;
}
*/

stock SpawnPlayerEx(playerid)
{
    SetPlayerPos(playerid, 0.0, 0.0, 0.0);
    return SpawnPlayer(playerid);
}

stock UpdateInfos()
{
    new string[160];
    format(string, sizeof(string), /*COLOR_HEX_BLUE"Lagerbestand\n"COLOR_HEX_WHITE"%d Pakete\nTippe "*/COLOR_HEX_BLUE"/Samenpaketeinladen"COLOR_HEX_WHITE" um Pakete zu entnehmen\n"COLOR_HEX_BLUE"500$ pro Paket");
    UpdateDynamic3DTextLabelText(lager3d, COLOR_WHITE, string);
    return 1;
}

public SaveInfos()
{
    new
        query[128];
    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", lagerbestand , ("Lager") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Staat] , ("StaatsKasse") ); //id 1,2
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Samd] , ("SAMDKasse") ); //Id 3
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Sana] , ("SANAKasse") ); //id 4
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Oamt] , ("OAMTKasse") ); //id 5
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Grove] , ("GSKasse") ); //id 6
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Ballas] , ("BALLASKasse") ); //id 7
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Fahrschule] , ("SchulKasse") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Yakuza] , ("Yakuza") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Aztecas] , ("Aztecas") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[LCN] , ("Cali Kartell") );//LCN
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Vagos] , ("Vagos") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Lottostand , ("Lotto") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Hitman] , ("Hitman") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[BBikerZ] , ("BBikerZ") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[Wheelmenk] , ("Wheelmenk") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[TerrorK] , ("TerrorK") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[OutlawzK] , ("OutlawzK") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Kasse[ndgradethaK] , ("ndgradethaK") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Samen1Bestand , ("Samen1") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);
    
    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Samen2Bestand , ("Samen2") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);
    
    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Samen3Bestand , ("Samen3") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);
    
    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Samen4Bestand , ("Samen4") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);
    
    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Samen5Bestand , ("Samen5") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Schwarzmarkt_Waffenteile , ("SW_WT") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Schwarzmarkt_Waffenteile_Preis , ("SW_WT_PREIS") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Schwarzmarkt_Drogen , ("SW_DRG") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Schwarzmarkt_Drogen_Preis , ("SW_DRG_PREIS") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Schwarzmarkt_Spice , ("SW_SPC") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Schwarzmarkt_Spice_Preis , ("SW_SPC_PREIS") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Schwarzmarkt_Wantedcodes , ("SW_WCD") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);

    format(query,sizeof(query),"UPDATE `infotab` SET `Bestand` = %d WHERE `Info` = '%s'", Schwarzmarkt_Wantedcodes_Preis , ("SW_WCD_PREIS") );
    mysql_oquery(query,THREAD_SAVEINFOS,INVALID_PLAYER_ID,gSQL);
    return 1;
}

public LoadInfos()
{
    mysql_oquery("SELECT * FROM `infotab` ",THREAD_LOADINFOS,INVALID_PLAYER_ID,gSQL);
/*
    lagerbestand = mysql_GetInt("infotab", "Bestand", "Info", "Lager");
    Kasse[Staat] = mysql_GetInt("infotab", "Bestand", "Info", "StaatsKasse");
    Kasse[Samd] = mysql_GetInt("infotab", "Bestand", "Info", "SAMDKasse");
    Kasse[Sana] = mysql_GetInt("infotab", "Bestand", "Info", "SANAKasse");
    Kasse[Oamt] = mysql_GetInt("infotab", "Bestand", "Info", "OAMTKasse");
    Kasse[Grove] = mysql_GetInt("infotab", "Bestand", "Info", "GSKasse");
    Kasse[Ballas] = mysql_GetInt("infotab", "Bestand", "Info", "BALLASKasse");
    Kasse[Fahrschule] = mysql_GetInt("infotab", "Bestand", "Info", "SchulKasse");
    Kasse[Yakuza] = mysql_GetInt("infotab", "Bestand", "Info", "Yakuza");
    Kasse[Aztecas] = mysql_GetInt("infotab", "Bestand", "Info", "Aztecas");
    Kasse[LCN] = mysql_GetInt("infotab", "Bestand", "Info", "LCN");
    Kasse[LCN] = mysql_GetInt("infotab", "Bestand", "Info", "Vagos");
    Lottostand = mysql_GetInt("infotab", "Bestand", "Info", "Lotto");
    Kasse[Hitman] = mysql_GetInt("infotab", "Bestand", "Info", "Hitman");
    Kasse[BBikerZ] = mysql_GetInt("infotab", "Bestand", "Info", "BBikerZ");
    Kasse[Wheelmenk] = mysql_GetInt("infotab", "Bestand", "Info", "Wheelmenk");
*/
}

forward TankeSave();
public TankeSave()
{
    new
        query[600];
    //new tanke[10];
    for(new i=0; i<iTanke;i++)
    {
        //format(tanke,sizeof(tanke),"%d",i);
        format(query,sizeof(query),"UPDATE `tanken` SET \
            `EnterX` = %.2f, \
            `EnterY` = %.2f, \
            `EnterZ` = %.2f, \
            `Besitzer` = '%s', \
            `Name` = '%s', \
            `FillCost` = %d, \
            `Kasse` = %d, \
            `Benzin` = %d, \
            `MaxBenzin` = %d, \
            `Preis` = %d, \
            `FillCostBenzin` = %d, \
            `FillCostSuper` = %d, \
            `FillCostDiesel` = %d, \
            `videoueberwachung` = %d, \
            `auto_notruf` = %d, \
            `erpresserfraktion` = %d, \
            `erpresserforderung` = %d, \
            `erpresserstate` = %d \
            WHERE `ID` = %d",
                Tanke[i][EnterX],
                Tanke[i][EnterY],
                Tanke[i][EnterZ],
                Tanke[i][tBesitzer],
                Tanke[i][tName],
                Tanke[i][tFillCost],
                Tanke[i][tKasse],
                Tanke[i][tBenzin],
                Tanke[i][tMaxBenzin],
                Tanke[i][tPreis],
                Tanke[i][taiFillCost][0],
                Tanke[i][taiFillCost][1],
                Tanke[i][taiFillCost][2],
                Tanke[i][tVideoueberwachung],
                Tanke[i][tAutomatischerNotruf],
                Tanke[i][tErpresserFraktion],
                Tanke[i][tErpresserForderung],
                Tanke[i][tErpresserState],
                Tanke[i][tID]
        );
        mysql_oquery(query,THREAD_TANKESAVE,i,gSQL);
        /*
        mysql_SetFloat("tanken", "EnterX", Tanke[i][EnterX], "ID", tanke);
        mysql_SetFloat("tanken", "EnterY", Tanke[i][EnterY], "ID", tanke);
        mysql_SetFloat("tanken", "EnterZ", Tanke[i][EnterZ], "ID", tanke);
        mysql_SetString("tanken", "Besitzer", Tanke[i][tBesitzer], "ID", tanke);
        mysql_SetString("tanken", "Name", Tanke[i][tName], "ID", tanke);
        mysql_SetInt("tanken", "FillCost", Tanke[i][tFillCost], "ID", tanke);
        mysql_SetInt("tanken", "Kasse", Tanke[i][tKasse], "ID", tanke);
        mysql_SetInt("tanken", "Benzin", Tanke[i][tBenzin], "ID", tanke);
        mysql_SetInt("tanken", "MaxBenzin", Tanke[i][tMaxBenzin], "ID", tanke);
        mysql_SetInt("tanken", "Preis", Tanke[i][tPreis], "ID", tanke);
        */
    }
}

forward HouseSave();
public HouseSave()
{
    new query[500];
    //new house[10];
    for(new i=0;i<iHaus;i++)
    {
        //format(house,sizeof(house),"%d",i);
        if(strcmp("geloescht",Haus[i][hName],true)!=0)
        {
            format(query,sizeof(query),"UPDATE `houses` SET \
                `EnterX` = %.2f, \
                `EnterY` = %.2f, \
                `EnterZ` = %.2f, \
                `Besitzer` = '%s', \
                `Name` = '%s', \
                `Preis` = %d, \
                `Mieten` = %d, \
                `Lock` = %d, \
                `MietPreis` = %d, \
                `SellX` = %.2f, \
                `SellY` = %.2f, \
                `SellZ` = %.2f, \
                `SellRot` = %.2f, \
                `HouseInteriorID` = %d, \
                `MieterMax` = %d,\
                `Kasse` = %d \
                WHERE `ID` = %d",
                    Haus[i][EnterX],
                    Haus[i][EnterY],
                    Haus[i][EnterZ],
                    Haus[i][hBesitzer],
                    Haus[i][hName],
                    Haus[i][hPreis],
                    Haus[i][hMieten],
                    Haus[i][hLock],
                    Haus[i][hMietPreis],
                    Haus[i][SellX],
                    Haus[i][SellY],
                    Haus[i][SellZ],
                    Haus[i][SellRot],
                    Haus[i][HouseInteriorID],
                    Haus[i][hMieterMax],
                    Haus[i][hKasse],
                    Haus[i][hID]
            );
            mysql_oquery(query,THREAD_HOUSESAVE,i,gSQL);
            /*
            mysql_SetFloat("houses", "EnterX", Haus[i][EnterX], "ID", house);
            mysql_SetFloat("houses", "EnterY", Haus[i][EnterY], "ID", house);
            mysql_SetFloat("houses", "EnterZ", Haus[i][EnterZ], "ID", house);
            mysql_SetFloat("houses", "ExitX", Haus[i][ExitX], "ID", house);
            mysql_SetFloat("houses", "ExitY", Haus[i][ExitY], "ID", house);
            mysql_SetFloat("houses", "ExitZ", Haus[i][ExitZ], "ID", house);
            mysql_SetInt("houses", "Interior", Haus[i][hInterior], "ID", house);
            mysql_SetString("houses", "Besitzer", Haus[i][hBesitzer], "ID", house);
            mysql_SetString("houses", "Name", Haus[i][hName], "ID", house);
            mysql_SetInt("houses", "Preis", Haus[i][hPreis], "ID", house);
            mysql_SetInt("houses", "Mieten", Haus[i][hMieten], "ID", house);
            mysql_SetInt("houses", "Lock", Haus[i][hLock], "ID", house);
            mysql_SetInt("houses", "MietPreis", Haus[i][hMietPreis], "ID", house);
            */
        }
    }
}

forward AngelSave();
public AngelSave()
{
    new query[180];
    //new angel[10];
    for(new i=0;i<iAngel;i++)
    {
        //format(angel,sizeof(angel),"%d",i);
        format(query,sizeof(query),"UPDATE `angel` SET \
            `PosX` = %.2f, \
            `PosY` = %.2f, \
            `PosZ` = %.2f, \
            `Fische` = %d, \
            `FacingAngle` = %.2f \
            WHERE `ID` = %d",
                Angel[i][PosX],
                Angel[i][PosY],
                Angel[i][PosZ],
                Angel[i][Fische],
                Angel[i][FacingAngle],
                Angel[i][aID]
        );
        mysql_oquery(query,THREAD_ANGELSAVE,i,gSQL);
        /*
        mysql_SetFloat("angel", "PosX", Angel[i][PosX], "ID", angel);
        mysql_SetFloat("angel", "PosY", Angel[i][PosY], "ID", angel);
        mysql_SetFloat("angel", "PosZ", Angel[i][PosZ], "ID", angel);
        mysql_SetInt("angel", "Fische", Angel[i][Fische], "ID", angel);
        mysql_SetFloat("angel", "FacingAngle", Angel[i][FacingAngle], "ID", angel);
        */
    }
}

forward StaticBizSave();
public StaticBizSave()
{
    new query[100];
    for(new i=0;i<MAX_STATIC_BIZES;i++)
    {
        format(query,sizeof(query),"UPDATE `staticbiz` SET \
            `waren` = %d \
            WHERE `sbizid` = %d",
                StaticBiz[i][SBD_iWaren],
                StaticBiz[i][SBD_iID]
        );
        mysql_oquery(query,THREAD_STATICBIZSAVE,i,gSQL);
    }
    return 1;
}
forward BizSave();
public BizSave()
{
    new query[640];
    //new biz[10];
    for(new i=1;i<MAX_BIZES;i++)
    {
        // format(biz,sizeof(biz),"%d",i);
        format(query,sizeof(query),"UPDATE `bizes` SET \
            `EnterX` = %.2f,\
            `EnterY` = %.2f,\
            `EnterZ` = %.2f, \
            `ExitX` = %.2f,\
            `ExitY` = %.2f,\
            `ExitZ` = %.2f,\
            `Besitzer` = '%s',\
            `Name` = '%s',\
            `Preis` = %d,\
            `Lock` = %d,\
            `Interior` = %d,\
            `Kasse` = %d,\
            `Eintritt` = %d,\
            `Waren` = %d,\
            `MaxWaren` = %d,\
            `WarenPreis` = %d,\
            `LadenAuf` = %d,\
            `LadenZu` = %d,\
            `erpresserfraktion` = %d,\
            `erpresserforderung` = %d,\
            `erpresserstate` = %d \
            WHERE `ID` = %d",
                Biz[i][EnterX],
                Biz[i][EnterY],
                Biz[i][EnterZ],
                Biz[i][ExitX],
                Biz[i][ExitY],
                Biz[i][ExitZ],
                Biz[i][bBesitzer],
                Biz[i][bName],
                Biz[i][bPreis],
                Biz[i][bLock],
                Biz[i][bInterior],
                Biz[i][bKasse],
                Biz[i][bEintritt],
                Biz[i][bWaren],
                Biz[i][bMaxWaren],
                Biz[i][bWarenPreis],
                Biz[i][bLadenAuf],
                Biz[i][bLadenZu],
                Biz[i][bErpresserFraktion],
                Biz[i][bErpresserForderung],
                Biz[i][bErpresserState],
                Biz[i][bID]
        );
        mysql_oquery(query,THREAD_BIZSAVE,i,gSQL);
        /*
        mysql_SetFloat("bizes", "EnterX", Biz[i][EnterX], "ID", biz);
        mysql_SetFloat("bizes", "EnterY", Biz[i][EnterY], "ID", biz);
        mysql_SetFloat("bizes", "EnterZ", Biz[i][EnterZ], "ID", biz);
        mysql_SetFloat("bizes", "ExitX", Biz[i][ExitX], "ID", biz);
        mysql_SetFloat("bizes", "ExitY", Biz[i][ExitY], "ID", biz);
        mysql_SetFloat("bizes", "ExitZ", Biz[i][ExitZ], "ID", biz);
        mysql_SetString("bizes", "Besitzer", Biz[i][bBesitzer], "ID", biz);
        mysql_SetString("bizes", "Name", Biz[i][bName], "ID", biz);
        mysql_SetInt("bizes", "Preis", Biz[i][bPreis], "ID", biz);
        mysql_SetInt("bizes", "Lock", Biz[i][bLock], "ID", biz);
        mysql_SetInt("bizes", "Interior", Biz[i][bInterior], "ID", biz);
        mysql_SetInt("bizes", "Kasse", Biz[i][bKasse], "ID", biz);
        mysql_SetInt("bizes", "Eintritt", Biz[i][bEintritt], "ID", biz);
        mysql_SetInt("bizes", "Waren", Biz[i][bWaren], "ID", biz);
        mysql_SetInt("bizes", "MaxWaren", Biz[i][bMaxWaren], "ID", biz);
        mysql_SetInt("bizes", "WarenPreis", Biz[i][bWarenPreis], "ID", biz);
        */
    }
}
stock GetTankIndexByID( id ) {
    for(new i ; i < iTanke ; i++) {
        if( Tanke[i][tID] == id ) return i;
    }
    return 999;
}
forward TankeLoadID(tankeid);
public TankeLoadID(tankeid) {
    if( iTanke >= MAX_TANKEN ) {
        return 0;
    }
    new
        tStr[256];
    format(tStr,sizeof(tStr),"SELECT * FROM `tanken` WHERE `ID` = %d",tankeid);
    mysql_oquery(tStr,THREAD_TANKELOADID,tankeid,gSQL);
    // -> THREADED
    return 1;
}

forward TankeLoad();
public TankeLoad()
{
    mysql_oquery("SELECT * FROM `tanken` LIMIT "#MAX_TANKEN";" , THREAD_TANKELOAD , INVALID_PLAYER_ID,gSQL);
    // -> THREADED
    /*
    {
        format(tanke, sizeof(tanke), "%d", i);
        Tanke[i][tID] = mysql_GetInt("tanken", "ID", "ID", tanke);
        Tanke[i][EnterX] = mysql_GetFloat("tanken", "EnterX", "ID", tanke);
        Tanke[i][EnterY] = mysql_GetFloat("tanken", "EnterY", "ID", tanke);
        Tanke[i][EnterZ] = mysql_GetFloat("tanken", "EnterZ", "ID", tanke);
        format(Tanke[i][tBesitzer], MAX_PLAYER_NAME, "%s", mysql_GetString("tanken", "Besitzer", "ID", tanke));
        format(Tanke[i][tName], 32, "%s", mysql_GetString("tanken", "Name", "ID", tanke));
        Tanke[i][tFillCost] = mysql_GetInt("tanken", "FillCost", "ID", tanke);
        Tanke[i][tKasse] = mysql_GetInt("tanken", "Kasse", "ID", tanke);
        Tanke[i][tBenzin] = mysql_GetInt("tanken", "Benzin", "ID", tanke);
        Tanke[i][tMaxBenzin] = mysql_GetInt("tanken", "MaxBenzin", "ID", tanke);
        Tanke[i][tPreis] = mysql_GetInt("tanken", "Preis", "ID", tanke);
    }
    */
    return 1;
}


forward StaticBizLoad();
public StaticBizLoad()
{
    mysql_oquery("SELECT * FROM `staticbiz`",THREAD_STATICBIZLOAD,INVALID_PLAYER_ID,gSQL);
    return 1;
}
forward BizLoad();
public BizLoad()
{
    mysql_oquery("SELECT * FROM `bizes` WHERE `ID` > 0 AND `ID` <= "#MAX_BIZES"",THREAD_BIZLOAD,INVALID_PLAYER_ID,gSQL);
    return 1;
}

forward AngelLoadID(angelid);
public AngelLoadID(angelid)
{
    if( iAngel >= MAX_APLATZ) {
        return 0;
    }
    new
        aStr[256];
    format(aStr,sizeof(aStr),"SELECT * FROM `angel` WHERE `ID` = %d",angelid);
    mysql_oquery(aStr,THREAD_ANGELLOADID,angelid,gSQL);
    // -> THREADED
    return 1;
}
forward AngelLoad();
public AngelLoad()
{
    mysql_oquery("SELECT * FROM `angel` LIMIT "#MAX_APLATZ";", THREAD_ANGELLOAD, INVALID_PLAYER_ID , gSQL);
    // -> THREADED
    return 1;
}

stock GetHotelIDByIndex( index ) {
    return Hotel[index][hID];
}
stock GetHouseIndexByID( id ) {
    for(new i = 0; i < iHaus ; i++) {
        if( Haus[i][hID] == id ) return i;
    }
    return 999;
}

stock GetHouseInteriorIndexByID( houseinteriorid ) {
    //printf("GetHouseInteriorIndexByID( %d ) Max: %d ", houseinteriorid,g_iHouseInteriors);
    for(new i ; i < g_iHouseInteriors ; i++) {
        if( g_HouseInterior[i][HI_iID] == houseinteriorid ) return i;
    }
    //printf("@@@ Error GetHouseInteriorIndexByID( %d )",houseinteriorid);
    return 999;
}

stock GetHouseIDByIndex( index ) {
    return Haus[index][hID];
}

stock GetHotelIndexByID( id ) {
    for(new i ; i < iHotel ; i++) {
        if( Hotel[i][hID] == id ) return i;
    }
    return 999;
}


stock GetBizIndexByID( id ) {
    for(new i = 1; i < sizeof(Biz) ; i++) {
        if( Biz[i][bID] == id ) return i;
    }
    return 999;
}

forward HouseLoadID(houseid);
public HouseLoadID(houseid) {
    // printf("HouseLoadID(%d) %d %d",houseid,iHaus,MAX_HOUSES);
    if( iHaus >= MAX_HOUSES) {
        return 0;
    }
    new
        hStr[256];
    format(hStr,sizeof(hStr),"SELECT * FROM `houses` WHERE `ID` = %d",houseid);
    mysql_oquery(hStr,THREAD_HOUSELOADID,houseid,gSQL);
    // -> THREADED
    return 1;
}
forward HouseLoad();
public HouseLoad()
{
    mysql_oquery("SELECT * FROM `houses` LIMIT "#MAX_HOUSES";",THREAD_HOUSELOAD,INVALID_PLAYER_ID,gSQL);
    // -> THREADED
    return 1;
}

forward HouseInteriorLoad();
public HouseInteriorLoad()
{
    mysql_oquery("SELECT * FROM `houseinterior` LIMIT "#MAX_HOUSEINTERIORS";",THREAD_HOUSEINTERIORLOAD,INVALID_PLAYER_ID,gSQL);
    // -> THREADED
    return 1;
}

forward HotelLoadID(hotelid);
public HotelLoadID(hotelid) {
    // printf("HouseLoadID(%d) %d %d",houseid,iHaus,MAX_HOUSES);
    if( iHotel >= MAX_HOTELS) {
        return 0;
    }
    new
        hStr[256];
    format(hStr,sizeof(hStr),"SELECT * FROM `hotel` WHERE `ID` = %d",hotelid);
    mysql_oquery(hStr,THREAD_HOTELLOADID,hotelid,gSQL);
    // -> THREADED
    return 1;
}
forward HotelLoad();
public HotelLoad()
{
    mysql_oquery("SELECT * FROM `hotel` LIMIT "#MAX_HOTELS";",THREAD_HOTELLOAD,INVALID_PLAYER_ID,gSQL);
    // -> THREADED
    return 1;
}

forward HotelSave();
public HotelSave()
{
    new query[500];
    for(new i=0;i<iHotel;i++)
    {
        format(query,sizeof(query),"UPDATE `hotel` SET \
            `EnterX` = %.2f, \
            `EnterY` = %.2f, \
            `EnterZ` = %.2f, \
            `ExitX` = %.2f, \
            `ExitY` = %.2f, \
            `ExitZ` = %.2f, \
            `EnterInterior` = %d, \
            `ExitInterior` = %d, \
            `EnterVirtualWorld` = %d, \
            `Besitzer` = '%s', \
            `Name` = '%s', \
            `Lock` = %d, \
            `MietPreis` = %d \
            WHERE `ID` = %d",
                Hotel[i][EnterX],
                Hotel[i][EnterY],
                Hotel[i][EnterZ],
                Hotel[i][ExitX],
                Hotel[i][ExitY],
                Hotel[i][ExitZ],
                Hotel[i][hEnterInterior],
                Hotel[i][hExitInterior],
                Hotel[i][hEnterVirtualWorld],
                Hotel[i][hBesitzer],
                Hotel[i][hName],
                Hotel[i][hLock],
                Hotel[i][hMietPreis],
                Hotel[i][hID]
        );
        mysql_oquery(query,THREAD_HOUSESAVE,i,gSQL);
    }
}
forward DrogenEinfluss(playerid);
public DrogenEinfluss(playerid)
{
    if(IsPlayerConnected(playerid))
    {
        if(pDrogenEinfluss[playerid] == 1)
        {
            pDrogenEinfluss[playerid] = 0;
            KillTimer(DrogenTimer[playerid]);
            SendClientMessage(playerid, COLOR_WHITE, "Du stehst nun nicht mehr unter Drogeneinfluss.");
        }
    }
    return 1;
}
stock SetPlayerCash(playerid, money)
{
    ResetPlayerCash(playerid);
    GivePlayerCash(playerid, money);
}

stock IsACar(carid)
{
    if(carid == 400 || carid == 401 || carid == 402 || carid == 404 || carid == 405 || carid == 406
    || carid == 407 || carid == 408 || carid == 409 || carid == 410 || carid == 411 || carid == 412 || carid == 413
    || carid == 415 || carid == 416 || carid == 418 || carid == 419 || carid == 420 || carid == 421
    || carid == 422 || carid == 423 || carid == 424 || carid == 426 || carid == 427 || carid == 428 || carid == 429
    || carid == 431 || carid == 433 || carid == 434 || carid == 436 || carid == 437 || carid == 438
    || carid == 439 || carid == 440 || carid == 442 || carid == 445 || carid == 451 || carid == 458 || carid == 459
    || carid == 466 || carid == 467 || carid == 470 || carid == 474
    || carid == 475 || carid == 477 || carid == 478 || carid == 479 || carid == 480 || carid == 482 || carid == 483
    || carid == 489 || carid == 490 || carid == 491 || carid == 492 || carid == 494 || carid == 495 || carid == 496 || carid == 498
    || carid == 500 || carid == 502 || carid == 503 || carid == 504 || carid == 505 || carid == 506 || carid == 507 || carid == 508
    || carid == 516 || carid == 517 || carid == 518 || carid == 526
    || carid == 527 || carid == 528 || carid == 529 || carid == 531 || carid == 532 || carid == 533 || carid == 534
    || carid == 535 || carid == 536 || carid == 540 || carid == 541 || carid == 542 || carid == 543 || carid == 544
    || carid == 545 || carid == 546 || carid == 547 || carid == 549 || carid == 550 || carid == 551 || carid == 552
    || carid == 554 || carid == 555 || carid == 558 || carid == 559 || carid == 560 || carid == 561 || carid == 562
    || carid == 565 || carid == 566 || carid == 567 || carid == 568 || carid == 575 || carid == 576 || carid == 579
    || carid == 580 || carid == 582 || carid == 585 || carid == 587 || carid == 588 || carid == 589
    || carid == 596 || carid == 597 || carid == 598 || carid == 599 || carid == 600 || carid == 601 || carid == 602
    || carid == 603 || carid == 604 || carid == 605 || carid == 609)
    {
        return 1;
    }
    return 0;
}

stock IsAPlane(carid)
{
    if(carid == 592 || carid == 577 || carid == 511 || carid == 512 || carid == 593 || carid == 520
    || carid == 553 || carid == 476 || carid == 519 || carid == 460 || carid == 513 || carid == 548
    || carid == 425 || carid == 417 || carid == 487 || carid == 488 || carid == 497 || carid == 563
    || carid == 447 || carid == 469)
    {
        return 1;
    }
    return 0;
}

stock IsABoat(carid)
{
    if(carid == 472 || carid == 473 || carid == 493 || carid == 595 || carid == 484
    || carid == 430 || carid == 453 || carid == 452 || carid == 446 || carid == 454)
    {
        return 1;
    }
    return 0;
}

stock IsATruck(carid)
{
    if(carid == 435 || carid ==  450 || carid ==  584 || carid ==  591 || carid == 578 || carid == 403 || carid == 406 || carid == 414
    || carid == 432 || carid == 443 || carid == 444 || carid == 455 || carid == 456 || carid == 486 || carid == 499 || carid == 514 || carid == 515
    || carid == 524 || carid == 556 || carid == 557 || carid == 573 || carid == 578|| carid == 525)
    {
        return 1;
    }
    return 0;
}

stock IsABike(carid)
{
    if(carid == 581 || carid == 522 || carid == 521 || carid == 523 || carid == 586 || carid == 448 || carid == 462 || carid == 461 || carid == 463 || carid == 468 || carid == 471) return 1;
    return 0;
}

stock IsAMBike(carid)
{
    if(carid == 481 || carid == 509 || carid == 510) return 1;
    return 0;
}

stock IsVehicleOccupied(vehicleid) // Returns 1 if there is anyone in the vehicle
{
    for(new i = 0 ; i < MAX_PLAYERS ; i++)
    {
        if(IsPlayerInAnyVehicle(i))
        {
            if(GetPlayerVehicleID(i)==vehicleid)
            {
                return 1;
            }
        }
    }
    return 0;
}
/*
stock FreeTankCheck()
{
    new ausgabe=-1,query[38];
    for(new i=1;i<MAX_TANKEN;i++)
    {
        format(query, sizeof(query), "SELECT * FROM tanken WHERE ID='%i'", i);
        mysql_oquery(query);
        mysql_store_result();
        if(mysql_num_rows()==0)
        {
            ausgabe=i;break;
        }
    }
    printf("Freie Tanke:%i",ausgabe);
    return  ausgabe;
}

stock FreeAngelCheck()
{
    new a[12], query[128];
    for(new i=1;i<MAX_HOUSES;i++)
    {
        format(a, sizeof(a), "ID=%d", i);
        format(query, sizeof(query), "SELECT * FROM angel WHERE %s", a);
        mysql_oquery(query);
        mysql_store_result();
        if(mysql_num_rows() == 0)return i;
    }
    return 0;
}

stock FreeHouseCheck()
{
    new h[12], query[128];
    for(new i=1;i<MAX_HOUSES;i++)
    {
        format(h, sizeof(h), "ID=%d", i);
        format(query, sizeof(query), "SELECT * FROM houses WHERE %s", h);
        mysql_oquery(query);
        mysql_store_result();
        if(mysql_num_rows()==0)return i;
    }
    return 0;
}
*/

stock IsPlayerAtTanke(playerid , Float:distance = 10.0) {
    new varHouse = 999;
    for(new x = 0; x < iTanke; x++) {
        if(IsPlayerInRangeOfPoint(playerid, distance, Tanke[x][EnterX], Tanke[x][EnterY], Tanke[x][EnterZ])) {
            varHouse = x;
        }
    }
    return varHouse;
}
stock IsPlayerAtHotel(playerid) {
    new varHotel = 999;
    new Float:distance = 10.0;
    new Float:_distance = 10.0;
    for(new x = 0; x < iHotel; x++) {
        //printf("%.2f %.2f %.2f",Hotel[x][EnterX], Hotel[x][EnterY], Hotel[x][EnterZ]);
        _distance = GetPlayerDistanceFromPoint(playerid,Hotel[x][EnterX], Hotel[x][EnterY], Hotel[x][EnterZ]);
        if( _distance < distance ) {
            distance = _distance;
            varHotel = x;
        }
    }
    //printf("IsPlayerAtHotel(%s) -> %d",GetName(playerid),varHotel);
    return varHotel;
}

stock CoinShopLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/CoinShopLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[COINSHOP] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock IsPlayerAtTelefonzelle(playerid) {
    new
        Float:X,
        Float:Z,
        Float:Y;
    new varTelefonzelle = 999;
    new Float:distance = 10.0;
    new Float:_distance = 10.0;
    for(new x = 0; x < g_iTelefonzelle; x++) {

        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,g_Telefonzelle[x][T_iObjectID],E_STREAMER_X,X);
        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,g_Telefonzelle[x][T_iObjectID],E_STREAMER_Y,Y);
        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,g_Telefonzelle[x][T_iObjectID],E_STREAMER_Z,Z);

        _distance = GetPlayerDistanceFromPoint(playerid, X , Y,Z);
        if( ( _distance < distance ) && ( _distance < 3.0 ) ) {
            distance = _distance;
            varTelefonzelle = x;
        }
    }
    //printf("IsPlayerAtHotel(%s) -> %d",GetName(playerid),varHotel);
    return varTelefonzelle;
}

stock IsPlayerAtBiz(playerid , Float:distance = 4.0) {
    new varHouse = 999;
    for(new x=1;x < MAX_BIZES; x++) {
        if(IsPlayerInRangeOfPoint(playerid, distance, Biz[x][EnterX], Biz[x][EnterY], Biz[x][EnterZ])) {
            varHouse = x;
        }
    }
    return varHouse;
}

stock IsPlayerAtHouse(playerid,Float:distance = 2.0) {
    new varHouse = 999;
    for(new x = 0; x < iHaus; x++) {
        if(IsPlayerInRangeOfPoint(playerid, distance, Haus[x][EnterX], Haus[x][EnterY], Haus[x][EnterZ])) {
            varHouse = x;
        }
    }
    return varHouse;
}

forward UpdateTankeText(tanke);
public UpdateTankeText(tanke)
{
    new tStr[512];
    if(strcmp(Tanke[tanke][tBesitzer], "Niemand", true) == 0)
    {
        format(tStr, sizeof(tStr), "{FFFFFF}[ {6DC0F4}%s {FFFFFF}]\n{6DC0F4}Diese Tankstelle ist zu verkaufen\nPreis: {FFFFFF}$%s\n\n{E0E5E7}Zum Kaufen tippe /Tankekaufen ein", Tanke[tanke][tName], AddDelimiters(Tanke[tanke][tPreis]));
        UpdateDynamic3DTextLabelText(Tanke[tanke][tText], COLOR_YELLOW, tStr);
    }
    else
    {
        format(tStr, sizeof(tStr), "{FFFFFF}[ {6DC0F4}%s {FFFFFF}]\n{6DC0F4}Besitzer: {FFFFFF}%s\n{6DC0F4}Benzin: {FFFFFF}$%d, {6DC0F4}Super: {FFFFFF}$%d, {6DC0F4}Diesel: {FFFFFF}$%d\n{6DC0F4}Kraftstoffmenge: {FFFFFF}%d/%d\n\n{E0E5E7}Betanken mit: /Tanken\nBesuche den Tankshop mit /Tankshop\nFärbe dein Fahrzeug mit /carcolor um.", Tanke[tanke][tName], Tanke[tanke][tBesitzer], Tanke[tanke][taiFillCost][0], Tanke[tanke][taiFillCost][1], Tanke[tanke][taiFillCost][2], Tanke[tanke][tBenzin], Tanke[tanke][tMaxBenzin]);
        if( Tanke[tanke][tErpresserFraktion] != 0 ) {
            new
                frakname[50];
            ReturnFraktionByID( Tanke[tanke][tErpresserFraktion] , frakname );
            format(tStr, sizeof(tStr), "%s\n\nErpresser: %s",tStr,frakname);
        }
        UpdateDynamic3DTextLabelText(Tanke[tanke][tText], COLOR_BLUE, tStr);
    }
}

forward UpdateBizText(biz);
public UpdateBizText(biz)
{
    new bStr[512];
    if (strcmp(Biz[biz][bBesitzer], "Niemand", true) == 0) {
        format(bStr, sizeof(bStr), "{FFFFFF}[ {62E36D}%s {FFFFFF}]\n{62E36D}Dieses Geschäft ist zu verkaufen\n{FFFFFF}Preis: {62E36D}$%s\n{FFFFFF}Öffnungszeiten: {62E36D}%d Uhr bis %d Uhr\n\n{FFFFFF}Zum Kaufen tippe /Bizkaufen ein", Biz[biz][bName], AddDelimiters(Biz[biz][bPreis]), Biz[biz][bLadenAuf], Biz[biz][bLadenZu]);
        if (Biz[biz][bErpresserFraktion] != 0) {
            new frakname[50];
            ReturnFraktionByID(Biz[biz][bErpresserFraktion], frakname);
            format(bStr, sizeof(bStr), "%s\n\n{FFFFFF}Erpresser: {%s}%s\n{FFFFFF}Erobern mit: {62E36D}/Bizfight", bStr, GetFactionColor(Biz[biz][bErpresserFraktion]), frakname);
        }
        format(bStr, sizeof(bStr), "%s\n\n{FFFFFF}({62E36D}%d{FFFFFF})", bStr, Biz[biz][bID]);
    } else {
        format(bStr, sizeof(bStr), "{FFFFFF}[ {FFB732}%s {FFFFFF}]\n{FFFFFF}Besitzer: {FFB732}%s\n{FFFFFF}Eintritt: {FFB732}$%s\n{FFFFFF}Warenstand: {FFB732}%d/%d\n{FFFFFF}Öffnungszeiten: {FFB732}%d Uhr bis %d Uhr", Biz[biz][bName], Biz[biz][bBesitzer], AddDelimiters(Biz[biz][bEintritt]), Biz[biz][bWaren], Biz[biz][bMaxWaren], Biz[biz][bLadenAuf], Biz[biz][bLadenZu]);
        if (Biz[biz][bErpresserFraktion] != 0) {
            new frakname[50];
            ReturnFraktionByID(Biz[biz][bErpresserFraktion], frakname);
            format(bStr, sizeof(bStr), "%s\n\n{FFFFFF}Erpresser: {%s}%s\n{FFFFFF}Erobern mit: {FFB732}/Bizfight", bStr, GetFactionColor(Biz[biz][bErpresserFraktion]), frakname);
        }
        format(bStr, sizeof(bStr), "%s\n\n{FFFFFF}({FFB732}%d{FFFFFF})", bStr, Biz[biz][bID]);
    }
    UpdateDynamic3DTextLabelText(Biz[biz][bText], COLOR_BLUE, bStr);
}

forward UpdateAngelText(platz);
public UpdateAngelText(platz)
{
    new aStr[256];
    format(aStr, sizeof(aStr), COLOR_HEX_BLUE"--> Angelplatz <--\n"COLOR_HEX_WHITE"Fische: %d/%d\nTippe "COLOR_HEX_BLUE"/Angeln "COLOR_HEX_WHITE"zum angeln", Angel[platz][Fische], MAX_FISCHE_PRO_PLATZ);
    UpdateDynamic3DTextLabelText(Angel[platz][aText], COLOR_WHITE, aStr);
}

forward UpdateHouseText(house);
public UpdateHouseText(house)
{
    new hStr[512];
    if (strcmp(Haus[house][hBesitzer], "Niemand", true) == 0) {
        format(hStr, sizeof(hStr), "{FFFFFF}[ {62E36D}%s {FFFFFF}]\n{FFFFFF}Hausnummer: {62E36D}%d\n{62E36D}Dieses Haus ist zu verkaufen\n{FFFFFF}Preis: {62E36D}$%s\n\n{FFFFFF}Zum Kaufen tippe /Hauskaufen ein", Haus[house][hName], Haus[house][hID], AddDelimiters(Haus[house][hPreis]));
        UpdateDynamic3DTextLabelText(Haus[house][hText], COLOR_YELLOW, hStr);
    } else {
        if (Haus[house][hMieten] == 0) {
            format(hStr, sizeof(hStr), "{FFFFFF}[ {FF4137}%s {FFFFFF}]\n{FFFFFF}Hausnummer: {FF4137}%d\n{FFFFFF}Besitzer: {FF4137}%s", Haus[house][hName], Haus[house][hID], Haus[house][hBesitzer]);
            UpdateDynamic3DTextLabelText(Haus[house][hText], COLOR_BLUE, hStr);
        } else if (Haus[house][hMieten] == 1) {
            format(hStr, sizeof(hStr), "{FFFFFF}[ {FFCB2B}%s {FFFFFF}]\n{FFFFFF}Hausnummer: {FFCB2B}%d\n{FFCB2B}Dieses Haus ist zu vermieten\n{FFFFFF}Besitzer: {FFCB2B}%s\n{FFFFFF}Miet-Preis: {FFCB2B}$%s\n{FFFFFF}Mieter: {FFCB2B}(%d/%d)\n\n{FFFFFF}Zum Mieten tippe /Hausmieten ein", Haus[house][hName], Haus[house][hID], Haus[house][hBesitzer], AddDelimiters(Haus[house][hMietPreis]), Haus[house][hMieterAnzahl], Haus[house][hMieterMax]);
            UpdateDynamic3DTextLabelText(Haus[house][hText], COLOR_BLUE, hStr);
        }
    }
}

forward UpdateStaticBizText(staticbizid);
public UpdateStaticBizText(staticbizid) {
    new
        String[128];
    if( StaticBiz[staticbizid][SBD_iTyp] == 0 ) {
        format(String,sizeof(String),"- Waren -\n\n%d Stk auf Lager\n\n/Entladen\n/Warenkaufen",StaticBiz[staticbizid][SBD_iWaren]);
    }
    else if( StaticBiz[staticbizid][SBD_iTyp] == 1 ) {
        format(String,sizeof(String),"- Benzin -\n\n%d Liter auf Lager\n\n/Entladen\n/Tankkaufen",StaticBiz[staticbizid][SBD_iWaren]);
    }
    //printf("UpdateStaticBizText(%d) Typ: %d String: '%s'",staticbizid,StaticBiz[staticbizid][SBD_iTyp],String);
    UpdateDynamic3DTextLabelText( StaticBiz[staticbizid][SBD_t3dLabel] , COLOR_BLUE, String);
    return 1;
}

stock minrand(min, max) //By Alex "Y_Less" Cole
{
    return random(max-min)+min;
}

stock GetPlayerIdFromName(playername[])
{
  for(new i = 0; i < MAX_PLAYERS; i++)
  {
    if(IsPlayerConnected(i))
    {
      new playername2[MAX_PLAYER_NAME];
      GetPlayerName(i, playername2, sizeof(playername2));
      if(strcmp(playername2, playername, true, strlen(playername)) == 0)
      {
        return i;
      }
    }
  }
  return INVALID_PLAYER_ID;
}

stock GetMaxTank(carid)
{
    new model = GetVehicleModel(carid);
    if(model >= 400 && model <= 611)
    {
        return GasMax[(model-400)];
    }
    return 100;
}

stock V_DynamicObject(objectid, Float:X, Float:Y, Float:Z, Float:RX, Float:RY, Float:RZ)
{
    SetDynamicObjectPos(objectid, X, Y, Z);
    SetDynamicObjectRot(objectid, RX, RY, RZ);
    return 1;
}

stock UhrzeitZeiger()
{
    new Stunde, Minute, Sekunde;
    gettime(Stunde, Minute, Sekunde);
    switch(Stunde)
    {
        case 1: { V_DynamicObject(StundenZeigerObj, 1478.96, -1759.40, 30.48,   -30.00, 180.00, 90.00); }       //1 Uhr
        case 2: { V_DynamicObject(StundenZeigerObj, 1478.21, -1759.40, 29.80,   -60.00, 180.00, 90.00); }       //2 Uhr
        case 3: { V_DynamicObject(StundenZeigerObj, 1477.99, -1759.40, 28.96,   -90.00, 180.00, 90.00); }       //3 Uhr
        case 4: { V_DynamicObject(StundenZeigerObj, 1478.21, -1759.40, 27.94,   -120.00, 180.00, 90.00); }      //4 Uhr
        case 5: { V_DynamicObject(StundenZeigerObj, 1478.87, -1759.40, 27.34,   -150.00, 180.00, 90.00); }      //5 Uhr
        case 6: { V_DynamicObject(StundenZeigerObj, 1479.81, -1759.40, 27.04,   -180.00, 180.00, 90.00); }      //6 Uhr
        case 7: { V_DynamicObject(StundenZeigerObj, 1480.67, -1759.40, 27.26,   -210.00, 180.00, 90.00); }      //7 Uhr
        case 8: { V_DynamicObject(StundenZeigerObj, 1481.41, -1759.40, 27.94,   -240.00, 180.00, 90.00); }      //8 Uhr
        case 9: { V_DynamicObject(StundenZeigerObj, 1481.65, -1759.40, 28.78,   -270.00, 180.00, 90.00); }      //9 Uhr
        case 10: { V_DynamicObject(StundenZeigerObj, 1481.43, -1759.40, 29.80,   -300.00, 180.00, 90.00); }     //10 Uhr
        case 11: { V_DynamicObject(StundenZeigerObj, 1480.77, -1759.40, 30.42,   -330.00, 180.00, 90.00); }     //11 Uhr
        case 12: { V_DynamicObject(StundenZeigerObj, 1479.82, -1759.40, 30.72,   0.00, 180.00, 90.00); }        //12 Uhr
        case 13: { V_DynamicObject(StundenZeigerObj, 1478.96, -1759.40, 30.48,   -30.00, 180.00, 90.00); }      //13 Uhr
        case 14: { V_DynamicObject(StundenZeigerObj, 1478.21, -1759.40, 29.80,   -60.00, 180.00, 90.00); }      //14 Uhr
        case 15: { V_DynamicObject(StundenZeigerObj, 1477.99, -1759.40, 28.96,   -90.00, 180.00, 90.00); }      //15 Uhr
        case 16: { V_DynamicObject(StundenZeigerObj, 1478.21, -1759.40, 27.94,   -120.00, 180.00, 90.00); }     //16 Uhr
        case 17: { V_DynamicObject(StundenZeigerObj, 1478.87, -1759.40, 27.34,   -150.00, 180.00, 90.00); }     //17 Uhr
        case 18: { V_DynamicObject(StundenZeigerObj, 1479.81, -1759.40, 27.04,   -180.00, 180.00, 90.00); }     //18 Uhr
        case 19: { V_DynamicObject(StundenZeigerObj, 1480.67, -1759.40, 27.26,   -210.00, 180.00, 90.00); }     //19 Uhr
        case 20: { V_DynamicObject(StundenZeigerObj, 1481.41, -1759.40, 27.94,   -240.00, 180.00, 90.00); }     //20 Uhr
        case 21: { V_DynamicObject(StundenZeigerObj, 1481.65, -1759.40, 28.78,   -270.00, 180.00, 90.00); }     //21 Uhr
        case 22: { V_DynamicObject(StundenZeigerObj, 1481.43, -1759.40, 29.80,   -300.00, 180.00, 90.00); }     //22 Uhr
        case 23: { V_DynamicObject(StundenZeigerObj, 1480.77, -1759.40, 30.42,   -330.00, 180.00, 90.00); }     //23 Uhr
        case 0: { V_DynamicObject(StundenZeigerObj, 1479.82, -1759.40, 30.72,   0.00, 180.00, 90.00); }         //0 Uhr
    }

    switch (Minute)
    {
        case 1: { V_DynamicObject(MinutenZeigerObj, 1479.64, -1759.42, 30.94,   -6.00, 0.00, 90.00); }      //1 Minute
        case 2: { V_DynamicObject(MinutenZeigerObj, 1479.42, -1759.42, 30.89,   -12.00, 0.00, 90.00); }     //2 Minute
        case 3: { V_DynamicObject(MinutenZeigerObj, 1479.19, -1759.42, 30.84,   -18.00, 0.00, 90.00); }     //3 Minute
        case 4: { V_DynamicObject(MinutenZeigerObj, 1479.01, -1759.42, 30.77,   -24.00, 0.00, 90.00); }     //4 Minute
        case 5: { V_DynamicObject(MinutenZeigerObj, 1478.84, -1759.42, 30.68,   -30.00, 0.00, 90.00); }     //5 Minute
        case 6: { V_DynamicObject(MinutenZeigerObj, 1478.66, -1759.42, 30.58,   -36.00, 0.00, 90.00); }     //6 Minute
        case 7: { V_DynamicObject(MinutenZeigerObj, 1478.45, -1759.42, 30.43,   -42.00, 0.00, 90.00); }     //7 Minute
        case 8: { V_DynamicObject(MinutenZeigerObj, 1478.30, -1759.42, 30.26,   -48.00, 0.00, 90.00); }     //8 Minute
        case 9: { V_DynamicObject(MinutenZeigerObj, 1478.18, -1759.42, 30.08,   -54.00, 0.00, 90.00); }     //9 Minute
        case 10: { V_DynamicObject(MinutenZeigerObj, 1478.04, -1759.42, 29.90,   -60.00, 0.00, 90.00); }        //10 Minute
        case 11: { V_DynamicObject(MinutenZeigerObj, 1477.97, -1759.42, 29.72,   -66.00, 0.00, 90.00); }        //11 Minute
        case 12: { V_DynamicObject(MinutenZeigerObj, 1477.89, -1759.42, 29.55,   -72.00, 0.00, 90.00); }        //12 Minute
        case 13: { V_DynamicObject(MinutenZeigerObj, 1477.82, -1759.42, 29.35,   -78.00, 0.00, 90.00); }        //13 Minute
        case 14: { V_DynamicObject(MinutenZeigerObj, 1477.79, -1759.42, 29.15,   -84.00, 0.00, 90.00); }        //14 Minute
        case 15: { V_DynamicObject(MinutenZeigerObj, 1477.79, -1759.42, 28.95,   -90.00, 0.00, 90.00); }        //15 Minute
        case 16: { V_DynamicObject(MinutenZeigerObj, 1477.79, -1759.42, 28.80,   -96.00, 0.00, 90.00); }        //16 Minute
        case 17: { V_DynamicObject(MinutenZeigerObj, 1477.79, -1759.42, 28.55,   -102.00, 0.00, 90.00); }       //17 Minute
        case 18: { V_DynamicObject(MinutenZeigerObj, 1477.87, -1759.42, 28.30,   -108.00, 0.00, 90.00); }       //18 Minute
        case 19: { V_DynamicObject(MinutenZeigerObj, 1477.94, -1759.42, 28.05,   -114.00, 0.00, 90.00); }       //19 Minute
        case 20: { V_DynamicObject(MinutenZeigerObj, 1478.04, -1759.42, 27.84,   -120.00, 0.00, 90.00); }       //20 Minute
        case 21: { V_DynamicObject(MinutenZeigerObj, 1478.14, -1759.42, 27.71,   -126.00, 0.00, 90.00); }       //21 Minute
        case 22: { V_DynamicObject(MinutenZeigerObj, 1478.27, -1759.42, 27.58,   -132.00, 0.00, 90.00); }       //22 Minute
        case 23: { V_DynamicObject(MinutenZeigerObj, 1478.39, -1759.42, 27.41,   -138.00, 0.00, 90.00); }       //23 Minute
        case 24: { V_DynamicObject(MinutenZeigerObj, 1478.57, -1759.42, 27.26,   -144.00, 0.00, 90.00); }       //24 Minute
        case 25: { V_DynamicObject(MinutenZeigerObj, 1478.95, -1759.42, 27.06,   -156.00, 0.00, 90.00); }       //25 Minute
        case 26: { V_DynamicObject(MinutenZeigerObj, 1478.77, -1759.42, 27.16,   -150.00, 0.00, 90.00); }       //26 Minute
        case 27: { V_DynamicObject(MinutenZeigerObj, 1479.15, -1759.42, 26.94,   -162.00, 0.00, 90.00); }       //27 Minute
        case 28: { V_DynamicObject(MinutenZeigerObj, 1479.40, -1759.42, 26.89,   -168.00, 0.00, 90.00); }       //28 Minute
        case 29: { V_DynamicObject(MinutenZeigerObj, 1479.60, -1759.42, 26.87,   -174.00, 0.00, 90.00); }       //29 Minute
        case 30: { V_DynamicObject(MinutenZeigerObj, 1479.81, -1759.42, 26.83,   -180.00, 0.00, 90.00); }       //30 Minute
        case 31: { V_DynamicObject(MinutenZeigerObj, 1479.99, -1759.42, 26.86,   -186.00, 0.00, 90.00); }       //31 Minute
        case 32: { V_DynamicObject(MinutenZeigerObj, 1480.18, -1759.42, 26.89,   -192.00, 0.00, 90.00); }       //32 Minute
        case 33: { V_DynamicObject(MinutenZeigerObj, 1480.38, -1759.42, 26.92,   -198.00, 0.00, 90.00); }       //33 Minute
        case 34: { V_DynamicObject(MinutenZeigerObj, 1480.59, -1759.42, 26.99,   -204.00, 0.00, 90.00); }       //34 Minute
        case 35: { V_DynamicObject(MinutenZeigerObj, 1480.78, -1759.42, 27.08,   -210.00, 0.00, 90.00); }       //35 Minute
        case 36: { V_DynamicObject(MinutenZeigerObj, 1480.96, -1759.42, 27.18,   -216.00, 0.00, 90.00); }       //36 Minute
        case 37: { V_DynamicObject(MinutenZeigerObj, 1481.14, -1759.42, 27.29,   -222.00, 0.00, 90.00); }       //37 Minute
        case 38: { V_DynamicObject(MinutenZeigerObj, 1481.30, -1759.42, 27.47,   -228.00, 0.00, 90.00); }       //38 Minute
        case 39: { V_DynamicObject(MinutenZeigerObj, 1481.44, -1759.42, 27.64,   -234.00, 0.00, 90.00); }       //39 Minute
        case 40: { V_DynamicObject(MinutenZeigerObj, 1481.59, -1759.42, 27.84,   -240.00, 0.00, 90.00); }       //40 Minute
        case 41: { V_DynamicObject(MinutenZeigerObj, 1481.65, -1759.42, 28.04,   -246.00, 0.00, 90.00); }       //41 Minute
        case 42: { V_DynamicObject(MinutenZeigerObj, 1481.71, -1759.42, 28.19,   -252.00, 0.00, 90.00); }       //42 Minute
        case 43: { V_DynamicObject(MinutenZeigerObj, 1481.77, -1759.42, 28.37,   -258.00, 0.00, 90.00); }       //43 Minute
        case 44: { V_DynamicObject(MinutenZeigerObj, 1481.83, -1759.42, 28.55,   -264.00, 0.00, 90.00); }       //44 Minute
        case 45: { V_DynamicObject(MinutenZeigerObj, 1481.87, -1759.42, 28.78,   -270.00, 0.00, 90.00); }       //45 Minute
        case 46: { V_DynamicObject(MinutenZeigerObj, 1481.85, -1759.42, 28.97,   -276.00, 0.00, 90.00); }       //46 Minute
        case 47: { V_DynamicObject(MinutenZeigerObj, 1481.85, -1759.42, 29.20,   -282.00, 0.00, 90.00); }       //47 Minute
        case 48: { V_DynamicObject(MinutenZeigerObj, 1481.78, -1759.42, 29.41,   -288.00, 0.00, 90.00); }       //48 Minute
        case 49: { V_DynamicObject(MinutenZeigerObj, 1481.70, -1759.42, 29.64,   -294.00, 0.00, 90.00); }       //49 Minute
        case 50: { V_DynamicObject(MinutenZeigerObj, 1481.60, -1759.42, 29.89,   -300.00, 0.00, 90.00); }       //50 Minute
        case 51: { V_DynamicObject(MinutenZeigerObj, 1481.47, -1759.42, 30.05,   -306.00, 0.00, 90.00); }       //51 Minute
        case 52: { V_DynamicObject(MinutenZeigerObj, 1481.32, -1759.42, 30.23,   -312.00, 0.00, 90.00); }       //52 Minute
        case 53: { V_DynamicObject(MinutenZeigerObj, 1481.20, -1759.42, 30.35,   -318.00, 0.00, 90.00); }       //53 Minute
        case 54: { V_DynamicObject(MinutenZeigerObj, 1481.05, -1759.42, 30.47,   -324.00, 0.00, 90.00); }       //54 Minute
        case 55: { V_DynamicObject(MinutenZeigerObj, 1480.87, -1759.42, 30.59,   -330.00, 0.00, 90.00); }       //55 Minute
        case 56: { V_DynamicObject(MinutenZeigerObj, 1480.71, -1759.42, 30.67,   -336.00, 0.00, 90.00); }       //56 Minute
        case 57: { V_DynamicObject(MinutenZeigerObj, 1480.54, -1759.42, 30.78,   -342.00, 0.00, 90.00); }       //57 Minute
        case 58: { V_DynamicObject(MinutenZeigerObj, 1480.35, -1759.42, 30.85,   -348.00, 0.00, 90.00); }       //58 Minute
        case 59: { V_DynamicObject(MinutenZeigerObj, 1480.11, -1759.42, 30.91,   -354.00, 0.00, 90.00); }       //59 Minute
        case 0: { V_DynamicObject(MinutenZeigerObj, 1479.83, -1759.42, 30.95,   0.00, 0.00, 90.00); }           //0 Minute
    }
    return 1;
}

stock fcopy(oldname[],newname[])
{
    new File:ohnd,File:nhnd;
    if (!fexist(oldname))
    {
        return 0;
    }
    ohnd=fopen(oldname,io_read);
    nhnd=fopen(newname,io_write);
    new buf2[1];
    for (new i=flength(ohnd);i>0;i--)
    {
        fputchar(nhnd, fgetchar(ohnd, buf2[0],false),false);
    }
    fclose(ohnd);
    fclose(nhnd);
    return 1;
}

new gPlayerUsingLoopingAnim[MAX_PLAYERS];
stock LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp,fs = 0)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp,fs);
}
stock OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    if (!IsPlayerFalling(playerid)) ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp);
    return 1;
}

stock ConvertUnix(unixtstamp)
{
    new query[128];
    new get[128];
    format(query, 128, "SELECT FROM_UNIXTIME(%d, '%s.%s.%s %s')", unixtstamp, "%e", "%M", "%Y", "%T");
    mysql_oquery(query,THREAD_CONVERTUNIX,unixtstamp,gSQL);
    return 1;
}


stock IsKatanaFaction(Faction)
{
    if((Faction == 10 || Faction == 21)) // Yakuza,Triaden
	    return 1;
	return 0;
}

stock IsBaseballFaction(Faction)
{
    if((Faction == 6 || Faction == 7|| Faction == 11 || Faction == 13)) // GSF,BALLAS,Aztecas,Vagos
	    return 1;
	return 0;
}

stock IsGolfFaction(Faction)
{
    if((Faction == 12 || Faction == 20)) // CK, LCN
	    return 1;
	return 0;
}

stock IsMafiaFaction(Faction) {
	if((Faction == 10 || Faction == 12 || Faction == 20 || Faction == 21)) // Yakuza, CK, OutlawZ, Triaden
	    return 1;
	return 0;
}

stock IsAGFFaction(Faction)
{
    if((Faction == 6 || Faction == 7 || Faction == 10 || Faction == 11 || Faction == 12 || Faction == 13|| Faction == 20 || Faction == 21))
        return 1;
    return 0;
}

stock IsAFightFaction(factionid)
{
    return factionid == 6 || factionid == 7 || factionid == 10 || factionid == 11 || factionid == 12 || factionid == 13 || factionid == 20 || factionid == 21 ? true : false;
}

stock IsADutyFaction(factionid) {
    return factionid == 1 || factionid == 2 || factionid == 3 || factionid == 4 || factionid == 5 || factionid == 8 || factionid == 16 || factionid == 22 ? true : false;
}

stock GetZoneColorOfFaction(Faction,trans = 0xFFFFFF90)
{
    new color;
    if(Faction == 6) color = 0x00EA28FF; // Grove Street
    else if(Faction == 7) color =  0x8904B1FF; // Ballas
    else if(Faction == 10) color =  0xA0A0A0FF; // Yakuza
    else if(Faction == 11) color =  0x00EEFFFF; // Aztecas
    else if(Faction == 12) color =  0xAE5900FF; // CK
    else if(Faction == 13) color =  0xFFFF00FF; // Vagos
    else if(Faction == 20) color =  0x323232FF; // La Cosa Nostra
    else if(Faction == 21) color =  0x002DFFFF; // Triaden
    else color = 0xFFFFFFFF;
    color &= trans;
    return color;
}

stock GetFactionColor(Faction)
{
    new color[128];
    if(Faction == 6) color = "00EA28"; // Grove Street
    else if(Faction == 7) color =  "8904B1"; // Ballas
    else if(Faction == 10) color =  "A0A0A0"; // Yakuza
    else if(Faction == 11) color =  "00EEFF"; // Aztecas
    else if(Faction == 12) color =  "AE5900"; // CK
    else if(Faction == 13) color =  "FFFF00"; // Vagos
    else if(Faction == 20) color =  "323232"; // La Cosa Nostra
    else if(Faction == 21) color =  "002DFF"; // Triaden
    return color;
}

stock GetFactionName(factionid) {
    new factionName[32];
    if (factionid < 0 || factionid > sizeof(factionNames)) return factionName;
    format(factionName, sizeof(factionName), factionNames[factionid]);
    return factionName;
}

stock GFWetteNameFaction(Faction){
    new FactionName[64];
    if(Faction == 6) format(FactionName, sizeof(FactionName), "GroveStreet");
    else if(Faction == 7) format(FactionName, sizeof(FactionName), "Ballas");
    else if(Faction == 10) format(FactionName, sizeof(FactionName), "Yakuza");
    else if(Faction == 11) format(FactionName, sizeof(FactionName), "Aztecas");
    else if(Faction == 12) format(FactionName, sizeof(FactionName), "Cali");
    else if(Faction == 13) format(FactionName, sizeof(FactionName), "Vagos");
    else if(Faction == 20) format(FactionName, sizeof(FactionName), "LCN");
    else if(Faction == 21) format(FactionName, sizeof(FactionName), "Triaden");
    else format(FactionName, sizeof(FactionName), "NoN-Gang");
    return FactionName;
}

stock GetFactionNameOfFaction(Faction){
    new FactionName[64];
    if(Faction == 6) format(FactionName, sizeof(FactionName), "Grove Street");
    else if(Faction == 7) format(FactionName, sizeof(FactionName), "Ballas");
    else if(Faction == 10) format(FactionName, sizeof(FactionName), "Yakuza");
    else if(Faction == 11) format(FactionName, sizeof(FactionName), "Aztecas");
    else if(Faction == 12) format(FactionName, sizeof(FactionName), "Cali Kartell");
    else if(Faction == 13) format(FactionName, sizeof(FactionName), "Vagos");
    else if(Faction == 20) format(FactionName, sizeof(FactionName), "LCN");
    else if(Faction == 21) format(FactionName, sizeof(FactionName), "Triaden");
    else format(FactionName, sizeof(FactionName), "NoN-Gang");
    return FactionName;
}

stock GetFactionNameGF(Faction){
    new FactionName[64];
    if(Faction == 6) format(FactionName, sizeof(FactionName), "Grove");
    else if(Faction == 7) format(FactionName, sizeof(FactionName), "Ballas");
    else if(Faction == 10) format(FactionName, sizeof(FactionName), "Yakuza");
    else if(Faction == 11) format(FactionName, sizeof(FactionName), "Aztecas");
    else if(Faction == 12) format(FactionName, sizeof(FactionName), "CK");
    else if(Faction == 13) format(FactionName, sizeof(FactionName), "Vagos");
    else if(Faction == 20) format(FactionName, sizeof(FactionName), "LCN");
    else if(Faction == 21) format(FactionName, sizeof(FactionName), "Triaden");
    else format(FactionName, sizeof(FactionName), "NoN-Gang");
    return FactionName;
}

stock GetGangFactionIDByName(faction[]) {
    if (!strcmp(faction, "Grove Street"))
        return 6;
    else if (!strcmp(faction, "Ballas"))
        return 7;
    else if (!strcmp(faction, "Yakuza"))
        return 10;
    else if (!strcmp(faction, "Aztecas"))
        return 11;
    else if (!strcmp(faction, "Cali Kartell"))
        return 12;
    else if (!strcmp(faction, "Vagos"))
        return 13;
    else if (!strcmp(faction, "LCN"))
        return 20;
    else if (!strcmp(faction, "Triaden"))
        return 21;
    else
        return -1;
}

stock GetGangZoneCount(factionid) {
    new count = 0;
    for (new i = 0; i < MAX_GANGZONES; i++) if (g_GangZone[i][GZ_iOwner] == factionid) count++;
    return count;
}

stock TreasuryDeposit(money) {
    if (Kasse[Staat] > 1500000000) return 1;
    Kasse[Staat] += money;
    return 1;
}



stock GetPlayerFaction(playerid)
{
    return Spieler[playerid][pFraktion];
}

stock StripNewLine(str[]) //ysi_misc.own
{
    new
        l = strlen(str);
    while (l-- && str[l] <= ' ') str[l] = '\0';
}


stock LogFrakkasse(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/FKasseLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[FKasse] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogFSafebox(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/FSafeboxLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[FSafebox] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogCommand(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/CommandLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[CMD] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogVehicleDeath(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/VehicleDeath/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[VDEATH] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogBus(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/BusLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[BUS] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

/*stock LogAdvents(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/Advents/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[ADVENTSKALENDER] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}*/

stock LogGlobalChat(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/GChat/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[GC] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogJobChat(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/JChat/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[JC] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogAdminChat(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/AChat/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[AC] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogFrakChat(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/FChat/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[FC] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogPilot(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/PilotLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[PILOT] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogTrucker(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/TruckerLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[TRUCKER] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogFarmer(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/FarmerLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[FARMER] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogAnwalt(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/AnwaltLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[ANWALT] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogWDealer(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/WDealerLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[WDEALER] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LogDDealer(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/DDealerLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[DDealer] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock PayLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/ZahlenLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[ZAHLEN] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock ClubLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[300], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/ClubLog/clublog.txt");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock SupporterLog(text[],wertung)
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    if(wertung == 1 ) {
        format(path, sizeof(path), "/Logs/SupporterLog/positiv.txt");
    }
    else {
        format(path, sizeof(path), "/Logs/SupporterLog/negativ.txt");
    }
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    LogFile = fopen(path, io_append);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock BankLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/BankLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[BANK] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock TaschendiebLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/TaschendiebLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[Taschendieb] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock HitmanLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/HitmanLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[Hitman] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock AuszahlenLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/AuszahlenLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[AUSZ] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock DrugLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/DrugLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[DRUG] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock CookiesLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/CookiesLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[COOKIES] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock WCodeLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/WCodeLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[WCODES] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock WaffenteileLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/WaffenteileLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[WTEILE] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock EinzahlenLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/EinzahlenLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[EINZ] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock BanLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/BanLog/banlog.txt");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock LoginLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/LoginLog/loginlog.txt");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}


stock AdminLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/Admin/log.txt");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock SkillLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/SkillLog/log.txt");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}


stock MySQLThreadOwnerLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, path[64];
    static string[1024];
    string[0] = '\0';
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/MySQLThreadOwner/loginlog.txt");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock GeworbenLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, path[64];
    static string[1024];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/GeworbenLog/loginlog.txt");
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock FriendLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/FriendLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock GebeLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/GebeLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[GEBEN] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock GebeCheckLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/GebeCheckLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[GEBENCHECK] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

forward Cooldown_CommandSpam(playerid);
public Cooldown_CommandSpam(playerid) {
    Spieler[playerid][pCommandSpam]--;
    return 1;
}
/*forward Cooldown_ChatSpam(playerid);
public Cooldown_ChatSpam(playerid) {
    Spieler[playerid][pChatSpam]--;
    return 1;
}*/

public OnPlayerCommandReceived(playerid, cmdtext[]) {
    new command[128];
    format(command, sizeof(command), "%s - %s", GetName(playerid), cmdtext);
    LogCommand(command);
    return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if (Spieler[playerid][pAdmin] < 3) Spieler[playerid][pCommandSpam]++;
    if( Spieler[playerid][pCommandSpam] >= 10 ) {
        new
            string[160];
        format(string, sizeof(string), "[KICK] Du wurdest soeben von dem Server-System gekickt. Grund: %s", ("Command-Spam"));
        SendClientMessage(playerid, COLOR_RED, string);
        format(string, sizeof(string), "[KICK]: Spieler %s wurde von Server-System gekickt, Grund: %s", GetName(playerid), ("Command-Spam"));
        SendAdminMessage(COLOR_RED, string);
        KickDelay(playerid);
        return 1;
    }
    else {
        SetTimerEx("Cooldown_CommandSpam",2000,false,"d",playerid);
    }
    if(!success)
    {
        new string[128];
        format(string, sizeof(string), COLOR_HEX_WHITE"Der Befehl \""COLOR_HEX_ORANGE"%s"COLOR_HEX_WHITE"\" wurde nicht gefunden. Benutze "COLOR_HEX_ORANGE"/Help"COLOR_HEX_WHITE" für Hilfe.", cmdtext);
        SendClientMessage(playerid, COLOR_GREY, string);
        return 1;
    }
    return 1;
}



stock SendSchreiMessage(playerid,message[],Float:schrei_distance = 50.0) {
    new
        String[128+32],
        Float:X,
        Float:Y,
        Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    if(Spieler[playerid][bMaske]) {
        format(String,sizeof(String),"Maskierter schreit: %s",GetName(playerid),message);
    }
    else {
    	format(String,sizeof(String),"%s schreit: %s",GetName(playerid),message);
    }
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( i != playerid ) {
                if( IsPlayerInRangeOfPoint(i, schrei_distance , X, Y, Z ) ) {
                    SendClientMessage(i,COLOR_WHITE,String);
                }
            }
        }
    }
    format(String,sizeof(String),"Du schreist: %s",message);
    SendClientMessage(playerid,COLOR_WHITE,String);
    return 1;
}

stock SendFluesterMessage(playerid,send_to,message[],Float:fluester_distance = 5.0) {
    new
        String[128+32],
        Float:X,
        Float:Y,
        Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    if( IsPlayerInRangeOfPoint(send_to, fluester_distance , X, Y, Z ) ) {
        format(String,sizeof(String),"%s flüstert: %s",GetName(playerid),message);
        SendClientMessage(send_to,COLOR_GREY,String);
        format(String,sizeof(String),"Du flüstert: %s",message);
        SendClientMessage(playerid,COLOR_GREY,String);
        format(String, sizeof(String), "** %s flüstert %s zu.", GetName(playerid), GetName(send_to));
        SendRoundMessage(X, Y, Z, COLOR_PURPLE, String);
    }
    else {
        SendClientMessage(playerid,COLOR_RED,"Der Spieler ist zu weit entfernt um zu flüstern");
    }
    return 1;
}

stock IsEismannVehicle(vehicleid) {
    for(new i ; i < sizeof(eismann) ; i++) {
        if( eismann[i] == vehicleid ) return 1;
    }
    return 0;
}
stock IsHotDogVehicle(vehicleid) {
    for(new i ; i < sizeof(hotdogcar) ; i++) {
        if( hotdogcar[i] == vehicleid ) return 1;
    }
    return 0;
}
stock IsPizzaVehicle(vehicleid) {
    for(new i ; i < sizeof(pizzacar) ; i++) {
        if( pizzacar[i] == vehicleid ) return 1;
    }
    return 0;
}



forward Pulse_Taschendieb(diebid,opferid);
public Pulse_Taschendieb(diebid,opferid){
    new
        String[128],
        Float:X,
        Float:Y,
        Float:Z;
    Spieler[diebid][pTaschendiebCount]++;
    GetPlayerPos(diebid,X,Y,Z);
    if( Spieler[diebid][pTaschendiebCount] <= 10 ) { // ~5 Sekunden muss man dran bleiben
        if( !IsPlayerInRangeOfPoint(opferid, 4.2 , X, Y, Z ) ) {
            // Diebstahl fehlgeschlagen,zu weit weg!
            format(String,sizeof(String),"Räuber %s hat es nicht geschafft %s zu überfallen!",GetName(diebid),GetName(opferid));
            SendRoundMessage(X,Y,Z, COLOR_ORANGE, String , 50.0);
            format(String,sizeof(String),"Du konntest dem Dieb %s entkommen.",GetName(diebid));
            SendClientMessage(opferid,COLOR_GREEN,String);

            format(String,sizeof(String),"Du hast es nicht geschafft %s auszurauben.",GetName(opferid));
            SendClientMessage(diebid,COLOR_RED,String);

            Spieler[diebid][pTaschendiebCount] = 0;
            KillTimer(Spieler[diebid][pTimerTaschendieb]);
            Spieler[diebid][pTimerTaschendieb] = INVALID_TIMER_ID;

            format(String,sizeof(String),"%s hat es nicht geschafft %s zu überfallen. ",GetName(diebid),GetName(opferid));
            TaschendiebLog(String);
        }
    }
    else {
        // Diebstahl hat geklappt!
        new
            beute;
        beute = CheckMoney(opferid);

        format(String,sizeof(String),"Räuber %s hat es geschafft %s zu überfallen!",GetName(diebid),GetName(opferid));
        SendRoundMessage(X,Y,Z, COLOR_ORANGE, String , 50.0);

        if(beute > 0 ) {
            // Maximal kann man 2500$ klauen.
            if( beute > 2500 ) {
                beute = 2500;
            }
            beute = random(beute) + 1;
            GivePlayerCash(diebid,beute);
            GivePlayerCash(opferid,-beute);


            format(String,sizeof(String),"Du konntest dem Dieb %s nicht entkommen und hast dabei $%s verloren.",GetName(diebid),AddDelimiters(beute));
            SendClientMessage(opferid,COLOR_RED,String);

            format(String,sizeof(String),"Du hast es geschafft %s auszurauben. Deine Beute: $%s",GetName(opferid),AddDelimiters(beute));
            SendClientMessage(diebid,COLOR_GREEN,String);
        }
        else {
            format(String,sizeof(String),"Du konntest dem Dieb %s nicht entkommen. Da du pleite bist,geht er leer aus",GetName(diebid));
            SendClientMessage(opferid,COLOR_GREEN,String);

            format(String,sizeof(String),"Du hast es geschafft %s auszurauben. Allerdings ist dein Opfer pleite",GetName(opferid));
            SendClientMessage(diebid,COLOR_RED,String);
        }
        format(String,sizeof(String),"%s hat es geschafft %s zu überfallen. Beute: $%s",GetName(diebid),GetName(opferid),AddDelimiters(beute));
        TaschendiebLog(String);

        Spieler[diebid][pTaschendiebCount] = 0;
        KillTimer(Spieler[diebid][pTimerTaschendieb]);
        Spieler[diebid][pTimerTaschendieb] = INVALID_TIMER_ID;
    }
    return 1;
}


stock GetPlayerIDByUnique( unique ) {
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( unique == Spieler[i][ID] ) {
            return i;
        }
    }
    return INVALID_PLAYER_ID;
}

stock GetVehicleFraktion(vehicleid) {
	if( vehicleid < 0 || vehicleid > GetVehiclePoolSize() ) return 0;
	if(FrakCarInfo[vehicleid][f_frak] != 0 && FrakCarInfo[vehicleid][f_dbid] != 0)
	{
	    return FrakCarInfo[vehicleid][f_frak];
	}
	return 0;
}

forward Pulse_LVBankraub();
public Pulse_LVBankraub() {
	KillTimer(g_tPulseBankLV);
	if( g_iBankraubLVStatus == Bankraub_Wartezeit ) {
	    MoveDynamicObject(object_bankInteriorLv_vault, BANKINTERIORLV_VAULT_CLOSED, 4);
        g_iBankraubLVStatus = Bankraub_Bereit;
		SendClientMessageToAll(COLOR_ORANGE,"Die Las Venturas Bank kann jetzt wieder ausgeraubt werden.");
		g_tPulseND = SetTimer("Pulse_LVBankraub",( (BANKRAUB_ZEIT)*1000)+197,false);
	}
	else if( g_iBankraubLVStatus == Bankraub_Aktiv ) {
	    g_iBankraubLVStatus = Bankraub_Wartezeit;
        SetTimerEx("stopBlinkAndHideZone", 120000, false, "i", g_iBankLV);

		g_tPulseND = SetTimer("Pulse_LVBankraub",( (BANKRAUB_ZEIT)*1000)+197,false);
	}
	return 1;
}

forward Pulse_Bankraub();
public Pulse_Bankraub() {
	KillTimer(g_tPulseBank);
	if( g_iBankraubStatus == Bankraub_Wartezeit ) {
        g_iBankraubStatus = Bankraub_Bereit;
		SendClientMessageToAll(COLOR_ORANGE,"Die Los Santos Zentralbank kann jetzt wieder ausgeraubt werden.");
		g_tPulseND = SetTimer("Pulse_Bankraub",( (BANKRAUB_ZEIT)*1000)+197,false);
	}
	else if( g_iBankraubStatus == Bankraub_Bereit ) {
	    // Whoops.Keine wollte die Bank ausrauben ?!
	}
	else if( g_iBankraubStatus == Bankraub_Aktiv ) {
	    g_iBankraubStatus = Bankraub_Wartezeit;

        SetTimerEx("stopBlinkAndHideZone", 120000, false, "i", g_iBankLS);

		g_tPulseND = SetTimer("Pulse_Bankraub",( (BANKRAUB_ZEIT)*1000)+197,false);
	}
	return 1;
}

forward Pulse_NDRob();
public Pulse_NDRob() {
	KillTimer(g_tPulseND);
	if( g_iNDRobStatus == Bankraub_Wartezeit ) {
        g_iNDRobStatus = Bankraub_Bereit;
		SendClientMessageToAll(COLOR_ORANGE,"Die Ninedemons-Safebox kann nun wieder ausgeraubt werden.");
		g_tPulseBank = SetTimer("Pulse_NDRob",( (NINEDEMONSROB_ZEIT)*1000)+197,false);
        MoveDynamicObject(NDRobInt[14],-1201.1771, -1224.3874, 1002.5615, 10, 0.0000, 0.0000, -90.0000 );
	}
	else if( g_iNDRobStatus == Bankraub_Bereit ) {
	    // Whoops.Keine wollte die Bank ausrauben ?!
	}
	else if( g_iNDRobStatus == Bankraub_Aktiv ) {
	    g_iNDRobStatus = Bankraub_Wartezeit;

        SetTimerEx("stopBlinkAndHideZone", 120000, false, "i", g_iBankLS);
        SetTimerEx("stopBlinkAndHideZone", 120000, false, "i", g_iBankLV);

		g_tPulseND = SetTimer("Pulse_NDRob",( (BANKRAUB_ZEIT)*1000)+197,false);
	}
	return 1;
}


forward LVBank_Position(diebid);
public LVBank_Position(diebid) {
    if( GetPlayerInterior(diebid) == 3 )
    if( GetPlayerVirtualWorld(diebid) == VW_BANKINTERIORLV ) {
        if( IsPlayerInRangeOfPoint(diebid,100.0, BANKINTERIORLV_ROB_POINT) ) {
            new
                zeit;
            zeit = ( gettime() - g_unixBankraub );
            if( zeit >= 10*60 ) {
                new
                    // 200.000 bis 400.000
                    beute = (random(40000) * 5 ) + 200000, // 200.000$ - 400.000$ in 5$ Schritten
                    String[128];
                format(String,sizeof(String),"Du hast die Bank erfolgreich ausgeraubt! Deine Beute: $%s", AddDelimiters(beute));
                GivePlayerCash(diebid,beute);
                SendClientMessage(diebid,COLOR_WHITE,String);
                SendClientMessageToAll(COLOR_RED,"[ZENTRALBANK] Die Las Venturas Bank wurde erfolgreich ausgeraubt!");

                KillTimer(g_tPulseBankPosition);
                g_tPulseBankPosition = INVALID_TIMER_ID;

                RemovePlayerAttachedObject(diebid,0);

				Pulse_LVBankraub();
			}
		    return 1;
		}
	}
	new
	    String[128];
	SendClientMessage(diebid,COLOR_RED,"Du hast die Bank verlassen! Der Bankraub wurde abgebrochen.");
	format(String,sizeof(String),"Der Bankraub wurde abgebrochen. Bankräuber %s hat die Bank verlassen oder wurde verhaftet.",GetName(diebid));
	SendClientMessageToAll(COLOR_GREEN,String);
	KillTimer(g_tPulseBankPosition);
	g_tPulseBankPosition = INVALID_TIMER_ID;
	RemovePlayerAttachedObject(diebid,0);

	Pulse_LVBankraub();
	return 1;
}

forward Bank_Position(diebid);
public Bank_Position(diebid) {
    new count = 0;
    for(new i = 0; i < MAX_PLAYERS; i++){
        if(Spieler[i][pFraktion] == 1 || Spieler[i][pFraktion] == 2) continue;//return 1;
        if(GetPlayerVirtualWorld(i) == VW_BANKINTERIORLS){
            count++;
        }
    }
    if(count == 0){
        SendClientMessageToAll(COLOR_RED,"[ZENTRALBANK] Der Bankraub in Los Santos wurde durch die Polizei gestoppt!");
        KillTimer(g_tPulseBankPosition);
        g_tPulseBankPosition = INVALID_TIMER_ID;
        Pulse_Bankraub();

        stopBlinkAndHideZone(g_iBankLS);
    	stopBlinkAndHideZone(g_iBankLV);

        //RESET BANK VARS
        HP_Tresor[0] = 5000;
        HP_Tresor[1] = 5000;
        HP_Tresor[2] = 5000;
        HP_Tresor[3] = 5000;
        HP_Tresor[4] = 5000;
        HP_Tresor[5] = 5000;
        Wertpap[0] = false;
        Wertpap[1] = false;
        Wertpap[2] = false;
        Wertpap[3] = false;
        Tresor[0] = false;
        Tresor[1] = false;
        Tresor[2] = false;
        Tresor[3] = false;
        Update3DTextLabelText(Label_HP_bankInteriorLs[0], 0x008080FF, "{FFFFFF}- Kleiner Tresor -\n\n{CB2720}Verschlossen");
        Update3DTextLabelText(Label_HP_bankInteriorLs[1], 0x008080FF, "{FFFFFF}- Kleiner Tresor -\n\n{CB2720}Verschlossen");
        Update3DTextLabelText(Label_HP_bankInteriorLs[2], 0x008080FF, "{FFFFFF}- Kleiner Tresor -\n\n{CB2720}Verschlossen");
        Update3DTextLabelText(Label_HP_bankInteriorLs[3], 0x008080FF, "{FFFFFF}- Kleiner Tresor -\n\n{CB2720}Verschlossen");
        Update3DTextLabelText(Label_HP_bankInteriorLs[4], 0x008080FF, "{FFFFFF}- Kleiner Tresor -\n\n{CB2720}Verschlossen");
        Update3DTextLabelText(Label_HP_bankInteriorLs[5], 0x008080FF, "{FFFFFF}- Kleiner Tresor -\n\n{CB2720}Verschlossen");
        Update3DTextLabelText(Label_bankInteriorLs[0], 0x008080FF, "{FFFFFF}- Wertpapiere stehlen -\n\n{CB2720}Benutze /Wertpapiere");
        Update3DTextLabelText(Label_bankInteriorLs[1], 0x008080FF, "{FFFFFF}- Wertpapiere stehlen -\n\n{CB2720}Benutze /Wertpapiere");
        Update3DTextLabelText(Label_bankInteriorLs[2], 0x008080FF, "{FFFFFF}- Wertpapiere stehlen -\n\n{CB2720}Benutze /Wertpapiere");
        Update3DTextLabelText(Label_bankInteriorLs[3], 0x008080FF, "{FFFFFF}- Wertpapiere stehlen -\n\n{CB2720}Benutze /Wertpapiere");
        Update3DTextLabelText(Label_bankInteriorLs[5], 0x008080FF, "{FFFFFF}- Tresore sprengen -\n\n{CB2720}Benutze /C4legen");
        Update3DTextLabelText(Label_bankInteriorLs[6], 0x008080FF, "{FFFFFF}- Tresore sprengen -\n\n{CB2720}Benutze /C4legen");
        Update3DTextLabelText(Label_bankInteriorLs[7], 0x008080FF, "{FFFFFF}- Tresore sprengen -\n\n{CB2720}Benutze /C4legen");
        Update3DTextLabelText(Label_bankInteriorLs[8], 0x008080FF, "{FFFFFF}- Tresore sprengen -\n\n{CB2720}Benutze /C4legen");
        DestroyDynamicObject(HP_bankInteriorLs[0]);
        DestroyDynamicObject(HP_bankInteriorLs[1]);
        DestroyDynamicObject(HP_bankInteriorLs[2]);
        DestroyDynamicObject(HP_bankInteriorLs[3]);
        DestroyDynamicObject(HP_bankInteriorLs[4]);
        DestroyDynamicObject(HP_bankInteriorLs[5]);
        HP_bankInteriorLs[0] = CreateDynamicObject(2332, 1686.8259, -1031.4426, 1333.7956, 0.0000, 0.0000, -90.0000, VW_BANKINTERIORLS);
        HP_bankInteriorLs[1] = CreateDynamicObject(2332, 1689.5681, -1019.7673, 1340.2413, 0.0000, 0.0000, 0.0000, VW_BANKINTERIORLS);
        HP_bankInteriorLs[2] = CreateDynamicObject(2332, 1684.2133, -1035.0657, 1333.7956, 0.0000, 0.0000, 180.0000, VW_BANKINTERIORLS);
        HP_bankInteriorLs[3] = CreateDynamicObject(2332, 1695.2431, -1019.7673, 1340.2413, 0.0000, 0.0000, 0.0000, VW_BANKINTERIORLS);
        HP_bankInteriorLs[4] = CreateDynamicObject(2332, 1691.2214, -1035.0546, 1333.7956, 0.0000, 0.0000, 180.0000, VW_BANKINTERIORLS);
        HP_bankInteriorLs[5] = CreateDynamicObject(2332, 1688.9193, -1030.3500, 1333.7956, 0.0000, 0.0000, 90.0000, VW_BANKINTERIORLS);
    }

    new zeit;
    zeit = ( gettime() - g_unixBankraub );
    if( zeit >= 10*60 ) {
        new
            // 200.000 bis 400.000
            beute = (random(40000) * 5 ) + 200000, // 200.000$ - 400.000$ in 5$ Schritten
            String[128];
        format(String,sizeof(String),"Du hast die Bank erfolgreich ausgeraubt! Deine Beute: $%s", AddDelimiters(beute));
        for(new i = 0; i < MAX_PLAYERS; i++){
            if(GetPlayerVirtualWorld(i) == VW_BANKINTERIORLS){
                if(Spieler[i][pFraktion] == 1 || Spieler[i][pFraktion] == 2) continue;//return 1;
                GivePlayerCash(i, beute);
                SendClientMessage(i, COLOR_WHITE, String);
                RemovePlayerAttachedObject(i, 0);
            }
        }

        SendClientMessageToAll(COLOR_RED,"[ZENTRALBANK] Die Los Santos Bank wurde erfolgreich ausgeraubt!");

        KillTimer(g_tPulseBankPosition);
        g_tPulseBankPosition = INVALID_TIMER_ID;

        Pulse_Bankraub();

        stopBlinkAndHideZone(g_iBankLS);
    	stopBlinkAndHideZone(g_iBankLV);

        //RESET BANK VARS
        HP_Tresor[0] = 5000;
        HP_Tresor[1] = 5000;
        HP_Tresor[2] = 5000;
        HP_Tresor[3] = 5000;
        HP_Tresor[4] = 5000;
        HP_Tresor[5] = 5000;
        Wertpap[0] = false;
        Wertpap[1] = false;
        Wertpap[2] = false;
        Wertpap[3] = false;
        Tresor[0] = false;
        Tresor[1] = false;
        Tresor[2] = false;
        Tresor[3] = false;
        Update3DTextLabelText(Label_HP_bankInteriorLs[0], 0x008080FF, "{FFFFFF}- Kleiner Tresor -\n\n{CB2720}Verschlossen");
        Update3DTextLabelText(Label_HP_bankInteriorLs[1], 0x008080FF, "{FFFFFF}- Kleiner Tresor -\n\n{CB2720}Verschlossen");
        Update3DTextLabelText(Label_HP_bankInteriorLs[2], 0x008080FF, "{FFFFFF}- Kleiner Tresor -\n\n{CB2720}Verschlossen");
        Update3DTextLabelText(Label_HP_bankInteriorLs[3], 0x008080FF, "{FFFFFF}- Kleiner Tresor -\n\n{CB2720}Verschlossen");
        Update3DTextLabelText(Label_HP_bankInteriorLs[4], 0x008080FF, "{FFFFFF}- Kleiner Tresor -\n\n{CB2720}Verschlossen");
        Update3DTextLabelText(Label_HP_bankInteriorLs[5], 0x008080FF, "{FFFFFF}- Kleiner Tresor -\n\n{CB2720}Verschlossen");
        Update3DTextLabelText(Label_bankInteriorLs[0], 0x008080FF, "{FFFFFF}- Wertpapiere stehlen -\n\n{CB2720}Benutze /Wertpapiere");
        Update3DTextLabelText(Label_bankInteriorLs[1], 0x008080FF, "{FFFFFF}- Wertpapiere stehlen -\n\n{CB2720}Benutze /Wertpapiere");
        Update3DTextLabelText(Label_bankInteriorLs[2], 0x008080FF, "{FFFFFF}- Wertpapiere stehlen -\n\n{CB2720}Benutze /Wertpapiere");
        Update3DTextLabelText(Label_bankInteriorLs[3], 0x008080FF, "{FFFFFF}- Wertpapiere stehlen -\n\n{CB2720}Benutze /Wertpapiere");
        Update3DTextLabelText(Label_bankInteriorLs[5], 0x008080FF, "{FFFFFF}- Tresore sprengen -\n\n{CB2720}Benutze /C4legen");
        Update3DTextLabelText(Label_bankInteriorLs[6], 0x008080FF, "{FFFFFF}- Tresore sprengen -\n\n{CB2720}Benutze /C4legen");
        Update3DTextLabelText(Label_bankInteriorLs[7], 0x008080FF, "{FFFFFF}- Tresore sprengen -\n\n{CB2720}Benutze /C4legen");
        Update3DTextLabelText(Label_bankInteriorLs[8], 0x008080FF, "{FFFFFF}- Tresore sprengen -\n\n{CB2720}Benutze /C4legen");
        DestroyDynamicObject(HP_bankInteriorLs[0]);
        DestroyDynamicObject(HP_bankInteriorLs[1]);
        DestroyDynamicObject(HP_bankInteriorLs[2]);
        DestroyDynamicObject(HP_bankInteriorLs[3]);
        DestroyDynamicObject(HP_bankInteriorLs[4]);
        DestroyDynamicObject(HP_bankInteriorLs[5]);
        HP_bankInteriorLs[0] = CreateDynamicObject(2332, 1686.8259, -1031.4426, 1333.7956, 0.0000, 0.0000, -90.0000, VW_BANKINTERIORLS);
        HP_bankInteriorLs[1] = CreateDynamicObject(2332, 1689.5681, -1019.7673, 1340.2413, 0.0000, 0.0000, 0.0000, VW_BANKINTERIORLS);
        HP_bankInteriorLs[2] = CreateDynamicObject(2332, 1684.2133, -1035.0657, 1333.7956, 0.0000, 0.0000, 180.0000, VW_BANKINTERIORLS);
        HP_bankInteriorLs[3] = CreateDynamicObject(2332, 1695.2431, -1019.7673, 1340.2413, 0.0000, 0.0000, 0.0000, VW_BANKINTERIORLS);
        HP_bankInteriorLs[4] = CreateDynamicObject(2332, 1691.2214, -1035.0546, 1333.7956, 0.0000, 0.0000, 180.0000, VW_BANKINTERIORLS);
        HP_bankInteriorLs[5] = CreateDynamicObject(2332, 1688.9193, -1030.3500, 1333.7956, 0.0000, 0.0000, 90.0000, VW_BANKINTERIORLS);
    }
    return 1;
}

stock HasPlayerWeapon(playerid) {
    new
        weapon,
        ammu;
    for (new i = 1; i < 13; i++)
    {
        GetPlayerWeaponData(playerid, i, weapon, ammu);
        if( ammu > 1 ) {
            return 1;
        }
    }
    return 0;
}


forward ResetEvidenceRoomHeist();
public ResetEvidenceRoomHeist() {
    g_evidenceRoomHeist[EVIDENCEROOM_HEIST_STATUS] = EVIDENCEROOM_STATUS_IDLE;

    MoveDynamicObject(object_door_evroomInterior, 1254.1525, -14.1255, 999.9403, 999.0, 0.0000, 0.0000, -90.8999);
    MoveDynamicObject(object_door_evroomInterior2,1262.1549, -12.0230, 999.9484 , 999.0, 0.0000, 0.0000, 0.0000);
    return SendClientMessageToAll(COLOR_RED, "Die Asservatenkammer kann nun wieder ausgeraubt werden.");
}

forward EvidenceRoomHeistFinished();
public EvidenceRoomHeistFinished() {
    new breakingNewsMessage[128];

    if (g_evidenceRoomHeist[EVIDENCEROOM_HEIST_TIMER] == INVALID_TIMER_ID) {
        format(breakingNewsMessage, sizeof(breakingNewsMessage), "[EILMELDUNG] Räuber %s hat die Asservatenkammer verlassen oder wurde verhaftet!", GetName(g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER]));
        SendClientMessageToAll(COLOR_GREEN, breakingNewsMessage);
        SendClientMessageToAll(COLOR_ORANGE, "[EILMELDUNG] Der Überfall auf die Asservatenkammer wurde abgebrochen.");
    } else {
        format(breakingNewsMessage, sizeof(breakingNewsMessage), "[EILMELDUNG] Räuber %s hat die Asservatenkammer erfolgreich ausgeraubt!", GetName(g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER]));
        SendClientMessageToAll(COLOR_ORANGE, breakingNewsMessage);
        g_evidenceRoomHeist[EVIDENCEROOM_HEIST_TIMER] = INVALID_TIMER_ID;

        #if defined NEUE_WIRTSCHAFT
            new lootMoney = random(30000) + 40000;
            new lootDrugs = random(80) + 60;
            new lootMats = random(8000) + 8000;
        #else
            new lootMoney = random(30000) + 40000;
            new lootDrugs = random(400) + 200;
            new lootMats = random(3000) + 5000;
        #endif

        Spieler[g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER]][pDrugs] += lootDrugs;
        Spieler[g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER]][pWaffenteile] += lootMats;
        GivePlayerCash(g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER], lootMoney);
        format(breakingNewsMessage, sizeof(breakingNewsMessage), "Du hast $%s, %dg Drogen und %d Waffenteile erbeutet. Lass dich jetzt lieber nicht von den Cops erwischen!", AddDelimiters(lootMoney), lootDrugs, lootMats);
        SendClientMessage(g_evidenceRoomHeist[EVIDENCEROOM_HEIST_RAIDER], COLOR_YELLOW, breakingNewsMessage);
    }

    g_evidenceRoomHeist[EVIDENCEROOM_HEIST_STATUS] = EVIDENCEROOM_STATUS_COOLDOWN;
    SetTimer("ResetEvidenceRoomHeist", 2400000, false);
    SetTimerEx("stopBlinkAndHideZone", 120000, false, "i", g_iEvidenceRoom);
    return 1;
}

stock GetOnlineND(playerid) {
    new
        c;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if(i != playerid ) {
                if( Spieler[i][pFraktion] == 15 ) {
                    c++;
                }
            }
        }
    }
    return c;
}

stock GetOnlineExekutive(playerid) {
    new c;
    foreach(new i : Player) {
        if (IsPlayerConnected(i)) {
            if (i != playerid) {
                if (Spieler[i][pFraktion] == 1 ||
                    Spieler[i][pFraktion] == 2 ||
                    Spieler[i][pFraktion] == 16) {
                    c++;
                }
            }
        }
    }
    return c;
}

stock IsMedicOnDuty() {
    for (new i; i <= GetPlayerPoolSize(); i++) if (Spieler[i][pFraktion] == 3 && Spieler[i][pDuty]) return true;
    return false;
}

stock GetOnlineMedic(playerid) {
    new
        c;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if(i != playerid ) {
                if( Spieler[i][pFraktion] == 3 ) {
                    c++;
                }
            }
        }
    }
    return c;
}




stock GetPlayerAdminRang(playerid) {
    new adminName[30] = "";
    switch (Spieler[playerid][pAdmin]) {
        case 0: { adminName = "Normaler Spieler"; }
        case 1: { adminName = "Supporter"; }
        case 2: { adminName = "Event-Supporter"; }
        case 3: { adminName = "Moderator"; }
        case 4: { adminName = "Administrator"; }
        case 5: { adminName = "Server-Manager"; }
        case 6: { adminName = "Projektleiter"; }
        case 7: { adminName = "Entwickler"; }
        case 8: { adminName = "Projektverwalter"; }

        default: {}
    }

    return adminName;
}

stock GetPlayerAdminRangByID(id) {
    new adminName[30] = "";
    switch (id) {
        case 0: { adminName = "Normaler Spieler"; }
        case 1: { adminName = "Supporter"; }
        case 2: { adminName = "Event-Supporter"; }
        case 3: { adminName = "Moderator"; }
        case 4: { adminName = "Administrator"; }
        case 5: { adminName = "Server-Manager"; }
        case 6: { adminName = "Projektleiter"; }
        case 7: { adminName = "Entwickler"; }
        case 8: { adminName = "Projektverwalter"; }

        default: {}
    }

    return adminName;
}






stock DeathNotice_GetIndex() {
    g_iDeathNotice++;
    if( g_iDeathNotice >= MAX_DEATH_NOTICE ) {
        g_iDeathNotice = 0;
    }
    return g_iDeathNotice;
}

stock CreateDisconnectNotice(playerid, playername[], Float:x,Float:y,Float:z,reason) {
    new
        id,
        sReason[16],
        String[128];
    if(reason == 0 ) {
        sReason = "Timeout/Crash";
    }
    else if(reason == 1 ) {
        sReason = "Ausgeloggt";
    }
    else if(reason == 2 ) {
        sReason = "Kick/Ban";
    }
    id = DeathNotice_GetIndex();
    format(String,sizeof(String),"%s - %s",playername,sReason);
    new interior = GetPlayerInterior(playerid), virtualworld = GetPlayerVirtualWorld(playerid);
    g_DeathNotice[id][DN_iPickup] = CreateDynamicPickup(1314, 1, x, y, z + 0.25, .worldid = virtualworld, .interiorid = interior);
    g_DeathNotice[id][DN_t3dLabel] = CreateDynamic3DTextLabel(String, 0xFFFFFFBB, x, y, z + 0.8, 30.0, .testlos = 1, .worldid = virtualworld, .interiorid = interior);
    g_DeathNotice[id][DN_tTimer] = SetTimerEx("DestroyDisconnectNotice",30*1000,0,"d",id);
    new sLowerName[MAX_PLAYER_NAME];
    format(sLowerName, sizeof(sLowerName), "%s", playername);
    strtolower(sLowerName);
    g_DeathNotice[id][DN_hashOwner] = udb_hash( sLowerName );
    return 1;
}

forward DestroyDisconnectNotice(noticeid);
public DestroyDisconnectNotice(noticeid) {
    //printf("DestroyDisconnectNotice(%d)",noticeid);
    DestroyDynamicPickup( g_DeathNotice[noticeid][DN_iPickup] );
    DestroyDynamic3DTextLabel( g_DeathNotice[noticeid][DN_t3dLabel] );
    KillTimer(g_DeathNotice[noticeid][DN_tTimer]);
    g_DeathNotice[noticeid][DN_hashOwner] = 0;
    return 1;
}



stock ShowPlayerHitmenList(playerid) {
    new
        String[512];
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( Spieler[i][pKopfgeldID] != INVALID_PLAYER_ID ) {
            if( Spieler[i][pKopfgeldStatus] == false ) {
                format(String,sizeof(String),"%s%s - $%s (%s)\n", String , GetName(Spieler[i][pKopfgeldID]), AddDelimiters(Spieler[i][pKopfgeld]),GetName(i) );
            }
        }
    }
    if(!String[0]) {
        ShowPlayerDialog(playerid,DIALOG_HITMEN_E,DIALOG_STYLE_MSGBOX,"Hitmen List","Keine Aufträge vorhanden!","Abbruch","");
        return 0;
    }
    else {
        ShowPlayerDialog(playerid,DIALOG_HITMEN_LIST,DIALOG_STYLE_LIST,"Hitmen List",String,"Annehmen","Ablehnen");
        return 1;
    }
}

stock GetPlayerHitmenIndex(index) {
    new
        j;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( Spieler[i][pKopfgeldID] != INVALID_PLAYER_ID ) {
            if( Spieler[i][pKopfgeldStatus] == false ) {
                if(index == j ) {
                    return i;
                }
                j++;
            }
        }
    }
    return INVALID_PLAYER_ID;
}












stock VehicleDriverID(vehicleid) //By Jan "DracoBlue" Schütze
{
    for(new i ; i < MAX_PLAYERS ; i++) {
        if((GetPlayerVehicleID(i) == vehicleid) && (GetPlayerState(i)==2))  return i;
    }
    return INVALID_PLAYER_ID;
}
//-------------------------------------------------------------------------------

stock IsVehicleInUse(vehicleid) { //By Sacky
    if(VehicleDriverID(vehicleid) != INVALID_PLAYER_ID) {
        return 1;
    }
    return 0;
}


stock SafeboxInteraction(playerid, action, itemid, amount, bool:dialog) {
    if (action == SAFEBOX_ACTION_TAKE) {
        switch (itemid) {
            case SAFEBOX_DRUGS: {
                if (amount > Spieler[playerid][pSafeDrogen]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viele Drogen hast du nicht gelagert.");
                    if (dialog) ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_TAKE, itemid);
                    return 1;
                }

                Spieler[playerid][pSafeDrogen] -= amount;
                Spieler[playerid][pDrugs] += amount;
                SCMFormatted(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Du hast {FF9900}%s Gramm Drogen {FFFFFF}aus deiner Safebox entnommen.", AddDelimiters(amount));
            }
            case SAFEBOX_MATS: {
                if (amount > Spieler[playerid][pSafeTeile]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viele Waffenteile hast du nicht gelagert.");
                    if (dialog) ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_TAKE, itemid);
                    return 1;
                }

                Spieler[playerid][pSafeTeile] -= amount;
                Spieler[playerid][pWaffenteile] += amount;
                SCMFormatted(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Du hast {FF9900}%s Waffenteile {FFFFFF}aus deiner Safebox entnommen.", AddDelimiters(amount));
            }
            case SAFEBOX_WCODES: {
                if (amount > Spieler[playerid][pSafeWantedCodes]) { 
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viele Wantedcodes hast du nicht gelagert.");
                    if (dialog) ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_TAKE, itemid);
                    return 1;
                }

                Spieler[playerid][pSafeWantedCodes] -= amount;
                Spieler[playerid][pWantedCodes] += amount;
                SCMFormatted(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Du hast {FF9900}%s Wantedcodes {FFFFFF}aus deiner Safebox entnommen.", AddDelimiters(amount));
            }
            case SAFEBOX_SPICE: {
                if (amount > Spieler[playerid][pSafeSpice]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viel Spice hast du nicht gelagert.");
                    if (dialog) ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_TAKE, itemid);
                    return 1;
                }
                //if(CheckPlayerSpice(playerid,amount)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur maximal 3.000 Gramm Spice besitzen!");
                Spieler[playerid][pSafeSpice] -= amount;
                Spieler[playerid][pSpice] += amount;
                SCMFormatted(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Du hast {FF9900}%s Gramm Spice {FFFFFF}aus deiner Safebox entnommen.", AddDelimiters(amount));
            }
        }

        if (dialog) ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_MENU);
        return 1;
    }
    else if (action == SAFEBOX_ACTION_STORE) {
        switch (itemid) {
            case SAFEBOX_DRUGS: {
                if (amount > Spieler[playerid][pDrugs]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viele Drogen hast du nicht dabei.");
                    if (dialog) ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_STORE, itemid);
                    return 1;
                }

                Spieler[playerid][pDrugs] -= amount;
                Spieler[playerid][pSafeDrogen] += amount;
                SCMFormatted(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Du hast {FF9900}%s Gramm Drogen {FFFFFF}in deine Safebox eingelagert.", AddDelimiters(amount));
            }
            case SAFEBOX_MATS: {
                if (amount > Spieler[playerid][pWaffenteile]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viele Waffenteile hast du nicht dabei.");
                    if (dialog) ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_STORE, itemid);
                    return 1;
                }

                Spieler[playerid][pWaffenteile] -= amount;
                Spieler[playerid][pSafeTeile] += amount;
                SCMFormatted(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Du hast {FF9900}%s Waffenteile {FFFFFF}in deine Safebox eingelagert.", AddDelimiters(amount));
            }
            case SAFEBOX_WCODES: {
                if (amount > Spieler[playerid][pWantedCodes]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viele Wantedcodes hast du nicht dabei.");
                    if (dialog) ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_STORE, itemid);
                    return 1;
                }

                Spieler[playerid][pWantedCodes] -= amount;
                Spieler[playerid][pSafeWantedCodes] += amount;
                SCMFormatted(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Du hast {FF9900}%s Wantedcodes {FFFFFF}in deine Safebox eingelagert.", AddDelimiters(amount));
            }
            case SAFEBOX_SPICE: {
                if (amount > Spieler[playerid][pSpice]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viel Spice hast du nicht dabei.");
                    if (dialog) ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_STORE, itemid);
                    return 1;
                }
                //if(CheckPlayerSpice(playerid,amount)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur maximal 3.000 Gramm Spice besitzen!");
                Spieler[playerid][pSpice] -= amount;
                Spieler[playerid][pSafeSpice] += amount;
                SCMFormatted(playerid, COLOR_YELLOW, "[INFO] {FFFFFF}Du hast {FF9900}%s Gramm Spice {FFFFFF}in deine Safebox eingelagert.", AddDelimiters(amount));
            }
        }

        if (dialog) ShowSafeboxDialog(playerid, DIALOG_SAFEBOX_MENU);
        return 1;
    }

    return 1;
}

stock ShowSafeboxDialog(playerid, dialogid, extraid = 0) {
    new dialogText[256], dialogCaption[64];
    if (!IsPlayerInRangeOfPoint(playerid, 3.0, SAFEBOX_COORDS_LS) && !IsPlayerInRangeOfPoint(playerid, 3.0, SAFEBOX_COORDS_LV) && !IsPlayerInRangeOfPoint(playerid, 3.0, SAFEBOX_COORDS_SF))
        return SendClientMessage(playerid, COLOR_RED, "Du befindest dich nicht in der Nähe der Safebox! /Navi -> Illegale Orte -> Safebox");

    switch (dialogid) {
        case DIALOG_SAFEBOX_MENU: {
            dialogText = "Material\tMenge\n";
            format(dialogText, sizeof(dialogText), "%s{FFFFFF}Drogen\t%s Gramm\nWaffenteile\t%s Stück\nWantedcodes\t%s Stück\nSpice\t%s Gramm", 
                dialogText, AddDelimiters(Spieler[playerid][pSafeDrogen]), AddDelimiters(Spieler[playerid][pSafeTeile]), 
                AddDelimiters(Spieler[playerid][pSafeWantedCodes]), AddDelimiters(Spieler[playerid][pSafeSpice]));

            return ShowPlayerDialog(playerid, DIALOG_SAFEBOX_MENU, DIALOG_STYLE_TABLIST_HEADERS, "{36B6E0}Safebox - Übersicht", dialogText, "Auswählen", "Schließen");
        }
        case DIALOG_SAFEBOX_ACTION: {
            format(dialogCaption, sizeof(dialogCaption), "{36B6E0}Safebox - %s", g_SafeboxItems[extraid]);
            switch (extraid) {
                case SAFEBOX_DRUGS: format(dialogText, sizeof(dialogText), "Einlagern (Inventar: %s Gramm)\nEntnehmen (Lager: %s Gramm)", AddDelimiters(Spieler[playerid][pDrugs]), AddDelimiters(Spieler[playerid][pSafeDrogen]));
                case SAFEBOX_MATS: format(dialogText, sizeof(dialogText), "Einlagern (Inventar: %s Stück)\nEntnehmen (Lager: %s Stück)", AddDelimiters(Spieler[playerid][pWaffenteile]), AddDelimiters(Spieler[playerid][pSafeTeile]));
                case SAFEBOX_WCODES: format(dialogText, sizeof(dialogText), "Einlagern (Inventar: %s Stück)\nEntnehmen (Lager: %s Stück)", AddDelimiters(Spieler[playerid][pWantedCodes]), AddDelimiters(Spieler[playerid][pSafeWantedCodes]));
                case SAFEBOX_SPICE: format(dialogText, sizeof(dialogText), "Einlagern (Inventar: %s Gramm)\nEntnehmen (Lager: %s Gramm)", AddDelimiters(Spieler[playerid][pSpice]), AddDelimiters(Spieler[playerid][pSafeSpice]));
            }

            return ShowPlayerDialog(playerid, DIALOG_SAFEBOX_ACTION, DIALOG_STYLE_LIST, dialogCaption, dialogText, "Weiter", "Zurück");
        }
        case DIALOG_SAFEBOX_TAKE: {
            format(dialogCaption, sizeof(dialogCaption), "{36B6E0}Safebox - %s - Entnehmen", g_SafeboxItems[extraid]);
            switch (extraid) {
                case SAFEBOX_DRUGS: {
                    if (Spieler[playerid][pSafeDrogen] <= 0) return ShowPlayerDialog(playerid, DIALOG_SAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Du hast keine Drogen in deiner Safebox gelagert.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Drogen: {FFFFFF}%s Gramm in der Safebox\nGebe an, wieviele Gramm Drogen du entnehmen möchtest:", AddDelimiters(Spieler[playerid][pSafeDrogen]));
                }
                case SAFEBOX_MATS: {
                    if (Spieler[playerid][pSafeTeile] <= 0) return ShowPlayerDialog(playerid, DIALOG_SAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Du hast keine Waffenteile in deiner Safebox gelagert.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Waffenteile: {FFFFFF}%s Stück in der Safebox\nGebe an, wieviele Waffenteile du entnehmen möchtest:", AddDelimiters(Spieler[playerid][pSafeTeile]));
                }
                case SAFEBOX_WCODES: {
                    if (Spieler[playerid][pSafeWantedCodes] <= 0) return ShowPlayerDialog(playerid, DIALOG_SAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Du hast keine Wantedcodes in deiner Safebox gelagert.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Wantedcodes: {FFFFFF}%s Stück in der Safebox\nGebe an, wieviele Wantedcodes du entnehmen möchtest:", AddDelimiters(Spieler[playerid][pSafeWantedCodes]));
                }
                case SAFEBOX_SPICE: {
                    if (Spieler[playerid][pSafeSpice] <= 0) return ShowPlayerDialog(playerid, DIALOG_SAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Du hast kein Spice in deiner Safebox gelagert.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Spice: {FFFFFF}%s Gramm in der Safebox\nGebe an, wieviele Gramm Spice du entnehmen möchtest:", AddDelimiters(Spieler[playerid][pSafeSpice]));
                }
            }

            return ShowPlayerDialog(playerid, DIALOG_SAFEBOX_TAKE, DIALOG_STYLE_INPUT, dialogCaption, dialogText, "Entnehmen", "Zurück");
        }
        case DIALOG_SAFEBOX_STORE: {
            format(dialogCaption, sizeof(dialogCaption), "{36B6E0}Safebox - %s - Einlagern", g_SafeboxItems[extraid]);
            switch (extraid) {
                case SAFEBOX_DRUGS: {
                    if (Spieler[playerid][pDrugs] <= 0) return ShowPlayerDialog(playerid, DIALOG_SAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Du hast keine Drogen zum Einlagern.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Drogen: {FFFFFF}%s Gramm im Inventar\nGebe an, wieviele Gramm Drogen du einlagern möchtest:", AddDelimiters(Spieler[playerid][pDrugs]));
                }
                case SAFEBOX_MATS: {
                    if (Spieler[playerid][pWaffenteile] <= 0) return ShowPlayerDialog(playerid, DIALOG_SAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Du hast keine Waffenteile zum Einlagern.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Waffenteile: {FFFFFF}%s Stück im Inventar\nGebe an, wieviele Waffenteile du einlagern möchtest:", AddDelimiters(Spieler[playerid][pWaffenteile]));
                }
                case SAFEBOX_WCODES: {
                    if (Spieler[playerid][pWantedCodes] <= 0) return ShowPlayerDialog(playerid, DIALOG_SAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Du hast keine Wantedcodes zum Einlagern.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Wantedcodes: {FFFFFF}%s Stück im Inventar\nGebe an, wieviele Wantedcodes du einlagern möchtest:", AddDelimiters(Spieler[playerid][pWantedCodes]));
                }
                case SAFEBOX_SPICE: {
                    if (Spieler[playerid][pSpice] <= 0) return ShowPlayerDialog(playerid, DIALOG_SAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Du hast kein Spice zum Einlagern.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Spice: {FFFFFF}%s Gramm im Inventar\nGebe an, wieviele Gramm Spice du einlagern möchtest:", AddDelimiters(Spieler[playerid][pSpice]));
                }
            }

            return ShowPlayerDialog(playerid, DIALOG_SAFEBOX_STORE, DIALOG_STYLE_INPUT, dialogCaption, dialogText, "Einlagern", "Zurück");
        }
    }

    return 1;
}


forward stopMask(playerid);
public stopMask(playerid) {
    SendClientMessage(playerid,COLOR_ORANGE,"Die 5 Minuten sind um, dein Name ist nun wieder für alle sichtbar!");
    Spieler[playerid][bMaske] = false;
    KillTimer(Spieler[playerid][tMaske]);
    SetPlayerColor(playerid, ( GetPlayerColor(playerid) | 0xFF ) );
    for(new i ; i < MAX_PLAYERS ; i++) {
        ShowPlayerNameTagForPlayer(i,playerid,1);
    }
    return 1;
}




stock ResetAugenbinde(playerid) {
    TextDrawHideForPlayer(playerid,BlackBox);
    SetCameraBehindPlayer(playerid);
    return 1;
}


forward stopBlinkAndHideZone(zoneid);
public stopBlinkAndHideZone(zoneid) {
    GangZoneStopFlashForAll(zoneid);
    GangZoneHideForAll(zoneid);

    return 1;
}

public OnPlayerEnterDynamicArea(playerid, areaid) {
    //printf("OnPlayerEnterDynamicArea(%d,%d)",playerid,areaid);
    //if(Gate_OnPlayerEnterDynamicArea(playerid,areaid)) return 1;
    Gang_OnPlayerEnterDynamicArea(playerid,areaid);
    /*for(new i ; i < sizeof(g_aiNoDM) ; i++) {
        if( g_aiNoDM[i] == areaid) {
            TextDrawShowForPlayer(playerid,tdNoDM);
            Spieler[playerid][bNoDMZone] = true;
            break;
        }
    }*/
    if( areaid == g_iAlhambra ) {
        PlayAudioStreamForPlayer(playerid,SOUND_ALHAMBRA,0.0,0.0,0.0,60.0);
    }

    if ((areaid == g_iAlcatraz && Spieler[playerid][pJailed] != 2 && !IsPlayerExecutive(playerid)) || 
        (areaid == g_iBankLS_area && g_iBankraubStatus == Bankraub_Aktiv) ||
        (areaid == g_iEvidenceRoom_area && g_evidenceRoomHeist[EVIDENCEROOM_HEIST_STATUS] == EVIDENCEROOM_STATUS_ONGOING)) {
        SendClientMessage(playerid, 0xCC3333FF, "[STAAT] {FF5500}Achtung! Sie befinden sich in einer Gefahrenzone!");
        SendClientMessage(playerid, 0xCC3333FF, "[STAAT] {FF5500}Verlassen Sie umgehend das Gebiet sonst müssen Sie mit Beschuss rechnen!");
    }
    if ((areaid == g_iAlcatraz && Spieler[playerid][pJailed] != 2 && !IsPlayerExecutive(playerid)) || 
        (areaid == g_iBankLV_area && g_iBankraubLVStatus == Bankraub_Aktiv) ||
        (areaid == g_iEvidenceRoom_area && g_evidenceRoomHeist[EVIDENCEROOM_HEIST_STATUS] == EVIDENCEROOM_STATUS_ONGOING)) {
        SendClientMessage(playerid, 0xCC3333FF, "[STAAT] {FF5500}Achtung! Sie befinden sich in einer Gefahrenzone!");
        SendClientMessage(playerid, 0xCC3333FF, "[STAAT] {FF5500}Verlassen Sie umgehend das Gebiet sonst müssen Sie mit Beschuss rechnen!");
    }

    new e_streamer_extra_id = Streamer_GetIntData(STREAMER_TYPE_AREA,areaid,E_STREAMER_EXTRA_ID);
    if( e_streamer_extra_id == AREA_BLITZER_VEHICLE ) 
    {
        if( gettime() > Spieler[playerid][pBlitzerCooldown] ) {
            if( BlitzerfreieFraktion(playerid) || Spieler[playerid][pAdminDienst]) return 1;
            if( IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER ) {
                for(new i ; i < g_iBlitzer ; i++) {
                    if( g_Blitzer[i][B_iArea] == areaid ) {
                        new
                            driver,
                            strafe,
                            //schein[26],
                            String[128],
                            //strafpunkte,
                            kmh_zu_schnell,
                            //Float:speed,
                            //SpeedT,
                            vehicleid,
                            vehicleid_blitzer,
                            modelid,
                            strafgeld,
                            SpeedF;
                        vehicleid_blitzer = g_Blitzer[i][B_iVehicle];
                        SpeedF = GetPlayerVehicleSpeed(playerid);
                        // SpeedT = floatround(speed)/2;
                        // SpeedF = (SpeedT*1000)/700;
                        Spieler[playerid][pBlitzerCooldown] = gettime() + 5;
                        if( SpeedF > aiVehicleBlitzer[vehicleid_blitzer][FB_iLimit] ) {
                            vehicleid = GetPlayerVehicleID(playerid);
                            modelid = GetVehicleModel(vehicleid);
                            kmh_zu_schnell = SpeedF - aiVehicleBlitzer[vehicleid_blitzer][FB_iLimit];
                            strafgeld = aiVehicleBlitzer[vehicleid_blitzer][FB_iGeldStrafe];
                            if( !( IsACar(modelid) || IsABike(modelid) || IsATruck(modelid) )) {
                                return 1;
                            }
                            /*
                            strafpunkte = floatround(  kmh_zu_schnell / 6.0 , floatround_floor );
                            if( IsACar(modelid)) {
                                GivePlayerStrafpunkte(playerid,1,strafpunkte);
                                schein = "Auto Führerschein";
                            }
                            else if( IsABike(modelid)) {
                                GivePlayerStrafpunkte(playerid,4,strafpunkte);
                                schein = "Motorradschein";
                            }
                            else if( IsATruck(modelid)) {
                                GivePlayerStrafpunkte(playerid,5,strafpunkte);
                                schein = "LKW-Schein";
                            }
                            else {
                                return 1;
                            }
                            */
                            format(String,sizeof(String),"Sie haben die maximale Geschwindigkeitsbegrenzung überschritten! Erlaubt waren %d km/h, Sie fuhren %d km/h! (%d km/h zu schnell)",aiVehicleBlitzer[vehicleid_blitzer][FB_iLimit] , SpeedF,kmh_zu_schnell);
                            SendClientMessage(playerid,COLOR_ORANGE,String);

                            strafe = strafgeld * kmh_zu_schnell;
                            format(String,sizeof(String),"Ordnungsgeld: $%s ", AddDelimiters(strafe) );
                            SendClientMessage(playerid,COLOR_ORANGE,String);

                            driver = VehicleDriverID(vehicleid);
                            if( IsPlayerConnected(driver) ) {
                                format(String,sizeof(String),"[BLITZER] %s wurde geblitzt! Geschwindigkeit: %d, Bußgeld: $%s",GetName(playerid),SpeedF, AddDelimiters(strafe));
                                SendFraktionMessage(5, COLOR_CHAT_FRAKTION, String);
                                SendFraktionMessage(1, COLOR_CHAT_FRAKTION, String);
                                SendFraktionMessage(2, COLOR_CHAT_FRAKTION, String);
                                SendFraktionMessage(16, COLOR_CHAT_FRAKTION, String);
                            }

                            GivePlayerCash(playerid,-strafe);
                            TreasuryDeposit(strafe);
                        }
                        break;
                    }
                }
            }
        }
    }
    else if( e_streamer_extra_id == AREA_ZOLL ) {
        SendClientMessage(playerid, COLOR_YELLOW, "Sie stehen an einer Zollstation, der Zollübergang kostet $5.000! Befehl: /Zoll");
    }
    return 1;
}

public OnPlayerLeaveDynamicArea(playerid, areaid) {
    //if(Gate_OnPlayerLeaveDynamicArea(playerid,areaid)) return 1;
    Gang_OnPlayerLeaveDynamicArea(playerid,areaid);
    if( areaid == g_iAlhambra ) {
        StopAudioStreamForPlayer(playerid);
    }
    new e_streamer_extra_id = Streamer_GetIntData(STREAMER_TYPE_AREA,areaid,E_STREAMER_EXTRA_ID);
    if( e_streamer_extra_id == AREA_ZOLL ) {
        for(new i ; i < sizeof(g_Zoll); i++) {
            if( areaid == g_Zoll[i][Z_iArea] ) {
                // printf("Zoll_IsOpen(%d)",i, Zoll_IsOpen(i));
                if( Zoll_IsOpen(i) ) {
                    if( playerid == g_Zoll[i][Z_iPlayerID] ) {
                        //SendClientMessage(playerid,COLOR_GREEN,"Zollwächter: Schöne weiterfahrt!");
                        Zoll_Close(i);
                    }
                }
                else if( g_Zoll[i][Z_iStatus] == 1 ) {
                    if( playerid == g_Zoll[i][Z_iPlayerID] ) {
                        // Während des öffnen "abgehauen"... schließen!
                        g_Zoll[i][Z_iStatus] = 2;
                        StopDynamicObject( g_Zoll[i][Z_iObject] );
                        SendClientMessage(playerid,COLOR_ORANGE,"Zollwächter: Die Schranke schließt automatisch, wenn du dich weiter weg bewegst.");
                        Zoll_Close(i);
                    }
                }
                break;
            }
        }
    }
    /*for(new i ; i < sizeof(g_aiNoDM) ; i++) {
        if( g_aiNoDM[i] == areaid) {
            TextDrawHideForPlayer(playerid,tdNoDM);
            Spieler[playerid][bNoDMZone] = false;
            break;
        }
    }*/
    return 1;
}


forward checkGangJail(playerid);
public checkGangJail(playerid) {
    new
        String[128];
    if( !IsPlayerInRangeOfPoint(playerid,5.0,2162.6523,-102.3127,2.7500) ) {
        format(String,sizeof(String),"%s hat es nicht geschafft die Gangjail Tore aufzubrechen",GetName(playerid));
        SendRoundMessage(2162.6523,-102.3127,2.7500,COLOR_LIGHTRED2,String);
        KillTimer(tOpenGangJail);
        tOpenGangJail = INVALID_TIMER_ID;
        return 1;
    }
    if( tickOpenGangJail <= gettime() ) {
        new
            c;
        KillTimer(tOpenGangJail);
        tOpenGangJail = INVALID_TIMER_ID;
        format(String,sizeof(String),"%s hat es geschafft die Gangjail Tore aufzubrechen",GetName(playerid));
        SendRoundMessage(2160.4111,-98.0815,2.8239,COLOR_GREEN,String);
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i)) {
                if( Spieler[i][pJailed] == 4 ) {
                    SetPlayerPos(i,2160.4048 + float(random(3)) - float(random(3)) , -98.1445  + float(random(3)) - float(random(3)) , 2.8204);
                    SetPlayerFacingAngle(i,239.8035);
                    Spieler[i][pJailed] = 0;
                    c++;
                }
            }
        }
        if(!c) {
            SendClientMessage(playerid,COLOR_GREEN,"Das Gangjail war leider leer!");
        }
        else {
            format(String,sizeof(String),"Du hast %d Spieler zur Flucht verholfen",c);
            SendClientMessage(playerid,COLOR_GREEN,String);
        }
    }
    return 1;
}


stock FSafeboxSoreGebiet(fsafeboxfrakid, itemid, amount) {
	switch (itemid) {
 		case SAFEBOX_DRUGS: {
   			g_fraktion[fsafeboxfrakid][Fr_FSDrogen] += amount;
      	}
       	case SAFEBOX_MATS: {
        	g_fraktion[fsafeboxfrakid][Fr_FSWaffenteile] += amount;
		}
	}
    return 1;
}

stock FSafeboxInteraction(playerid, action, itemid, amount, bool:dialog) {
    new message[145], fraktion = Spieler[playerid][pFraktion];
    if (action == SAFEBOX_ACTION_TAKE) {
        if (Spieler[playerid][pRank] < 4) {
            if (dialog) ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_ACTION);
            return SendClientMessage(playerid, COLOR_RED, "Dein Rank reicht dafür nicht aus.");
        }
        switch (itemid) {
            case SAFEBOX_DRUGS: {
                if (amount > g_fraktion[fraktion][Fr_FSDrogen]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viele Drogen sind nicht gelagert.");
                    if (dialog) ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_TAKE, itemid);
                    return 1;
                }

                g_fraktion[fraktion][Fr_FSDrogen] -= amount;
                Spieler[playerid][pDrugs] += amount;
                format(message, sizeof(message), "[INFO] {FFFFFF}%s hat {FF9900}%s Gramm Drogen {FFFFFF}aus der FSafebox entnommen.", GetName(playerid), AddDelimiters(amount));
                SendFraktionMessage(fraktion, COLOR_YELLOW, message);
                LogFSafebox(message);
            }
            case SAFEBOX_MATS: {
                if (amount > g_fraktion[fraktion][Fr_FSWaffenteile]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viele Waffenteile sind nicht gelagert.");
                    if (dialog) ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_TAKE, itemid);
                    return 1;
                }

                g_fraktion[fraktion][Fr_FSWaffenteile] -= amount;
                Spieler[playerid][pWaffenteile] += amount;
                format(message, sizeof(message), "[INFO] {FFFFFF}%s hat {FF9900}%s Waffenteile {FFFFFF}aus der FSafebox entnommen.", GetName(playerid), AddDelimiters(amount));
                SendFraktionMessage(fraktion, COLOR_YELLOW, message);
                LogFSafebox(message);
            }
            case SAFEBOX_WCODES: {
                if (amount > g_fraktion[fraktion][Fr_FSWaffenteile]) { 
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viele Wantedcodes sind nicht gelagert.");
                    if (dialog) ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_TAKE, itemid);
                    return 1;
                }

                g_fraktion[fraktion][Fr_FSWaffenteile] -= amount;
                Spieler[playerid][pWantedCodes] += amount;
                format(message, sizeof(message), "[INFO] {FFFFFF}%s hat {FF9900}%s Wantedcodes {FFFFFF}aus der FSafebox entnommen.", GetName(playerid), AddDelimiters(amount));
                SendFraktionMessage(fraktion, COLOR_YELLOW, message);
                LogFSafebox(message);
            }
            case SAFEBOX_SPICE: {
                if (amount > g_fraktion[fraktion][Fr_FSSpice]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viel Spice ist nicht gelagert.");
                    if (dialog) ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_TAKE, itemid);
                    return 1;
                }
                //if(CheckPlayerSpice(playerid,amount)) return SendClientMessage(playerid, COLOR_RED, "[FEHLER] {FFFFFF}Du kannst nur maximal 3.000 Gramm Spice besitzen!");
                g_fraktion[fraktion][Fr_FSSpice] -= amount;
                Spieler[playerid][pSpice] += amount;
                format(message, sizeof(message), "[INFO] {FFFFFF}%s hat {FF9900}%s Gramm Spice {FFFFFF}aus der FSafebox entnommen.", GetName(playerid), AddDelimiters(amount));
                SendFraktionMessage(fraktion, COLOR_YELLOW, message);
                LogFSafebox(message);
            }
            /*case SAFEBOX_KRAUTER: {
                if (amount > g_fraktion[fraktion][Fr_FSKrauter]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viele Kräuter ist nicht gelagert.");
                    if (dialog) ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_TAKE, itemid);
                    return 1;
                }

                g_fraktion[fraktion][Fr_FSKrauter] -= amount;
                Spieler[playerid][pKrauterMische] += amount;
                format(message, sizeof(message), "[INFO] {FFFFFF}%s hat {FF9900}%s Gramm Kräuter {FFFFFF}aus der FSafebox entnommen.", GetName(playerid), AddDelimiters(amount));
                SendFraktionMessage(fraktion, COLOR_YELLOW, message);
            }*/
            case SAFEBOX_GANGSAMEN: {
                if (amount > g_fraktion[fraktion][Fr_FSGangsamen]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viele Drogensamen ist nicht gelagert.");
                    if (dialog) ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_TAKE, itemid);
                    return 1;
                }

                g_fraktion[fraktion][Fr_FSGangsamen] -= amount;
                Spieler[playerid][pGangDrogenSamen] += amount;
                format(message, sizeof(message), "[INFO] {FFFFFF}%s hat {FF9900}%s Drogensamen {FFFFFF}aus der FSafebox entnommen.", GetName(playerid), AddDelimiters(amount));
                SendFraktionMessage(fraktion, COLOR_YELLOW, message);
                LogFSafebox(message);
            }
        }

        if (dialog) ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_MENU);
        return 1;
    }
    else if (action == SAFEBOX_ACTION_STORE) {
        switch (itemid) {
            case SAFEBOX_DRUGS: {
                if (amount > Spieler[playerid][pDrugs]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viele Drogen hast du nicht dabei.");
                    if (dialog) ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_STORE, itemid);
                    return 1;
                }

                Spieler[playerid][pDrugs] -= amount;
                g_fraktion[fraktion][Fr_FSDrogen] += amount;
                format(message, sizeof(message), "[INFO] {FFFFFF}%s hat {FF9900}%s Gramm Drogen {FFFFFF}in die FSafebox eingelagert.", GetName(playerid), AddDelimiters(amount));
                SendFraktionMessage(fraktion, COLOR_YELLOW, message);
                LogFSafebox(message);
            }
            case SAFEBOX_MATS: {
                if (amount > Spieler[playerid][pWaffenteile]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viele Waffenteile hast du nicht dabei.");
                    if (dialog) ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_STORE, itemid);
                    return 1;
                }

                Spieler[playerid][pWaffenteile] -= amount;
                g_fraktion[fraktion][Fr_FSWaffenteile] += amount;
                format(message, sizeof(message), "[INFO] {FFFFFF}%s hat {FF9900}%s Waffenteile {FFFFFF}in die FSafebox eingelagert.", GetName(playerid), AddDelimiters(amount));
                SendFraktionMessage(fraktion, COLOR_YELLOW, message);
                LogFSafebox(message);
            }
            case SAFEBOX_WCODES: {
                if (amount > Spieler[playerid][pWantedCodes]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viele Wantedcodes hast du nicht dabei.");
                    if (dialog) ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_STORE, itemid);
                    return 1;
                }

                Spieler[playerid][pWantedCodes] -= amount;
                g_fraktion[fraktion][Fr_FSWaffenteile] += amount;
                format(message, sizeof(message), "[INFO] {FFFFFF}%s hat {FF9900}%s Wantedcodes {FFFFFF}in die FSafebox eingelagert.", GetName(playerid), AddDelimiters(amount));
                SendFraktionMessage(fraktion, COLOR_YELLOW, message);
                LogFSafebox(message);
            }
            case SAFEBOX_SPICE: {
                if (amount > Spieler[playerid][pSpice]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viel Spice hast du nicht dabei.");
                    if (dialog) ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_STORE, itemid);
                    return 1;
                }
                Spieler[playerid][pSpice] -= amount;
                g_fraktion[fraktion][Fr_FSSpice] += amount;
                format(message, sizeof(message), "[INFO] {FFFFFF}%s hat {FF9900}%s Gramm Spice {FFFFFF}in die FSafebox eingelagert.", GetName(playerid), AddDelimiters(amount));
                SendFraktionMessage(fraktion, COLOR_YELLOW, message);
                LogFSafebox(message);
            }
            /*case SAFEBOX_KRAUTER: {
                if (amount > Spieler[playerid][pKrauterMische]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viele Kräuter hast du nicht dabei.");
                    if (dialog) ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_STORE, itemid);
                    return 1;
                }

                Spieler[playerid][pKrauterMische] -= amount;
                g_fraktion[fraktion][Fr_FSKrauter] += amount;
                format(message, sizeof(message), "[INFO] {FFFFFF}%s hat {FF9900}%s Gramm Kräuter {FFFFFF}in die FSafebox eingelagert.", GetName(playerid), AddDelimiters(amount));
                SendFraktionMessage(fraktion, COLOR_YELLOW, message);
            }*/
            case SAFEBOX_GANGSAMEN: {
                if (amount > Spieler[playerid][pGangDrogenSamen]) {
                    SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}So viele Drogensamen hast du nicht dabei.");
                    if (dialog) ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_STORE, itemid);
                    return 1;
                }

                Spieler[playerid][pGangDrogenSamen] -= amount;
                g_fraktion[fraktion][Fr_FSGangsamen] += amount;
                format(message, sizeof(message), "[INFO] {FFFFFF}%s hat {FF9900}%s Drogensamen {FFFFFF}in die FSafebox eingelagert.", GetName(playerid), AddDelimiters(amount));
                SendFraktionMessage(fraktion, COLOR_YELLOW, message);
                LogFSafebox(message);
            }
        }

        if (dialog) ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_MENU);
        return 1;
    }

    return 1;
}

stock ShowFSafeboxDialog(playerid, dialogid, extraid = 0) {
    new dialogText[256], dialogCaption[64];
    new frak_index = Spieler[playerid][pFraktion];
    if (frak_index < 1) return SendClientMessage(playerid, COLOR_RED, "Deine Fraktion besitzt keine Safebox.");
    if (!IsPlayerInRangeOfPoint(playerid, 5.0, g_fraktion[frak_index][Fr_FSafeboxX], g_fraktion[frak_index][Fr_FSafeboxY], g_fraktion[frak_index][Fr_FSafeboxZ]))
        return SendClientMessage(playerid, COLOR_RED, "Du bist nicht bei der Safebox deiner Fraktion.");

    new fraktion = Spieler[playerid][pFraktion];

    switch (dialogid) {
        case DIALOG_FSAFEBOX_MENU: {
            dialogText = "Material\tMenge\n";
            format(dialogText, sizeof(dialogText), "%s{FFFFFF}Drogen\t%s Gramm\nWaffenteile\t%s Stück\nWantedcodes\t%s Stück\nSpice\t%s Gramm\nDrogensamen\t%s Stück", 
                dialogText, AddDelimiters(g_fraktion[fraktion][Fr_FSDrogen]), AddDelimiters(g_fraktion[fraktion][Fr_FSWaffenteile]), 
                AddDelimiters(g_fraktion[fraktion][Fr_FSWantedcodes]), AddDelimiters(g_fraktion[fraktion][Fr_FSSpice]), AddDelimiters(g_fraktion[fraktion][Fr_FSGangsamen]));

            return ShowPlayerDialog(playerid, DIALOG_FSAFEBOX_MENU, DIALOG_STYLE_TABLIST_HEADERS, "{EFCE6D}FSafebox - Übersicht", dialogText, "Auswählen", "Schließen");
        }
        case DIALOG_FSAFEBOX_ACTION: {
            format(dialogCaption, sizeof(dialogCaption), "{EFCE6D}FSafebox - %s", g_SafeboxItems[extraid]);
            switch (extraid) {
                case SAFEBOX_DRUGS: {
                    format(dialogText, sizeof(dialogText), "Einlagern (Inventar: %s Gramm)", AddDelimiters(Spieler[playerid][pDrugs]));
                    if (Spieler[playerid][pRank] >= 4) format(dialogText, sizeof(dialogText), "%s\nEntnehmen (Lager: %s Gramm)", dialogText, AddDelimiters(g_fraktion[fraktion][Fr_FSDrogen]));
                }
                case SAFEBOX_MATS: {
                    format(dialogText, sizeof(dialogText), "Einlagern (Inventar: %s Stück)", AddDelimiters(Spieler[playerid][pWaffenteile]));
                    if (Spieler[playerid][pRank] >= 5) format(dialogText, sizeof(dialogText), "%s\nEntnehmen (Lager: %s Stück)", dialogText, AddDelimiters(g_fraktion[fraktion][Fr_FSWaffenteile]));
                }
                case SAFEBOX_WCODES: {
                    format(dialogText, sizeof(dialogText), "Einlagern (Inventar: %s Stück)", AddDelimiters(Spieler[playerid][pWantedCodes]));
                    if (Spieler[playerid][pRank] >= 5) format(dialogText, sizeof(dialogText), "%s\nEntnehmen (Lager: %s Stück)", dialogText, AddDelimiters(g_fraktion[fraktion][Fr_FSWantedcodes]));
                }
                case SAFEBOX_SPICE: {
                    format(dialogText, sizeof(dialogText), "Einlagern (Inventar: %s Gramm)", AddDelimiters(Spieler[playerid][pSpice]));
                    if (Spieler[playerid][pRank] >= 4) format(dialogText, sizeof(dialogText), "%s\nEntnehmen (Lager: %s Gramm)", dialogText, AddDelimiters(g_fraktion[fraktion][Fr_FSSpice]));
                }
                /*case SAFEBOX_KRAUTER: {
                    format(dialogText, sizeof(dialogText), "Einlagern (Inventar: %s Gramm)", AddDelimiters(Spieler[playerid][pKrauterMische]));
                    if (Spieler[playerid][pRank] >= 5) format(dialogText, sizeof(dialogText), "%s\nEntnehmen (Lager: %s Gramm)", dialogText, AddDelimiters(g_fraktion[fraktion][Fr_FSKrauter]));
                }*/
                case SAFEBOX_GANGSAMEN: {
                    format(dialogText, sizeof(dialogText), "Einlagern (Inventar: %s Stück)", AddDelimiters(Spieler[playerid][pGangDrogenSamen]));
                    if (Spieler[playerid][pRank] >= 5) format(dialogText, sizeof(dialogText), "%s\nEntnehmen (Lager: %s Gramm)", dialogText, AddDelimiters(g_fraktion[fraktion][Fr_FSGangsamen]));
                }
            }

            return ShowPlayerDialog(playerid, DIALOG_FSAFEBOX_ACTION, DIALOG_STYLE_LIST, dialogCaption, dialogText, "Weiter", "Zurück");
        }
        case DIALOG_FSAFEBOX_TAKE: {
            if (Spieler[playerid][pRank] < 4) {
                SendClientMessage(playerid, COLOR_RED, "[INFO] {FFFFFF}Dein Rank reicht dafür nicht aus.");
                return ShowFSafeboxDialog(playerid, DIALOG_FSAFEBOX_ACTION, extraid);
            }
            format(dialogCaption, sizeof(dialogCaption), "{EFCE6D}FSafebox - %s - Entnehmen", g_SafeboxItems[extraid]);
            switch (extraid) {
                case SAFEBOX_DRUGS: {
                    if (g_fraktion[fraktion][Fr_FSDrogen] <= 0) return ShowPlayerDialog(playerid, DIALOG_FSAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Es sind keine Drogen in der FSafebox gelagert.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Drogen: {FFFFFF}%s Gramm in der FSafebox\nGebe an, wieviele Gramm Drogen du entnehmen möchtest:", 
                        AddDelimiters(g_fraktion[fraktion][Fr_FSDrogen]));
                }
                case SAFEBOX_MATS: {
                    if (g_fraktion[fraktion][Fr_FSWaffenteile] <= 0) return ShowPlayerDialog(playerid, DIALOG_FSAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Es sind keine Waffenteile in der FSafebox gelagert.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Waffenteile: {FFFFFF}%s Stück in der FSafebox\nGebe an, wieviele Waffenteile du entnehmen möchtest:", 
                        AddDelimiters(g_fraktion[fraktion][Fr_FSWaffenteile]));
                }
                case SAFEBOX_WCODES: {
                    if (g_fraktion[fraktion][Fr_FSWantedcodes] <= 0) return ShowPlayerDialog(playerid, DIALOG_FSAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Es sind keine Wantedcodes in der FSafebox gelagert.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Wantedcodes: {FFFFFF}%s Stück in der FSafebox\nGebe an, wieviele Wantedcodes du entnehmen möchtest:", 
                        AddDelimiters(g_fraktion[fraktion][Fr_FSWantedcodes]));
                }
                case SAFEBOX_SPICE: {
                    if (g_fraktion[fraktion][Fr_FSSpice] <= 0) return ShowPlayerDialog(playerid, DIALOG_FSAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Es ist kein Spice in der FSafebox gelagert.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Spice: {FFFFFF}%s Gramm in der FSafebox\nGebe an, wieviele Gramm Spice du entnehmen möchtest:", 
                        AddDelimiters(g_fraktion[fraktion][Fr_FSSpice]));
                }
                /*case SAFEBOX_KRAUTER: {
                    if (g_fraktion[fraktion][Fr_FSKrauter] <= 0) return ShowPlayerDialog(playerid, DIALOG_FSAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Es sind keine Kräuter in der FSafebox gelagert.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Kräuter: {FFFFFF}%s Gramm in der FSafebox\nGebe an, wieviele Gramm Kräuter du entnehmen möchtest:", 
                        AddDelimiters(g_fraktion[fraktion][Fr_FSKrauter]));
                }*/
                case SAFEBOX_GANGSAMEN: {
                    if (g_fraktion[fraktion][Fr_FSGangsamen] <= 0) return ShowPlayerDialog(playerid, DIALOG_FSAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Es sind keine Drogensamen in der FSafebox gelagert.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Drogensamen: {FFFFFF}%s Stück in der FSafebox\nGebe an, wieviele Drogensamen du entnehmen möchtest:", 
                        AddDelimiters(g_fraktion[fraktion][Fr_FSGangsamen]));
                }
            }

            return ShowPlayerDialog(playerid, DIALOG_FSAFEBOX_TAKE, DIALOG_STYLE_INPUT, dialogCaption, dialogText, "Entnehmen", "Zurück");
        }
        case DIALOG_FSAFEBOX_STORE: {
            format(dialogCaption, sizeof(dialogCaption), "{EFCE6D}FSafebox - %s - Einlagern", g_SafeboxItems[extraid]);
            switch (extraid) {
                case SAFEBOX_DRUGS: {
                    if (Spieler[playerid][pDrugs] <= 0) return ShowPlayerDialog(playerid, DIALOG_FSAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Du hast keine Drogen zum Einlagern.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Drogen: {FFFFFF}%s Gramm im Inventar\nGebe an, wieviele Gramm Drogen du einlagern möchtest:", AddDelimiters(Spieler[playerid][pDrugs]));
                }
                case SAFEBOX_MATS: {
                    if (Spieler[playerid][pWaffenteile] <= 0) return ShowPlayerDialog(playerid, DIALOG_FSAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Du hast keine Waffenteile zum Einlagern.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Waffenteile: {FFFFFF}%s Stück im Inventar\nGebe an, wieviele Waffenteile du einlagern möchtest:", AddDelimiters(Spieler[playerid][pWaffenteile]));
                }
                case SAFEBOX_WCODES: {
                    if (Spieler[playerid][pWantedCodes] <= 0) return ShowPlayerDialog(playerid, DIALOG_FSAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Du hast keine Wantedcodes zum Einlagern.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Wantedcodes: {FFFFFF}%s Stück im Inventar\nGebe an, wieviele Wantedcodes du einlagern möchtest:", AddDelimiters(Spieler[playerid][pWantedCodes]));
                }
                case SAFEBOX_SPICE: {
                    if (Spieler[playerid][pSpice] <= 0) return ShowPlayerDialog(playerid, DIALOG_FSAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Du hast kein Spice zum Einlagern.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Spice: {FFFFFF}%s Gramm im Inventar\nGebe an, wieviele Gramm Spice du einlagern möchtest:", AddDelimiters(Spieler[playerid][pSpice]));
                }
                /*case SAFEBOX_KRAUTER: {
                    if (Spieler[playerid][pSpice] <= 0) return ShowPlayerDialog(playerid, DIALOG_FSAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Du hast keine Kräuter zum Einlagern.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Kräuter: {FFFFFF}%s Gramm im Inventar\nGebe an, wieviele Gramm Kräuter du einlagern möchtest:", AddDelimiters(Spieler[playerid][pKrauterMische]));
                }*/
                case SAFEBOX_GANGSAMEN: {
                    if (Spieler[playerid][pGangDrogenSamen] <= 0) return ShowPlayerDialog(playerid, DIALOG_FSAFEBOX_NOITEMS, DIALOG_STYLE_MSGBOX, dialogCaption, 
                        "{FFFFFF}Du hast keine Drogensamen zum Einlagern.", "Zurück", "");

                    format(dialogText, sizeof(dialogText), "{BADA55}Drogensamen: {FFFFFF}%s Gramm im Inventar\nGebe an, wieviele Drogensamen du einlagern möchtest:", AddDelimiters(Spieler[playerid][pGangDrogenSamen]));
                }
            }

            return ShowPlayerDialog(playerid, DIALOG_FSAFEBOX_STORE, DIALOG_STYLE_INPUT, dialogCaption, dialogText, "Einlagern", "Zurück");
        }
    }

    return 1;
}




stock BlitzerfreieFraktion(playerid) {
    switch(Spieler[playerid][pFraktion]) {
        case 1,2,3,5,9,16,18: return 1;
    }
    return 0;
}

stock Class_CompressWeaponInfo(weaponid,ammo) {
    new
        info;
    if( ammo <= 0 ) {
        return 0;
    }
    info = ( ammo << 7 ) | weaponid;
    return info;
}
stock Class_SplitWeaponInfo(weaponinfo,&weaponid,&ammo) {
    new
        info;
    info = weaponinfo;
    weaponid = ( info & 0x3F);
    ammo = ( info >> 7 );
    return 1;
}

stock Store_PlayerWeapons(playerid) {
    new tempweapon, tempammo, Float:armourInfo;

    GetPlayerArmour(playerid, armourInfo);
    Spieler[playerid][pArmourInfo] = armourInfo;
    GetPlayerHealth(playerid, armourInfo);
    Spieler[playerid][pHealthInfo] = armourInfo;
    for(new i = 0; i < 12 ; i++) {
        GetPlayerWeaponData(playerid, i, tempweapon, tempammo );
        Spieler[playerid][pWeaponInfo][i] = Class_CompressWeaponInfo( tempweapon , tempammo );
    }
    return 1;
}

stock ReStore_PlayerWeapons(playerid) {
    new tempweapon, tempammo;
    SetPlayerArmour(playerid, Spieler[playerid][pArmourInfo]);
    Spieler[playerid][pArmourInfo] = 0.0;
    SetPlayerHealth(playerid, Spieler[playerid][pHealthInfo]);
    Spieler[playerid][pHealthInfo] = 1.0;
    ResetPlayerWeapons(playerid);
    for(new i = 0; i < 12 ; i++) {
        Class_SplitWeaponInfo( Spieler[playerid][pWeaponInfo][i] , tempweapon , tempammo );
        GivePlayerWeapon(playerid, tempweapon, tempammo);
        Spieler[playerid][pWeaponInfo][i] = 0;
    }
    return 1;
}


stock ClearKFZZulassung(playerid) {
    for(new i ; i < MaxVeh ; i++) {
        g_KFZZulassung[playerid][i][0] = '\0';
    }
    return 1;
}


stock IsNumberplateFree(playerid,numberplate[]) {
    new
        query[128];
    mysql_real_escape_string(numberplate,numberplate);
    format(query,sizeof(query),"SELECT * FROM `playercar` WHERE `numberplate` = '%s'",numberplate);
    mysql_pquery(query,THREAD_ISNUMBERPLATEFREE,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

stock HasVehicleLicence(playerid,slot) {
    if( !strcmp(KEIN_KENNZEICHEN,PlayerCar[playerid][slot][CarNumberplate])) {
        return 0;
    }
    return 1;
}


forward SetPlayerPosEx(playerid,Float:x,Float:y,Float:z, interior, virtualworld);
public SetPlayerPosEx(playerid,Float:x,Float:y,Float:z, interior, virtualworld) {
	TogglePlayerControllableEx(playerid, 0);
    // Streamer_UpdateEx(playerid, x, y, z); // .compensatedtime = 1500
	SetPlayerPos(playerid,x,y,z);
	SetPlayerInterior(playerid, interior);
	SetPlayerVirtualWorld(playerid, virtualworld);
    Streamer_Update(playerid);
	SetTimerEx("TogglePlayerControllableEx", 500, false, "ii", playerid, 1);
	return 1;
}

/* Taschendieb 1x pro Minute
    Nachricht beim einsteigen falls nicht angemeldet
    Taschendieb bei Jail verbieten

*/


stock ShowPlayerBan(playerid) {
    new
        query[200];
    format(query,sizeof(query),"SELECT `Banned`,`TimeBan`,FROM_UNIXTIME(`TimeBan`,'%%d.%%m.%%Y %%H:%%i'),`GebanntVon`,`BanGrund` FROM `accounts` WHERE `Name` = '%s'",GetName(playerid));
    mysql_pquery(query,THREAD_SHOWPLAYERBAN,playerid,gSQL,MySQLThreadOwner);
    // -> THREADED
    return 1;
}

stock ShowHWBan(playerid) {
    new query[200];
    format(query,sizeof(query),"SELECT `GebanntVon`,`Grund` FROM `hwban` WHERE `Name` = '%s'",GetName(playerid));
    mysql_pquery(query,THREAD_HWBAN_SHOW,playerid,gSQL,MySQLThreadOwner);
    // -> THREADED
    return 1;
}

stock sendMoneyAlert(playerid, giveid, money[], reason[]) {
    new String[128];
    format(String,sizeof(String),"[WARNUNG] Spieler %s hat %s $%s überwiesen!", GetName(playerid), GetName(giveid), money);
    if (!isnull(reason)) format(String, sizeof(String), "%s Begründung: %s", String, reason);
    SendAdminMessage(COLOR_WHITE, String);
    return 1;
}


forward pulse_Autoknacken(playerid,vehicleid);
public pulse_Autoknacken(playerid,vehicleid) {
    new
        Float:X,
        Float:Y,
        Float:Z;
    GetPlayerPos(playerid,X,Y,Z);
    if( GetVehicleDistanceFromPoint(vehicleid, X,Y,Z) > 4.0 ) {
        SendClientMessage(playerid, COLOR_RED, "Du hast dich zu weit vom Auto entfernt.");
        Spieler[playerid][pAutoknackerVehicleID] = INVALID_VEHICLE_ID;
        KillTimer(Spieler[playerid][tAutoknacken]);
        return 1;
    }
    if( gettime() >= Spieler[playerid][punixAutoknacken] ) {
        new
            owner = GetCarOwner(vehicleid);
        KillTimer(Spieler[playerid][tAutoknacken]);
        if( owner == INVALID_VEHICLE_ID ) {
            SendClientMessage(playerid, COLOR_ORANGE, "Das Auto gehört keinem Spieler. Daher kannst du es nicht knacken!");
            Spieler[playerid][pAutoknackerVehicleID] = INVALID_VEHICLE_ID;
            return 1;
        }

        if( owner == playerid ) {
            SendClientMessage(playerid, COLOR_ORANGE, "Dein eigenes Auto zu knacken ist bescheuert");
            Spieler[playerid][pAutoknackerVehicleID] = INVALID_VEHICLE_ID;
            return 1;
        }

        new
            String[128];
        SendClientMessage(playerid, COLOR_GREEN, "Fahre das Fahrzeug nun zum SF Kran, wo es auf ein Schiff transportiert wird.");
        format(String,sizeof(String),"Autodieb %s hat ein Auto aufgebrochen!",GetName(playerid));
        SendRoundMessage( X,Y,Z , COLOR_LIGHTRED2, String);
        UnLockCar(vehicleid);
        SetPlayerCheckpointEx(playerid, -1548.0554,125.1203,3.5547, 7.0, CP_SFKRAN);
        Spieler[playerid][pAutoknackerVehicleID] = vehicleid;
    }
    return 1;
}
stock GetClosestVehicle(playerid, Float:range)
{
    new     Float:p_X;
    new     Float:p_Y;
    new     Float:p_Z;

    new     Float:Distance;
    new     Float:PretendentDistance = range +1;
    new     Pretendent = INVALID_VEHICLE_ID;

    GetPlayerPos(playerid, p_X, p_Y, p_Z);

    for(new vehicleid=1; vehicleid < GetVehiclePoolSize(); vehicleid++)
    {
        Distance = GetVehicleDistanceFromPoint(vehicleid, p_X, p_Y, p_Z);
        if( Distance == 0.0 ) continue ;
        // printf("Distance %.1f, range %.1f, prententDistance %.1f ",Distance,range,PretendentDistance);
        if(Distance <= range && Distance <= PretendentDistance)
        {
            Pretendent = vehicleid;
            PretendentDistance = Distance;
        }
    }

    return Pretendent;
}


stock showDrinks(playerid) {
    new
        String[150];
    for(new i ; i < sizeof(g_Drinks) ; i++) {
        format(String,sizeof(String),"%s%s - %d$\n",String,g_Drinks[i][D_sName],g_Drinks[i][D_iPrice]);
    }
    ShowPlayerDialog(playerid,DIALOG_DRINKS,DIALOG_STYLE_LIST,"Drinkbar",String,"Kaufen","Abbruch");
    return 1;
}

forward cancelDrink(playerid);
public cancelDrink(playerid) {
    Spieler[playerid][tDrink] = INVALID_TIMER_ID;
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_NONE);
    return 1;
}





forward Pulse_WantedHacker(playerid,giveid,wantedcodes);
public Pulse_WantedHacker(playerid,giveid,wantedcodes) {
    if(Spieler[playerid][pJob] != 21 ) {
        KillTimer(Spieler[playerid][tWantedCodes]);
        SendClientMessage(playerid, COLOR_LIGHTRED2, "Du bist kein Wantedhacker mehr! Vorgang gescheitert.");
        return 1;
    }
    if( !IsPlayerInDynamicArea(playerid,g_iWantedHackerZone)) {
        KillTimer(Spieler[playerid][tWantedCodes]);
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du hast dich zu weit vom Polizei Präsidium entfernt! Vorgang gescheitert.");
    }
    new
        vehicleid,
        modelid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        KillTimer(Spieler[playerid][tWantedCodes]);
        return SendClientMessage(playerid,COLOR_LIGHTRED2,"Du darfst dein Fahrzeug nicht verlassen! Vorgang gescheitert.");
    }
    modelid = GetVehicleModel(vehicleid);
    if( (modelid != 413) &&  (modelid != 459) &&  (modelid != 482) ) {
        KillTimer(Spieler[playerid][tWantedCodes]);
        return SendClientMessage(playerid,COLOR_RED,"Du befindest dich mehr in einem Pony! Vorgang gescheitert.");
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        KillTimer(Spieler[playerid][tWantedCodes]);
        return SendClientMessage(playerid,COLOR_RED,"Du sitzt nicht als Fahrer im Pony! Vorgang gescheitert.");
    }
    if( gettime() > Spieler[playerid][punixWantedCodesDone] ) {
        new
            String[128];
        KillTimer(Spieler[playerid][tWantedCodes]);
        Spieler[playerid][bWantedHacking] = false;
        if( Spieler[giveid][pWanteds] == 0 ) {
            format(String,sizeof(String),"Der Spieler %s besitzt keine Wanteds. Du konntest daher keine Wanteds löschen!",GetName(giveid));
            SendClientMessage(playerid,COLOR_LIGHTRED2,String);
            format(String,sizeof(String),"Du erhältst %d Wantedcodes zurück.",wantedcodes);
            SendClientMessage(playerid,COLOR_GREEN,String);
            Spieler[playerid][pWantedCodes] += wantedcodes;
            return 1;
        }
        if( wantedcodes > Spieler[giveid][pWanteds] ) {
            new
                ueberschuss;
            ueberschuss = wantedcodes - Spieler[giveid][pWanteds];
            format(String,sizeof(String),"Du hast versucht Spieler %s %d Wanteds zu reinigen, er hat aber nur %d Wanteds.",GetName(giveid),wantedcodes,Spieler[giveid][pWanteds]);
            SendClientMessage(playerid,COLOR_LIGHTRED2,String);
            format(String,sizeof(String),"Daher erhältst du %d Wantedcodes zurück.",ueberschuss );
            SendClientMessage(playerid,COLOR_GREEN,String);
            Spieler[playerid][pWantedCodes] += ueberschuss;
            wantedcodes = ( wantedcodes - ueberschuss );
        }
        format(String,sizeof(String),"WantedHacker %s hat für dich %d Wanted(s) gereinigt!",GetName(playerid),wantedcodes);
        SendClientMessage(giveid,COLOR_LIGHTRED2,String);
        format(String,sizeof(String),"Du hast erfolgreich %d Wanted(s) für %s gereinigt (WantedCodes: %d).",wantedcodes,GetName(giveid),Spieler[playerid][pWantedCodes]);
        SendClientMessage(playerid,COLOR_GREEN,String);
        Spieler[giveid][pWanteds] -= wantedcodes;
    }
    return 1;
}

stock GetRandomPlayer(playerid) {
    new
        player,
        players,
        aiConnected[MAX_PLAYERS];
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            //#if defined USE_NPCS
            if( IsPlayerNPC(i) ) continue;
            //#endif
            if( i != playerid ) {
                aiConnected[players] = i;
                players++;
            }
        }
    }
    player = aiConnected[ random(players) ];
    return player;
}

forward SetPlayerView(playerid,step);
public SetPlayerView(playerid,step) {
    /*
    new
        players;
    players = GetOnlinePlayers();
    // printf("players %d",players);
    if( players > 1 ) {
        new
            spectateid = GetRandomPlayer(playerid);
        if( IsPlayerSpawned(spectateid) ) {
            //printf("spectateid = %d",spectateid);
            StartSpectate(playerid,spectateid);
            //TogglePlayerSpectating(playerid,1);
            //PlayerSpectatePlayer(playerid,spectateid);
            //PlayerSpectateVehicle(playerid,4);
        }
        else {
            SetPlayerCameraPos(playerid, 1334.5095,-894.5165,95.0 );
            SetPlayerCameraLookAt(playerid,1428.4849,-793.6905,90.0);
            SetPlayerPos(playerid,1416.5498,-806.5092,85.0357);
            SetPlayerWeather(playerid,18);
        }
    }
    else {
        SetPlayerCameraPos(playerid, 1334.5095,-894.5165,95.0 );
        SetPlayerCameraLookAt(playerid,1428.4849,-793.6905,90.0);
        SetPlayerPos(playerid,1416.5498,-806.5092,85.0357);
        SetPlayerWeather(playerid,18);
    }
    */
    /*
    new
        String[128];
    format(String,sizeof(String),"SetPlayerView(%d,%d)",playerid,step);
    SendClientMessage(playerid,COLOR_WHITE,String);
    printf("SetPlayerView(%d,%d)",playerid,step );
    */
    /*if( 0 <= step <= 4 ) {
        SetPlayerCameraPos(playerid,-625.0858,855.845,30.0);
        SetPlayerCameraLookAt(playerid, -688.1018,931.2471,25.0);
        Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView", 251 ,false,"dd",playerid, ++step );
    }
    else if(step == 5 ) {
        TogglePlayerSpectating(playerid,true);

        InterpolateCameraPos(playerid,-625.0858,855.8456,30.0, -688.2957,850.4716,36.0, 6450 , CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, -688.1018,931.2471,25.0 , -688.1018,931.2471,26.0, 6450 , CAMERA_MOVE );
        Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",6563,false,"dd",playerid,++step );
    }
    else if(step == 6 ) {
        TogglePlayerSpectating(playerid,true);
        InterpolateCameraPos(playerid, -688.2957,850.4716,30.0, -738.4070,884.7025,36.0, 6450 , CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, -688.1018,931.2471,25.0 , -701.3433,937.2500,26.0, 6450 , CAMERA_MOVE );
        Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",11617,false,"dd",playerid,++step );
    }
    else if(step == 7 ) {
        InterpolateCameraPos(playerid, -738.4070,884.7025,30.0, -625.0858,855.8456,36.0, 6450 , CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, -701.3433,937.2500,25.0 , -688.1018,931.2471,26.0, 6450 , CAMERA_MOVE );
        Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",14087,false,"dd",playerid,++step );
    }
    else if(step == 8 ) {
        TogglePlayerSpectating(playerid,false);
    }
    //City Los Santos
    if( 0 <= step <= 4 ) {
        SetPlayerCameraPos(playerid,1003.0427,-789.3499,136.0);
        SetPlayerCameraLookAt(playerid, 1184.1705,-969.9221,136.0);
        Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView", 251 ,false,"dd",playerid, ++step );
    }
    else if(step == 5 ) {
        TogglePlayerSpectating(playerid,true);

        InterpolateCameraPos(playerid,1003.0427,-789.3499,136.0,959.2967,-897.6666,115.0, 6450 , CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, 1184.1705,-969.9221,135.0 , 1184.1705,-969.9221,140.0, 6450 , CAMERA_MOVE );
        Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",6563,false,"dd",playerid,++step );
    }
    else if(step == 6 ) {
        TogglePlayerSpectating(playerid,true);
        InterpolateCameraPos(playerid, 1092.9565,-1058.2958,110.0, 959.2967,-897.6666,118.0, 6450 , CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, 1238.1628,-921.3459,115.0 , 1238.1628,-921.3459,118.0, 6450 , CAMERA_MOVE );
        Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",11617,false,"dd",playerid,++step );
    }
    else if(step == 7 ) {
        InterpolateCameraPos(playerid, 959.2967,-897.6666,118.0, 1092.9565,-1058.2958,115.0, 6450 , CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, 1184.1705,-969.9221,140.0 , 1238.1628,-921.3459,115.0, 6450 , CAMERA_MOVE );
        Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",14087,false,"dd",playerid,++step );
    }
    else if(step == 8 ) {
        TogglePlayerSpectating(playerid,false);
    }*/
    /*
    SetPlayerVirtualWorld(playerid, VW_MAIN);
    Streamer_UpdateEx(playerid, 1564.733398, -1738.897827, 62.053535, 0);
    InterpolateCameraPos(playerid, 1564.733398, -1738.897827, 62.053535, 1395.101562, -1748.152099, 66.176651, 25000);
    InterpolateCameraLookAt(playerid, 1561.099609, -1741.746337, 60.134815, 1398.683105, -1750.965820, 64.113708, 25000);
    */
    SetPlayerVirtualWorld(playerid, VW_MAIN);
    Streamer_UpdateEx(playerid, 1564.733398, -1738.897827, 62.053535, 0);
	InterpolateCameraPos(playerid, 1569.236206, -1804.522583, 122.689094, 1399.867309, -1544.683227, 127.549049, 25000);
	InterpolateCameraLookAt(playerid, 1566.680786, -1801.088867, 120.104606, 1401.977661, -1548.240112, 124.739181, 25000);
    return 1;
}

DestroyTaxiTextdraw(playerid) {
    PlayerTextDrawDestroy(playerid, Spieler[playerid][tdTaxi]);
    Spieler[playerid][tdTaxi] = PlayerText:INVALID_TEXT_DRAW;
    return 1;
}

CreateTaxiTextdraw(playerid) {
    if (Spieler[playerid][tdTaxi] != PlayerText:INVALID_TEXT_DRAW) return 1;
    Spieler[playerid][tdTaxi] = CreatePlayerTextDraw(playerid, 320.0, 361.0, "~y~Taxameter~n~~n~~w~Wird geladen...");
    PlayerTextDrawAlignment(playerid, Spieler[playerid][tdTaxi], 2);
    PlayerTextDrawBackgroundColor(playerid, Spieler[playerid][tdTaxi], 255);
    PlayerTextDrawFont(playerid, Spieler[playerid][tdTaxi], 1);
    new Float:height = 0.30;
    PlayerTextDrawLetterSize(playerid, Spieler[playerid][tdTaxi], height, height * 4.0625); // 4.0625
    PlayerTextDrawColor(playerid, Spieler[playerid][tdTaxi], -1);
    PlayerTextDrawSetOutline(playerid, Spieler[playerid][tdTaxi], 0);
    PlayerTextDrawSetProportional(playerid, Spieler[playerid][tdTaxi], 1);
    PlayerTextDrawSetShadow(playerid, Spieler[playerid][tdTaxi], 1);
    PlayerTextDrawUseBox(playerid, Spieler[playerid][tdTaxi], 1);
    PlayerTextDrawBoxColor(playerid, Spieler[playerid][tdTaxi], 102);
    PlayerTextDrawTextSize(playerid, Spieler[playerid][tdTaxi], 426.0, 162.0);
    PlayerTextDrawShow(playerid, Spieler[playerid][tdTaxi]);
    return 1;
}

forward Pulse_Taxi();
public Pulse_Taxi() {
    new vehicleid, Float:fHealth, Mitfahrer[128], String[256];
    for (new driverid; driverid <= GetPlayerPoolSize(); driverid++) {
        if (!IsPlayerConnected(driverid) || Spieler[driverid][pJob] != 16) continue;
        vehicleid = Spieler[driverid][pTaxiVehicle];
        if (vehicleid == INVALID_VEHICLE_ID || _:g_t3dTaxi[vehicleid] == INVALID_3DTEXT_ID) continue;

        if (HasPlayerTaxiCustomers(driverid)) {
            for (new i; i < MAX_TAXI_KUNDEN; i++) {
                if (Spieler[driverid][pTaxiKunden][i] == INVALID_PLAYER_ID) continue;
                format(Mitfahrer, sizeof(Mitfahrer), "%s~y~~h~%s~w~: ~g~$%d\n", Mitfahrer, GetName(Spieler[driverid][pTaxiKunden][i]), 
                    GetPlayerTaxiCosts(driverid, Spieler[driverid][pTaxiKunden][i]));
            }

            format(String, sizeof(String), "~y~Taxameter (ID: %d)~n~~n~~w~%s~n~~w~Preis: ~g~$%d~w~/~y~100m", driverid, Mitfahrer, 
                Spieler[driverid][pTaxiPreis], Spieler[driverid][pTaxiPreis]);

            GetVehicleHealth(vehicleid, fHealth);
            if (g_iVehicleFixNotation{vehicleid} == 1 || fHealth <= 400.0) CancelTaxi(driverid, vehicleid, 3);

            for (new i; i < MAX_TAXI_KUNDEN; i++) {
                if (Spieler[driverid][pTaxiKunden][i] == INVALID_PLAYER_ID) continue;
                if (Spieler[Spieler[driverid][pTaxiKunden][i]][tdTaxi] == PlayerText:INVALID_TEXT_DRAW) CreateTaxiTextdraw(Spieler[driverid][pTaxiKunden][i]);
                PlayerTextDrawSetString(Spieler[driverid][pTaxiKunden][i], Spieler[Spieler[driverid][pTaxiKunden][i]][tdTaxi], String);
            }
        }
        else
            format(String, sizeof(String), "~y~Taxameter (ID: %d)~n~~n~~w~~p~Keine Fahrgaeste~n~~w~Preis: ~g~$%d~w~/~y~100m", driverid, Spieler[driverid][pTaxiPreis], Spieler[driverid][pTaxiPreis]);

        PlayerTextDrawSetString(driverid, Spieler[driverid][tdTaxi], String);
    }
    return 1;
}

forward CancelTaxi(driverid, vehicle, mode);
public CancelTaxi(driverid, vehicle, mode) {
    new String[128];

    if (mode == 0) {
        format(String, sizeof(String), "** Taxifahrt abgebrochen. Der Fahrer %s hat den Server verlassen! Es werden keine Kosten berechnet.", GetName(driverid));
        SetVehicleToRespawn(vehicle);
    }
    else if (mode == 1) {
        format(String, sizeof(String), "** Taxifahrt abgebrochen. Der Fahrer %s hat das Fahrzeug vollkommen zerstört!", GetName(driverid));
        SendClientMessage(driverid, COLOR_ORANGE, "Taxifahrt abgebrochen. Du hast das Taxi komplett zerstört.");
    }
    else if (mode == 2) {
        format(String, sizeof(String), "** Taxifahrt abgebrochen. Der Fahrer %s ist geflüchtet. Es werden keine Fahrkosten berechnet.", GetName(driverid));
        SetVehicleToRespawn(vehicle);
        SendClientMessage(driverid,COLOR_ORANGE,"Taxifahrt abgebrochen. Du hast das Fahrzeug verlassen.");
    }
    else if (mode == 3) {
        format(String,sizeof(String),"** Taxifahrt abgebrochen. Das Fahrzeug ist zu sehr beschädigt, dir werden keine Fahrkosten berechnet.");
        SendClientMessage(driverid,COLOR_ORANGE,String);
    }

    Spieler[driverid][pTaxiVehicle] = INVALID_VEHICLE_ID;
    SendTaxiMessage(driverid, COLOR_ORANGE, String);
    for (new i; i < MAX_TAXI_KUNDEN; i++) {
        if (Spieler[driverid][pTaxiKunden][i] == INVALID_PLAYER_ID) continue;
        RemovePlayerFromTaxi(driverid, Spieler[driverid][pTaxiKunden][i]);
    }

    ClearPlayerTaxiSlots(driverid, 1);
    if (vehicle != INVALID_VEHICLE_ID && _:g_t3dTaxi[vehicle] != INVALID_3DTEXT_ID) {
        Delete3DTextLabel(g_t3dTaxi[vehicle]);
        g_t3dTaxi[vehicle] = Text3D:INVALID_3DTEXT_ID;
    }

    DestroyTaxiTextdraw(driverid);

    return 1;
}

forward AFK_Check();
public AFK_Check() {
    new
        t;
    t = gettime();
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( !IsAFK[i] ) {
                if( ( Spieler[i][unixUpdate] + ( 210 * 60 ) ) < t ) {
                    //SendClientMessage(playerid, COLOR_YELLOW,"Du bist im AFK-Modus, weil du zu lange weg warst! Verlasse mit /Back den AFK-Modus!");
                    cmd_afk(i,"");
                }
            }
            else {
                if( Spieler[i][unixAFKNotice] <= t ) {
                    SendClientMessage(i,COLOR_YELLOW,"Du bist noch im AFK-Modus, daher geht dein PayDay nicht weiter! Mit /BACK gehst du aus dem AFK-Modus.");
                    Spieler[i][unixAFKNotice] = t + 5*60 ;
                }
            }
        }
    }
    return 1;
}



stock IsBizOpened(biz) {
    new
        h,
        m,
        s;
    gettime( h , m , s );
    if( Biz[biz][bLadenAuf] < Biz[biz][bLadenZu] ) {
        return ( Biz[biz][bLadenAuf] <= h < Biz[biz][bLadenZu] );
    }
    if( Biz[biz][bLadenAuf] > Biz[biz][bLadenZu] ) {
        if( h >= Biz[biz][bLadenAuf] ) return 1;
        if( h < Biz[biz][bLadenZu] ) return 1;
    }
    return 0;
}

public GetWBack(playerid) {
	new ammo;
 	GetPlayerWeaponData(playerid, GetWeaponSlot(iTempWeapon[playerid]), ammo, ammo);
    if(ammo > 0) SetPlayerArmedWeapon(playerid, iTempWeapon[playerid]);
    DriveBy[playerid] = false;
}

stock GetWeaponSlot(weaponid)
{
    new slot;
    switch(weaponid)
    {
    case 0,1: slot = 0;
    case 2 .. 9: slot = 1;
    case 10 .. 15: slot = 10;
    case 16 .. 18, 39: slot = 8;
    case 22 .. 24: slot =2;
    case 25 .. 27: slot = 3;
    case 28, 29, 32: slot = 4;
    case 30, 31: slot = 5;
    case 33, 34: slot = 6;
    case 35 .. 38: slot = 7;
    case 40: slot = 12;
    case 41 .. 43: slot = 9;
    case 44 .. 46: slot = 11;
    }
    return slot;
}

stock SendFahrgeschaeftMessage(fahrgeschaeft,color,msg[]) {
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( Spieler[i][pFahrgeschaeft] == fahrgeschaeft ) {
            SendClientMessage(i,color,msg);
        }
    }
}
stock IsPlayerExecutive(playerid) {
    if( IsPlayerConnected(playerid)) {
        return ( Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 9 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 18 || Spieler[playerid][pFraktion] == 22);
    }
    return 0;
}
stock SendExecutiveMessage(color,msg[]) {
    SendFraktionMessage(1, color, msg);
    SendFraktionMessage(2, color, msg);
    SendFraktionMessage(16, color, msg);
    SendFraktionMessage(18, color, msg);
    SendFraktionMessage(22, color, msg);
    return 1;
}



stock abs( value )
{
    return ((value < 0 ) ? (-value) : (value));
}




stock IsBeamter(playerid) {
    switch( Spieler[playerid][pFraktion] ) {
        case 1,2,3,5,9,16,18,22: return 1;
        default: return 0;
    }
    return 0;
}

stock IsCop(playerid) {
    switch( Spieler[playerid][pFraktion] ) {
        case 1,2,16,18,22: return 1;
        default: return 0;
    }
    return 0;
}
forward WantedLabel();
public WantedLabel() {
    new
        string[128],
        j,
        visibleto[MAX_PLAYERS] = {INVALID_PLAYER_ID,...};
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( IsPlayerExecutive(i)) {
                visibleto[j] = i;
                j++;
            }
        }
    }
    /*
    for(new i = 0 ; i < MAX_PLAYERS ; i++) {
        if( visibleto[i] != INVALID_PLAYER_ID ) {
            printf("visibleto[%d] = %d",i,visibleto[i]);
        }
    }*/
    for(new i = 0 ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            //#if defined USE_NPCS
            if( IsPlayerNPC(i) ) continue;
            //#endif
            if( Spieler[i][pWanteds] > 0 ) {
                UpdateDynamic3DTextLabelText( Spieler[i][pWantedLabelEx] , COLOR_RED , "Gesucht");
            }
            else
            {
                UpdateDynamic3DTextLabelText( Spieler[i][pWantedLabelEx] , 0xFFFFFF00 , " ");
            }
            for(new a ; a < MAX_PLAYERS ; a++) {
                Streamer_RemoveArrayData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[i][pWantedLabel] , E_STREAMER_PLAYER_ID , a );
            }
            if( Spieler[i][pWanteds] ) {
                format(string,sizeof(string),"Wantedanzahl: %d", Spieler[i][pWanteds] );
                UpdateDynamic3DTextLabelText( Spieler[i][pWantedLabel],COLOR_YELLOW, string );
                for(new v = 0 ; v < MAX_PLAYERS ; v++) {
                    if( visibleto[v] != INVALID_PLAYER_ID ) {
                        Streamer_AppendArrayData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[i][pWantedLabel] , E_STREAMER_PLAYER_ID , visibleto[v] );
                    }
                }
            }
            else {
                UpdateDynamic3DTextLabelText( Spieler[i][pWantedLabel], COLOR_RED," ");
            }
            // Streamer_SetArrayData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[i][pWantedLabel] , E_STREAMER_PLAYER_ID , {3,4} );
            /*
            for( new k ; k < MAX_PLAYERS  ; k++) {
                if( Streamer_IsInArrayData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[i][pWantedLabel] , E_STREAMER_PLAYER_ID , k ) ) {
                    printf("Streamer_IsInArrayData(Text3D:%d , PLAYER_ID , %d",_:Spieler[i][pWantedLabel],k);
                }
            }
            */
        }
    }
    return 1;
}


stock GetPlayerHureSkillValue(playerid) {
    new
        val = g_HureSkill[0][HS_iHP];
    for(new i ; i < sizeof(g_HureSkill) ; i++) {
        if( g_HureSkill[i][HS_iPoint] <= Spieler[playerid][pHurePoints] ) {
            val = g_HureSkill[i][HS_iHP];
        }
    }
    return val;
}

stock GetPlayerHureLevel(playerid) {
    new
        val = 1;
    for(new i ; i < sizeof(g_HureSkill) ; i++) {
        if( g_HureSkill[i][HS_iPoint] <= Spieler[playerid][pHurePoints] ) {
            val = g_HureSkill[i][HS_iLevel];
        }
    }
    return val;
}




stock GetPlayerDetectivSkillValue(playerid) {
    new
        val = g_HureSkill[0][HS_iHP];
    for(new i ; i < sizeof(g_DetektivSkill) ; i++) {
        if( g_DetektivSkill[i][DS_iPoints] <= Spieler[playerid][pDetektivPoints] ) {
            val = g_DetektivSkill[i][DS_iSec];
        }
    }
    return val;
}
stock GetPlayerDetectivLevel(playerid) {
    new
        val = 1;
    for(new i ; i < sizeof(g_DetektivSkill) ; i++) {
        if( g_DetektivSkill[i][DS_iPoints] <= Spieler[playerid][pDetektivPoints] ) {
            val = g_DetektivSkill[i][DS_iLevel];
        }
    }
    return val;
}

forward Pulse_Wheelman(playerid,geisel,unix_fertig);
public Pulse_Wheelman(playerid,geisel,unix_fertig) {
    new
        String[128];
    if( Spieler[playerid][pFraktion] != 14 ) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);
        format(String,sizeof(String),"Das Agency-Mitglied konnte dich leider nicht befreien.");
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );
        SendClientMessage(playerid, COLOR_LIGHTRED2, "Vorgang gescheitert!");
        return 1;
    }
    new
        entfuehrer,
        Float:x,
        Float:y,
        Float:z,
        modelid,
        vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
    if(!vehicleid) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);

        format(String,sizeof(String),"Der Agency-Agent konnte dich leider nicht befreien");
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );

        SendClientMessage(playerid,COLOR_RED,"Du bist in keinem Fahrzeug mehr. Vorgang Gescheitert !");
        return 1;
    }
    GetVehiclePos(vehicleid,x,y,z);
    if( !IsPlayerInRangeOfPoint(geisel,18.0,x,y,z) ) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);
        format(String,sizeof(String),"Die Geisel %s ist zu weit entfernt von dir. Vorgang Gescheitert !",GetName(geisel));
        SendClientMessage(playerid, COLOR_LIGHTRED2, String );

        format(String,sizeof(String),"Der Agency-Agent konnte dich leider nicht befreien");
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );
        return 1;
    }
    if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);

        format(String,sizeof(String),"Der Agency-Agent konnte dich leider nicht befreien");
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );

        SendClientMessage(playerid,COLOR_RED,"Du musst der Fahrer dieses Fahrzeuges sein. Vorgang Gescheitert !");
        return 1;
    }
    modelid = GetVehicleModel(vehicleid);
    if( GetVehicleSeats(modelid) <= 1 ) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);

        format(String,sizeof(String),"Der Agency-Agent konnte dich leider nicht befreien");
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );

        SendClientMessage(playerid,COLOR_RED,"Dieses Fahrzeuge besitzt keinen Beifahrer Sitz. Vorgang Gescheitert !");
        return 1;
    }
    new
        vehicleid_ex;
    vehicleid_ex = GetPlayerVehicleID(geisel);
    if( vehicleid == vehicleid_ex ) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);

        format(String,sizeof(String),"Der Agency-Agent konnte dich leider nicht befreien",GetName(playerid));
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );

        SendClientMessage(playerid,COLOR_RED,"Die Geisel ist bereits in deinem Fahrzeug");
        return 1;
    }
    if( !vehicleid_ex) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);

        format(String,sizeof(String),"Der Agency-Agent konnte dich leider nicht befreien",GetName(playerid));
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );

        SendClientMessage(playerid,COLOR_RED,"Die Person ist nicht mehr in einem Fahrzeug");
        return 1;
    }
    if( GetPlayerState(geisel) != PLAYER_STATE_PASSENGER ) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);

        format(String,sizeof(String),"Der Agency-Agent konnte dich leider nicht befreien",GetName(playerid));
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );

        SendClientMessage(playerid,COLOR_RED,"Die Person ist kein Beifahrer in dem Fahrzeug");
        return 1;
    }
    if( GetFreeVehicleSeat(vehicleid) == -1 ) {
        Spieler[playerid][iWheelmanID] = INVALID_PLAYER_ID;
        KillTimer(Spieler[playerid][tWheelman]);

        format(String,sizeof(String),"Der Agency-Agent konnte dich leider nicht befreien",GetName(playerid));
        SendClientMessage(geisel,COLOR_LIGHTRED2,String );

        SendClientMessage(playerid,COLOR_RED,"Dein Fahrzeug ist voll. Vorgang Gescheitert !");
        return 1;
    }
    if( gettime() >= unix_fertig ) {
        // Zeit Um...Spieler befreit
        new
            seat;
        UnfreezePlayer(geisel);
        seat = GetFreeVehicleSeat(vehicleid);
        entfuehrer = VehicleDriverID( vehicleid_ex );
        KillTimer(Spieler[playerid][tWheelman]);

        format(String,sizeof(String),"Der Agency-Agent hat deine Gefangenen %s befreit!",GetName(geisel));
        SendClientMessage(entfuehrer,COLOR_LIGHTRED2,String);

        format(String,sizeof(String),"Der Agency-Agent hat dich vor %s befreit!",GetName(entfuehrer));
        SendClientMessage(geisel,COLOR_LIGHTRED2,String);

        format(String,sizeof(String),"Du hast die Person %s vor %s befreit. Befreie sie mit /wmbefreien",GetName(geisel),GetName(entfuehrer));
        SendClientMessage(playerid,COLOR_YELLOW,String);
        // RemovePlayerFromVehicle(geisel);
        // SetPlayerPos(geisel,x,y,z + 0.35);
        SetPlayerPos( geisel,x,y,z + 1.7 );
        SetTimerEx("PutPlayerInVehicleEx",131,false,"ddd",geisel,vehicleid,seat);

        Spieler[geisel][bKidnapped] = false;
        Spieler[entfuehrer][iKidnapID] = INVALID_PLAYER_ID;
        Cuffed[geisel] = 0;
    }
    return 1;
}
forward RemovePlayerFromVehicleEx(playerid);
public RemovePlayerFromVehicleEx(playerid) {
    RemovePlayerFromVehicle(playerid);
    return;
}
forward PutPlayerInVehicleEx(playerid,vehicleid,seat );
public PutPlayerInVehicleEx(playerid,vehicleid,seat ) {
    // printf("PutPlayerInVehicleEx(%d,%d,%d)",playerid,vehicleid,seat );
    PutPlayerInVehicle( playerid , vehicleid , seat );
    SetCameraBehindPlayer(playerid);
    FreezePlayer(playerid);
    return;
}

stock GetVehicleSeats(modelid) {
    new z;
    switch(modelid)
    {
        case 400:z=4; case 401:z=2; case 402:z=2; case 403:z=2; case 404:z=4; case 405:z=4;
        case 406:z=2; case 407:z=2; case 408:z=2; case 409:z=4; case 410:z=2; case 411:z=2;
        case 412:z=2; case 413:z=4; case 414:z=2; case 415:z=2; case 416:z=2; case 417:z=2;
        case 418:z=4; case 419:z=2; case 420:z=4; case 421:z=4; case 422:z=2; case 423:z=2;
        case 424:z=2; case 425:z=1; case 426:z=4; case 427:z=4; case 428:z=4; case 429:z=2;
        case 430:z=1; case 431:z=8; case 432:z=1; case 433:z=2; case 434:z=2; case 435:z=0;
        case 436:z=2; case 437:z=8; case 438:z=4; case 439:z=2; case 440:z=2; case 441:z=1;
        case 442:z=4; case 443:z=2; case 444:z=2; case 445:z=4; case 446:z=1; case 447:z=2;
        case 448:z=1; case 449:z=2; case 450:z=0; case 451:z=2; case 452:z=1; case 453:z=1;
        case 454:z=1; case 455:z=2; case 456:z=2; case 457:z=2; case 458:z=4; case 459:z=4;
        case 460:z=2; case 461:z=2; case 462:z=2; case 463:z=2; case 464:z=1; case 465:z=1;
        case 466:z=4; case 467:z=2; case 468:z=2; case 469:z=2; case 470:z=4; case 471:z=2;
        case 472:z=1; case 473:z=1; case 474:z=2; case 475:z=2; case 476:z=1; case 477:z=2;
        case 478:z=2; case 479:z=4; case 480:z=2; case 481:z=1; case 482:z=2; case 483:z=4;
        case 484:z=1; case 485:z=1; case 486:z=1; case 487:z=4; case 488:z=2; case 489:z=2;
        case 490:z=4; case 491:z=2; case 492:z=4; case 493:z=1; case 494:z=2; case 495:z=2;
        case 496:z=2; case 497:z=4; case 498:z=2; case 499:z=2; case 500:z=2; case 501:z=1;
        case 502:z=2; case 503:z=2; case 504:z=4; case 505:z=2; case 506:z=2; case 507:z=4;
        case 508:z=2; case 509:z=1; case 510:z=1; case 511:z=2; case 512:z=1; case 513:z=1;
        case 514:z=2; case 515:z=2; case 516:z=2; case 517:z=2; case 518:z=2; case 519:z=1;
        case 520:z=1; case 521:z=2; case 522:z=2; case 523:z=2; case 524:z=2; case 525:z=2;
        case 526:z=2; case 527:z=2; case 528:z=2; case 529:z=4; case 530:z=1; case 531:z=1;
        case 532:z=1; case 533:z=2; case 534:z=2; case 535:z=2; case 536:z=2; case 537:z=2;
        case 538:z=2; case 539:z=1; case 540:z=2; case 541:z=2; case 542:z=2; case 543:z=2;
        case 544:z=2; case 545:z=2; case 546:z=4; case 547:z=4; case 548:z=2; case 549:z=2;
        case 550:z=4; case 551:z=4; case 552:z=2; case 553:z=1; case 554:z=2; case 555:z=2;
        case 556:z=2; case 557:z=2; case 558:z=2; case 559:z=2; case 560:z=4; case 561:z=4;
        case 562:z=2; case 563:z=2; case 564:z=1; case 565:z=2; case 566:z=2; case 567:z=2;
        case 568:z=1; case 569:z=0; case 570:z=2; case 571:z=1; case 572:z=1; case 573:z=2;
        case 574:z=2; case 575:z=2; case 576:z=2; case 577:z=1; case 578:z=2; case 579:z=4;
        case 580:z=4; case 581:z=2; case 582:z=4; case 583:z=1; case 584:z=0; case 585:z=4;
        case 586:z=2; case 587:z=2; case 588:z=2; case 589:z=2; case 590:z=0; case 591:z=0;
        case 592:z=1; case 593:z=2; case 594:z=1; case 595:z=1; case 596:z=4; case 597:z=4;
        case 598:z=4; case 599:z=2; case 600:z=2; case 601:z=2; case 602:z=2; case 603:z=2;
        case 604:z=2; case 605:z=2; case 606:z=0; case 607:z=0; case 608:z=0; case 609:z=2;
        case 610:z=0; case 611:z=0;
    }
    return z;
}

stock GetPlayerEntfuehrer(playerid) {
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( Spieler[i][iKidnapID] == playerid ) return i;
        }
    }
    return INVALID_PLAYER_ID;
}

stock GetFreeVehicleSeat(vehicleid)
{
    new bool:Seat[8] = {false,...};
    for(new i = 0; i < MAX_PLAYERS ; i++ )
    {
        if(IsPlayerInVehicle(i,vehicleid))
        {
            Seat[ GetPlayerVehicleSeat(i) ] = true;
        }
    }
    new seats = GetVehicleSeats( GetVehicleModel(vehicleid) );
    for(new i = 0 ; i < seats ; i++) {
        if( Seat[i] == false ) return i;
    }
    return -1;
}

/*
forward FlyHack();
public FlyHack() {
    new
        now = gettime(),
        String[128],
        speed,
        Float:vx,
        Float:vy,
        Float:vz;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if(!IsPlayerNPC(i)) {
                if( !IsPlayerInAnyVehicle(i) && ( Spieler[i][punixFlyhack] < now ) && (( Spieler[i][unixUpdate] + 5 ) > now ) ) {
                    GetPlayerVelocity(i,vx,vy,vz);
                    speed = floatround( floatpower( vx * vx + vy * vy + vz * vz , 0.5 )  * 100.0 * 2.0);
                    if( speed >= 130 ) {
                        format(String,sizeof(String),"[ACHTUNG] Spieler %s FlyHack Warnung: %dKm/h",GetName(i),speed);
                        SendAdminMessage(COLOR_LIGHTRED2,String);
                        Spieler[i][punixFlyhack] = now + 8;
                    }
                    // printf("FlyHack Speed für %s %dkm/h ( speed2 %d )",GetName(i),speed,speed2);
                }
            }
        }
    }
    return 1;
}
*/

#define UNUSED_WEAKS 54

stock CollectUnusedAccount() {
    mysql_oquery("SELECT `Name` FROM `accounts` WHERE ( UNIX_TIMESTAMP(`LastSeen`) + ( "#UNUSED_WEAKS"*7*24*60*60) )  < UNIX_TIMESTAMP( NOW() )",THREAD_COLLECTUNUSEDACCOUNT,INVALID_PLAYER_ID,gSQL);
    // -> THREADED
    return 1;
}

stock RemoveAccountLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/Unused/accounts.txt");
    if(!dir_exists("/Logs/Unused"))
    {
        dir_create("/Logs/Unused");
    }
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

GetPlayerVertragsPartner(playerid) {
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( Spieler[i][pVertragID] == playerid ) return i;
        }
    }
    return INVALID_PLAYER_ID;
}

GetPlayerPhonePartner(playerid) {
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( CurrentPhone[i] == playerid ) return i;
        }
    }
    return 999;
}

stock VertragLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/Vertrag/Vertrag.log");
    if(!dir_exists("/Logs/Vertrag"))
    {
        dir_create("/Logs/Vertrag");
    }
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock OamtLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/Oamt/Oamt.log");
    if(!dir_exists("/Logs/Oamt"))
    {
        dir_create("/Logs/Oamt");
    }
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}

stock KaufLog( text[] ) {
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[256], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/KaufLog/KaufLog.log");
    if(!dir_exists("/Logs/KaufLog"))
    {
        dir_create("/Logs/KaufLog");
    }
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[%02d %02d %d %02d:%02d:%02d] - %s\r\n", tag, monat, jahr , stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}


/*stock IsBlacklisted( name[] ) {
    new
        rows,
        query[128];
    format(query,sizeof(query),"SELECT * FROM `blacklist` WHERE `Name` = '%s'",name);
    mysql_oquery(query,THREAD_ISBLACKLISTED,INVALID_PLAYER_ID,gSQL);
    mysql_store_result();
    rows = mysql_num_rows();
    mysql_free_result();
    return rows;
}*/

stock AddBlacklistName( name[MAX_PLAYER_NAME] ) {
    new
        query[128];
    mysql_real_escape_string(name,name,gSQL,MAX_PLAYER_NAME);
    format(query,sizeof(query),"INSERT INTO `blacklist` VALUES (NULL, '%s')",name);
    mysql_oquery(query,THREAD_ADDBLACKLISTNAME,INVALID_PLAYER_ID,gSQL);
    return 1;
}




forward Suicidearrest(playerid,pID);
public Suicidearrest(playerid,pID)
{
    new string[128],Zeit;
	format(string, sizeof(string), "{AA3333}>> %s %s hat den Verbrecher %s eingesperrt. <<", GetRankName(Spieler[playerid][pFraktion], Spieler[playerid][pRank]), GetName(playerid), GetName(pID));
	SendClientMessageToAll(COLOR_DARKRED, string);
	SendClientMessage(pID, COLOR_GREEN, "* Da du dich gestellt hast, wirst du je Wanted 150 Sekunden anstatt 220 Sekunden je Wanted sitzen!");
	new gehalt = (200*Spieler[pID][pWanteds]);
	new pStaatGehalt = (200*Spieler[pID][pWanteds]);
	TreasuryDeposit(pStaatGehalt);
	format(string, sizeof(string), "~w~Gesuchten ~g~eingesperrt~n~+$%s", AddDelimiters( gehalt));
	GameTextForPlayer(playerid, string, 3000, 6);
	Spieler[playerid][pPayCheck] += gehalt;
	GivePlayerCash(pID, -gehalt);
    if( Spieler[pID][pWanteds] >= ALCATRAZ_WANTEDS ) Spieler[pID][pJailed] = 2;
    else Spieler[pID][pJailed] = 1;
               
    Spieler[pID][pTot] = 0;
    Spieler[pID][pJailTime] = 40*Spieler[pID][pWanteds];
    Spieler[pID][pCrimes] ++;
    Spieler[pID][pTotTime] = 0;
    Spieler[pID][pTotX] = 0.0;
    Spieler[pID][pTotY] = 0.0;
    Spieler[pID][pTotZ] = 0.0;
    Spieler[pID][pWanteds] = 0;
    DestroyDeathIcon(pID);
    Cuffed[pID] = 0;
    SpawnPlayerEx(pID);
    Zeit = Spieler[pID][pJailTime]/60;
	format(string, sizeof(string), "{8D8DFF}[HQ]: %s %s hat den Verdächtigen %s eingesperrt.", GetRankName(Spieler[playerid][pFraktion], Spieler[playerid][pRank]), GetName(playerid), GetName(pID));
	SendFraktionMessage(1, COLOR_WHITE, string);
	SendFraktionMessage(2, COLOR_WHITE, string);
	SendFraktionMessage(16, COLOR_WHITE, string);
	SendFraktionMessage(18, COLOR_WHITE, string);
	SendFraktionMessage(22, COLOR_WHITE, string);
	format(string, sizeof(string), "{8D8DFF}[HQ]: Haftzeit: %d Minuten, Geldstrafe: %d$", Zeit,gehalt);
	SendFraktionMessage(1, COLOR_WHITE, string);
	SendFraktionMessage(2, COLOR_WHITE, string);
	SendFraktionMessage(16, COLOR_WHITE, string);
	SendFraktionMessage(18, COLOR_WHITE, string);
	SendFraktionMessage(22, COLOR_WHITE, string);
    SuicidePlayer[pID] = INVALID_TIMER_ID;
    return 1;
}


forward KickEx(playerid);
public KickEx(playerid) {
    return Kick(playerid);
}
stock KickDelay(playerid,time = 71) {
    SetTimerEx("KickEx",time,false,"d",playerid);
}

forward _BanEx(playerid);
public _BanEx(playerid) {
    return Ban(playerid);
}
stock BanDelay(playerid,time = 71) {
    SetTimerEx("_BanEx",time,false,"d",playerid);
}

LoadTankKraftstoff(playerid,tanke) {
    new message[145];
    for (new i; i < sizeof(g_asKraftstoff); i++) format(message, sizeof(message), "%s%s $%d\n", message, g_asKraftstoff[i], Tanke[tanke][taiFillCost][i]);
    ShowPlayerDialog(playerid, DIALOG_TANKE, DIALOG_STYLE_LIST, "Kraftstoff Auswahl", message, "Auftanken", "Abbruch");
    return 1;
}

forward CoolDownKekse(playerid,value);
public CoolDownKekse(playerid,value) {
    Spieler[playerid][pKekseValue] -= value;
    return 1;
}
stock PreloadAnimLib(playerid, animlib[]) {
    ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
    return 1;
}

forward Pulse_Fahrschule(playerid);
public Pulse_Fahrschule(playerid) {
    new
        //Float:speed,
        //SpeedT,
        vehicleid,
        SpeedF,
        now;
    now = gettime();
    vehicleid = GetPlayerVehicleID(playerid);
    if( vehicleid != pFahrschulCar[playerid] ) {
        if( Spieler[playerid][unixFahrschuleFahrzeug] <= now ) {
            //GameTextForPlayer(playerid,"~r~Abbruch. Fahrzeug verlassen",2500,3);
            FahrschuleAbbruch(playerid);
            SetPlayerInterior(playerid,3);
            SetPlayerPos(playerid,-2033.2031,-117.3853,1035.1719);
            SetPlayerFacingAngle(playerid,89.9276);
            return 1;
        }
    }
    if( Spieler[playerid][unixFahrschuleZeit] < now ) {
        if( ( Spieler[playerid][unixFahrschuleZeit] + 7 ) < now ) {
            // 5 Sekunden um
            GameTextForPlayer(playerid,"~r~Abbruch. Du bist zu langsam!",2500,3);
            FahrschuleAbbruch(playerid);
            SetPlayerInterior(playerid,3);
            SetPlayerPos(playerid,-2033.2031,-117.3853,1035.1719);
            SetPlayerFacingAngle(playerid,89.9276);
            return 1;
        }
        else {
            GameTextForPlayer(playerid,"~r~~h~Du bist zu langsam!!",1250,3);
        }
    }
    SpeedF = GetPlayerVehicleSpeed(playerid);
    //SpeedT = floatround(speed)/2;
    //SpeedF = (SpeedT*1000)/700;
    if( SpeedF > 90 ) {
        Spieler[playerid][pFahrschuleSpeedWarnung]++;
        if( Spieler[playerid][pFahrschuleSpeedWarnung] >= 4 ) {
            GameTextForPlayer(playerid,"~r~Abbruch. Du bist zu schnell gefahren!",2500,3);
            FahrschuleAbbruch(playerid);
            SetPlayerInterior(playerid,3);
            SetPlayerPos(playerid,-2033.2031,-117.3853,1035.1719);
            SetPlayerFacingAngle(playerid,89.9276);
            return 1;
        }
        else {
            GameTextForPlayer(playerid,"~r~~h~Du bist zu schnell unterwegs!",1200,3);
        }
    }
    else {
        Spieler[playerid][pFahrschuleSpeedWarnung] = 0;
    }
    return 1;
}

stock FahrschuleAbbruch(playerid) {
    DisablePlayerCheckpointEx(playerid);
    RemovePlayerFromVehicle(playerid);
    DestroyVehicleEx( pFahrschulCar[playerid] );
    if( pFahrschulCar[playerid] != INVALID_VEHICLE_ID ) {
        aiVehicles[ pFahrschulCar[playerid] ] = VEH_INVALID;
    }
    pFahrschulCar[playerid] = INVALID_VEHICLE_ID;
    KillTimer( Spieler[playerid][tFahrschule] );
    pCheckpoint[playerid] = CP_NONE;
    return 1;
}

HasPlayerChecks(playerid) {
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( Spieler[i][pGeldcheckID] == playerid ) return 1;
        }
    }
    return 0;
}

ResetPlayerCheck(playerid) {
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( Spieler[i][pGeldcheckID] == playerid ) {
                Spieler[i][pGeldcheckID] = INVALID_PLAYER_ID;
                Spieler[i][pGeldcheckBetrag] = 0;
            }
        }
    }
    return 0;
}



stock HasKrankenversicherung(playerid) {
    if( gettime() > Spieler[playerid][unixKrankenversicherung] ) return 0;
    return 1;
}

forward OnQueryFinish(query[], resultid, extraid, connectionHandle , threadowner );
public OnQueryFinish(query[], resultid, extraid, connectionHandle , threadowner )
{
    /*
    if( cache_affected_rows(connectionHandle) > 0 ) {
        printf("OnQueryFinish(%s,%d,%d) affected: %d",query,resultid,extraid, cache_affected_rows(connectionHandle) );
    }
    */
    if( (0 <= extraid <= MAX_PLAYERS) && ( threadowner != INVALID_THREAD_OWNER ) ) {
        // Ein Player bezogener Thread
        if( threadowner != MySQLThreadOwner[extraid] ) {
            new
                syncString[512];
            format(syncString,sizeof(syncString),"OnQueryFinish('%.480s',%d,%d,%d,%d)",query,resultid,extraid,connectionHandle,threadowner);
            MySQLThreadOwnerLog("Spielerbezogener Thread nicht Synchron! Drop");
            MySQLThreadOwnerLog(syncString);
            return 0;
        }
    }
    if(resultid==THREAD_POSTCHANGE)
    {
        if(cache_get_row_count(connectionHandle)==0)
        {
            SendClientMessage(extraid,COLOR_RED,"Solch ein Spieler existiert nicht");
        }
        else
        {
            new i,pfad[64];
            for(;i<50;i++)
            {
                format(pfad,64,"/Briefe/%s/Empfangene Briefe/Brief%i.txt",postpsenden[extraid],i);
                if(fexist(pfad))
                {
                }
                else if(strcmp(pfad,postpsenden[extraid],true)!=0)
                {
                    i=100;
                    break;
                }
                else
                {
                    SendClientMessage(extraid,COLOR_RED,"Bitte beachte die Groß&Kleinschreibung");
                }
            }
            if(i==100)
            {
                ShowPlayerDialog(extraid,DIALOG_POST5,DIALOG_STYLE_INPUT,"Post schreiben","Geben sie den Text ein (maximal 500 Zeichen)","Weiter","Zurück");
            }
            else
            {
                SendClientMessage(extraid,COLOR_RED,"Du kannst diesen Brief nicht abschicken da das Postfach des Empfängers voll ist");
            }
        }
    }
    else if(resultid==THREAD_BANKCHANGE)
    {
        if(cache_get_row_count(connectionHandle)!=0)
        {
            bankchange[extraid]=cache_get_field_content_int(0,"Bank",connectionHandle);
        }
    }
    else if(resultid==THREAD_PWCHANGE)
    {
        if(cache_get_row_count(connectionHandle)==0)
        {
            SendClientMessage(extraid,COLOR_RED,"Solch ein Account existiert in der Datenbank nicht");
        }
        else
        {
            return 101;
        }
    }
    else if(resultid==THREAD_FRAKBLACKLISTCHECK)
    {
        if(cache_get_row_count(connectionHandle)==0)
        {
            SendClientMessage(extraid,COLOR_RED,"Solch ein Account existiert in der Datenbank nicht");
        }
        else
        {
            new extra[24],String[128];
            ReadPlayerSQLExtra(extraid,extra);
            format(String,sizeof(String),"Der Spieler %s wurde auf eure Fraktionsblacklist gesetzt",extra);
            SendClientMessage(extraid,COLOR_WHITE,String);
            format(String,sizeof(String),"INSERT INTO `frakblacklist` (`name`, `fraktion`) VALUES ('%s', %d);",extra,Spieler[extraid][pFraktion]);
            mysql_pquery(String,THREAD_ADDFRAKBLACKLIST,extraid,gSQL,MySQLThreadOwner);
        }
    }
    else if(resultid==THREAD_DEAKTACC)
    {
        if(cache_get_row_count(connectionHandle)==0)
        {
            SendClientMessage(extraid,COLOR_RED,"Solch ein Account existiert in der Datenbank nicht");
        }
        else
        {
            return cache_get_row_int(0,2,connectionHandle);
        }
    }
    else if(resultid==THREAD_AKTACC)
    {
        if(cache_get_row_count(connectionHandle)==0)
        {
            SendClientMessage(extraid,COLOR_RED,"Solch ein Account existiert in der Datenbank nicht");
        }
        else if(cache_get_row_int(0,138,connectionHandle)==0)
        {
            SendClientMessage(extraid,COLOR_RED,"Dieser Account ist nicht deaktiviert");
        }
        else
        {
            return 100;
        }
    }
    else if( resultid == THREAD_CONNECTION_CHECK1 ) {
        print("<-| [MYSQL] Verbindung zur Datenbank wurde erfolgreich hergestellt!");
        gWebSQL = mysql_connect(WEBSQL_HOST, WEBSQL_USER, WEBSQL_DATA, WEBSQL_PASS);
        mysql_oquery("SELECT 1", THREAD_CONNECTION_CHECK2 ,extraid ,gWebSQL);
        MySQLConnected++;
    }
    /*else if( resultid == THREAD_NAMECHANGEFINISH) {
        SendClientMessage(extraid,COLOR_YELLOW,"Namensänderung an der Datenbank durchgeführt");
    }
    else if( resultid == THREAD_NAMECHANGE) {
        mysql_store_result();
        new rows = mysql_num_rows();
        mysql_free_result();
        if( rows ) {
            return SendClientMessage(extraid,COLOR_RED,"Der Benutzername ist schon in Nutzung!");
        }
        else {
            new
                String[128],
                giveid,
                name[MAX_PLAYER_NAME];
            ReadPlayerSQLExtra(extraid,String);
            sscanf(String,"us[24]",giveid,name);
            format(String,sizeof(String),"Der Benutzername von %s(%d) wird nun geändert in %s",GetName(giveid),giveid,name);
            SendClientMessage(extraid,COLOR_GREEN,String);
            ChangePlayerName(extraid,giveid,GetName(giveid),name);
        }
    }
    */
    else if( resultid == THREAD_CREATEGUTSCHEIN_CHECK) {
        new
            String[128],
            code[32],
            gutschein;
        ReadPlayerSQLExtra(extraid,String);
        sscanf(String,"s[32]d",code,gutschein);
        if( cache_get_row_count(connectionHandle) ) {
            format(String,sizeof(String),"Ein Gutschein mit dem Code '%s' existiert bereits",code);
            SendClientMessage(extraid,COLOR_ORANGE,String);
        }
        else {
            new
                Query[128];
            mysql_real_escape_string(code,code);
            format(Query,sizeof(Query),"INSERT INTO `gutschein` (`code`, `gutschein`,`expired`) VALUES ('%s', %d,0)", code,gutschein);
            mysql_pquery( Query , THREAD_CREATEGUTSCHEIN , extraid, gSQL,MySQLThreadOwner);
        }
    }
    else if( resultid == THREAD_CREATEGUTSCHEIN) {
        new
            String[128],
            code[32],
            gutschein;
        ReadPlayerSQLExtra(extraid,String);
        sscanf(String,"s[32]d",code,gutschein);
        format(String,sizeof(String),"Ein Gutschein für \"%s\" (%d) wurde mit dem Code '%s' erstellt",g_Gutschein[gutschein],gutschein,code);
        SendClientMessage(extraid,COLOR_GREEN,String);
    }
    else if( resultid == THREAD_GUTSCHEINCODE_CHECK) {
        new
            String[128],
            inputtext[64];
        ReadPlayerSQLExtra(extraid,inputtext);
        if( cache_get_row_count(connectionHandle) ) {
            new
                expired;
            expired = cache_get_row_int(0,3,connectionHandle);
            if(expired) {
                format(String,sizeof(String),"Der Gutscheincode (%s) ist bereits eingelöst worden!",inputtext);
                SendClientMessage(extraid,COLOR_RED,String);
            }
            else {
                new
                    id = cache_get_row_int(0,0,connectionHandle),
                    gutschein = cache_get_row_int(0,2,connectionHandle);
                expired = cache_get_row_int(0,3,connectionHandle);
                format(String,sizeof(String),"Der Gutschein mit dem Code '%s' wird eingelöst!",inputtext);
                SendClientMessage(extraid,COLOR_GREEN,String);
                format(String,sizeof(String),"Du erhältst: \"%s\"",g_Gutschein[gutschein]);
                SendClientMessage(extraid,COLOR_GREEN,String);
                format(String, sizeof(String), "[GUTSCHEIN] {FFFFFF}%s hat den Gutscheincode '%s' (%s) eingelöst!", GetName(extraid), inputtext, g_Gutschein[gutschein]);
                SendClientMessageToAll(COLOR_GREEN, String);
                format(String,sizeof(String),"UPDATE `gutschein` SET `expired` = 1 WHERE `id` = %d",id);
                mysql_pquery( String , THREAD_GUTSCHEINCODE , extraid, gSQL,MySQLThreadOwner);
                switch(gutschein) {
                    case 1: {
                        Spieler[extraid][pCash] += 30000;
                    }
                    case 2: {
                        Spieler[extraid][pCash] += 80000;
                    }
                    case 3: {
                        Spieler[extraid][pLevel] += 1;
                    }
                    case 4: {
                        Spieler[extraid][pLevel] += 2;
                    }
                    case 5: {
                        Spieler[extraid][pExp] += 3;
                    }
                    case 6: {
                        Spieler[extraid][pExp] += 6;
                    }
                    case 7: {
                        new Query[120];
                        format(Query,sizeof(Query),"UPDATE `accounts` SET `userPremium` = `userPremium` + 100 WHERE `Name` = '%s'",GetName(extraid));
                        mysql_pquery( Query , THREAD_DUMMY , extraid, gSQL,MySQLThreadOwner);
                    }
                    case 8: {
                        new Query[120];
                        format(Query,sizeof(Query),"UPDATE `accounts` SET `userPremium` = `userPremium` + 300 WHERE `Name` = '%s'",GetName(extraid));
                        mysql_pquery( Query , THREAD_DUMMY , extraid, gSQL,MySQLThreadOwner);
                    }
                    case 9: {
                        new Query[120];
                        format(Query,sizeof(Query),"UPDATE `accounts` SET `userPremium` = `userPremium` + 500 WHERE `Name` = '%s'",GetName(extraid));
                        mysql_pquery( Query , THREAD_DUMMY , extraid, gSQL,MySQLThreadOwner);
                    }
                    case 10: {
                        Spieler[extraid][pPremiumNeon] = 1;
                    }
                    case 11: {
                        Spieler[extraid][pPremiumCarSlot] = 1;
                    }
                    default: {
                        printf("Fehler bei THREAD_GUTSCHEINCODE_CHECK mit gutschein %d",gutschein);
                    }
                }
            }
        }
        else {
            format(String,sizeof(String),"Der Gutschein mit dem Code \"%s\" ist uns nicht bekannt.",inputtext);
            SendClientMessage(extraid,COLOR_RED,String);
        }
    }
    else if( resultid == THREAD_CREATEHAUSMOEBEL) { // TODO
        new
            lastid = cache_insert_id(),
            house,
            slot;
        Hausmoebel_Uncompress( extraid, house,slot);
        g_HausMoebelObjekt[house][slot][HMO_iID] = lastid;
    }
    else if( resultid == THREAD_GEBECLUB ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                String[140],
                option,
                name[MAX_PLAYER_NAME];
            ReadPlayerSQLExtra(extraid,String);
            sscanf(String,"s[24]d",name,option);
            format(String,sizeof(String),"Clubmitgliedschaft an %s erfolgreich vergeben! Option: %d",name,option);
            SendClientMessage(extraid,COLOR_YELLOW,String);
            format(String,sizeof(String),"UPDATE `accounts` SET `DonateRank` = 1,`Level` = `Level` + 1, `Exp` = `Exp` + 1, `Cash` = `Cash` + 20000 WHERE `Name` = '%s'",name);
            mysql_oquery(String,THREAD_DUMMY,0,gSQL);

            new sOption[16] = "Fehler";
            switch(option) {
                case 1: sOption = "1 Monat";
                case 2: sOption = "3 Monate";
                case 3: sOption = "6 Monate";
                case 4: sOption = "für immer";
            }

            format(String,sizeof(String),"(Offline Aktion) Spieler %s erhielt von %s %s eine Clubmitgliedschaft, Laufzeit: %s", name, GetPlayerAdminRang(extraid), GetName(extraid), sOption);
            ClubLog(String);
        }
        else {
            SendClientMessage(extraid,COLOR_RED,"Ein Spieler unter diesem Namen ist bei uns nicht registriert!");
        }
    }
    else if( resultid == THREAD_WAFFENSPERRE ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                name[MAX_PLAYER_NAME],
                querystr[128],
                resultline[100];

            GetPVarString(extraid, "WEAPON.BLOCK", name, sizeof(name));
            if (!isnull(name)) {
                format(resultline,sizeof(resultline),"UPDATE `accounts` SET `WaffenSperre` = %d WHERE `Name` = '%s'", gettime() + (2*24*60*60) , name);
                mysql_oquery( resultline ,  THREAD_DUMMY , 0 ,gSQL);
                format(resultline,sizeof(resultline),"Die Waffensperre wird offline an den Spieler %s vergeben.",name);
                SendClientMessage(extraid,COLOR_YELLOW,resultline);

                format(querystr,sizeof(querystr),"%s erhielt von %s %s eine Waffensperre, Dauer: 2 Tage", name, GetPlayerAdminRang(extraid), GetName(extraid));
                SendUCPAktenEintrag( extraid ,GetName(extraid) , name , querystr );
                AdminLog(querystr);
            }
            else SendClientMessage(extraid, COLOR_RED, "Es ist ein Fehler aufgetreten.");
        }
        else SendClientMessage(extraid,COLOR_RED,"Ein Spieler unter diesem Namen ist bei uns nicht registriert!");

        DeletePVar(extraid, "WEAPON.BLOCK");
    }
    else if( resultid == THREAD_GEBANNT ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                banned,
                //timeban,
                unixtimeban[28],
                name[MAX_PLAYER_NAME],
                gebanntvon[MAX_PLAYER_NAME],
                bangrund[128];
            cache_get_row(0,0,name,connectionHandle);
            banned = cache_get_row_int(0,1,connectionHandle);
            //timeban = cache_get_row_int(0,2,connectionHandle);
            cache_get_row(0,3,unixtimeban,connectionHandle);
            cache_get_row(0,4,gebanntvon,connectionHandle);
            cache_get_row(0,5,bangrund,connectionHandle);
            if( isnull(gebanntvon)) {
                gebanntvon = "Unbekannt";
            }
            if( isnull(bangrund)) {
                bangrund = "Unbekannt";
            }
            if( banned == 1 ) {
                unixtimeban = "Immer";
            }
            if( banned == 1 ) {
                new
                    String[128];
                format(String,sizeof(String),"%s wurde von Teammitglied %s dauerhaft gesperrt, Grund: %s", name, gebanntvon, bangrund);
                SendClientMessage(extraid,COLOR_RED,String);
                format(String,sizeof(String),"Gebannt für: %s",unixtimeban);
                SendClientMessage(extraid,COLOR_RED,String);
            }
            else {
                SendClientMessage(extraid,COLOR_RED,"Der Spieler ist nicht gesperrt!");
            }
        }
        else {
            SendClientMessage(extraid,COLOR_RED,"Ein Spieler unter diesem Namen ist bei uns nicht registriert!");
        }
    }
    else if( resultid == THREAD_SPIELERINFO ) {
        if( cache_get_row_count(connectionHandle) ) {
            new String[128], name[MAX_PLAYER_NAME],lastseen[22],banned;
            cache_get_row(0,0,name,connectionHandle);
            cache_get_row(0,1,lastseen,connectionHandle);
            banned = cache_get_row_int(0,2,connectionHandle);
            format(String,sizeof(String),"%s war zuletzt online am: %s",name,lastseen);
            SendClientMessage(extraid,COLOR_YELLOW,String);
            if( banned == 1 ) {
                format(String,sizeof(String),"Gebannt: {FF0000}Ja");
            }
            else {
                format(String,sizeof(String),"Gebannt: {00FF00}Nein");
            }
            SendClientMessage(extraid,COLOR_GREEN,String);
        }
        else {
            SendClientMessage(extraid,COLOR_RED,"Ein Spieler unter diesem Namen ist bei uns nicht registriert!");
        }
    }
    else if( resultid == THREAD_UPDATE_PLAYER_PASSWORD ) {
        SendClientMessage(extraid,COLOR_GREEN,"Dein Passwort wurde aktualisiert!");
    }
    else if( resultid == THREAD_BANKSYSTEM ) {
        new
            rows = cache_get_row_count(connectionHandle);
        if( rows ) {
            new
                row,
                string[128],
                //id,
                userid_von,
                userid_an,
                pushonlinean,
                pushonlinevon,
                von[MAX_PLAYER_NAME],
                an[MAX_PLAYER_NAME],
                betrag,
                grund[128];
            while( row < rows ) {
                //id = cache_get_row_int(row,0,connectionHandle);
                cache_get_row(row,1,an,connectionHandle);
                cache_get_row(row,2,von,connectionHandle);
                //3
                betrag = cache_get_row_int(row,4,connectionHandle);
                cache_get_row(row,5,grund,connectionHandle);
                pushonlinevon = cache_get_row_int(row,6,connectionHandle);
                pushonlinean = cache_get_row_int(row,7,connectionHandle);

                if( pushonlinean ) {
                    sscanf( an , "u" , userid_an );
                    //printf("an '%s' userid_an %d",an,userid_an);
                    if( IsPlayerConnected(userid_an) ) {
                        format(string,sizeof(string),"OnlineBanking - Sie haben von %s eine Überweisung per Online-Banking erhalten! Betrag: %d$",von,betrag);
                        SendClientMessage(userid_an,COLOR_ORANGE,string);
                        format(string,sizeof(string),"Überweisungsgrund: %s",grund);
                        SendClientMessage(userid_an,COLOR_ORANGE,string);
                        Spieler[userid_an][pBank] += betrag;
                    }
                    else {
                        // Spieler schon wieder offline
                        format(string,sizeof(string),"UPDATE `accounts` SET `Bank` = `Bank` + %d WHERE `Name` = '%s'",betrag,an);
                        mysql_oquery( string ,  THREAD_DUMMY , 0 ,gSQL);
                        //printf("Spieler schon wieder offline");
                    }
                }
                if( pushonlinevon ) {
                    sscanf( von , "u" , userid_von );
                    //printf("von '%s' userid_von %d",von,userid_von);
                    if( IsPlayerConnected(userid_von) ) {
                        format(string,sizeof(string),"OnlineBanking - Ihre Online-Überweisung in Höhe von %d$ an %s wird abgerechnet",betrag,an);
                        SendClientMessage(userid_von,COLOR_ORANGE,string);
                        Spieler[userid_von][pBank] -= betrag;
                    }
                    else {
                        // Spieler schon wieder offline
                        format(string,sizeof(string),"UPDATE `accounts` SET `Bank` = `Bank` - %d WHERE `Name` = '%s'",betrag,von);
                        mysql_oquery( string ,  THREAD_DUMMY , 0 ,gSQL);
                        //printf("Spieler schon wieder offline");
                    }
                }
                row++;
            }
            mysql_oquery( "UPDATE `bank` SET `PushOnlineVon` = 0,`PushOnlineAn` = 0" ,  THREAD_DUMMY , 0 ,gSQL);
        }
    }
    else if( resultid == THREAD_CONNECTION_CHECK2 ) {
        // Beide MySQL Serververbindungen hergestellt...Los gehts
        print("<-| [MYSQL] WebSQL Verbindung zur Datenbank wurde erfolgreich hergestellt!");
        MySQLConnected++;
        KillTimer( tMySQL );
        // Gamemodedaten laden. MySQL Daten konnten vorher nicht geladen werde, der Rest machte sowieso keinen Sinn
        //OnGameModeInit2();
    }
    else if( resultid == THREAD_DELCLUB ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                name[MAX_PLAYER_NAME],
                donaterank,
                String[128];

            cache_get_row(0,0,name,connectionHandle);
            donaterank = cache_get_row_int(0,1,connectionHandle);

            if( donaterank == 0 ) {
                format(String,sizeof(String),"Der Spieler %s besitzt keinen Donator Rank",name);
                SendClientMessage(extraid,COLOR_RED,String);
                format(String,sizeof(String),"UPDATE `accounts` SET `DonateRank` = 0 WHERE `Name` = '%s'",name);
                mysql_pquery(String,THREAD_DUMMY,extraid,gSQL,MySQLThreadOwner);
            }
            else {
                format(String,sizeof(String),"Der Donator Rank wird dem Spieler %s entzogen",name);
                SendClientMessage(extraid,COLOR_YELLOW,String);
            }
        }
        else {
            SendClientMessage(extraid,COLOR_RED,"Kein Spieler mit diesem Namen gefunden");
        }
    }
    else if( resultid == THREAD_HAUSMIETER ) {
        new
            rows = cache_get_row_count(connectionHandle);
        if( rows ) {
            new
                row,
                String[512] = "{FFFFFF}",
                player,
                resultline[128],
                i = 1;
            while( row < rows ) {
                // resultline = name
                cache_get_row(row,0,resultline,connectionHandle);

                sscanf(resultline,"u",player);
                format(String,sizeof(String),"%s%d. %s ( %s )\n",String,i, resultline , ( IsPlayerConnected(player) ? ("{00FF00}Online{FFFFFF}") : ("{FF0000}Offline{FFFFFF}")) );
                i++;
                row++;
            }
            ShowPlayerDialog(extraid,DIALOG_HAUSMIETER,DIALOG_STYLE_MSGBOX,"Hausmieter",String,"Schliessen","");
        }
        else {
            ShowPlayerDialog(extraid,DIALOG_HAUSMIETER,DIALOG_STYLE_MSGBOX,"Hausmieter","{FF0000}Keine Mieter vorhanden","Schliessen","");
        }
    }
    else if( resultid == THREAD_OFFHAUSRAUS ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                String[128],
                name[MAX_PLAYER_NAME],
                key;

            cache_get_row(0,0,name,connectionHandle);
            key = cache_get_row_int(0,1,connectionHandle);

            if( Haus[ Spieler[extraid][pPlayerHouse] ][hID] == key ) {
                format(String,sizeof(String),"Der Spieler %s wird als Mieter aus deinem Haus entfernt",name);
                SendClientMessage(extraid,COLOR_GREEN,String);
                format(String,sizeof(String),"UPDATE `accounts` SET `HouseMieteKey` = 999 WHERE `Name` = '%s'",name);
                mysql_pquery(String,THREAD_DUMMY,extraid,gSQL,MySQLThreadOwner);
                Haus[ Spieler[extraid][pPlayerHouse] ][hMieterAnzahl]--;
            }
            else {
                format(String,sizeof(String),"Der Spieler %s ist nicht eingemietet in deinem Haus",name);
                SendClientMessage(extraid,COLOR_RED,String);
            }
        }
        else {
            SendClientMessage(extraid,COLOR_RED,"Kein Benutzer mit diesem Namen gefunden");
        }
    }
    else if( resultid == THREAD_FREEPHONENUMBER ) {
        if( cache_get_row_count(connectionHandle) ) { // Belegt
            if( Spieler[extraid][pHandyNr_Counter] >= 10 ) {
                SendClientMessage(extraid,COLOR_RED,"Es sind kaum noch Handy-Nummern frei! Bitte bei einem Admin melden");
            }
            else {
                GetFreePhoneNumber(extraid);
            }
        }
        else {
            new
                String[128];
            Spieler[extraid][pHandyNr] = Spieler[extraid][pHandyNr_Temp];
            Spieler[extraid][pHandyNr_Temp] = 0;
            format(String,sizeof(String),"Deine Handy-Nummer lauet: %d",Spieler[extraid][pHandyNr]);
            SendClientMessage(extraid,COLOR_YELLOW,String);
            Spieler[extraid][pHandyNr_Counter] = 0;
            format(String,sizeof(String),"UPDATE `accounts` SET `HandyNr` = %d WHERE `Name` = '%s'",Spieler[extraid][pHandyNr],GetName(extraid));
            mysql_oquery(String,THREAD_SAVEPHONENUMBER,extraid,gSQL);
        }
    }
    else if( resultid == THREAD_ISIPBAN ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                String[128],
                name[MAX_PLAYER_NAME];
            GetPlayerName(extraid,name,sizeof(name));
            mysql_real_escape_string(name,name,gSQL,MAX_PLAYER_NAME);
            format(String,sizeof(String),"SELECT * FROM `whitelist` WHERE `Name` = '%s'",name);
            mysql_pquery( String , THREAD_ISWHITELIST_CONNECT , extraid , gSQL , MySQLThreadOwner);
        }
        else {
            mysql_CheckAccount(extraid);
        }
    }
    else if( resultid == THREAD_SAVEHOUSEUPGRADE ) {
        SendClientMessage(extraid,COLOR_YELLOW,"Upgradeposition gespeichert!");
    }
    else if( resultid == THREAD_COMMIT ) {
        //printf("Zeit für SaveAll %dms", GetTickCount() - extraid );
    }
    else if( resultid == THREAD_ISWHITELIST_CONNECT ) {
        if( cache_get_row_count(connectionHandle) ) {
            // Auf Whitelist, weiter normal mit Login
            mysql_CheckAccount(extraid);
        }
        else {
            SendClientMessage(extraid,COLOR_LIGHTRED2,"Der Zutritt auf diesen Server ist Ihnen aufgrund eines Regelverstoßes verwehrt!");
            SetTimerEx("KickEx",1873,false,"d",extraid);
        }
    }
    else if( resultid == THREAD_ISWHITELIST ) {
        new
            parameter[MAX_PLAYER_NAME],
            String[128];
        ReadPlayerSQLExtra(extraid,parameter);
        if( cache_get_row_count(connectionHandle) ) {
            format(String,sizeof(String),"Der Spieler %s ist bereits auf der Whitelist",parameter);
            SendClientMessage(extraid, COLOR_GREY, String );
        }
        else {
            AddWhitelist(parameter);
            format(String,sizeof(String),"Der Name %s wurde der Whitelist hinzugefügt",parameter);
            SendClientMessage(extraid,COLOR_LIGHTRED2,String);
        }
    }
    else if( resultid == THREAD_ADDIPBAN ) {
        //
    }
    else if( resultid == THREAD_ISIPBANNED ) {
        //
    }
    else if( resultid == THREAD_TBAN ) {
        ShowPlayerBan(extraid);
    }
    else if( resultid == THREAD_ISVALIDSECURECUDE ) {
        new
            securecode;
        securecode = cache_get_row_count(connectionHandle);
        if( securecode > 0 ){
            SendClientMessage(extraid,COLOR_WHITE,"Wir brauchen einen SecureCode!");
            ShowPlayerDialog(extraid,DIALOG_SET_SECURECODE,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Sicherheitscode:", COLOR_HEX_WHITE"Bitte gib unten deinen persönlichen SecureCode ein.\nDieser wird genutzt, um dich zukünftig eindeutig zu identifizieren.\n\nDein Sicherheitscode muss zwischen 4 und 10 Zeichen haben,\ndarf Zahlen und Sonderzeichen enthalten.\n\nBitte merke dir dein Sicherheitscode(!) gut","Bestätigen","");
        }
        else {
            IsValidGeburtstag(extraid);
        }
    }
    else if( resultid == THREAD_SELLHOUSE ) {

    }
    else if( resultid == THREAD_HAUSRAUSALLE ) {

    }
    else if( resultid == THREAD_CREATETANKE ) {
        if( TankeLoadID( cache_insert_id () ) ) {
            SendClientMessage(extraid, COLOR_GREEN, "Tankstelle wurde gebaut!");
        }
        else {
            SendClientMessage(extraid, COLOR_GREEN,"Tankstelle wurde nicht erstellt da es keinen Freien IDs gibt.");
        }
    }
    else if( resultid == THREAD_CREATEHOUSE ) {
        if( HouseLoadID( cache_insert_id () )) {
            SendClientMessage(extraid, COLOR_GREEN, "Haus wurde gebaut");
        }
        else {
            SendClientMessage(extraid, COLOR_RED,"Haus wurde nicht erstellt da es keinen Freien IDs gibt.");
        }
    }
    else if( resultid == THREAD_CREATEHOTEL ) {
        if( HotelLoadID( cache_insert_id () )) {
            SendClientMessage(extraid, COLOR_GREEN, "Hotel wurde gebaut");
        }
        else {
            SendClientMessage(extraid, COLOR_RED,"Hotel wurde nicht erstellt da es keinen Freien IDs gibt.");
        }
    }
    else if( resultid == THREAD_CREATEAPLATZ ) {
        if( AngelLoadID( cache_insert_id () )) {
        }
        else {
            SendClientMessage(extraid, COLOR_RED,"Angelplatz wurde nicht erstellt da es keinen FreienIDs gibt.");
        }
    }
    else if( resultid == THREAD_CREATEPLAYERCAR ) {
        if( 0 <= extraid < MAX_PLAYERS ) {
            PlayerCar[extraid][PlayerKey[extraid]][Id] = cache_insert_id();
            SavePlayerCar(extraid,PlayerKey[extraid]);
        }
    }
    else if( resultid == THREAD_SAVEPLAYERCAR ) {

    }
    else if( resultid == THREAD_CARSELL ) {

    }
    else if( resultid == THREAD_SBAN ) {
        Spieler[extraid][pBanned] = 1;
        ShowPlayerBan(extraid);
        Ban(extraid);
    }
    else if( resultid == THREAD_BAN ) {
        Spieler[extraid][pBanned] = 1;
        ShowPlayerBan(extraid);
    }
    else if( resultid == THREAD_IPBAN ) {
        Spieler[extraid][pBanned] = 1;
        ShowPlayerBan(extraid);
        Ban(extraid);
    }
    else if (resultid == THREAD_BWSTRAFEN) {
        new playerName[MAX_PLAYER_NAME], reason[128], dialogText[2500], hours;
        dialogText = "Name\tStunden\tGrund\n";
        new i = 0, rows = cache_get_row_count(connectionHandle);
        if (!rows) return ShowPlayerDialog(extraid, DIALOG_NO_RESPONSE, DIALOG_STYLE_MSGBOX, "{FF9900}Geltende Bewährungsstrafen", 
            "{FFFFFF}Es gibt zurzeit keine laufenden Bewährungsstrafen.", "Schließen", "");

        while (i < rows) {
            cache_get_field_content(i, "Name", playerName, connectionHandle);
            cache_get_field_content(i, "BWStrafeGrund", reason, connectionHandle);
            hours = cache_get_field_content_int(i, "BWStrafe", connectionHandle);
            format(dialogText, sizeof(dialogText), "%s%s\t%i\t%s\n", dialogText, playerName, hours, reason);
            i++;
            if (i == 20) break;
        }

        if (rows > 20) {
            SetPVarInt(extraid, "BW.PAGES.END", 0);
            ShowPlayerDialog(extraid, DIALOG_BWSTRAFEN, DIALOG_STYLE_TABLIST_HEADERS, "{FF9900}Geltende Bewährungsstrafen", dialogText, "Weiter", "Schließen");
        }
        else {
            SetPVarInt(extraid, "BW.PAGES.END", 1);
            ShowPlayerDialog(extraid, DIALOG_BWSTRAFEN, DIALOG_STYLE_TABLIST_HEADERS, "{FF9900}Geltende Bewährungsstrafen", dialogText, "Schließen", "");
        }

        return 1; 
    }
    else if( resultid == THREAD_FRAKCHANGE)
    {
        new pName[24],String[128];
        new r, giveid, rows = cache_get_row_count(connectionHandle);
        while( r < rows ) 
        {
            cache_get_field_content(r,"Name",pName, connectionHandle);
            sscanf(pName, "k<playername>", giveid);
            if (giveid == INVALID_PLAYER_ID)
            {
                format(String,sizeof(String),"UPDATE `accounts` SET `Fraktion` = %d WHERE `Name` = '%s'",pNewFrak,GetName(giveid));
                mysql_oquery(String,THREAD_DUMMY,extraid,gSQL);
                new newSkin;
                if(pNewFrak == 0){   
                    newSkin = skins_array[0];
                }else if(pNewFrak == 1){   
                    newSkin = skins_pd_array[0];
                }else if(pNewFrak == 2){
                    newSkin = skins_fbi_array[0];
				}else if(pNewFrak == 3){
                    newSkin = skins_samd_array[0];
                }else if(pNewFrak == 4){   
                    newSkin = skins_news_array[0];
                }else if(pNewFrak == 5){   
                    newSkin = skins_oamt_array[0];
                }else if(pNewFrak == 6){   
                    newSkin = skins_gsf_array[0];
                }else if(pNewFrak == 7){   
                    newSkin = skins_ballas_array[0];
                }else if(pNewFrak == 9){   
                    newSkin = skins_regierung_array[0];
                }else if(pNewFrak == 10){   
                    newSkin = skins_yakuza_array[0];
                }else if(pNewFrak == 11){   
                    newSkin = skins_aztecas_array[0];
                }else if(pNewFrak == 12){   
                    newSkin = skins_cali_array[0];
                }else if(pNewFrak == 13){   
                    newSkin = skins_vagos_array[0];
                }else if(pNewFrak == 14){   
                    newSkin = skins_array[0];
                }else if(pNewFrak == 15){   
                    newSkin = skins_nd_array[0];
                }else if(pNewFrak == 19){   
                    newSkin = skins_terrorist_array[0];
                }else if(pNewFrak == 20){   
                    newSkin = skins_lcn_array[0];
                }else if(pNewFrak == 21){   
                    newSkin = skins_triaden_array[0];
                }else if(pNewFrak == 22){
                    newSkin = skins_zollamt_array[0];
                }
                format(String,sizeof(String),"UPDATE `accounts` SET `Skin` = %d WHERE `Name` = '%s'",newSkin,GetName(giveid));
                mysql_oquery(String,THREAD_DUMMY,extraid,gSQL);
                for (new g = 0; g < MAX_GANGZONES; g++) 
                if (g_GangZone[g][GZ_iOwner] == pOldFrak)
                {
                    g_GangZone[g][GZ_iOwner] = pNewFrak;
                    new gangzoneLabel[128], gangName[32];
                    format(gangName, sizeof(gangName), "%s", GetFactionNameOfFaction(g_GangZone[g][GZ_iOwner]));
                    format(gangzoneLabel, sizeof(gangzoneLabel), "-> GEBIET DER %s <-\nErobern mit: /Gangfight\n\n(%d)", gangName, g);
                    UpdateDynamic3DTextLabelText(g_GangZone[g][GZ_t3dLabel], 0x1E90FFFF, gangzoneLabel);
                    SaveGangZones();
                    return 1;
                }
            }
            else
            {
                Spieler[giveid][pFraktion] = pOldFrak;
                SendClientMessage(giveid, COLOR_GREEN, "Wähle nun deinen Fraktionsskin!");
                new dialogstr[2056];
                if(Spieler[giveid][pFraktion] == 0){
                    for (new i = 0, j = sizeof(skins_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 1){
                    for (new i = 0, j = sizeof(skins_pd_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_pd_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 2){
                    for (new i= 0, j = sizeof(skins_fbi_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_fbi_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 3){
                    for (new i = 0, j = sizeof(skins_samd_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_samd_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 4){
                    for (new i = 0, j = sizeof(skins_news_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_news_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 5){
                    for (new i = 0, j = sizeof(skins_oamt_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_oamt_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 6){
                    for (new i = 0, j = sizeof(skins_gsf_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_gsf_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 7){
                    for (new i = 0, j = sizeof(skins_ballas_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_ballas_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 9){
                    for (new i = 0, j = sizeof(skins_regierung_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_regierung_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 10){
                    for (new i = 0, j = sizeof(skins_yakuza_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_yakuza_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 11){
                    for (new i = 0, j = sizeof(skins_aztecas_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_aztecas_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 12){
                    for (new i = 0, j = sizeof(skins_cali_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_cali_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 13){
                    for (new i = 0, j = sizeof(skins_vagos_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_vagos_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 14){
                    for (new i = 0, j = sizeof(skins_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 15){
                    for (new i = 0, j = sizeof(skins_nd_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_nd_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 19){
                    for (new i = 0, j = sizeof(skins_terrorist_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_terrorist_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 20){
                    for (new i = 0, j = sizeof(skins_lcn_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_lcn_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 21){
                    for (new i = 0, j = sizeof(skins_triaden_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_triaden_array[i]);
                    }
                }else if(Spieler[giveid][pFraktion] == 22){
                        for (new i = 0, j = sizeof(skins_zollamt_array); i < j; i++) {
                            format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_zollamt_array[i]);
                        }
                    }
                else{
                    for (new i = 0, j = sizeof(skins_array); i < j; i++) {
                        format(dialogstr, sizeof(dialogstr), "%s%d\n\n", dialogstr, skins_array[i]);
                    }
                }
                ShowPlayerDialog(giveid, DIALOG_SKINS_EINGELADEN, DIALOG_STYLE_PREVMODEL, "LyD - Fraktionsskin auswählen", dialogstr, "Ok", "Abbrechen");
                for (new g = 0; g < MAX_GANGZONES; g++) 
                if (g_GangZone[g][GZ_iOwner] == pOldFrak)
                {
                    g_GangZone[g][GZ_iOwner] = pNewFrak;
                    new gangzoneLabel[128], gangName[32];
                    format(gangName, sizeof(gangName), "%s", GetFactionNameOfFaction(g_GangZone[g][GZ_iOwner]));
                    format(gangzoneLabel, sizeof(gangzoneLabel), "-> GEBIET DER %s <-\nErobern mit: /Gangfight\n\n(%d)", gangName, g);
                    UpdateDynamic3DTextLabelText(g_GangZone[g][GZ_t3dLabel], 0x1E90FFFF, gangzoneLabel);
                    SaveGangZones();
                    return 1;
                }
            }
            r++;
        }
        return 1;
    }
    else if( resultid == THREAD_MITGLIEDER ) {
        new pName[24], lv, str2[2500], string[128], count, rk,fID, rank[35], salary;
        str2 = "Status\tName\tLevel\tRank\n";
        // new queryex[128];
        //print(query);
        new i, giveid, rows = cache_get_row_count(connectionHandle);
        while( i < rows ) {
            //sscanf(queryex,"p<|>s[24]ddd",pName,lv,rk,fID);

            cache_get_field_content(i,"Name",pName, connectionHandle);
            lv = cache_get_field_content_int(i,"Level", connectionHandle);
            rk = cache_get_field_content_int(i,"Rank", connectionHandle);
            fID = cache_get_field_content_int(i,"Fraktion", connectionHandle);
            salary = cache_get_field_content_int(i,"FrakLohn", connectionHandle);

            if(rk == 0){format(rank, sizeof(rank), "%s", fRang[fID][fRangName0]);}
		    else if(rk == 1){format(rank, sizeof(rank), "%s", fRang[fID][fRangName1]);}
		    else if(rk == 2){format(rank, sizeof(rank), "%s", fRang[fID][fRangName2]);}
		    else if(rk == 3){format(rank, sizeof(rank), "%s", fRang[fID][fRangName3]);}
		    else if(rk == 4){format(rank, sizeof(rank), "%s", fRang[fID][fRangName4]);}
		    else if(rk == 5){format(rank, sizeof(rank), "%s", fRang[fID][fRangName5]);}
		    else if(rk == 6){format(rank, sizeof(rank), "%s", fRang[fID][fRangName6]);}
/*
            if(fID == 1)//LSPD
            {
                if(rk == 0){rank="LSPD Anwärter";}
                else if(rk == 1){rank="LSPD Polizeimeister";}
                else if(rk == 2){rank="LSPD Polizeiobermeister";}
                else if(rk == 3){rank="LSPD Polizeikommissar";}
                else if(rk == 4){rank="LSPD Polizeioberkommissar";}
                else if(rk == 5){rank="LSPD Stellv. Direktor";}
                else if(rk == 6){rank="LSPD Direktor";}
            }
            else if(fID == 2)//FBI
            {
                if(rk == 0){rank ="FBI Anwärter";}
                else if(rk == 1){rank ="FBI Agent";}
                else if(rk == 2){rank ="FBI Spezialagent";}
                else if(rk == 3){rank ="FBI Sturmtupp";}
                else if(rk == 4){rank ="FBI Einsatzleitung";}
                else if(rk == 5){rank ="FBI Stellv. Direktor";}
                else if(rk == 6){rank ="FBI Direktor";}
            }
            else if(fID == 3)//SAMD
            {
                if(rk == 0){rank="Praktikant";}
                else if(rk == 1){rank="Arzthelfer";}
                else if(rk == 2){rank="Arzt";}
                else if(rk == 3){rank="Oberarzt";}
                else if(rk == 4){rank="Hauptarzt";}
                else if(rk == 5){rank="Einsatzleitung";}
                else if(rk == 6){rank="Direktor";}
            }
            else if(fID == 4)//SA-NA
            {
                if(rk == 0){rank ="Praktikant";}
                else if(rk == 1){rank="Zeitungsjunge";}
                else if(rk == 2){rank ="Lokalreporter";}
                else if(rk == 3){rank ="Lokalredakteur";}
                else if(rk == 4){rank ="Netzwerk-Kontrolleur";}
                else if(rk == 5){rank ="Netzwerk-Redakteur";}
                else if(rk == 6){rank ="News Agentur Chef";}
            }
            else if(fID == 5)//O-Amt
            {
                if(rk == 0){rank ="Praktikant";}
                else if(rk == 1){rank ="Abschlepper";}
                else if(rk ==2){rank ="Kontrolleur";}
                else if(rk == 3){rank ="Ordnungshüter";}
                else if(rk == 4){rank ="Abteilungsleiter";}
                else if(rk == 5){rank ="Stellv. Leiter";}
                else if(rk == 6){rank ="Leiter";}
            }
            else if(fID == 6)//Grove Street
            {
                if(rk == 0){rank ="Bengel";}
                else if(rk == 1){rank ="Knecht";}
                else if(rk == 2){rank ="Associate";}
                else if(rk == 3){rank ="Solidier";}
                else if(rk == 4){rank ="Capo";}
                else if(rk == 5){rank ="Underboss";}
                else if(rk == 6){rank ="BigBoss";}
            }
            else if(fID == 7)//Ballas
            {
                if(rk == 0){rank ="Anfänger";}
                else if(rk == 1){rank ="Drogenjunkie";}
                else if(rk == 2){rank ="Homie";}
                else if(rk == 3){rank ="Gangster";}
                else if(rk == 4){rank ="Elite";}
                else if(rk == 5){rank ="Zweite Hand";}
                else if(rk == 6){rank ="Leiter";}
            }
            else if(fID == 8)
            {
                if(rk == 0){rank ="Fahrlehrer in Ausbildung";}
                else if(rk == 1){rank ="Fahrlehrer";}
                else if(rk == 2){rank ="Erfahrener Fahrlehrer";}
                else if(rk == 3){rank ="Treuer Fahrlehrer";}
                else if(rk == 4){rank ="Fahrschulausbilder";}
                else if(rk == 5){rank ="Stellv. Leiter der Fahrschule";}
                else if(rk == 6){rank ="Leiter der Fahrschule";}
            }
            else if(fID == 9)
            {
                if(rk == 0){rank ="Praktikant";}
                else if(rk == 1){rank ="Bodyguard";}
                else if(rk == 2){rank ="Secret Service";}
                else if(rk == 3){rank ="Secret Service Chief";}
                else if(rk == 4){rank ="Bürgermeister";}
                else if(rk == 5){rank ="Minister";}
                else if(rk == 6){rank ="Präsident";}
            }
            else if(fID == 10)
            {
                if(rk == 0){rank ="Anoisai";}
                else if(rk == 1){rank ="Menba";}
                else if(rk == 2){rank ="Shatei";}
                else if(rk == 3){rank ="Kaikei";}
                else if(rk == 4){rank ="Saiko-Komon";}
                else if(rk == 5){rank = "Kobun";}
                else if(rk == 6){rank = "Oyabun";}
            }
            else if(fID == 11)
            {
                if(rk == 0){rank ="Novel";}
                else if(rk == 1){rank ="Nuevo Amigo";}
                else if(rk == 2){rank ="Compareno";}
                else if(rk == 3){rank ="Soldato";}
                else if(rk == 4){rank ="El Consejero";}
                else if(rk == 5){rank = "La Vice Jefe";}
                else if(rk == 6){rank = "El Jefe";}
            }
            else if(fID == 12)
            {
                if(rk == 0){rank ="Schuhputzer";}
                else if(rk == 1){rank ="Soldato";}
                else if(rk == 2){rank ="Picciotti";}
                else if(rk == 3){rank ="Membro della Famiglia";}
                else if(rk == 4){rank ="Addestratore";}
                else if(rk == 5){rank = "Consigliere";}
                else if(rk == 6){rank = "Don";}
            }
            else if(fID == 13)
            {
                if(rk == 0){rank ="Lacayo";}
                else if(rk == 1){rank ="Miembro";}
                else if(rk == 2){rank ="Hermano";}
                else if(rk == 3){rank ="Compañero";}
                else if(rk == 4){rank ="El Consejero";}
                else if(rk == 5){rank = "El Vice Jefe";}
                else if(rk == 6){rank = "El Jefe";}
            }
            else if(fID == 14)
            {
                if(rk == 0){rank ="Vollstrecker";}
                else if(rk == 1){rank ="Mörder";}
                else if(rk == 2){rank ="Serienmörder";}
                else if(rk == 3){rank ="Attentäter";}
                else if(rk == 4){rank ="Spezialagent";}
                else if(rk == 5){rank = "Vorstandsmitglied";}
                else if(rk == 6){rank = "Direktor";}
            }
            else if(fID == 15)
            {
                if(rk == 0){rank ="Prospect";}
                else if(rk == 1){rank ="Patched Member";}
                else if(rk == 2){rank ="Biker";}
                else if(rk == 3){rank ="The Enforcer";}
                else if(rk == 4){rank ="Captain";}
                else if(rk == 5){rank = "Vice-President";}
                else if(rk == 6){rank = "President";}
            }
            else if(fID == 16)
            {
                if(rk == 0){rank="LVPD Anwärter";}
                else if(rk == 1){rank="LVPD Polizeimeister";}
                else if(rk == 2){rank="LVPD Polizeiobermeister";}
                else if(rk == 3){rank="LVPD Polizeikommisar";}
                else if(rk == 4){rank="LVPD Polizeioberkommisar";}
                else if(rk == 5){rank="LVPD Stellv. Direktor";}
                else if(rk == 6){rank="LVPD Direktor";}
            }
            else if(fID == 17)
            {
                if(rk == 0){rank =" Wheelman R0";}
                else if(rk == 1){rank ="Wheelman R1";}
                else if(rk == 2){rank ="Wheelman R2";}
                else if(rk == 3){rank ="Wheelman R3";}
                else if(rk == 4){rank ="Wheelman R4";}
                else if(rk == 5){rank = "Wheelman Co.Leader";}
                else if(rk == 6){rank = "Wheelman Leader";}
            }
            else if(fID == 18)
            {
                if(rk == 0){rank ="Army Praktikant";}
                else if(rk == 1){rank ="Rekrut";}
                else if(rk == 2){rank ="Azubi-SC";}
                else if(rk == 3){rank ="Privat-AF";}
                else if(rk == 4){rank ="Privat-BT";}
                else if(rk == 5){rank = "General-SC";}
                else if(rk == 6){rank = "General";}
            }
            else if(fID == 19)
            {
                if(rk == 0){rank ="Terrorist";}
                else if(rk == 1){rank ="Terrorist";}
                else if(rk == 2){rank ="Terrorist";}
                else if(rk == 3){rank ="Terrorist";}
                else if(rk == 4){rank ="Terrorist";}
                else if(rk == 5){rank = "Terrorist Co. Leader";}
                else if(rk == 6){rank = "Terrorist Leader";}
            }
            else if(fID == 20)
            {
                if(rk == 0){rank ="Novo";}
                else if(rk == 1){rank ="Reclutador";}
                else if(rk == 2){rank ="Principiante";}
                else if(rk == 3){rank ="Avasando";}
                else if(rk == 4){rank ="Familiar";}
                else if(rk == 5){rank = "Hermano";}
                else if(rk == 6){rank = "Dirigente";}
            }
            else if(fID == 21)
            {
                if(rk == 0){rank ="Shangwang";}
                else if(rk == 1){rank ="Tugong";}
                else if(rk == 2){rank ="Shusheng";}
                else if(rk == 3){rank ="Chengyuan";}
                else if(rk == 4){rank ="Shengyu Jiashu";}
                else if(rk == 5){rank = "Youshou De Jiazu";}
                else if(rk == 6){rank = "Shangsi";}
            }
            else if(fID == 22)
            {
                if(rk == 0){rank ="Zollanwärter";}
                else if(rk == 1){rank ="Zollbeamter";}
                else if(rk == 2){rank ="Zolloberwachtmeister";}
                else if(rk == 3){rank ="Zollhauptwachtmeister";}
                else if(rk == 4){rank ="Zollamt Ausbilder";}
                else if(rk == 5){rank = "Zollamt Co. Leader";}
                else if(rk == 6){rank = "Zollamt Leader";}
            }
*/
            new auswahl = GetPVarInt(extraid, "MEMBERAUSWAHL");
            DeletePVar(extraid, "MEMBERAUSWAHL");

            if(auswahl != 0){
                if(i == auswahl-1){
                    new titel[40];
                    new frakname[50];
                    ReturnPlayerFraktion(extraid, frakname);
                    format(titel, sizeof(titel), "%s - %s", frakname, pName);
                    format(str2, sizeof(str2), "Rang\nLohn\nEntlassen");
                    ShowPlayerDialog(extraid, DIALOG_NO_RESPONSE, DIALOG_STYLE_TABLIST_HEADERS, titel, str2, "Schließen", "");
                    return 1;
                }
            }

            sscanf(pName, "k<playername>", giveid);
            if (giveid != INVALID_PLAYER_ID) format(string, sizeof(string), "{228B22}Online (ID: %i)\t%s%s\t%d\t%d - %s ($%s)\n", giveid, Spieler[giveid][pDuty] ? "{87CEFA}" : "", pName, lv, rk, rank, AddDelimiters(salary));
            else format(string, sizeof(string), "{FF0000}Offline\t%s\t%d\t%d - %s ($%s)\n", pName, lv, rk, rank, AddDelimiters(salary));

            strcat(str2, string);
            count++;
            i++;
        }

        new titel[40];
        new frakname[50];
        ReturnPlayerFraktion(extraid, frakname);
        format(titel, sizeof(titel), "%s - Mitgliederliste", frakname);
        if(Spieler[extraid][pRank] < 5) { ShowPlayerDialog(extraid, DIALOG_NO_RESPONSE, DIALOG_STYLE_TABLIST_HEADERS, titel, str2, "Schließen", ""); }
        if(Spieler[extraid][pRank] >= 5) { ShowPlayerDialog(extraid, DIALOG_MEMBERS, DIALOG_STYLE_TABLIST_HEADERS, titel, str2, "Bearbeiten", "Schließen"); }
    }
    else if( resultid == THREAD_MITGLIEDER_AUSWAHL ) {
        new pName[24], /*lv,*/ str2[2500], /*string[128],*/ count, rk,fID, rank[35]/*, salary*/;
        str2 = "Status\tName\tLevel\tRank\n";
        // new queryex[128];
        //print(query);
        new i, /*giveid,*/ rows = cache_get_row_count(connectionHandle);
        while( i < rows ) {
            //sscanf(queryex,"p<|>s[24]ddd",pName,lv,rk,fID);

            cache_get_field_content(i,"Name",pName, connectionHandle);
            //lv = cache_get_field_content_int(i,"Level", connectionHandle);
            rk = cache_get_field_content_int(i,"Rank", connectionHandle);
            fID = cache_get_field_content_int(i,"Fraktion", connectionHandle);
            //salary = cache_get_field_content_int(i,"FrakLohn", connectionHandle);
        	if(rk == 0){format(rank, sizeof(rank), "%s", fRang[fID][fRangName0]);}
		    else if(rk == 1){format(rank, sizeof(rank), "%s", fRang[fID][fRangName1]);}
		    else if(rk == 2){format(rank, sizeof(rank), "%s", fRang[fID][fRangName2]);}
		    else if(rk == 3){format(rank, sizeof(rank), "%s", fRang[fID][fRangName3]);}
		    else if(rk == 4){format(rank, sizeof(rank), "%s", fRang[fID][fRangName4]);}
		    else if(rk == 5){format(rank, sizeof(rank), "%s", fRang[fID][fRangName5]);}
		    else if(rk == 6){format(rank, sizeof(rank), "%s", fRang[fID][fRangName6]);}
            /* if(fID == 1)//LSPD
            {
                if(rk == 0){rank="LSPD Anwärter";}
                else if(rk == 1){rank="LSPD Polizeimeister";}
                else if(rk == 2){rank="LSPD Polizeiobermeister";}
                else if(rk == 3){rank="LSPD Polizeikommissar";}
                else if(rk == 4){rank="LSPD Polizeioberkommissar";}
                else if(rk == 5){rank="LSPD Stellv. Direktor";}
                else if(rk == 6){rank="LSPD Direktor";}
            }
            else if(fID == 2)//FBI
            {
                if(rk == 0){rank ="FBI Anwärter";}
                else if(rk == 1){rank ="FBI Agent";}
                else if(rk == 2){rank ="FBI Spezialagent";}
                else if(rk == 3){rank ="FBI Sturmtupp";}
                else if(rk == 4){rank ="FBI Einsatzleitung";}
                else if(rk == 5){rank ="FBI Stellv. Direktor";}
                else if(rk == 6){rank ="FBI Direktor";}
            }
            else if(fID == 3)//SAMD
            {
                if(rk == 0){rank="Praktikant";}
                else if(rk == 1){rank="Arzthelfer";}
                else if(rk == 2){rank="Arzt";}
                else if(rk == 3){rank="Oberarzt";}
                else if(rk == 4){rank="Hauptarzt";}
                else if(rk == 5){rank="Einsatzleitung";}
                else if(rk == 6){rank="Direktor";}
            }
            else if(fID == 4)//SA-NA
            {
                if(rk == 0){rank ="Praktikant";}
                else if(rk == 1){rank="Zeitungsjunge";}
                else if(rk == 2){rank ="Lokalreporter";}
                else if(rk == 3){rank ="Lokalredakteur";}
                else if(rk == 4){rank ="Netzwerk-Kontrolleur";}
                else if(rk == 5){rank ="Netzwerk-Redakteur";}
                else if(rk == 6){rank ="News Agentur Chef";}
            }
            else if(fID == 5)//O-Amt
            {
                if(rk == 0){rank ="Praktikant";}
                else if(rk == 1){rank ="Abschlepper";}
                else if(rk ==2){rank ="Kontrolleur";}
                else if(rk == 3){rank ="Ordnungshüter";}
                else if(rk == 4){rank ="Abteilungsleiter";}
                else if(rk == 5){rank ="Stellv. Leiter";}
                else if(rk == 6){rank ="Leiter";}
            }
            else if(fID == 6)//Grove Street
            {
                if(rk == 0){rank ="Bengel";}
                else if(rk == 1){rank ="Knecht";}
                else if(rk == 2){rank ="Associate";}
                else if(rk == 3){rank ="Solidier";}
                else if(rk == 4){rank ="Capo";}
                else if(rk == 5){rank ="Underboss";}
                else if(rk == 6){rank ="BigBoss";}
            }
            else if(fID == 7)//Ballas
            {
                if(rk == 0){rank ="Anfänger";}
                else if(rk == 1){rank ="Drogenjunkie";}
                else if(rk == 2){rank ="Homie";}
                else if(rk == 3){rank ="Gangster";}
                else if(rk == 4){rank ="Elite";}
                else if(rk == 5){rank ="Zweite Hand";}
                else if(rk == 6){rank ="Leiter";}
            }
            else if(fID == 8)
            {
                if(rk == 0){rank ="Fahrlehrer in Ausbildung";}
                else if(rk == 1){rank ="Fahrlehrer";}
                else if(rk == 2){rank ="Erfahrener Fahrlehrer";}
                else if(rk == 3){rank ="Treuer Fahrlehrer";}
                else if(rk == 4){rank ="Fahrschulausbilder";}
                else if(rk == 5){rank ="Stellv. Leiter der Fahrschule";}
                else if(rk == 6){rank ="Leiter der Fahrschule";}
            }
            else if(fID == 9)
            {
                if(rk == 0){rank ="Praktikant";}
                else if(rk == 1){rank ="Bodyguard";}
                else if(rk == 2){rank ="Secret Service";}
                else if(rk == 3){rank ="Secret Service Chief";}
                else if(rk == 4){rank ="Bürgermeister";}
                else if(rk == 5){rank ="Minister";}
                else if(rk == 6){rank ="Präsident";}
            }
            else if(fID == 10)
            {
                if(rk == 0){rank ="Anoisai";}
                else if(rk == 1){rank ="Menba";}
                else if(rk == 2){rank ="Shatei";}
                else if(rk == 3){rank ="Kaikei";}
                else if(rk == 4){rank ="Saiko-Komon";}
                else if(rk == 5){rank = "Kobun";}
                else if(rk == 6){rank = "Oyabun";}
            }
            else if(fID == 11)
            {
                if(rk == 0){rank ="Novel";}
                else if(rk == 1){rank ="Nuevo Amigo";}
                else if(rk == 2){rank ="Compareno";}
                else if(rk == 3){rank ="Soldato";}
                else if(rk == 4){rank ="El Consejero";}
                else if(rk == 5){rank = "La Vice Jefe";}
                else if(rk == 6){rank = "El Jefe";}
            }
            else if(fID == 12)
            {
                if(rk == 0){rank ="Schuhputzer";}
                else if(rk == 1){rank ="Soldato";}
                else if(rk == 2){rank ="Picciotti";}
                else if(rk == 3){rank ="Membro della Famiglia";}
                else if(rk == 4){rank ="Addestratore";}
                else if(rk == 5){rank = "Consigliere";}
                else if(rk == 6){rank = "Don";}
            }
            else if(fID == 13)
            {
                if(rk == 0){rank ="Lacayo";}
                else if(rk == 1){rank ="Miembro";}
                else if(rk == 2){rank ="Hermano";}
                else if(rk == 3){rank ="Compañero";}
                else if(rk == 4){rank ="El Consejero";}
                else if(rk == 5){rank = "El Vice Jefe";}
                else if(rk == 6){rank = "El Jefe";}
            }
            else if(fID == 14)
            {
                if(rk == 0){rank ="Vollstrecker";}
                else if(rk == 1){rank ="Mörder";}
                else if(rk == 2){rank ="Serienmörder";}
                else if(rk == 3){rank ="Attentäter";}
                else if(rk == 4){rank ="Spezialagent";}
                else if(rk == 5){rank = "Vorstandsmitglied";}
                else if(rk == 6){rank = "Direktor";}
            }
            else if(fID == 15)
            {
                if(rk == 0){rank ="Prospect";}
                else if(rk == 1){rank ="Patched Member";}
                else if(rk == 2){rank ="Biker";}
                else if(rk == 3){rank ="The Enforcer";}
                else if(rk == 4){rank ="Captain";}
                else if(rk == 5){rank = "Vice-President";}
                else if(rk == 6){rank = "President";}
            }
            else if(fID == 16)
            {
                if(rk == 0){rank="LVPD Anwärter";}
                else if(rk == 1){rank="LVPD Polizeimeister";}
                else if(rk == 2){rank="LVPD Polizeiobermeister";}
                else if(rk == 3){rank="LVPD Polizeikommisar";}
                else if(rk == 4){rank="LVPD Polizeioberkommisar";}
                else if(rk == 5){rank="LVPD Stellv. Direktor";}
                else if(rk == 6){rank="LVPD Direktor";}
            }
            else if(fID == 17)
            {
                if(rk == 0){rank =" Wheelman R0";}
                else if(rk == 1){rank ="Wheelman R1";}
                else if(rk == 2){rank ="Wheelman R2";}
                else if(rk == 3){rank ="Wheelman R3";}
                else if(rk == 4){rank ="Wheelman R4";}
                else if(rk == 5){rank = "Wheelman Co.Leader";}
                else if(rk == 6){rank = "Wheelman Leader";}
            }
            else if(fID == 18)
            {
                if(rk == 0){rank ="Army Praktikant";}
                else if(rk == 1){rank ="Rekrut";}
                else if(rk == 2){rank ="Azubi-SC";}
                else if(rk == 3){rank ="Privat-AF";}
                else if(rk == 4){rank ="Privat-BT";}
                else if(rk == 5){rank = "General-SC";}
                else if(rk == 6){rank = "General";}
            }
            else if(fID == 19)
            {
                if(rk == 0){rank ="Terrorist";}
                else if(rk == 1){rank ="Terrorist";}
                else if(rk == 2){rank ="Terrorist";}
                else if(rk == 3){rank ="Terrorist";}
                else if(rk == 4){rank ="Terrorist";}
                else if(rk == 5){rank = "Terrorist Co. Leader";}
                else if(rk == 6){rank = "Terrorist Leader";}
            }
            else if(fID == 20)
            {
                if(rk == 0){rank ="Novo";}
                else if(rk == 1){rank ="Reclutador";}
                else if(rk == 2){rank ="Principiante";}
                else if(rk == 3){rank ="Avasando";}
                else if(rk == 4){rank ="Familiar";}
                else if(rk == 5){rank = "Hermano";}
                else if(rk == 6){rank = "Dirigente";}
            }
            else if(fID == 21)
            {
                if(rk == 0){rank ="Shangwang";}
                else if(rk == 1){rank ="Tugong";}
                else if(rk == 2){rank ="Shusheng";}
                else if(rk == 3){rank ="Chengyuan";}
                else if(rk == 4){rank ="Shengyu Jiashu";}
                else if(rk == 5){rank = "Youshou De Jiazu";}
                else if(rk == 6){rank = "Shangsi";}
            }
            else if(fID == 22)
            {
                if(rk == 0){rank ="Zollanwärter";}
                else if(rk == 1){rank ="Zollbeamter";}
                else if(rk == 2){rank ="Zolloberwachtmeister";}
                else if(rk == 3){rank ="Zollhauptwachtmeister";}
                else if(rk == 4){rank ="Zollamt Ausbilder";}
                else if(rk == 5){rank = "Zollamt Co. Leader";}
                else if(rk == 6){rank = "Zollamt Leader";}
            }*/

            new auswahl = GetPVarInt(extraid, "MEMBERAUSWAHL");

            if(auswahl != 0){
                if(i == auswahl-1){
                    DeletePVar(extraid, "MEMBERAUSWAHL");
                    SetPVarString(extraid, "MITGLIEDERNAME", pName);
                    new titel[40];
                    new frakname[50];
                    ReturnPlayerFraktion(extraid, frakname);
                    format(titel, sizeof(titel), "%s - %s", frakname, pName);
                    format(str2, sizeof(str2), "{FFFFFF}Rang ändern\nLohn ändern\nMitglied entlassen");
                    ShowPlayerDialog(extraid, DIALOG_MEMBER_RESULT, DIALOG_STYLE_TABLIST, titel, str2, "Auswählen", "Schließen");
                    return 1;
                }
            }
            count++;
            i++;
        }
    }

    else if( resultid == THREAD_ACCEPTMARRIAGE ) {

    }
    else if( resultid == THREAD_PIN_VERGESSEN ) {
        new
            String[128];
        if( cache_get_row_count(connectionHandle) ) {
            // richtig
            cache_get_field_content(0,"BankPin",String, connectionHandle);

            SendClientMessage(extraid,COLOR_GREEN,"Sie konnten sich als Kontoinhaber erfolgreich identifizieren!");
            format(String,sizeof(String),"Ihre aktuelle Bankpin lautet: %s",String);
            SendClientMessage(extraid,COLOR_YELLOW,String);
            SendClientMessage(extraid,COLOR_GREEN,"Bitte merken Sie sich Ihre Bankpin in Zukunft!");
        }
        else {
            // falsch
            Spieler[extraid][pPinVergessen]++;
            if( Spieler[extraid][pPinVergessen] >= 4 ) {
                SendClientMessage(extraid,COLOR_GREEN,"Du konntest dich nicht über den Sicherheits identifizieren lassen");
            }
            else {
                format(String,sizeof(String),"Der Sicherheitscode war falsch.\n\nIdentifiziere dich mit deinem Sicherheitscode ( %d/3 )",Spieler[extraid][pPinVergessen] );
                ShowPlayerDialog(extraid, DIALOG_PIN_VERGESSEN , DIALOG_STYLE_INPUT,COLOR_HEX_LIGHTBLUE"BankPin Vergessen", String , "Weiter" , "");
            }
        }
    }
    else if( resultid == THREAD_CHECK_SECURECODE ) {
        new
            String[128];
        if( cache_get_row_count(connectionHandle) ) {
            // richtig
            format(String,sizeof(String),"[KONTROLLE] Spieler %s hat sich erfolgreich über den SecureCode identifiziert!",GetName(extraid));
            SendAdminMessage(COLOR_GREEN, String);
        }
        else {
            // falsch
            Spieler[extraid][pSecureCodeLevel]++;
            if( Spieler[extraid][pSecureCodeLevel] >= 3 ) {
                format(String,sizeof(String),"[KONTROLLE] Spieler %s konnte sich nicht über sein Sicherheitscode identifizieren!",GetName(extraid));
                SendAdminMessage(COLOR_RED, String);
            }
            else {
                format(String,sizeof(String),"Der Sicherheitscode war falsch.\n\nGib deinen Sicherheitscode zur identifizierung korrekt ein! ( %d/3 ):",Spieler[extraid][pSecureCodeLevel] + 1 );
                ShowPlayerDialog(extraid, DIALOG_CHECK_SECURECODE , DIALOG_STYLE_INPUT,COLOR_HEX_LIGHTBLUE"Sicherheitsabfrage:", String , "Absenden" , "");
            }
        }
    }
    else if( resultid == THREAD_SET_SECURECODE ) {

    }
    else if( resultid == THREAD_SET_STAATSANGEHORIGKEIT ) {

    }
    else if( resultid == THREAD_STARTBONUS ) {

    }
    else if( resultid == THREAD_DIALOGMEMBERS ) {

    }
    else if( resultid == THREAD_CONFIGBIZ_RAUSWERFEN ) {

    }
    else if( resultid == THREAD_CONFIGTANKE_RAUSWERFEN ) {

    }
    else if( resultid == THREAD_CONFIGHOUSE_RAUSWERFEN ) {

    }
    else if( resultid == THREAD_SAVEACCOUNT ) {
        //print("THREAD_SAVEACCOUNT");
        //print(query);
    }
    else if( resultid == THREAD_LOADPLAYER ) {
        // MEGA SSCANF
        new
            inputtext[64],
            rows = cache_get_row_count(connectionHandle),
            String[256],
            playerid = extraid,
            resultline[128],
            ip[16];
        if (rows && gPlayerLogged[playerid] == 0) {
            gPlayerLogged[playerid] = 1;
            Spieler[playerid][pLoginTimestamp] = gettime();
            KillTimer(Spieler[playerid][tLoginTimeout]);
            Spieler[playerid][tLoginTimeout] = INVALID_TIMER_ID;
            StopAudioStreamForPlayer(playerid);

            Spieler[playerid][ID] = cache_get_row_int(0,0,connectionHandle);
            //1 Name
            //2 Passwort
            Spieler[playerid][pLevel] = cache_get_row_int(0,3,connectionHandle);
            Spieler[playerid][pAdmin] = cache_get_row_int(0,4,connectionHandle);
            Spieler[playerid][pDonateRank] = cache_get_row_int(0,5,connectionHandle);
            Spieler[playerid][pHours] = cache_get_row_int(0,6,connectionHandle);
            Spieler[playerid][pSex] = cache_get_row_int(0,7,connectionHandle);
            Spieler[playerid][pMuted] = cache_get_row_int(0,8,connectionHandle);
            Spieler[playerid][pExp] = cache_get_row_int(0,9,connectionHandle);
            //10 MaxExp
            Spieler[playerid][pCash] = cache_get_row_int(0,11,connectionHandle);
            Spieler[playerid][pCrimes] = cache_get_row_int(0,12,connectionHandle);
            Spieler[playerid][pKills] = cache_get_row_int(0,13,connectionHandle);
            Spieler[playerid][pDeaths] = cache_get_row_int(0,14,connectionHandle);
            Spieler[playerid][pArrested] = cache_get_row_int(0,15,connectionHandle);
            Spieler[playerid][pWantedDeaths] = cache_get_row_int(0,16,connectionHandle);
            Spieler[playerid][pPhoneBook] =cache_get_row_int(0,17,connectionHandle);
            Spieler[playerid][pLottoNr] = cache_get_row_int(0,18,connectionHandle);
            Spieler[playerid][pJob] = cache_get_row_int(0,19,connectionHandle);
            Spieler[playerid][pPayCheck] = cache_get_row_int(0,20,connectionHandle);
            Spieler[playerid][pJailed] = cache_get_row_int(0,21,connectionHandle);
            Spieler[playerid][pJailTime] = cache_get_row_int(0,22,connectionHandle);
            //23 Mats 
            Spieler[playerid][pDrugs] = cache_get_row_int(0,24,connectionHandle);
            Spieler[playerid][pFraktion] = cache_get_row_int(0,25,connectionHandle);
            Spieler[playerid][pRank] = cache_get_row_int(0,26,connectionHandle);
            Spieler[playerid][pSkin] = cache_get_row_int(0,27,connectionHandle);
            //28 BizKey
            Spieler[playerid][pCarLic] = cache_get_row_int(0,29,connectionHandle);
            Spieler[playerid][pFlyLic] = cache_get_row_int(0,30,connectionHandle);
            Spieler[playerid][pBoatLic] = cache_get_row_int(0,31,connectionHandle);
            Spieler[playerid][pGunLic] = cache_get_row_int(0,32,connectionHandle);
            Spieler[playerid][pLKWLic] = cache_get_row_int(0,33,connectionHandle);
            Spieler[playerid][pMotoLic] = cache_get_row_int(0,34,connectionHandle);
            Spieler[playerid][pPayDay] = cache_get_row_int(0,35,connectionHandle);
            Spieler[playerid][pTut] = cache_get_row_int(0,36,connectionHandle);
            Spieler[playerid][pWarns] = cache_get_row_int(0,37,connectionHandle);
            Spieler[playerid][pPerso] = cache_get_row_int(0,38,connectionHandle);
            Spieler[playerid][pHandyNr] = cache_get_row_int(0,39,connectionHandle);
            Spieler[playerid][pHandyGeld] = cache_get_row_int(0,40,connectionHandle);
            Spieler[playerid][pTot] = cache_get_row_int(0,41,connectionHandle);
            Spieler[playerid][pBanned] = cache_get_row_int(0,42,connectionHandle);
            Spieler[playerid][pWanteds] = cache_get_row_int(0,43,connectionHandle);
            Spieler[playerid][pBank] = cache_get_row_int(0,44,connectionHandle);
            Spieler[playerid][pJailType] = cache_get_row_int(0,45,connectionHandle);
            Spieler[playerid][pTotTime] = cache_get_row_int(0,46,connectionHandle);
            Spieler[playerid][pTotX] = cache_get_row_float(0,47,connectionHandle);
            Spieler[playerid][pTotY] = cache_get_row_float(0,48,connectionHandle);
            Spieler[playerid][pTotZ] = cache_get_row_float(0,49,connectionHandle);
            //50 TotWorld
            Spieler[playerid][pKanister] = cache_get_row_int(0,51,connectionHandle);
            Spieler[playerid][pWaffenteile] = cache_get_row_int(0,52,connectionHandle);
            // 53 Drogen
            Spieler[playerid][pSafeTeile] = cache_get_row_int(0,54,connectionHandle);
            Spieler[playerid][pSafeDrogen] = cache_get_row_int(0,55,connectionHandle);
            Spieler[playerid][pSpawnChange] = cache_get_row_int(0,56,connectionHandle);
            //57 TankKey
            Spieler[playerid][pKekse] = cache_get_row_int(0,58,connectionHandle);
            Spieler[playerid][pZigaretten] = cache_get_row_int(0,59,connectionHandle);
            Spieler[playerid][pFrakLohn] = cache_get_row_int(0,60,connectionHandle);
            Spieler[playerid][pTimeBan] = cache_get_row_int(0,61,connectionHandle);
            Spieler[playerid][pMuteTime] = cache_get_row_int(0,62,connectionHandle);
            Spieler[playerid][pAngel] = cache_get_row_int(0,63,connectionHandle);
            Spieler[playerid][pFische] =cache_get_row_int(0,64,connectionHandle);
            Spieler[playerid][pKoeder] = cache_get_row_int(0,65,connectionHandle);
            Spieler[playerid][pMaxFishes] = cache_get_row_int(0,66,connectionHandle);
            Spieler[playerid][pMaxVerloren] = cache_get_row_int(0,67,connectionHandle);
            Spieler[playerid][pFishLic] = cache_get_row_int(0,68,connectionHandle);
            Spieler[playerid][pFPunkte] = cache_get_row_int(0,69,connectionHandle);
            Spieler[playerid][pFBPunkte] = cache_get_row_int(0,70,connectionHandle);
            Spieler[playerid][pFlPunkte] = cache_get_row_int(0,71,connectionHandle);
            Spieler[playerid][pGunPunkte] = cache_get_row_int(0,72,connectionHandle);
            Spieler[playerid][pLKWPunkte] = cache_get_row_int(0,73,connectionHandle);
            Spieler[playerid][pMotoPunkte] = cache_get_row_int(0,74,connectionHandle);
            Spieler[playerid][pMarriage] = cache_get_row_int(0,75,connectionHandle);
            Spieler[playerid][pFrakSperre] = cache_get_row_int(0,76,connectionHandle);
            Spieler[playerid][pHartz4] = cache_get_row_int(0,77,connectionHandle);
            Spieler[playerid][pKFZSteuer] = cache_get_row_int(0,78,connectionHandle);
            //79 GebanntVon
            //80 BanGrund
            Spieler[playerid][pWantedCodes] = cache_get_row_int(0,81,connectionHandle);
            Spieler[playerid][pSafeWantedCodes] = cache_get_row_int(0,82,connectionHandle);
            Spieler[playerid][pStartbonus] = cache_get_row_int(0,83,connectionHandle);
            Spieler[playerid][pHurePoints] = cache_get_row_int(0,84,connectionHandle);
            Spieler[playerid][pDetektivPoints] = cache_get_row_int(0,85,connectionHandle);
            //86 LastSeen
            //87 SecureCode
            cache_get_row(0,88,Spieler[playerid][pStaat],connectionHandle,30);
            Spieler[playerid][pBankKonto] = cache_get_row_int(0,89,connectionHandle);
            Spieler[playerid][pBankKontoPin] = cache_get_row_int(0,90,connectionHandle);
            Spieler[playerid][pBoeller] = cache_get_row_int(0,91,connectionHandle);
            Spieler[playerid][pRaketen] = cache_get_row_int(0,92,connectionHandle);
            Spieler[playerid][pJobWechsel] = cache_get_row_int(0,93,connectionHandle);
            Spieler[playerid][unixKrankenversicherung] = cache_get_row_int(0,94,connectionHandle);
            Spieler[playerid][pDrogenSamen] = cache_get_row_int(0,95,connectionHandle);
            cache_get_row(0,96,Spieler[playerid][pGeburtstag],connectionHandle,20);
            Spieler[playerid][pSpice] = cache_get_row_int(0,97,connectionHandle);
            Spieler[playerid][pSafeSpice] = cache_get_row_int(0,98,connectionHandle);
            Spieler[playerid][pHandy] = cache_get_row_int(0,99,connectionHandle);
            Spieler[playerid][pFightstyle] = cache_get_row_int(0,100,connectionHandle);
            Spieler[playerid][pBrecheisen] = cache_get_row_int(0,101,connectionHandle);
            Spieler[playerid][punixFSperre] = cache_get_row_int(0,102,connectionHandle);
            Spieler[playerid][punixFBSperre] = cache_get_row_int(0,103,connectionHandle);
            Spieler[playerid][punixFlSperre] = cache_get_row_int(0,104,connectionHandle);
            Spieler[playerid][punixGunSperre] = cache_get_row_int(0,105,connectionHandle);
            Spieler[playerid][punixLKWSperre] = cache_get_row_int(0,106,connectionHandle);
            Spieler[playerid][punixMotoSperre] = cache_get_row_int(0,107,connectionHandle);
            //108 HotelKey
            Spieler[playerid][pSSteuer] = cache_get_row_int(0,109,connectionHandle);
            Spieler[playerid][pHelm] = cache_get_row_int(0,110,connectionHandle);
            Spieler[playerid][pExperte] = cache_get_row_int(0,111,connectionHandle);
            Spieler[playerid][pLobe] = cache_get_row_int(0,112,connectionHandle);
            Spieler[playerid][pBMOD] = cache_get_row_int(0,113,connectionHandle);
            Spieler[playerid][pKreditwert] = cache_get_row_int(0,114,connectionHandle);
            Spieler[playerid][pKreditGezahlt] = cache_get_row_int(0,115,connectionHandle);
            Spieler[playerid][pMP3Player] = cache_get_row_int(0,116,connectionHandle);
            Spieler[playerid][pPremiumCarSlot] = cache_get_row_int(0,117,connectionHandle);
            Spieler[playerid][pSpawnX] = cache_get_row_float(0,118,connectionHandle);
            Spieler[playerid][pSpawnY] = cache_get_row_float(0,119,connectionHandle);
            Spieler[playerid][pSpawnZ] = cache_get_row_float(0,120,connectionHandle);
            Spieler[playerid][pSpawnFace] = cache_get_row_float(0,121,connectionHandle);
            Spieler[playerid][pSpawnInt] = cache_get_row_int(0,122,connectionHandle);
            Spieler[playerid][pSpawnVirtual] = cache_get_row_int(0,123,connectionHandle);
            Spieler[playerid][pKoffer] = !!cache_get_row_int(0,124,connectionHandle);
            //125 - 137
            Spieler[playerid][pUpgradeWaffenlager] = cache_get_row_int(0,138,connectionHandle);
            Spieler[playerid][pUpgradeSafebox] = cache_get_row_int(0,139,connectionHandle);
            Spieler[playerid][pHausWaffenlager1] = cache_get_row_int(0,140,connectionHandle);
            Spieler[playerid][pHausSafeboxSpice] = cache_get_row_int(0,141,connectionHandle);
            Spieler[playerid][pHausSafeboxDrogen] = cache_get_row_int(0,142,connectionHandle);
            Spieler[playerid][pHaustier] = cache_get_row_int(0,143,connectionHandle);
            Spieler[playerid][pHaustierCooldown] = cache_get_row_int(0,144,connectionHandle);
            Spieler[playerid][pHaustierFutter] = cache_get_row_int(0,145,connectionHandle);
            //146 
            Spieler[playerid][pGunLicB] = cache_get_row_int(0,147,connectionHandle);
            Spieler[playerid][pRadarfallenWarnung] = cache_get_row_int(0,148,connectionHandle);
            Spieler[playerid][pPremiumBizSlot] = cache_get_row_int(0,149,connectionHandle);
            Spieler[playerid][pHouseMieteKey] = cache_get_row_int(0,150,connectionHandle);
            Spieler[playerid][pPrisonRunCount] = cache_get_row_int(0,151,connectionHandle);
            Spieler[playerid][pPrisonRun] = cache_get_row_int(0,152,connectionHandle);
            Spieler[playerid][pZollValid] = cache_get_row_int(0,153,connectionHandle);
            //154 Saltkey
            Spieler[playerid][pLawyerPoints] = cache_get_row_int(0,155,connectionHandle);
            Spieler[playerid][pWaffenSperre] = cache_get_row_int(0,156,connectionHandle);
            Spieler[playerid][pKFZVersicherung] = cache_get_row_int(0,157,connectionHandle);
            Spieler[playerid][pTrakLic] = cache_get_row_int(0,158,connectionHandle);
            Spieler[playerid][pCarmALic] = cache_get_row_int(0,159,connectionHandle);
            Spieler[playerid][pKillsGangFight] = cache_get_row_int(0,160,connectionHandle);
            //161 Email
            //162 Vorname
            Spieler[playerid][pPremiumNeon] = cache_get_row_int(0,163,connectionHandle);
            Spieler[playerid][pAutomatik] = cache_get_row_int(0,164,connectionHandle);
            Spieler[playerid][pDrogenPoints] = cache_get_row_int(0,165,connectionHandle);
            Spieler[playerid][pWaffenteilePoints] = cache_get_row_int(0,166,connectionHandle);
            Spieler[playerid][pfrakwarn] = cache_get_row_int(0,167,connectionHandle);
            Spieler[playerid][pdeacc] = cache_get_row_int(0,168,connectionHandle);
            Spieler[playerid][pschulden] = cache_get_row_int(0,169,connectionHandle);
            Spieler[playerid][pWeihnachtsday] = cache_get_row_int(0,170,connectionHandle);
            fahrlehrerboni[playerid] = cache_get_row_int(0,171,connectionHandle);
            cache_get_row(0, 172, Spieler[playerid][pMarriageName], connectionHandle);
            cache_get_row(0,173,pdeaccadmin[playerid],connectionHandle,32);
            Spieler[playerid][pCoins] = cache_get_row_int(0,174,connectionHandle);
            Spieler[playerid][pSuspendedSentence] = cache_get_row_int(0,175,connectionHandle);
            cache_get_row(0, 176, Spieler[playerid][pSusSentenceReason], connectionHandle);
            Spieler[playerid][pEventPoints] = cache_get_row_int(0,177,connectionHandle);
            Spieler[playerid][pAdventMin] = cache_get_row_int(0,178,connectionHandle);
            Spieler[playerid][pAdventMin] = cache_get_row_int(0,179,connectionHandle);
            //180 Nikolaus
            Spieler[playerid][pMustUseAC] = cache_get_row_int(0, 181, connectionHandle);
            Spieler[playerid][pKillsStreetwar] = cache_get_row_int(0, 182, connectionHandle);
            new chatBit[2], increment = 1;
            cache_get_row(0, 183, chatBit, connectionHandle);
            Spieler[playerid][pGangDrogenSamen] = cache_get_row_int(0,184,connectionHandle);
            Spieler[playerid][pFV] = cache_get_row_int(0,185,connectionHandle);
			Spieler[playerid][pSpiceSamenPoints] = cache_get_row_int(0,186,connectionHandle);
			Spieler[playerid][pPilotPoints] = cache_get_row_int(0,187,connectionHandle);
			Spieler[playerid][pC4] = cache_get_row_int(0,188,connectionHandle);
			Spieler[playerid][pPfand] = cache_get_row_int(0,189,connectionHandle);
            Spieler[playerid][pKrauterMische] = cache_get_row_int(0,190,connectionHandle);
            cache_get_row(0, 191, Spieler[playerid][pOldname], connectionHandle); 
            Spieler[playerid][swSpice] = cache_get_row_int(0,192,connectionHandle);
            Spieler[playerid][DmgTog] = cache_get_row_int(0,193,connectionHandle);
            Spieler[playerid][pFRadarStatus] = cache_get_row_int(0,194,connectionHandle);
            Spieler[playerid][swDrogen] = cache_get_row_int(0,195,connectionHandle);
            Spieler[playerid][swWT] = cache_get_row_int(0,196,connectionHandle);
            Spieler[playerid][swWCodes] = cache_get_row_int(0,197,connectionHandle);
            //198 PBPoints
            //199 Overwatch
            //200 OnlineSpieler
            Spieler[playerid][pHausWaffenlager2] = cache_get_row_int(0,201,connectionHandle);
            Spieler[playerid][pHausWaffenlager3] = cache_get_row_int(0,202,connectionHandle);
            //203 hwid
            Spieler[playerid][pSpawnWeste] = cache_get_row_int(0,204,connectionHandle);
            Spieler[playerid][pBooster] = cache_get_row_int(0,205,connectionHandle);
            Spieler[playerid][pPowerRiegel] = cache_get_row_int(0,206,connectionHandle);
            Spieler[playerid][pTSFrei] = cache_get_row_int(0, 207, connectionHandle);
            Spieler[playerid][pSpawnWaffenUnix] = cache_get_row_int(0,208,connectionHandle);
            Spieler[playerid][pSpawnWaffen] = cache_get_row_int(0,209,connectionHandle);
            Spieler[playerid][pSchaufel] = cache_get_row_int(0,210,connectionHandle);

            for (new i = 0; i < 7; i++) {
                pChatSettings[playerid][i] = chatBit[0] & increment ? true : false;
                increment *= 2;
            }

            ReadPlayerSQLExtra(playerid,inputtext);
            PlayerSQLExtra(playerid,"");
            //ResetPlayerMoney(playerid);
            SetPlayerFightingStyle(playerid, Spieler[playerid][pFightstyle] );
            SetPlayerScore(playerid, Spieler[playerid][pLevel]);

            //Spieler[playerid][bSpawnAllowed] = true;
            CheckPlayerBiz(playerid);
            CheckPlayerHotel(playerid);
            CheckPlayerTanke(playerid);
            CheckPlayerHouse(playerid);
            CheckPlayerFirma(playerid);

            if(GetPlayerHouse(playerid) == 999 ) {
                // Mögliche Fehler automatisch beheben
                Spieler[playerid][pUpgradeWaffenlager] = 0;
                Spieler[playerid][pUpgradeSafebox] = 0;
                Spieler[playerid][pHausWaffenlager1] = 0;
                Spieler[playerid][pHausWaffenlager2] = 0;
                Spieler[playerid][pHausWaffenlager3] = 0;
                Spieler[playerid][pHausSafeboxSpice] = 0;
                Spieler[playerid][pHausSafeboxDrogen] = 0;
            }
            if(Spieler[playerid][pBanned] > 0 || Spieler[playerid][pTimeBan] > gettime() ) return ShowPlayerBan(playerid);
            if(Spieler[playerid][pWarns] >= 3) {
                SendClientMessage(playerid, COLOR_DARKRED, "Du hast 3 oder mehr als 3 Verwarnungen und wurdest automatisch gesperrt!");
                SendClientMessage(playerid, COLOR_DARKRED, "Erstelle ein Thema im Forum wenn einige dieser Verwarnungen zu Unrecht waren.");
                Kick(playerid);
                return 1;
            }
            if(Spieler[playerid][pdeacc]==1) {
                new string[200];
                format(string,200,"Dein Account wurde deaktiviert!\nDein Spielaccount %s wurde durch Teammitglied %s deaktiviert. Bitte beantrage im Forum die erneute Aktivierung deines Spieleraccounts.",
                GetName(playerid),pdeaccadmin[playerid]);
                ShowPlayerDialog(playerid,DIALOG_DEAKTACC,DIALOG_STYLE_MSGBOX,"Account deaktiviert",string,"OK","");
            }
            if(Spieler[playerid][pBank] < 0) 
                SCMFormatted(playerid, COLOR_DARKRED,"Dein Bankkonto liegt $%s im Rückstand! Du bist verschuldet!", AddDelimiters(Spieler[playerid][pBank]));

            if (Spieler[playerid][pSuspendedSentence] > 0)
                SCMFormatted(playerid, COLOR_YELLOW, "SERVER: Du hast noch eine Bewährungsstrafe für %i Spielstunden (/Bwstrafe).", Spieler[playerid][pSuspendedSentence]);

            new wyear, wmonth, wday;
            getdate(wyear, wmonth, wday);
            if (wmonth == 12 && wday < 25) {
            	SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Wir wünschen dir eine schöne Weihnachtszeit! Befehl: /Weihnachtsmuetze");
                SendClientMessage(playerid, COLOR_LIGHTRED, "Adventszeit auf LyD! Du kannst jeden Tag ein Adventstürchen öffnen.");
                SendClientMessage(playerid, COLOR_LIGHTRED, "Mit /Adventmin kannst du sehen, wie lange du noch warten musst.");
                SendClientMessage(playerid, COLOR_GREEN, "INFO: Sei täglich 90 Minuten online und verpasse nicht das heutige Adventskalender.");
            }

            AddPlayerToPlantArrayData(playerid);
            AddPlayerToPlantArrayDataGang(playerid);
            ShowPlayerDialog(playerid, DIALOG_SPAWNMELDUNG, DIALOG_STYLE_MSGBOX, "LyD - Roleplay", "Das Expertensystem ist wieder da!\nAls Erfahrender Spieler (Level 20) hat man dich Möglichkeit, Experte zu werden.\nDeine Aufgabe als Experte ist es, neuen Spieler auf den Server zu helfen!\nAm Neulingsspawn hast du die Möglichkeit Experte zu werden.\n\nProjektdaten:\n\nServer IP: server.LyD-Roleplay.de\nTeamspeak IP: ts.LyD-Roleplay.de\nForum Adresse: www.LyD-Roleplay.de\n\nSchau täglich auf unserem Forum vorbei, um über Neuigkeiten informiert zu sein!", "OK", "");
            if(Spieler[playerid][pLevel] == 1) {
                SendClientMessage(playerid, COLOR_RED, "SERVER: Mit Level 1 gilst du als NEULING und darfst KEINEN anderen Spieler töten.");
                SendClientMessage(playerid, COLOR_RED, "SERVER: Solltest du einen anderen Spieler als Neuling(Lvl.1) töten, wirst du vom Server-System dauerhaft wegen NEULING-DM gebannt!");
            }
            if(Spieler[playerid][pLevel] < 3) {
                SendClientMessage(playerid, COLOR_RED, "SERVER: Wenn du eine Einführung benötigst, kannst du oben am Neulingsspawn per /Einfuehrung einen Serverexperten anfordern.");
                SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Mit /chatoff kannst du diverse Chats an-/ausschalten. Standardgemäß sind alle angeschaltet.");
            }
            if(Spieler[playerid][pJailed] == 3) {
                SendClientMessage(playerid, COLOR_RED, "SERVER: Du hast gegen die Server Regeln verstoßen und wurdest deshalb ins Admin-Prison gesperrt!");
                SendClientMessage(playerid, COLOR_RED, "SERVER: Sollte dir der Grund dafür nicht bekannt sein, schaue im User Panel unter www.UCP.LyD-Roleplay.de.");
                SendClientMessage(playerid, COLOR_RED, "SERVER: Eventuell wurde gegen dich eine Beschwerde gestellt. Mit /Jailtime siehst du wann die Strafe abläuft.");
                // SetTimerEx("LoadPremiumWeaponData", 353 ,false,"d",playerid); <- Er kann keine Premium Waffen haben
            }
            if(Spieler[playerid][pAdmin] > 0 && Spieler[playerid][pAdmin] < 8) {
                new string[128];
                format(string, sizeof(string), "%s %s hat den Server betreten.", GetPlayerAdminRang(playerid), GetName(playerid));
                SendAdminMessage(COLOR_GREEN, string);
            }

            SetSpawnInfo(playerid, 0,0,0,0,0,0,0,0,0,0,0,0);
            if( Spieler[playerid][pWarns] ) 
                SCMFormatted(playerid,COLOR_RED,"Du hast %d/3 Admin Verwarnungen! Ab 3 Admin Verwarnungen wirst du dauerhaft gesperrt!",Spieler[playerid][pWarns]);

            GetPlayerIp(playerid,ip,sizeof(ip));
            format(resultline,sizeof(resultline),"%s - %s LOGGED IN",GetName(playerid),ip);
            LoginLog(resultline);

            IsValidSecureCode(playerid);
            // -> THREADED
            LoadPlayerCars(playerid);
            LoadPlayerFriendList(playerid);

            // Beschwerden
            format(String,sizeof(String),"SELECT * FROM `beschwerde` WHERE `player` = '%s' AND `status` != 3",GetName(playerid));
            mysql_pquery(String,THREAD_BESCHWERDEOFFEN,playerid,gWebSQL,MySQLThreadOwner);

            format(String,sizeof(String),"SELECT * FROM `beschwerde` WHERE `defendant` = '%s' AND `status` != 3",GetName(playerid));
            mysql_pquery(String,THREAD_BESCHWERDEGGNMICH,playerid,gWebSQL,MySQLThreadOwner);

            if( Spieler[playerid][pSpawnWeste] > gettime() )
            {
                new sekunden,minuten,stunden,time_left,days;
                if( gettime() < Spieler[playerid][pSpawnWeste] ) 
                {
                    time_left = Spieler[playerid][pSpawnWeste] - gettime();
                    ConvertSec( time_left , sekunden,minuten,stunden,days );
                    SCMFormatted(playerid,COLOR_YELLOW,"SERVER: Du Spawnst noch %d Tage und %d Stunden lang mit einer Schutzweste.", days, stunden);
                }
            }
            
            if( Spieler[playerid][pSpawnWaffenUnix] > gettime() ) {
                new sekunden,minuten,stunden,time_left,days;
                if( gettime() < Spieler[playerid][pSpawnWaffenUnix] ) {
                    time_left = Spieler[playerid][pSpawnWaffenUnix] - gettime();
                    ConvertSec( time_left , sekunden,minuten,stunden,days );
                    SCMFormatted(playerid,COLOR_YELLOW,"SERVER: Du Spawnst noch %d Tage und %d Stunden lang mit Waffen.", days, stunden);
                }
            }

            if( !IsSecurePassword(inputtext) ) {
                ShowPlayerDialog(playerid,DIALOG_PASSWORD_UPDATE,DIALOG_STYLE_INPUT,"Passwort Update","{FF0044}Dein Passwort ist nicht sicher genug!{FFFFFF}\n\nBitte aktualisiere dein Passwort:\n\n8 Buchstaben, davon 2 Zahlen\n\nHINWEIS: Dein Passwort sollte keine persönlichen Daten beinhaltet,\nsondern dein Passwort, sollte frei gewählt sein!","Speichern","");
            }
        } else {
            Spieler[playerid][pLoginVersuch]++;
            format(String,sizeof(String),"Fehllogin: %s - %s ( %d/3 )",GetName(playerid),ip,Spieler[playerid][pLoginVersuch]);
            LoginLog(String);
            if( Spieler[playerid][pLoginVersuch] >= 3 ) {
                SendClientMessage(playerid,COLOR_RED,"Du wurdest aus dem Server gekickt, weil du 3/3 das Passwort falsch eingeben hast! Der Versuch wurde gespeichert!");
                Kick(playerid);
            } else {
                format(String,sizeof(String),COLOR_HEX_RED"Das Passwort war nicht korrekt! Versuche: %d/3\n\n"COLOR_HEX_WHITE"Ein Account unter diesem Namen ist bei uns registriert!\nSollte es dein Account sein, dann Logge dich bitte nun ein.\n\n"COLOR_HEX_RED">Passwort vergessen?< - kontaktiere uns: Admin@LyD-Roleplay.de", Spieler[playerid][pLoginVersuch] );
                ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, COLOR_HEX_LIGHTBLUE"Anmeldung:", String , "OK", "Abbrechen");
            }
        }
    }
    else if(resultid == THREAD_BESCHWERDEOFFEN ) {
        if( cache_get_row_count(connectionHandle)  > 0) {
            SendClientMessage(extraid,COLOR_YELLOW,"Du hast vor kurzem eine Beschwerde gestellt. Achte täglich auf den aktuellen Stand deiner Beschwerde!");
        }
    }
    else if(resultid == THREAD_BESCHWERDEGGNMICH ) {
        if( cache_get_row_count(connectionHandle) > 0) {
            SendClientMessage(extraid,COLOR_RED,"Gegen dich liegt eine Beschwerde vor! Unter www.UCP.LyD-Roleplay.de kannst du die Beschwerde gegen dich sehen.");
            ShowPlayerDialog(extraid, DIALOG_SPAWNMELDUNG, DIALOG_STYLE_MSGBOX, "LyD - ROLEPLAY", "Gegen dich wurde eine Beschwerde eingereicht!\nDu wirst beschuldigt, gegen die Server Regeln verstoßen zu haben.\nDu musst zu dieser Beschwerde Stellung nehmen und den weiteren Ablauf täglich beobachten,\nansonsten kann sich das Urteil durch ein Moderatoren negativ gegen dich auswirken!\n\nDie Beschwerdestelle ist unter folgendem Link zu erreichen:\nwww.UCP.LyD-Roleplay.de", "OK", "");
        }
    }
    else if(resultid == THREAD_TECHNIKABTEILUNG ) {
        SendClientMessage(extraid,COLOR_YELLOW,"Notiz wurde im UCP eingetragen");
    }
    else if(resultid == THREAD_AKTENEINTRAG_EXISTS ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                Spielername[MAX_PLAYER_NAME],
                String[128],
                querystring[300];
            GetPVarString(extraid,"Akteneintrag",querystring,sizeof(querystring));
            if(sscanf(querystring,"s[24]s[128]",Spielername,String)) {
                return SendClientMessage(extraid,COLOR_BLUE, INFO_STRING"/Akteneintrag [Name] [Nachricht]");
            }
            query[0] = '\0';

            mysql_real_escape_string(Spielername,Spielername,gWebSQL,MAX_PLAYER_NAME);
            mysql_real_escape_string(String,String,gWebSQL,sizeof(String));
            format(querystring,sizeof(querystring),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",Spielername,GetName(extraid),String);
            mysql_pquery(querystring,THREAD_AKTENEINTRAG,extraid,gWebSQL,MySQLThreadOwner);
        }
        else {
            SendClientMessage(extraid,COLOR_RED,"Der Spieler existiert nicht");
        }
    }
    else if(resultid == THREAD_AKTENEINTRAG ) {
        SendClientMessage(extraid,COLOR_YELLOW,"Ein Akteneintrag wurde im UCP eingetragen");
    }
    else if(resultid == THREAD_FRAKSPERRE ) {
        SendClientMessage(extraid,COLOR_YELLOW,"Ein Akteneintrag wurde im UCP eingetragen");
    }
    else if(resultid == THREAD_OFFPRISON_EXISTS ) {
        if( cache_get_row_count(connectionHandle) ) {
            new
                Spielername[MAX_PLAYER_NAME],
                String[144],
                Grund[128],
                time,
                querystring[300];
            GetPVarString(extraid,"OffPrison",querystring,sizeof(querystring));
            sscanf(querystring,"s[24]is[128]",Spielername,time,Grund);
            format(String,sizeof(String),"[PRISON] %s %s hat Spieler %s für %d Minuten[OFFLINE] ins Prison gesteckt, Grund: %s", GetPlayerAdminRang(extraid), GetName(extraid), Spielername, time, Grund);
            SendAdminMessage(COLOR_YELLOW,String);

            format(querystring,sizeof(querystring),"UPDATE `accounts` SET `Jailed` = 2 , `JailTime` = %d WHERE `Name` = '%s'",time * 60 ,Spielername);
            mysql_pquery(querystring,THREAD_OFFPRISON,extraid,gSQL,MySQLThreadOwner);

            format(String,sizeof(String),"%s wurde von %s %s für %d Minuten ins Admin-Prison gesteckt, Grund: %s", Spielername, GetPlayerAdminRang(extraid), GetName(extraid), time, Grund);
            format(querystring,sizeof(querystring),"INSERT INTO `akte` (`id`, `time`, `spieler`, `admin`, `content`) VALUES (NULL, CURRENT_TIMESTAMP, '%s', '%s', '%s');",Spielername,GetName(extraid),String);
            mysql_pquery(querystring,THREAD_AKTENEINTRAG,extraid,gWebSQL,MySQLThreadOwner);
        }
        else {
            SendClientMessage(extraid,COLOR_RED,"Der Spieler existiert nicht.");
        }
    }
    else if( resultid == THREAD_OFFPRISON ) {
        SendClientMessage(extraid,COLOR_YELLOW,"Der Spieler wurde OFFLINE ins Prison gesteckt.");
    }
    else if( resultid == THREAD_LOADPLAYERCARS ) {
        new playerid = extraid, x, slot, rows = cache_get_row_count(connectionHandle);
        if( rows ) {
            while( x < rows ) {
                slot = cache_get_row_int(x, 33, connectionHandle);
                if (slot == -1) slot = x;
                else if (slot < x || slot > x) slot = x;

                PlayerCar[playerid][slot][Id] = cache_get_row_int(x,0,connectionHandle);
                cache_get_row(x,1,PlayerCar[playerid][slot][CarOwner],connectionHandle,MAX_PLAYER_NAME);
                PlayerCar[playerid][slot][CarModel] = cache_get_row_int(x,2,connectionHandle);
                PlayerCar[playerid][slot][CarPos_x] = cache_get_row_float(x,3,connectionHandle);
                PlayerCar[playerid][slot][CarPos_y] = cache_get_row_float(x,4,connectionHandle);
                PlayerCar[playerid][slot][CarPos_z] = cache_get_row_float(x,5,connectionHandle);
                PlayerCar[playerid][slot][CarRotate] = cache_get_row_float(x,6,connectionHandle);
                PlayerCar[playerid][slot][CarNitro] = cache_get_row_int(x,7,connectionHandle);
                PlayerCar[playerid][slot][CarHyd] = cache_get_row_int(x,8,connectionHandle);
                PlayerCar[playerid][slot][CarWheel] = cache_get_row_int(x,9,connectionHandle);
                PlayerCar[playerid][slot][CarAusp] = cache_get_row_int(x,10,connectionHandle);
                PlayerCar[playerid][slot][CarSideL] = cache_get_row_int(x,11,connectionHandle);
                PlayerCar[playerid][slot][CarSideR] = cache_get_row_int(x,12,connectionHandle);
                PlayerCar[playerid][slot][CarFB] = cache_get_row_int(x,13,connectionHandle);
                PlayerCar[playerid][slot][CarRB] = cache_get_row_int(x,14,connectionHandle);
                PlayerCar[playerid][slot][CarSpoiler] = cache_get_row_int(x,15,connectionHandle);
                PlayerCar[playerid][slot][CarRoof] = cache_get_row_int(x,16,connectionHandle);
                PlayerCar[playerid][slot][CarHood] = cache_get_row_int(x,17,connectionHandle);
                PlayerCar[playerid][slot][CarVents] = cache_get_row_int(x,18,connectionHandle);
                PlayerCar[playerid][slot][CarLamps] = cache_get_row_int(x,19,connectionHandle);
                PlayerCar[playerid][slot][CarPJ] = cache_get_row_int(x,20,connectionHandle);
                PlayerCar[playerid][slot][CarC1] = cache_get_row_int(x,21,connectionHandle);
                PlayerCar[playerid][slot][CarC2] = cache_get_row_int(x,22,connectionHandle);
                PlayerCar[playerid][slot][CarPreis] = cache_get_row_int(x,23,connectionHandle);
                PlayerCar[playerid][slot][CarTank] = cache_get_row_int(x,24,connectionHandle);
                PlayerCar[playerid][slot][CarState] = cache_get_row_int(x,25,connectionHandle);
                PlayerCar[playerid][slot][CarNeon1] = cache_get_row_int(x,26,connectionHandle);
                PlayerCar[playerid][slot][CarNeon2] = cache_get_row_int(x,27,connectionHandle);
                PlayerCar[playerid][slot][isSpecialTuned] = cache_get_row_int(x,28,connectionHandle);
                cache_get_row(x,29,PlayerCar[playerid][slot][CarNumberplate],connectionHandle,32);
                if( isnull(PlayerCar[playerid][slot][CarNumberplate]))  {
                    format(PlayerCar[playerid][slot][CarNumberplate] ,32, KEIN_KENNZEICHEN );
                }
                PlayerCar[playerid][slot][CarPeilsender]  = cache_get_row_int(x,30,connectionHandle);
                PlayerCar[playerid][slot][CarDistance] = cache_get_row_int(x,31,connectionHandle);
                PlayerCar[playerid][slot][TUV]  = cache_get_row_int(x,32,connectionHandle);
                PlayerCarSpawn(playerid,slot);
                // printf("distance %d meter",distance);
                x++;
            }
        }
    }
    else if (resultid == THREAD_NAMECHANGE) {
        new oldName[MAX_PLAYER_NAME], newName[MAX_PLAYER_NAME];
        GetPVarString(extraid, "NAMECHANGE.OLDNAME", oldName, sizeof(oldName));
        GetPVarString(extraid, "NAMECHANGE.NEWNAME", newName, sizeof(newName));

        for (new i; i < sizeof(g_Firma); i++) {
            if (!strcmp(g_Firma[i][F_sBesitzer], oldName, true)) {
                format(g_Firma[i][F_sBesitzer], MAX_PLAYER_NAME, "%s", newName);
                // SendClientMessage(extraid, COLOR_YELLOW, "[INFO] {FFFFFF}Firma umgeschrieben.");
            }
        }

        for (new i; i < sizeof(Biz); i++) {
            if (!strcmp(Biz[i][bBesitzer], oldName, true)) {
                format(Biz[i][bBesitzer], MAX_PLAYER_NAME, "%s", newName);
                // SendClientMessage(extraid, COLOR_YELLOW, "[INFO] {FFFFFF}BIZ umgeschrieben.");
            }
        }

        for (new i; i < sizeof(Tanke); i++) {
            if (!strcmp(Tanke[i][tBesitzer], oldName, true)) {
                format(Tanke[i][tBesitzer], MAX_PLAYER_NAME, "%s", newName);
                // SendClientMessage(extraid, COLOR_YELLOW, "[INFO] {FFFFFF}Tankstelle umgeschrieben.");
                break;
            }
        }

        for (new i; i < sizeof(Haus); i++) {
            if (!strcmp(Haus[i][hBesitzer], oldName, true)) {
                format(Haus[i][hBesitzer], MAX_PLAYER_NAME, "%s", newName);
                // SendClientMessage(extraid, COLOR_YELLOW, "[INFO] {FFFFFF}Haus umgeschrieben.");
                break;
            }
        }

        for (new i; i < sizeof(Hotel); i++) {
            if (!strcmp(Hotel[i][hBesitzer], oldName, true)) {
                format(Hotel[i][hBesitzer], MAX_PLAYER_NAME, "%s", newName);
                // SendClientMessage(extraid, COLOR_YELLOW, "[INFO] {FFFFFF}Hotel umgeschrieben.");
                break;
            }
        }

        for (new i; i < g_iWerbebanner; i++) {
            if (!strcmp(g_Werbebanner[i][W_sOwner], oldName, true)) {
                format(g_Werbebanner[i][W_sOwner], MAX_PLAYER_NAME, "%s", newName);
                // SendClientMessage(extraid, COLOR_YELLOW, "[INFO] {FFFFFF}Werbetafel umgeschrieben.");
                new String[128];
                format(String, sizeof(String), "Besitzer der Werbetafel:\n{FFFFFF}%s", g_Werbebanner[i][W_sOwner]);
                UpdateDynamic3DTextLabelText(g_Werbebanner[i][W_t3dLabel], 0x28C0D6FF, String);
                SaveWerbebannerEx(i);
                break;
            }
        }

        for (new j; j <= GetPlayerPoolSize(); j++) {
            for (new i; i < MAX_FRIEND_LIST; i++) {
                if (isnull(g_FriendList[j][i][FL_sSpieler])) continue;
                if (!strcmp(g_FriendList[j][i][FL_sSpieler], oldName, true)) {
                    format(g_FriendList[j][i][FL_sSpieler], MAX_PLAYER_NAME, newName);
                    break;
                }
            }
        }

        new pID;
        sscanf(oldName, "k<playername>", pID);
        if (pID != INVALID_PLAYER_ID) {
            SetPlayerName(pID, newName);
            for (new i = 0; i < MaxVehicles(pID); i++) if (PlayerHaveCar[pID][i]) PlayerCar[pID][i][CarOwner] = newName;
        }

        DeletePVar(extraid, "NAMECHANGE.OLDNAME");
        DeletePVar(extraid, "NAMECHANGE.NEWNAME");

        SendClientMessage(extraid, COLOR_GREEN, "[NAMECHANGE] {FFFFFF}Der Spielername wurde erfolgreich geändert.");
        
        // UCP-Akteneintrag
        new ucpeg[512];
        format(ucpeg, sizeof(ucpeg), "%s %s hat den Spieler %s umbenannt zu %s.", GetPlayerAdminRang(extraid),GetName(extraid),oldName,newName);
        SendUCPAktenEintrag(extraid, GetName(extraid), newName, ucpeg);
        
        new message[128];
        format(message, sizeof(message), "[NAMECHANGE] {FFFFFF}%s heißt nun %s!", oldName, newName);
        return SendClientMessageToAll(COLOR_GREEN, message);
    }
    else if (resultid == THREAD_CHECKNAMECHANGE_NEWNAME) {
        if (!cache_get_row_count(connectionHandle)) {
            new string[128], oldName[MAX_PLAYER_NAME], newName[MAX_PLAYER_NAME];
            GetPVarString(extraid, "NAMECHANGE.OLDNAME", oldName, sizeof(oldName));
            GetPVarString(extraid, "NAMECHANGE.NEWNAME", newName, sizeof(newName));
            if (isnull(newName)) return 1;
            format(string, sizeof(string), "UPDATE `accounts` SET `Name` = '%s' WHERE `Name` = '%s'", newName, oldName, newName, oldName);
            mysql_tquery(gSQL, string);
            format(string, sizeof(string), "UPDATE `accounts` SET `Oldname` = '%s' WHERE `Name` = '%s'", oldName, newName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `playercar` SET `owner` = '%s' WHERE `owner` = '%s'", newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `friendlist` SET `Spieler` = '%s' WHERE `Spieler` = '%s'", newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `friendlist` SET `SpielerEx` = '%s' WHERE `SpielerEx` = '%s'", newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `firma` SET `besitzer` = '%s' WHERE `besitzer` = '%s'", newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `houses` SET `Besitzer` = '%s' WHERE `Besitzer` = '%s'", newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `tanken` SET `Besitzer` = '%s' WHERE `Besitzer` = '%s'", newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `teamspeak` SET `Name` = '%s' WHERE `Name` = '%s'", newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string), "UPDATE `frakblacklist` SET `name` = '%s' WHERE `name` = '%s'", newName, oldName);
            mysql_tquery(gSQL, string);
            format(string,sizeof(string),"UPDATE `akte` SET `spieler` = '%s' WHERE `spieler` = '%s'", newName, oldName);
            mysql_tquery(gWebSQL,string);
            format(string,sizeof(string),"UPDATE `beschwerde` SET `player` = '%s' WHERE `player` = '%s'", newName, oldName);
            mysql_tquery(gWebSQL,string);
            format(string,sizeof(string),"UPDATE `beschwerdeantwort` SET `author` = '%s' WHERE `author` = '%s'", newName, oldName);
            mysql_tquery(gWebSQL,string);
            format(string,sizeof(string),"UPDATE `ticket` SET `player` = '%s' WHERE `player` = '%s'", newName, oldName);
            mysql_tquery(gWebSQL,string);
            format(string,sizeof(string),"UPDATE `ticketantwort` SET `author` = '%s' WHERE `author` = '%s'", newName, oldName);
            mysql_tquery(gWebSQL,string);
            format(string,sizeof(string), "UPDATE `bizes` SET `Besitzer` = '%s' WHERE `Besitzer` = '%s'", newName, oldName);
            mysql_pquery(string, THREAD_NAMECHANGE, extraid, gSQL, MySQLThreadOwner);
        }
        else {
            DeletePVar(extraid, "NAMECHANGE.OLDNAME");
            DeletePVar(extraid, "NAMECHANGE.NEWNAME");
            return SendClientMessage(extraid, COLOR_RED, "[FEHLER] {FFFFFF}Der neue Spielername existiert bereits.");
        }
    }
    else if (resultid == THREAD_CHECKNAMECHANGE_OLDNAME) {
        if (cache_get_row_count(connectionHandle)) {
            new string[128], newName[MAX_PLAYER_NAME];
            GetPVarString(extraid, "NAMECHANGE.NEWNAME", newName, sizeof(newName));
            if (isnull(newName)) return 1;
            format(string, sizeof(string), "SELECT * FROM `accounts` WHERE `Name` = '%s'", newName);
            mysql_pquery(string, THREAD_CHECKNAMECHANGE_NEWNAME, extraid, gSQL, MySQLThreadOwner);
        }
        else {
            DeletePVar(extraid, "NAMECHANGE.OLDNAME");
            DeletePVar(extraid, "NAMECHANGE.NEWNAME");
            return SendClientMessage(extraid, COLOR_RED, "[FEHLER] {FFFFFF}Der alte Spielername existiert nicht.");
        }
    }
    else if( resultid == THREAD_CHECKACCOUNT ) {
        new
            playerid = extraid;
        if( cache_get_row_count(connectionHandle) ) {
            if(g_aSettings[ASETTING_EINLOGBLOCK][ASETTING_TOGGLE]) {
                if(!Spieler[playerid][pAdmin]) {
                    SendClientMessage(playerid,COLOR_RED,"Aus aktuellem Anlass ist ein Log-In gerade nicht möglich.");
                    KickDelay(playerid,5);
                }
            }
            ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, COLOR_HEX_LIGHTBLUE"Anmeldung:", COLOR_HEX_WHITE"Willkommen auf "COLOR_HEX_ORANGE"LyD - Roleplay\n"COLOR_HEX_WHITE"Ein Account unter diesem Namen ist bei uns registriert!\nSollte es dein Account sein, dann Logge dich bitte nun ein.\n \n"COLOR_HEX_GREEN"Bitte halte dein Passwort immer für dich!\n"COLOR_HEX_RED">Passwort vergessen?< - kontaktiere uns: Admin@LyD-Roleplay.de", "OK", "Abbrechen");
            Spieler[playerid][bAccountExists] = true;

            Spieler[playerid][tLoginTimeout] = SetTimerEx("PlayerLoginTimeout",30011,false,"d",playerid);
            Spieler[playerid][tSpawnView] = SetTimerEx("SetPlayerView",5003,false,"dd",playerid,1); // Muss,sonst klappt Spectate nicht
        }
        else {
            if(g_aSettings[ASETTING_REGBLOCK][ASETTING_TOGGLE]) {
                static String[] = "\
                                Wir begrüßen dich ganz Herzlich auf LyD!\n\
                                Aus aktuellem Anlass ist eine Registrierung gerade nicht möglich.\n\
                                Schau doch einfach später nochmal vorbei!\n\n\
                                Wir bitten vielmals um Verständnis!\n\n\
                                Forum Adresse: www.LyD-Roleplay.de\n\
                                Teamspeak: TS.LyD-Roleplay.de\n\
                                User Panel: www.UCP.LyD-Roleplay.de\n\
                                E-Mail: Admin@LyD-Roleplay.de";
                ShowPlayerDialog(playerid, DIALOG_REGSPERRE, DIALOG_STYLE_MSGBOX, "{FF0000}Registrationssperre" , String, "Disconnect","");
                Spieler[playerid][tLoginTimeout] = SetTimerEx("PlayerRegsperreKick",10011,false,"d",playerid);
            }
            else {
                new
                    String[512],
                    header[128];
                strcat(String,COLOR_HEX_WHITE"Wir begrüßen dich ganz Herzlich auf LyD!\n\n",sizeof(String));
                strcat(String,"Um dein virtuelles Traumleben näher zu kommen, musst du als erstes ein Spieleraccount anlegen.\n",sizeof(String));
                strcat(String,"Bei deiner Registration wirst du Dir auch eine kurze Einführung von unserem Server anschauen\n",sizeof(String));
                strcat(String,"dass nur ca. 2 Minuten dauern wird.\n",sizeof(String));
                strcat(String,"Wir bitten dich kurz die Zeit zu nehmen, damit du dich gut zurecht finden kannst bei uns!\n\n",sizeof(String));
                strcat(String,"Um ein Spieleraccount anzulegen, drücke bitte auf 'Erstellen' ",sizeof(String));
                format(header,sizeof(header),COLOR_HEX_LIGHTBLUE "Der Spielername %s ist noch frei!",GetName(playerid));
                ShowPlayerDialog(playerid, DIALOG_REG_STEP_1, DIALOG_STYLE_MSGBOX, header , String, "Erstellen", "Ablehnen");
                Spieler[playerid][bAccountExists] = false;
            }
        }
    }
    else if( resultid == THREAD_CHECKNAME ) {

    }
    else if( resultid == THREAD_CREATEACCOUNT ) {
        SaveAccount(extraid);

    }

    else if( resultid == THREAD_TANKESAVE ) {

    }
    else if( resultid == THREAD_HOUSESAVE ) {

    }
    else if( resultid == THREAD_ANGELSAVE ) {
    }
    else if( resultid == THREAD_BIZSAVE ) {

    }
    else if( resultid == THREAD_TANKELOADID ) {
        new
            tStr[512];
        if( cache_get_row_count(connectionHandle) ) {
            Tanke[iTanke][tID] = cache_get_row_int(0,0,connectionHandle);
            Tanke[iTanke][EnterX] = cache_get_row_float(0,1,connectionHandle);
            Tanke[iTanke][EnterY] = cache_get_row_float(0,2,connectionHandle);
            Tanke[iTanke][EnterZ] = cache_get_row_float(0,3,connectionHandle);
            cache_get_row(0,4,Tanke[iTanke][tBesitzer],connectionHandle,MAX_PLAYER_NAME);
            cache_get_row(0,5,Tanke[iTanke][tName],connectionHandle,32);
            Tanke[iTanke][tFillCost] = cache_get_row_int(0,6,connectionHandle);
            Tanke[iTanke][tKasse] = cache_get_row_int(0,7,connectionHandle);
            Tanke[iTanke][tBenzin] = cache_get_row_int(0,8,connectionHandle);
            Tanke[iTanke][tMaxBenzin] = cache_get_row_int(0,9,connectionHandle);
            Tanke[iTanke][tPreis] = cache_get_row_int(0,10,connectionHandle);
            Tanke[iTanke][taiFillCost][0] = cache_get_row_int(0,11,connectionHandle);
            Tanke[iTanke][taiFillCost][1] = cache_get_row_int(0,12,connectionHandle);
            Tanke[iTanke][taiFillCost][2] = cache_get_row_int(0,13,connectionHandle);

            Tanke[iTanke][tVideoueberwachung] = !!cache_get_row_int(0,14,connectionHandle);
            Tanke[iTanke][tAutomatischerNotruf] = !!cache_get_row_int(0,15,connectionHandle);
            Tanke[iTanke][tErpresserFraktion] = cache_get_row_int(0,16,connectionHandle);
            Tanke[iTanke][tErpresserForderung] = cache_get_row_int(0,17,connectionHandle);
            Tanke[iTanke][tErpresserState] = cache_get_row_int(0,18,connectionHandle);

            if(strcmp(Tanke[iTanke][tBesitzer], "Niemand", true) == 0)
            {
                format(tStr, sizeof(tStr), "{FFFFFF}[ {6DC0F4}%s {FFFFFF}]\n{6DC0F4}Diese Tankstelle ist zu verkaufen\n{6DC0F4}Preis: {FFFFFF}$%s\n\n{E0E5E7}Zum Kaufen tippe /Tankekaufen ein", Tanke[iTanke][tName], AddDelimiters(Tanke[iTanke][tPreis]));
                Tanke[iTanke][tPickup] = CreateDynamicPickup(1272, 1, Tanke[iTanke][EnterX], Tanke[iTanke][EnterY], Tanke[iTanke][EnterZ], 0);
                Tanke[iTanke][tText] = CreateDynamic3DTextLabel(tStr, COLOR_PROP, Tanke[iTanke][EnterX], Tanke[iTanke][EnterY], Tanke[iTanke][EnterZ],8, .worldid = 0);
            }
            else
            {
                format(tStr, sizeof(tStr), "{FFFFFF}[ {6DC0F4}%s {FFFFFF}]\n{6DC0F4}Besitzer: {FFFFFF}%s\n{6DC0F4}Benzin: {FFFFFF}$%d, {6DC0F4}Super: {FFFFFF}$%d, {6DC0F4}Diesel: {FFFFFF}$%d\n{6DC0F4}Kraftstoffmenge: {FFFFFF}%d/%d\n\n{E0E5E7}Betanken mit: /Tanken\nBesuche den Tankshop mit /Tankshop\nFärbe dein Fahrzeug mit /carcolor um.", Tanke[iTanke][tName], Tanke[iTanke][tBesitzer], Tanke[iTanke][taiFillCost][0], Tanke[iTanke][taiFillCost][1], Tanke[iTanke][taiFillCost][2], Tanke[iTanke][tBenzin], Tanke[iTanke][tMaxBenzin]);
                Tanke[iTanke][tPickup] = CreateDynamicPickup(1650, 1, Tanke[iTanke][EnterX], Tanke[iTanke][EnterY], Tanke[iTanke][EnterZ], 0);
                Tanke[iTanke][tText] = CreateDynamic3DTextLabel(tStr, COLOR_PROP, Tanke[iTanke][EnterX], Tanke[iTanke][EnterY], Tanke[iTanke][EnterZ],8, .worldid = 0);
            }
            Tanke[iTanke][tRobberID] = INVALID_PLAYER_ID;
            iTanke++;
        }
    }
    else if( resultid == THREAD_TANKELOAD ) {
        new
            tStr[512],
            row,
            rows = cache_get_row_count(connectionHandle);
        while( row < rows ) {
            if( iTanke >= MAX_TANKEN ) {
                break;
            }

            Tanke[iTanke][tID] = cache_get_row_int(row,0,connectionHandle);
            Tanke[iTanke][EnterX] = cache_get_row_float(row,1,connectionHandle);
            Tanke[iTanke][EnterY] = cache_get_row_float(row,2,connectionHandle);
            Tanke[iTanke][EnterZ] = cache_get_row_float(row,3,connectionHandle);
            cache_get_row(row,4,Tanke[iTanke][tBesitzer],connectionHandle,MAX_PLAYER_NAME);
            cache_get_row(row,5,Tanke[iTanke][tName],connectionHandle,32);
            Tanke[iTanke][tFillCost] = cache_get_row_int(row,6,connectionHandle);
            Tanke[iTanke][tKasse] = cache_get_row_int(row,7,connectionHandle);
            Tanke[iTanke][tBenzin] = cache_get_row_int(row,8,connectionHandle);
            Tanke[iTanke][tMaxBenzin] = cache_get_row_int(row,9,connectionHandle);
            Tanke[iTanke][tPreis] = cache_get_row_int(row,10,connectionHandle);
            Tanke[iTanke][taiFillCost][0] = cache_get_row_int(row,11,connectionHandle);
            Tanke[iTanke][taiFillCost][1] = cache_get_row_int(row,12,connectionHandle);
            Tanke[iTanke][taiFillCost][2] = cache_get_row_int(row,13,connectionHandle);

            Tanke[iTanke][tVideoueberwachung] = !!cache_get_row_int(row,14,connectionHandle);
            Tanke[iTanke][tAutomatischerNotruf] = !!cache_get_row_int(row,15,connectionHandle);
            Tanke[iTanke][tErpresserFraktion] = cache_get_row_int(row,16,connectionHandle);
            Tanke[iTanke][tErpresserForderung] = cache_get_row_int(row,17,connectionHandle);
            Tanke[iTanke][tErpresserState] = cache_get_row_int(row,18,connectionHandle);

            if(strcmp(Tanke[iTanke][tBesitzer], "Niemand", true) == 0)
            {
                format(tStr, sizeof(tStr), "{FFFFFF}[ {6DC0F4}%s {FFFFFF}]\n{6DC0F4}Diese Tankstelle ist zu verkaufen\n{6DC0F4}Preis: {FFFFFF}$%s\n\n{E0E5E7}Zum Kaufen tippe /Tankekaufen ein", Tanke[iTanke][tName], AddDelimiters(Tanke[iTanke][tPreis]));
                Tanke[iTanke][tPickup] = CreateDynamicPickup(1272, 1, Tanke[iTanke][EnterX], Tanke[iTanke][EnterY], Tanke[iTanke][EnterZ], 0);
                Tanke[iTanke][tText] = CreateDynamic3DTextLabel(tStr, COLOR_PROP, Tanke[iTanke][EnterX], Tanke[iTanke][EnterY], Tanke[iTanke][EnterZ],8, .worldid = 0);
            }
            else
            {
                format(tStr, sizeof(tStr), "{FFFFFF}[ {6DC0F4}%s {FFFFFF}]\n{6DC0F4}Besitzer: {FFFFFF}%s\n{6DC0F4}Benzin: {FFFFFF}$%d, {6DC0F4}Super: {FFFFFF}$%d, {6DC0F4}Diesel: {FFFFFF}$%d\n{6DC0F4}Kraftstoffmenge: {FFFFFF}%d/%d\n\n{E0E5E7}Betanken mit: /Tanken\nBesuche den Tankshop mit /Tankshop\nFärbe dein Fahrzeug mit /carcolor um.", Tanke[iTanke][tName], Tanke[iTanke][tBesitzer], Tanke[iTanke][taiFillCost][0], Tanke[iTanke][taiFillCost][1], Tanke[iTanke][taiFillCost][2], Tanke[iTanke][tBenzin], Tanke[iTanke][tMaxBenzin]);
                // format(tStr, sizeof(tStr), "%s\n\nBesitzer: %s\nBenzin-Preis: %d$\nBenzin: %d/%d", Tanke[iTanke][tName], Tanke[iTanke][tBesitzer], Tanke[iTanke][tFillCost], Tanke[iTanke][tBenzin], Tanke[iTanke][tMaxBenzin]);
                Tanke[iTanke][tPickup] = CreateDynamicPickup(1650, 1, Tanke[iTanke][EnterX], Tanke[iTanke][EnterY], Tanke[iTanke][EnterZ], 0);
                Tanke[iTanke][tText] = CreateDynamic3DTextLabel(tStr, COLOR_PROP, Tanke[iTanke][EnterX], Tanke[iTanke][EnterY], Tanke[iTanke][EnterZ],8, .worldid = 0);
            }
            Tanke[iTanke][tRobberID] = INVALID_PLAYER_ID;
            iTanke++;
            row++;
        }
    }
    else if( resultid == THREAD_ANGELLOADID ) {
        new
            aStr[256];
        if( cache_get_row_count(connectionHandle) ) {
            Angel[iAngel][aID] = cache_get_row_int(0,0,connectionHandle);
            Angel[iAngel][PosX] = cache_get_row_float(0,1,connectionHandle);
            Angel[iAngel][PosY] = cache_get_row_float(0,2,connectionHandle);
            Angel[iAngel][PosZ] = cache_get_row_float(0,3,connectionHandle);
            Angel[iAngel][Fische] = cache_get_row_int(0,4,connectionHandle);
            Angel[iAngel][FacingAngle] = cache_get_row_int(0,5,connectionHandle);

            format(aStr, sizeof(aStr), COLOR_HEX_BLUE"--> Angelplatz <--\n"COLOR_HEX_WHITE"Fische: %d/%d\nTippe "COLOR_HEX_BLUE"/Angeln "COLOR_HEX_WHITE"zum angeln", Angel[iAngel][Fische], MAX_FISCHE_PRO_PLATZ);
            Angel[iAngel][aPickup] = CreateDynamicPickup(1239, 1, Angel[iAngel][PosX], Angel[iAngel][PosY], Angel[iAngel][PosZ], 0);
            Angel[iAngel][aText] = CreateDynamic3DTextLabel(aStr, COLOR_PROP, Angel[iAngel][PosX], Angel[iAngel][PosY], Angel[iAngel][PosZ], 3, .worldid = 0);
            iAngel++;
        }
    }
    else if( resultid == THREAD_ANGELLOAD ) {
        new
            aStr[256],
            row,
            rows = cache_get_row_count(connectionHandle);
        while( row < rows  ) {
            if( iAngel >= MAX_APLATZ ) {
                break;
            }

            Angel[iAngel][aID] = cache_get_row_int(row,0,connectionHandle);
            Angel[iAngel][PosX] = cache_get_row_float(row,1,connectionHandle);
            Angel[iAngel][PosY] = cache_get_row_float(row,2,connectionHandle);
            Angel[iAngel][PosZ] = cache_get_row_float(row,3,connectionHandle);
            Angel[iAngel][Fische] = cache_get_row_int(row,4,connectionHandle);
            Angel[iAngel][FacingAngle] = cache_get_row_int(row,5,connectionHandle);

            format(aStr, sizeof(aStr), COLOR_HEX_BLUE"--> Angelplatz <--\n"COLOR_HEX_WHITE"Fische: %d/%d\nTippe "COLOR_HEX_BLUE"/Angeln "COLOR_HEX_WHITE"zum angeln", Angel[iAngel][Fische], MAX_FISCHE_PRO_PLATZ);
            Angel[iAngel][aPickup] = CreateDynamicPickup(1239, 1, Angel[iAngel][PosX], Angel[iAngel][PosY], Angel[iAngel][PosZ], 0);
            Angel[iAngel][aText] = CreateDynamic3DTextLabel(aStr, COLOR_PROP, Angel[iAngel][PosX], Angel[iAngel][PosY], Angel[iAngel][PosZ], 3,.worldid = 0);
            iAngel++;
            row++;
        }
    }
    else if(resultid == THREAD_HOUSEINTERIORLOAD ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle);
        while( row < rows ) {
            g_HouseInterior[g_iHouseInteriors][HI_iID] = cache_get_row_int(row,0,connectionHandle);
            g_HouseInterior[g_iHouseInteriors][HI_fExitX] = cache_get_row_float(row,1,connectionHandle);
            g_HouseInterior[g_iHouseInteriors][HI_fExitY] = cache_get_row_float(row,2,connectionHandle);
            g_HouseInterior[g_iHouseInteriors][HI_fExitZ] = cache_get_row_float(row,3,connectionHandle);
            g_HouseInterior[g_iHouseInteriors][HI_iInterior] = cache_get_row_int(row,4,connectionHandle);
            g_HouseInterior[g_iHouseInteriors][HI_fPickupX] = cache_get_row_float(row,5,connectionHandle);
            g_HouseInterior[g_iHouseInteriors][HI_fPickupY] = cache_get_row_float(row,6,connectionHandle);
            g_HouseInterior[g_iHouseInteriors][HI_fPickupZ] = cache_get_row_float(row,7,connectionHandle);

            g_HouseInterior[g_iHouseInteriors][HI_iUpgradePickup] = CreateDynamicPickup( 1277 ,1, g_HouseInterior[g_iHouseInteriors][HI_fPickupX] , g_HouseInterior[g_iHouseInteriors][HI_fPickupY] , g_HouseInterior[g_iHouseInteriors][HI_fPickupZ] ,.interiorid = g_HouseInterior[g_iHouseInteriors][HI_iInterior] );
            CreateDynamic3DTextLabel(COLOR_HEX_BLUE "[Hausupgrade]\n" COLOR_HEX_WHITE "Tippe /Hausupgrade", COLOR_WHITE, g_HouseInterior[g_iHouseInteriors][HI_fPickupX], g_HouseInterior[g_iHouseInteriors][HI_fPickupY], g_HouseInterior[g_iHouseInteriors][HI_fPickupZ], .drawdistance = 15.0, .testlos = 1, .interiorid = g_HouseInterior[g_iHouseInteriors][HI_iInterior]);
            g_iHouseInteriors++;
            row++;
        }
        // Jetzt sind Häuser bereit! Also los gehts
        HouseLoad();
        Hausmoebel_Init();
    }
    else if( resultid == THREAD_HOUSELOADID ) {
        new
            //index,
            hStr[512];
        if( cache_get_row_count(connectionHandle) ) {

            Haus[iHaus][hID] = cache_get_row_int(0,0,connectionHandle);
            Haus[iHaus][EnterX] = cache_get_row_float(0,1,connectionHandle);
            Haus[iHaus][EnterY] = cache_get_row_float(0,2,connectionHandle);
            Haus[iHaus][EnterZ] = cache_get_row_float(0,3,connectionHandle);
            cache_get_row(0,4,Haus[iHaus][hBesitzer],connectionHandle,MAX_PLAYER_NAME);
            cache_get_row(0,5,Haus[iHaus][hName],connectionHandle,32);
            Haus[iHaus][hPreis] = cache_get_row_int(0,6,connectionHandle);
            Haus[iHaus][hMieten] = cache_get_row_int(0,7,connectionHandle);
            Haus[iHaus][hLock] = cache_get_row_int(0,8,connectionHandle);
            Haus[iHaus][hMietPreis] = cache_get_row_int(0,9,connectionHandle);
            Haus[iHaus][hKasse] = cache_get_row_int(0,10,connectionHandle);
            Haus[iHaus][SellX] = cache_get_row_float(0,11,connectionHandle);
            Haus[iHaus][SellY] = cache_get_row_float(0,12,connectionHandle);
            Haus[iHaus][SellZ] = cache_get_row_float(0,13,connectionHandle);
            Haus[iHaus][SellRot] = cache_get_row_float(0,14,connectionHandle);
            Haus[iHaus][HouseInteriorID] = cache_get_row_int(0,15,connectionHandle);
            Haus[iHaus][hMieterMax] = cache_get_row_int(0,16,connectionHandle);

            /*
            if(  Haus[iHaus][SellX] == 0.0 &&
                Haus[iHaus][SellY] == 0.0 &&
                Haus[iHaus][SellZ] == 0.0 &&
                Haus[iHaus][SellRot] == 0.0 ) {
                printf("Warnung: Für das Haus %s ( ID: %d ) wurde noch keine gültige Schildposition definiert", Haus[iHaus][hName],Haus[iHaus][hID]);
            }
            if(  Haus[iHaus][PickupX] == 0.0 &&
                Haus[iHaus][PickupY] == 0.0 &&
                Haus[iHaus][PickupZ] == 0.0 ) {
                printf("Warnung: Für das Haus %s ( ID: %d ) wurde noch keine gültige Hausupgrade Position definiert", Haus[iHaus][hName],Haus[iHaus][hID]);
            }
            */
            if (strcmp(Haus[iHaus][hBesitzer], "Niemand", true) == 0) {
                format(hStr, sizeof(hStr), "{FFFFFF}[ {62E36D}%s {FFFFFF}]\n{FFFFFF}Hausnummer: {62E36D}%d\n{62E36D}Dieses Haus ist zu verkaufen\n{FFFFFF}Preis: {62E36D}$%s\n\n{FFFFFF}Zum Kaufen tippe /Hauskaufen ein", Haus[iHaus][hName], Haus[iHaus][hID], AddDelimiters(Haus[iHaus][hPreis]));
                Haus[iHaus][hPickup] = CreateDynamicPickup(1273, 0, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 0);
                Haus[iHaus][hText]   = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 8,.worldid = 0);
                CreateHouseSellObject(iHaus);
            } else {
                Haus[iHaus][SellObjectID] = INVALID_OBJECT_ID;
                if (Haus[iHaus][hMieten] == 0) {
                    format(hStr, sizeof(hStr), "{FFFFFF}[ {FF4137}%s {FFFFFF}]\n{FFFFFF}Hausnummer: {FF4137}%d\n{FFFFFF}Besitzer: {FF4137}%s", Haus[iHaus][hName], Haus[iHaus][hID], Haus[iHaus][hBesitzer]);
                    Haus[iHaus][hPickup] = CreateDynamicPickup(19522, 0, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 0);
                    Haus[iHaus][hText]   = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 8,.worldid = 0);
                } else if (Haus[iHaus][hMieten] == 1) {
                    format(hStr, sizeof(hStr), "{FFFFFF}[ {FFCB2B}%s {FFFFFF}]\n{FFFFFF}Hausnummer: {FFCB2B}%d\n{FFCB2B}Dieses Haus ist zu vermieten\n{FFFFFF}Besitzer: {FFCB2B}%s\n{FFFFFF}Miet-Preis: {FFCB2B}$%s\n{FFFFFF}Mieter: {FFCB2B}(%d/%d)\n\n{FFFFFF}Zum Mieten tippe /Hausmieten ein", Haus[iHaus][hName], Haus[iHaus][hID], Haus[iHaus][hBesitzer], AddDelimiters(Haus[iHaus][hMietPreis]), Haus[iHaus][hMieterAnzahl], Haus[iHaus][hMieterMax]);
                    Haus[iHaus][hPickup] = CreateDynamicPickup(19523, 0, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 0);
                    Haus[iHaus][hText]   = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 8,.worldid = 0);
                }
            }
            //index = GetHouseInteriorIndexByID( Haus[iHaus][HouseInteriorID] );
            //Haus[iHaus][UpgradePickup] = CreateDynamicPickup( 1277 ,1, g_HouseInterior[index][HI_fPickupX] , g_HouseInterior[index][HI_fPickupY] , g_HouseInterior[index][HI_fPickupZ] , iHaus , g_HouseInterior[index][HI_iInterior]);
            //printf("Haus[iHaus][UpgradePickup] = %d",Haus[iHaus][UpgradePickup]);
            g_HouseInterior[g_iHouseInteriors][HI_iUpgradePickup] = CreateDynamicPickup( 1277 ,1, g_HouseInterior[g_iHouseInteriors][HI_fPickupX] , g_HouseInterior[g_iHouseInteriors][HI_fPickupY] , g_HouseInterior[g_iHouseInteriors][HI_fPickupZ] ,.interiorid = g_HouseInterior[g_iHouseInteriors][HI_iInterior] );
            if( Haus[iHaus][HouseInteriorID] == 0 ) {
                printf("HausID %d mit ungültigem HouseInterior %d",Haus[iHaus][hID],Haus[iHaus][HouseInteriorID]);
            }
            iHaus++;
        }
    }
    else if( resultid == THREAD_HOUSELOADMIETER ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            index,
            houseid,
            anzahl;
        while( row < rows ) {
            houseid = cache_get_row_int(row,0,connectionHandle);
            anzahl = cache_get_row_int(row,1,connectionHandle);

            index = GetHouseIndexByID(houseid);
            if( index != 999 ) {
                Haus[index][hMieterAnzahl] = anzahl;
            }
            row++;
        }
    }
    else if( resultid == THREAD_HOUSELOAD ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            //index,
            hStr[256];
        while( row < rows ) {
            if( iHaus >= MAX_HOUSES ) {
                break;
            }

            Haus[iHaus][hID] = cache_get_row_int(row,0,connectionHandle);
            Haus[iHaus][EnterX] = cache_get_row_float(row,1,connectionHandle);
            Haus[iHaus][EnterY] = cache_get_row_float(row,2,connectionHandle);
            Haus[iHaus][EnterZ] = cache_get_row_float(row,3,connectionHandle);
            cache_get_row(row,4,Haus[iHaus][hBesitzer],connectionHandle,MAX_PLAYER_NAME);
            cache_get_row(row,5,Haus[iHaus][hName],connectionHandle,32);
            Haus[iHaus][hPreis] = cache_get_row_int(row,6,connectionHandle);
            Haus[iHaus][hMieten] = cache_get_row_int(row,7,connectionHandle);
            Haus[iHaus][hLock] = cache_get_row_int(row,8,connectionHandle);
            Haus[iHaus][hMietPreis] = cache_get_row_int(row,9,connectionHandle);
            Haus[iHaus][hKasse] = cache_get_row_int(row,10,connectionHandle);
            Haus[iHaus][SellX] = cache_get_row_float(row,11,connectionHandle);
            Haus[iHaus][SellY] = cache_get_row_float(row,12,connectionHandle);
            Haus[iHaus][SellZ] = cache_get_row_float(row,13,connectionHandle);
            Haus[iHaus][SellRot] = cache_get_row_float(row,14,connectionHandle);
            Haus[iHaus][HouseInteriorID] = cache_get_row_int(row,15,connectionHandle);
            Haus[iHaus][hMieterMax] = cache_get_row_int(row,16,connectionHandle);

            /*
            if(  Haus[iHaus][SellX] == 0.0 &&
                Haus[iHaus][SellY] == 0.0 &&
                Haus[iHaus][SellZ] == 0.0 &&
                Haus[iHaus][SellRot] == 0.0 ) {
                printf("Warnung: Für das Haus %s ( ID: %d ) wurde noch keine gültige Schildposition definiert", Haus[iHaus][hName],Haus[iHaus][hID]);
            }
            if(  Haus[iHaus][PickupX] == 0.0 &&
                Haus[iHaus][PickupY] == 0.0 &&
                Haus[iHaus][PickupZ] == 0.0 ) {
                printf("Warnung: Für das Haus %s ( ID: %d ) wurde noch keine gültige Hausupgrade Position definiert", Haus[iHaus][hName],Haus[iHaus][hID]);
            }
            */
            if (strcmp(Haus[iHaus][hBesitzer], "Niemand", true) == 0) {
                format(hStr, sizeof(hStr), "{FFFFFF}[ {62E36D}%s {FFFFFF}]\n{FFFFFF}Hausnummer: {62E36D}%d\n{62E36D}Dieses Haus ist zu verkaufen\n{FFFFFF}Preis: {62E36D}$%s\n\n{FFFFFF}Zum Kaufen tippe /Hauskaufen ein", Haus[iHaus][hName], Haus[iHaus][hID], AddDelimiters(Haus[iHaus][hPreis]));
                Haus[iHaus][hPickup] = CreateDynamicPickup(1273, 0, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 0);
                Haus[iHaus][hText]   = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 8, .worldid = 0);
                CreateHouseSellObject(iHaus);
            } else {
                Haus[iHaus][SellObjectID] = INVALID_OBJECT_ID;
                if (Haus[iHaus][hMieten] == 0) {
                    format(hStr, sizeof(hStr), "{FFFFFF}[ {FF4137}%s {FFFFFF}]\n{FFFFFF}Hausnummer: {FF4137}%d\n{FFFFFF}Besitzer: {FF4137}%s", Haus[iHaus][hName], Haus[iHaus][hID], Haus[iHaus][hBesitzer]);
                    Haus[iHaus][hPickup] = CreateDynamicPickup(19522, 0, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 0);
                    Haus[iHaus][hText]   = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 8, .worldid = 0);
                } else if (Haus[iHaus][hMieten] == 1) {
                    format(hStr, sizeof(hStr), "{FFFFFF}[ {FFCB2B}%s {FFFFFF}]\n{FFFFFF}Hausnummer: {FFCB2B}%d\n{FFCB2B}Dieses Haus ist zu vermieten\n{FFFFFF}Besitzer: {FFCB2B}%s\n{FFFFFF}Miet-Preis: {FFCB2B}$%s\n{FFFFFF}Mieter: {FFCB2B}(%d/%d)\n\n{FFFFFF}Zum Mieten tippe /Hausmieten ein", Haus[iHaus][hName], Haus[iHaus][hID], Haus[iHaus][hBesitzer], AddDelimiters(Haus[iHaus][hMietPreis]), Haus[iHaus][hMieterAnzahl], Haus[iHaus][hMieterMax]);
                    Haus[iHaus][hPickup] = CreateDynamicPickup(19523, 0, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 0);
                    Haus[iHaus][hText]   = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Haus[iHaus][EnterX], Haus[iHaus][EnterY], Haus[iHaus][EnterZ], 8, .worldid = 0);
                }
            }
            //index = GetHouseInteriorIndexByID( Haus[iHaus][HouseInteriorID] );
            //Haus[iHaus][UpgradePickup] = CreateDynamicPickup( 1277 ,1, g_HouseInterior[index][HI_fPickupX] , g_HouseInterior[index][HI_fPickupY] , g_HouseInterior[index][HI_fPickupZ] , iHaus , g_HouseInterior[index][HI_iInterior]);
            //printf("Haus[iHaus][UpgradePickup] = %d",Haus[iHaus][UpgradePickup]);
            //printf("SellObjectID %d",Haus[iHaus][SellObjectID]);
            if( Haus[iHaus][HouseInteriorID] == 0 ) {
                printf("HausID %d mit ungültigem HouseInterior %d",Haus[iHaus][hID],Haus[iHaus][HouseInteriorID]);
            }
            row++;
            iHaus++;
        }
        mysql_oquery("SELECT `HouseMieteKey`, COUNT(*) FROM `accounts` WHERE `HouseMieteKey` != 0 GROUP BY `HouseMieteKey`",THREAD_HOUSELOADMIETER,INVALID_PLAYER_ID,gSQL);
    }
    else if( resultid == THREAD_CONVERTUNIX ) {
        new
            datum[64],
            string[256],
            parameter[128];

        cache_get_row(0,0,datum,connectionHandle);

        ReadPlayerSQLExtra(extraid,parameter);
        new pID, grund[64], time, string1[128];
        sscanf(parameter, "uis[64]", pID, time, grund);
        new tBanTime = time * 60;
        tBanTime = tBanTime + gettime();
        Spieler[pID][pTimeBan] = tBanTime;
        mysql_real_escape_string(grund,grund);

        printf("User %s time banned - %s", GetName(pID), datum );
        format(string, sizeof(string), "[BANNED]: Spieler %s wurde von %s %s für %d Minuten gebannt, Grund: %s", GetName(pID), GetPlayerAdminRang(extraid), GetName(extraid), time, grund);
        SendAdminMessage(COLOR_RED, string);
        format(string, sizeof(string), "[BANNED]: Sie wurden von %s %s für %d Minuten gebannt, Grund: %s", GetPlayerAdminRang(extraid), GetName(extraid), time, grund);
        SendClientMessage(pID, COLOR_RED, string);
        format(string1, sizeof(string1), "Sind Sie der Meinung das diese Sperre falsch war? Dann schreiben Sie auf www.LyD-Roleplay.de ein Entbannantrag!");
        SendClientMessage(pID, COLOR_RED, string1);

        format(string,sizeof(string),"UPDATE `accounts` SET `GebanntVon` = '%s' ,`BanGrund` = '%s' ,`TimeBan` = %d WHERE `Name` = '%s'",
            GetName(extraid),grund,tBanTime,GetName(pID));
        mysql_pquery(string,THREAD_TBAN,pID,gSQL,MySQLThreadOwner);

        format(string,sizeof(string),"Gebannt: %s von: %s, Grund: %s, Dauer: %s",GetName(pID),GetName(extraid),grund, datum );
        BanLog( string );

        format(string,sizeof(string),"%s wurde von %s %s für %d Minuten vom Server gebannt, Grund: %s", GetName(pID), GetPlayerAdminRang(extraid), GetName(extraid), time, grund);
        SendUCPAktenEintrag( extraid, GetName(extraid) , GetName(pID) , string );

        //Kick(pID);
    }
    else if( resultid == THREAD_SCHEIDEN ) {

    }
    else if( resultid == THREAD_CHECKSCHEIDEN ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            String[128],
            name[MAX_PLAYER_NAME],
            playerid = extraid,
            giveid = INVALID_PLAYER_ID;
        while( row < rows ) {
            cache_get_row(row,0,name,connectionHandle);
            giveid = cache_get_row_int(row,1,connectionHandle);

            row++;
            format(String,sizeof(String),"UPDATE `accounts` SET `Marriage` = %d WHERE `ID` IN(%d,%d)", INVALID_MARRIAGE , giveid ,Spieler[playerid][ID]);
        }
        format(String,sizeof(String),"Du hast dich von deinem (Ex)-Partner %s Scheiden lassen. (Kosten: $%s)", name , AddDelimiters(PREIS_SCHEIDUNG));
        SendClientMessage(playerid, COLOR_WHITE, String );

        Spieler[playerid][pMarriage] = INVALID_MARRIAGE;
        format(Spieler[playerid][pMarriageName],MAX_PLAYER_NAME,"Niemand");
        GivePlayerCash(playerid,-PREIS_SCHEIDUNG);

        format(String,sizeof(String),"[HOCHZEITSMELDUNG] "#COLOR_HEX_RED"%s und %s sind nicht mehr Verheiratet. %s hat die Scheidung eingereicht!",GetName(playerid), name ,GetName(playerid));
        SendClientMessageToAll(COLOR_BLUE,String);

    }
    else if( resultid == THREAD_ENTBANNEN ) {

    }
    else if( resultid == THREAD_ENTBANNEN_IP ) {
        new
            String[128],
            ip[16];
        cache_get_field_content(0,"ipadresse",ip,connectionHandle);
        if( strcmp(ip,"0.0.0.0") != 0 || strcmp(ip,"NULL") != 0 ) {
            format(String,sizeof(String),"IP Adresse %s entsperrt",ip);
            SendClientMessage(extraid,COLOR_GREEN,String);
            format(String,sizeof(String),"unbanip %s",ip);
            SendRconCommand(String);
            SendRconCommand("reloadbans");
        }
    }
    else if( resultid == THREAD_ISNUMBERPLATEFREE ) {
        if(cache_get_row_count(connectionHandle)) {
            SendClientMessage(extraid, COLOR_GREY, "Dieses Kennzeichen ist bereits belegt");
        }
        else {
            new
                giveid,
                slot,
                kennzeichen[32],
                parameter[128],
                String[128];
            ReadPlayerSQLExtra(extraid,parameter);
            sscanf(parameter,"uds[32]",giveid,slot,kennzeichen);

            format( g_KFZZulassung[giveid][slot] , 32 , "%s",kennzeichen);

            format(String,sizeof(String),"Stadtamt Mitarbeiter %s stellt Ihnen eine KFZ-Zulassung aus! Amtlicheskennzeichen: %s ( Fahrzeug: %d )",GetName(extraid),kennzeichen,slot);
            SendClientMessage(giveid,COLOR_YELLOW,String);
            SendClientMessage(giveid,COLOR_BLUE,"Dein Kennzeichen ist an Ihrem Fahrzeug angebracht!");

            format(String,sizeof(String),"Du bietest %s folgendes Kennzeichen an: %s ( Fahrzeug: %d )",GetName(giveid),kennzeichen,slot);
            SendClientMessage(extraid,COLOR_WHITE,String);
        }
        return 1;
    }
    else if( resultid == THREAD_SHOWPLAYERBAN ) {
        new
            banned,
            //timeban,
            unixtimeban[28],
            gebanntvon[MAX_PLAYER_NAME],
            bangrund[128];
        if( cache_get_row_count(connectionHandle) ) {

            banned = cache_get_row_int(0,0,connectionHandle);
            //timeban = cache_get_row_int(0,1,connectionHandle);
            cache_get_row(0,2,unixtimeban,connectionHandle);
            cache_get_row(0,3,gebanntvon,connectionHandle);
            cache_get_row(0,4,bangrund,connectionHandle);

            if( banned == 1 ) {
                unixtimeban = "Immer";
            }
            if( isnull(gebanntvon) ) {
                gebanntvon = "Unbekannt";
            }
            if( isnull(bangrund) ) {
                bangrund = "Unbekannt";
            }
            new
                String[500];
            format(String,sizeof(String),"Ihr Spieler-Account wurde gesperrt!\n\nAufgrund eines Regelverstoßes wurde Ihr Spieleraccount gesperrt!\nSollte dies ein Fehlban sein, schreiben Sie ein Entbannantrag im Forum www.LyD-Roleplay.de\nDie Daten des Banns:\nDauer: %s\nGrund: %s\nVon: %s",
                unixtimeban,bangrund,gebanntvon);
            ShowPlayerDialog(extraid,0,DIALOG_STYLE_MSGBOX,"Sie wurden Gesperrt",String,"Exit","");
        }
        KickDelay(extraid);
    }
    else if( resultid == THREAD_HWBAN_SHOW)
    {
        new gebanntvon[MAX_PLAYER_NAME], bangrund[128];
        if( cache_get_row_count(connectionHandle) ) 
        {
            cache_get_row(0,0,gebanntvon,connectionHandle);
            cache_get_row(0,1,bangrund,connectionHandle);
            new String[500];
            format(String,sizeof(String),"Du wirst auf dem Server nicht toleriert!\n\
                Du wurdest von %s mit dem Grund %s dauerhaft aus dem Projekt ausgeschlossen!\n\
                Sollte die dauerhafte Sperrung deiner Meinung nach nicht gerechtfertig sein,\n\
                schreibe einen Entbannantrag im Forum unter www.LyD-Roleplay.de",bangrund,gebanntvon);
            ShowPlayerDialog(extraid,0,DIALOG_STYLE_MSGBOX,"Ihr PC wurde Gesperrt",String,"Exit","");
        }
        KickDelay(extraid);
    }
    else if (resultid == THREAD_HWID_CHECK) 
    {
        if (cache_get_row_count(connectionHandle)) 
        {
            new hwid[128],string[128];
            cache_get_row(0,0,hwid,connectionHandle);
            format(string,sizeof(string),"SELECT `Name` FROM `accounts` WHERE `hwid` = '%s'",hwid);
            mysql_pquery(string,THREAD_HWID_CHECK_MULTI,extraid,gSQL,MySQLThreadOwner);

        }
    }
    else if(resultid == THREAD_HWID_CHECK_MULTI)
    {
        if (cache_get_row_count(connectionHandle)) 
        {
            new string[128],row = 0, rows = cache_get_row_count(connectionHandle);
            new name[24];
            while(row < rows)
            {
                cache_get_row(row,0,name,connectionHandle);
                format(string,sizeof(string),"{FFFFFF}: %s\n ",name);
                strcat(string,string);
                row ++;
            }
            ShowPlayerDialog(extraid,DIALOG_NO_RESPONSE,DIALOG_STYLE_LIST,"{FF0000}[Multiaccounts]",string,"Exit","");
        }
    }
    else if (resultid == THREAD_OFFEPOINTS_CHECK) {
        if (!cache_get_row_count(connectionHandle)) {
            DeletePVar(extraid, "OFFEP.NAME");
            DeletePVar(extraid, "OFFEP.POINTS");
            return SendClientMessage(extraid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler existiert nicht.");
        }

        new playerName[MAX_PLAYER_NAME], query1[256];
        GetPVarString(extraid, "OFFEP.NAME", playerName, sizeof(playerName));
        format(query1, sizeof(query1), "UPDATE `accounts` SET `Eventpoints` = %i WHERE `Name` = '%s'", GetPVarInt(extraid, "OFFEP.POINTS"), playerName);
        mysql_pquery(query1, THREAD_OFFEPOINTS, extraid, gSQL, MySQLThreadOwner);
        return 1;
    }
    else if (resultid == THREAD_OFFEPOINTS) {
        new playerName[MAX_PLAYER_NAME], points;
        GetPVarString(extraid, "OFFEP.NAME", playerName, sizeof(playerName));
        points = GetPVarInt(extraid, "OFFEP.POINTS");

        DeletePVar(extraid, "OFFEP.NAME");
        DeletePVar(extraid, "OFFEP.POINTS");

        new message[256];
        SCMFormatted(extraid, COLOR_LIGHTBLUE, "[INFO] {FFFFFF}Du hast %s %d Eventpunkte gegeben (Offline).", playerName, points);
        format(message, sizeof(message), "%s %s hat die Daten von Spieler %s überarbeitet! (Eventpunkte gegeben: %d)", GetPlayerAdminRang(extraid), GetName(extraid), playerName, points);
        AdminLog(message);
        return 1;
    }
    else if (resultid == THREAD_OFFBWSTRAFE_CHECK) {
        if (!cache_get_row_count(connectionHandle)) {
            DeletePVar(extraid, "OFFBW.NAME");
            DeletePVar(extraid, "OFFBW.REASON");
            DeletePVar(extraid, "OFFBW.HOURS");
            return SendClientMessage(extraid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler existiert nicht.");
        }

        new playerName[MAX_PLAYER_NAME], reason[128], query1[256];
        GetPVarString(extraid, "OFFBW.NAME", playerName, sizeof(playerName));
        GetPVarString(extraid, "OFFBW.REASON", reason, sizeof(reason));
        format(query1, sizeof(query1), "UPDATE `accounts` SET `BwStrafe` = %i, `BwStrafeGrund` = '%s' WHERE `Name` = '%s'", GetPVarInt(extraid, "OFFBW.HOURS"), reason, playerName);
        mysql_pquery(query1, THREAD_OFFBWSTRAFE, extraid, gSQL, MySQLThreadOwner);
        return 1;
    }
    else if (resultid == THREAD_OFFBWSTRAFE) {
        new playerName[MAX_PLAYER_NAME], reason[128], hours;
        GetPVarString(extraid, "OFFBW.NAME", playerName, sizeof(playerName));
        GetPVarString(extraid, "OFFBW.REASON", reason, sizeof(reason));
        hours = GetPVarInt(extraid, "OFFBW.HOURS");

        DeletePVar(extraid, "OFFBW.NAME");
        DeletePVar(extraid, "OFFBW.REASON");
        DeletePVar(extraid, "OFFBW.HOURS");

        new message[256];
        SCMFormatted(extraid, COLOR_LIGHTBLUE, "[INFO] {FFFFFF}Du hast die Bewährungsstrafe von %s auf %d Spielstunden gesetzt (Offline).", playerName, hours);
        SCMFormatted(extraid, COLOR_LIGHTBLUE, "[INFO] {FFFFFF}Grund: %s", reason);
        format(message, sizeof(message), "%s %s hat die Daten von Spieler %s überarbeitet! (BWStrafe gesetzt auf: %d, Grund: %s)", GetPlayerAdminRang(extraid), GetName(extraid), playerName, hours, reason);
        AdminLog(message);
        format(message, sizeof(message), "%s %s hat die Bewährungsstrafe von %s auf %d Spielstunden gesetzt. Grund: %s", GetPlayerAdminRang(extraid), GetName(extraid), playerName, hours, reason);
        SendUCPAktenEintrag(extraid, GetName(extraid), playerName, message);
        return 1;
    }
    else if( resultid == THREAD_OFFAGELD_CHECK ) {
        if (!cache_get_row_count(connectionHandle)) {
            DeletePVar(extraid, "OFFAGELD.NAME");
            DeletePVar(extraid, "OFFAGELD.AMOUNT");
            return SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Der Spieler existiert nicht.");
        }

        new query1[256], playerName[MAX_PLAYER_NAME];
        GetPVarString(extraid, "OFFAGELD.NAME", playerName, sizeof(playerName));
        if (isnull(playerName)) {
            DeletePVar(extraid, "OFFAGELD.NAME");
            DeletePVar(extraid, "OFFAGELD.AMOUNT");
            return SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Es ist ein Fehler aufgetreten.");
        }

        format(query1, sizeof(query1), "UPDATE `accounts` SET `Bank` = `Bank` + %d WHERE `Name` = '%s'", GetPVarInt(extraid, "OFFAGELD.AMOUNT"), playerName);
        mysql_pquery(query1, THREAD_OFFAGELD, extraid, gSQL, MySQLThreadOwner);
        return 1;
    }
    else if (resultid == THREAD_OFFAGELD) {
        new message[128], playerName[MAX_PLAYER_NAME], amount;
        GetPVarString(extraid, "OFFAGELD.NAME", playerName, sizeof(playerName));
        if (!isnull(playerName)) {
            amount = GetPVarInt(extraid, "OFFAGELD.AMOUNT");
            format(message, sizeof(message), "%s %s hat %s $%s gegeben (Offline).", GetPlayerAdminRang(extraid), GetName(extraid), playerName, AddDelimiters(amount));
            AdminLog(message);
            SendUCPAktenEintrag(extraid, GetName(extraid), playerName, message);
            SCMFormatted(extraid, COLOR_ORANGE, "[INFO] {FFFFFF}Du hast %s $%s gegeben (Offline).", playerName, AddDelimiters(amount));
        }
        else SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Es ist ein Fehler aufgetreten.");

        DeletePVar(extraid, "OFFAGELD.NAME");
        DeletePVar(extraid, "OFFAGELD.AMOUNT");
        return 1;
    }
    else if( resultid == THREAD_OFFSETRANK_CHECK ) {
        if (!cache_get_row_count(connectionHandle)) {
            DeletePVar(extraid, "OFFSETRANK.NAME");
            DeletePVar(extraid, "OFFSETRANK.AMOUNT");
            return SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Der Spieler existiert nicht.");
        }

        new query1[256], playerName[MAX_PLAYER_NAME];
        GetPVarString(extraid, "OFFSETRANK.NAME", playerName, sizeof(playerName));
        if (isnull(playerName)) {
            DeletePVar(extraid, "OFFSETRANK.NAME");
            DeletePVar(extraid, "OFFSETRANK.AMOUNT");
            return SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Es ist ein Fehler aufgetreten.");
        }
        
        new i, rows = cache_get_row_count(connectionHandle), offplayerfrak, offplayerrank;
	    while( i < rows ) {
	    	offplayerfrak = cache_get_field_content_int(i,"Fraktion", connectionHandle);
	    	offplayerrank = cache_get_field_content_int(i,"Rank", connectionHandle);
			i++;
		}
		
        if(offplayerrank == 6) return SendClientMessage(extraid,COLOR_RED,"Du kannst den Rank des Leaders nicht verändern.");

		if(offplayerfrak != Spieler[extraid][pFraktion]){
			SendClientMessage(extraid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler befindet sich nicht in deiner Fraktion!");
			DeletePVar(extraid, "OFFSETRANK.NAME");
            DeletePVar(extraid, "OFFSETRANK.AMOUNT");
            return 1;
		}

        format(query1, sizeof(query1), "UPDATE `accounts` SET `Rank` = %d WHERE `Name` = '%s'", GetPVarInt(extraid, "OFFSETRANK.AMOUNT"), playerName);
        mysql_pquery(query1, THREAD_OFFSETRANK, extraid, gSQL, MySQLThreadOwner);
        return 1;
    }
    else if (resultid == THREAD_OFFSETRANK) {
        new playerName[MAX_PLAYER_NAME], amount, string[128];
        GetPVarString(extraid, "OFFSETRANK.NAME", playerName, sizeof(playerName));
        if (!isnull(playerName)) {
            amount = GetPVarInt(extraid, "OFFSETRANK.AMOUNT");
            format(string, sizeof(string), "[FRAKTIONS-NEWS] Der Rank von %s wurde von %s geändert. Er ist nun Rang %d (OFFLINE).", playerName, GetName(extraid), amount);
    		SendFraktionMessage(Spieler[extraid][pFraktion], COLOR_YELLOW, string);
    		format(string, sizeof(string), "[INFO] Du hast den Rang von %s auf %d geändert!", playerName, amount);
    		SendClientMessage(extraid, COLOR_GREEN, string);
        }
        else SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Es ist ein Fehler aufgetreten.");

        DeletePVar(extraid, "OFFSETRANK.NAME");
        DeletePVar(extraid, "OFFSETRANK.AMOUNT");
        return 1;
    }
    else if( resultid == THREAD_OFFSETLOHN_CHECK ) {
        if (!cache_get_row_count(connectionHandle)) {
            DeletePVar(extraid, "OFFSETLOHN.NAME");
            DeletePVar(extraid, "OFFSETLOHN.AMOUNT");
            return SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Der Spieler existiert nicht.");
        }

        new query1[256], playerName[MAX_PLAYER_NAME];
        GetPVarString(extraid, "OFFSETLOHN.NAME", playerName, sizeof(playerName));
        if (isnull(playerName)) {
            DeletePVar(extraid, "OFFSETLOHN.NAME");
            DeletePVar(extraid, "OFFSETLOHN.AMOUNT");
            return SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Es ist ein Fehler aufgetreten.");
        }

        new i, rows = cache_get_row_count(connectionHandle), offplayerfrak;
	    while( i < rows ) {
	    	offplayerfrak = cache_get_field_content_int(i,"Fraktion", connectionHandle);
			i++;
		}

		if(offplayerfrak != Spieler[extraid][pFraktion]){
			SendClientMessage(extraid, COLOR_RED, "[FEHLER] {FFFFFF}Der Spieler befindet sich nicht in deiner Fraktion!");
			DeletePVar(extraid, "OFFSETLOHN.NAME");
            DeletePVar(extraid, "OFFSETLOHN.AMOUNT");
            return 1;
		}

        format(query1, sizeof(query1), "UPDATE `accounts` SET `FrakLohn` = %d WHERE `Name` = '%s'", GetPVarInt(extraid, "OFFSETLOHN.AMOUNT"), playerName);
        mysql_pquery(query1, THREAD_OFFSETLOHN, extraid, gSQL, MySQLThreadOwner);
        return 1;
    }
    else if (resultid == THREAD_OFFSETLOHN) {
        new playerName[MAX_PLAYER_NAME], amount, string[128];
        GetPVarString(extraid, "OFFSETLOHN.NAME", playerName, sizeof(playerName));
        if (!isnull(playerName)) {
            amount = GetPVarInt(extraid, "OFFSETLOHN.AMOUNT");
            format(string, sizeof(string), "[INFO] Du hast den Lohn von %s auf %d geändert!", playerName, amount);
    		SendClientMessage(extraid, COLOR_GREEN, string);
        }
        else SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Es ist ein Fehler aufgetreten.");

        DeletePVar(extraid, "OFFSETLOHN.NAME");
        DeletePVar(extraid, "OFFSETLOHN.AMOUNT");
        return 1;
    }
    else if (resultid == THREAD_GIVECOINS_CHECK) {
        if (!cache_get_row_count(connectionHandle)) {
            DeletePVar(extraid, "GIVECOINS.NAME");
            DeletePVar(extraid, "GIVECOINS.AMOUNT");
            return SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Der Spieler existiert nicht.");
        }

        new query1[256], playerName[MAX_PLAYER_NAME];
        GetPVarString(extraid, "GIVECOINS.NAME", playerName, sizeof(playerName));
        if (isnull(playerName)) {
            DeletePVar(extraid, "GIVECOINS.NAME");
            DeletePVar(extraid, "GIVECOINS.AMOUNT");
            return SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Es ist ein Fehler aufgetreten.");
        }

        format(query1, sizeof(query1), "UPDATE `accounts` SET `userPremium` = `userPremium` + %d WHERE `Name` = '%s'", GetPVarInt(extraid, "GIVECOINS.AMOUNT"), playerName);
        mysql_pquery(query1, THREAD_GIVECOINS, extraid, gSQL, MySQLThreadOwner);
        return 1;
    }
    else if (resultid == THREAD_GIVECOINS) {
        new message[128], playerName[MAX_PLAYER_NAME], amount;
        GetPVarString(extraid, "GIVECOINS.NAME", playerName, sizeof(playerName));
        if (!isnull(playerName)) {
            amount = GetPVarInt(extraid, "GIVECOINS.AMOUNT");
            format(message, sizeof(message), "%s %s hat %s %s Coins gegeben.", GetPlayerAdminRang(extraid), GetName(extraid), playerName, AddDelimiters(amount));
            AdminLog(message);
            SendUCPAktenEintrag(extraid, GetName(extraid), playerName, message);
            SCMFormatted(extraid, COLOR_ORANGE, "[INFO] {FFFFFF}Du hast %s %s Coins gegeben.", playerName, AddDelimiters(amount));
            new pID;
            if (!sscanf(playerName, "k<playername>", pID) && IsPlayerConnected(pID)) SCMFormatted(pID, COLOR_ORANGE, "[INFO] {FFFFFF}Du hast von {FFFF00}%s {FFFFFF}%s Coins erhalten.", GetName(extraid), AddDelimiters(amount));
        }
        else SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Es ist ein Fehler aufgetreten.");

        DeletePVar(extraid, "GIVECOINS.NAME");
        DeletePVar(extraid, "GIVECOINS.AMOUNT");
        return 1;
    }
    else if( resultid == THREAD_MAKEADMIN_CHECK) {
        if (!cache_get_row_count(connectionHandle)) {
            DeletePVar(extraid, "MAKEADMINNAME");
            DeletePVar(extraid, "MAKEADMINRANK");
            return SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Der Spieler existiert nicht.");
        }
        new str[24];
        GetPVarString(extraid, "MAKEADMINNAME", str, sizeof(str));
        new adminvar = GetPVarInt(extraid, "MAKEADMINRANK");

        if (isnull(str)) {
            DeletePVar(extraid, "MAKEADMINNAME");
            DeletePVar(extraid, "MAKEADMINRANK");
            return SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Es ist ein Fehler aufgetreten.");
        }

        new query1[256];
        if (adminvar == 0) {
            format(query1, sizeof(query1), "UPDATE `accounts` SET `Admin` = %d, `BMOD` = 0, `FV` = 0 WHERE `Name` = '%s'", adminvar, str);
        } else {
            format(query1, sizeof(query1), "UPDATE `accounts` SET `Admin` = %d WHERE `Name` = '%s'", adminvar, str);
        }
        mysql_pquery(query1, THREAD_MAKEADMIN, extraid, gSQL, MySQLThreadOwner);

    }
    else if( resultid == THREAD_MAKEADMIN ) {

        new str[24];
        GetPVarString(extraid, "MAKEADMINNAME", str, sizeof(str));
        new adminvar = GetPVarInt(extraid, "MAKEADMINRANK");

        new string[128];
        format(string, sizeof(string), "[ADMIN]: %s wurde von %s %s zum %s ernannt.", str,  GetPlayerAdminRang(extraid), GetName(extraid), GetPlayerAdminRangByID(adminvar));
        SendClientMessageToAll(COLOR_DARKRED, string);

        DeletePVar(extraid, "MAKEADMINNAME");
        DeletePVar(extraid, "MAKEADMINRANK");
    }
    else if( resultid == THREAD_MAKEBMOD_CHECK) {
        if (!cache_get_row_count(connectionHandle)) {
            DeletePVar(extraid, "MAKEADMINNAME");
            DeletePVar(extraid, "MAKEADMINRANK");
            return SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Der Spieler existiert nicht.");
        }
        new str[24];
        GetPVarString(extraid, "MAKEADMINNAME", str, sizeof(str));
        new adminvar = GetPVarInt(extraid, "MAKEADMINRANK");

        if (isnull(str)) {
            DeletePVar(extraid, "MAKEADMINNAME");
            DeletePVar(extraid, "MAKEADMINRANK");
            return SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Es ist ein Fehler aufgetreten.");
        }

        new query1[256];
        format(query1, sizeof(query1), "UPDATE `accounts` SET `BMOD` = %d WHERE `Name` = '%s'", adminvar, str);
        mysql_pquery(query1, THREAD_MAKEBMOD, extraid, gSQL, MySQLThreadOwner);

    }
    else if( resultid == THREAD_MAKEBMOD ) {

        new str[24];
        GetPVarString(extraid, "MAKEADMINNAME", str, sizeof(str));
        new adminvar = GetPVarInt(extraid, "MAKEADMINRANK");

        new bmodname[30];
        if(adminvar == 1){ bmodname ="Beschwerdemoderator";}
        else if(adminvar == 2){ bmodname ="Beschwerdemoderator-Leiter";}

        new string[128];
        if(adminvar == 0) {
            format(string, sizeof(string), "[BESCHWERDEMODERATOR] {FFFFFF}%s %s hat %s Beschwerdemoderator entzogen.", GetPlayerAdminRang(extraid), GetName(extraid), str);
        } else {
            format(string, sizeof(string), "[BESCHWERDEMODERATOR] {FFFFFF}%s %s hat %s zum %s ernannt.", GetPlayerAdminRang(extraid), GetName(extraid), str, bmodname );
        }
        SendAdminMessage(COLOR_DARKRED, string);

        DeletePVar(extraid, "MAKEADMINNAME");
        DeletePVar(extraid, "MAKEADMINRANK");
    }
    else if( resultid == THREAD_MAKEFV_CHECK) {
        if (!cache_get_row_count(connectionHandle)) {
            DeletePVar(extraid, "MAKEADMINNAME");
            DeletePVar(extraid, "MAKEADMINRANK");
            return SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Der Spieler existiert nicht.");
        }
        new str[24];
        GetPVarString(extraid, "MAKEADMINNAME", str, sizeof(str));
        new adminvar = GetPVarInt(extraid, "MAKEADMINRANK");

        if (isnull(str)) {
            DeletePVar(extraid, "MAKEADMINNAME");
            DeletePVar(extraid, "MAKEADMINRANK");
            return SendClientMessage(extraid, COLOR_RED, "[INFO] {FFFFFF}Es ist ein Fehler aufgetreten.");
        }

        new query1[256];
        format(query1, sizeof(query1), "UPDATE `accounts` SET `FV` = %d WHERE `Name` = '%s'", adminvar, str);
        mysql_pquery(query1, THREAD_MAKEFV, extraid, gSQL, MySQLThreadOwner);

    }
    else if( resultid == THREAD_MAKEFV ) {

        new str[24];
        GetPVarString(extraid, "MAKEADMINNAME", str, sizeof(str));
        new adminvar = GetPVarInt(extraid, "MAKEADMINRANK");

        new string[128];
        if (adminvar == 0) {
            format(string, sizeof(string), "[FRAKTIONSVERWALTUNG] {FFFFFF}%s %s hat %s Fraktionsverwalter entzogen.", GetPlayerAdminRang(extraid), GetName(extraid), str);
        } else {
            format(string, sizeof(string), "[FRAKTIONSVERWALTUNG] {FFFFFF}%s %s hat %s zum Fraktionsverwalter ernannt.", GetPlayerAdminRang(extraid), GetName(extraid), str);
        }
        SendAdminMessage(COLOR_DARKRED, string);

        DeletePVar(extraid, "MAKEADMINNAME");
        DeletePVar(extraid, "MAKEADMINRANK");
    }
    else if( resultid == THREAD_OAFKICK ) {

    }
    else if( resultid == THREAD_OFFVERWARNEN ) {

    }
    else if (resultid == THREAD_OFFBANNEN) {

    }
    else if( resultid == THREAD_HASHPASSWORDS_FINISHED ) {
        printf("Alle %d Passwörter verschlüsselt",extraid);
    }
    else if( resultid == THREAD_HASHPASSWORDS ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            rndstring[33],
            sql[256],
            resultline[32];
        if( rows ) {
            printf("%d Passwörter zum Hashen gefunden",  cache_get_row_count(connectionHandle) );
            while( row < rows  ) {
                cache_get_row(row,0,resultline,connectionHandle);

                randomString( rndstring );
                format(sql,sizeof(sql),"UPDATE `accounts` SET `Passwort` = SHA2( CONCAT(`Passwort`,'%s'),256 ) ,`SaltKey` = '%s' WHERE `Name` = '%s'",rndstring,rndstring,resultline);
                mysql_oquery(sql,THREAD_HASHPASSWORDS_VOID,INVALID_PLAYER_ID,gSQL);
                row++;
            }
            mysql_oquery("SELECT NOW()",THREAD_HASHPASSWORDS_FINISHED,cache_get_row_count(connectionHandle),gSQL);
        }
        else {
            printf("Keine Passwörter zum Hashen gefunden");
        }
    }
    else if( resultid == THREAD_COLLECTUNUSEDACCOUNT ) {
        new
            rows = cache_get_row_count(connectionHandle),
            string[180],
            result[64];
        if( rows ) {
            new
                row;
            format(string,sizeof(string),"Führe die Löschung von %d Accounts durch",cache_get_row_count(connectionHandle));
            print(string);
            RemoveAccountLog(string);
            while( row < rows ) {
                cache_get_field_content(row,"Name",result,connectionHandle);
                // Spieler die UNUSED_WEAKS nicht Online waren,werden von allen Immobilien entfernt

                // accounts ( wirklich Account löschen ? )
                format(string,sizeof(string),"DELETE FROM `accounts` WHERE `Name` = '%s'",result);
                mysql_oquery(string,THREAD_DELETEACCOUNT,INVALID_PLAYER_ID,gSQL);
                new b,pfad[64];
                for(;b<50;b++)
                {
                    format(pfad,64,"/home/LYD/scriptfiles/Briefe/%s/Abgesendete Briefe/Brief%i.txt",result,b);
                    if(fexist(pfad))
                    {
                        fremove(pfad);
                    }
                }
                format(pfad,64,"/home/LYD/scriptfiles/Briefe/%s/Abgesendete Briefe",result);
                if(dir_exists(pfad))
                {
                    dir_delete(pfad);
                }
                for(b=0;b<50;b++)
                {
                    format(pfad,64,"/home/LYD/scriptfiles/Briefe/%s/Empfangene Briefe/Brief%i.txt",result,b);
                    if(fexist(pfad))
                    {
                        fremove(pfad);
                    }
                }
                format(pfad,64,"/home/LYD/scriptfiles/Briefe/%s/Empfangene Briefe",result);
                if(dir_exists(pfad))
                {
                    dir_delete(pfad);
                }
                // bizes
                format(string,sizeof(string),"UPDATE `bizes` SET `Besitzer` = 'Niemand' WHERE `Besitzer` = '%s'",result);
                mysql_oquery(string,THREAD_DELETEBIZOWNER,INVALID_PLAYER_ID,gSQL);
                // houses
                format(string,sizeof(string),"UPDATE `houses` SET `Besitzer` = 'Niemand' WHERE `Besitzer` = '%s'",result);
                mysql_oquery(string,THREAD_DELETEHOUSEOWNER,INVALID_PLAYER_ID,gSQL);
                // hotel
                format(string,sizeof(string),"UPDATE `hotel` SET `Besitzer` = 'Niemand' WHERE `Besitzer` = '%s'",result);
                mysql_oquery(string,THREAD_DELETEHOTELOWNER,INVALID_PLAYER_ID,gSQL);
                // playercar ( wirklich Account-Fahrzeuge löschen ? )
                format(string,sizeof(string),"DELETE FROM `playercar` WHERE `owner` = '%s'",result);
                mysql_oquery(string,THREAD_DELETEPLAYERCAR,INVALID_PLAYER_ID,gSQL);
                // tanken
                format(string,sizeof(string),"UPDATE `tanken` SET `Besitzer` = 'Niemand' WHERE `Besitzer` = '%s'",result);
                mysql_oquery(string,THREAD_DELETETANKEOWNER,INVALID_PLAYER_ID,gSQL);

                format(string,sizeof(string),"Spieler %s ist seit %d Wochen nicht auf dem Server gewesen ( Daten gelöscht / entfernt )", result , UNUSED_WEAKS );
                //print(string);
                RemoveAccountLog(string);
                row++;
            }
            mysql_oquery("OPTIMIZE TABLE `accounts`",THREAD_DUMMY,INVALID_PLAYER_ID,gSQL);
            mysql_oquery("SELECT NOW()",THREAD_FINISHEDCOLLECTING,cache_get_row_count(connectionHandle),gSQL);
        }
        else {
            print("Keine Benutzer müssen gelöscht werden");
        }
    }
    else if( resultid == THREAD_DELETEACCOUNT ) {
    }
    else if( resultid == THREAD_DELETEBIZOWNER ) {
    }
    else if( resultid == THREAD_DELETEHOUSEOWNER ) {
    }
    else if( resultid == THREAD_DELETEHOTELOWNER ) {
    }
    else if( resultid == THREAD_DELETEPLAYERCAR ) {
    }
    else if( resultid == THREAD_DELETETANKEOWNER ) {
    }
    else if( resultid == THREAD_ISBLACKLISTED ) {

    }
    else if( resultid == THREAD_HWBAN ) {
        if( cache_get_row_count(connectionHandle) > 0 ) {
            ShowPlayerDialog(extraid,DIALOG_DUMMY,DIALOG_STYLE_MSGBOX,COLOR_HEX_LIGHTBLUE "Ban","Du wirst auf dem Server nicht toleriert!\n\
                Du wurdest aufgrund eines Regelverstoßes aus dem LyD - Roleplay Projekt\n\
                dauerhaft gesperrt! Wegen deinem Regelverstoß wirst du auf dem Server nicht mehr tolertiert.\n\n\
                Sollte die dauerhafte Sperrung deiner Meinung nach nicht gerechtfertig sein,\n\
                schreibe einen Entbannantrag im Forum unter www.LyD-Roleplay.de","Exit","");
            KickDelay(extraid);
        }
    }
    else if( resultid == THREAD_HWBAN_CONNECT ) {
        if( cache_get_row_count(connectionHandle) == 0 ) {
            new String[128];
            format(String,sizeof(String),"SELECT * FROM `blacklist` WHERE `Name` = '%s'", GetName(extraid) );
            mysql_pquery(String,THREAD_ISBLACKLISTED_CONNECT,extraid,gSQL,MySQLThreadOwner);
        }
        else {
            ShowHWBan(extraid);
        }
    }
    else if( resultid == THREAD_ANGEWORBEN ) {
        new
            parameter[128],
            String[128];
        ReadPlayerSQLExtra(extraid,parameter);
        if( cache_get_row_count(connectionHandle) ) {
            format(String,sizeof(String),"Spieler %s hat angegeben,dass er/sie von %s angeworben wurde",GetName(extraid),parameter);
            GeworbenLog(String);
            ShowPlayerDialog(extraid,DIALOG_SECURECODE_REGISTER,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Sicherheitscode:", COLOR_HEX_WHITE"Bitte gib unten deinen persönlichen Sicherheitscode ein.\nDieser wird genutzt, um dich zukünftig eindeutig zu identifizieren.\n\nDein Sicherheitscode muss zwischen 4 und 10 Zeichen haben\n, darf Zahlen und Sonderzeichen enthalten.\n\nBitte merke dir dein Sicherheitscode(!) gut","Bestätigen","");
            format(String,sizeof(String),"Du hast angegeben, dass du vom Benutzer %s angeworben wurdest",parameter);
            SendClientMessage(extraid,COLOR_GREEN,String);
        }
        else {
            format(String,sizeof(String),"Der eingegebene Benutzer '%s' existiert nicht",parameter);
            SendClientMessage(extraid,COLOR_RED,String);
            ShowPlayerDialog(extraid,DIALOG_REG_STEP_7,DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE"Geworben von:", COLOR_HEX_WHITE"Falls du von einem Spieler angeworben wurdest,\nkannst du diesen unten Eintragen.\n\nSolltest du nicht angeworben worden sein,kannst du die Eingabe Überspringen","Bestätigen","Überspringen");
        }
    }
    else if( resultid == THREAD_HWBAN_INSERT ) {
        SendClientMessage(extraid,COLOR_YELLOW,"Der Ban wurde eingetragen!");
    }
    else if( resultid == THREAD_FINISHEDCOLLECTING ) {
        new
            String[80];
        format(String,sizeof(String),"%d Benutzer vollständig entfernt",extraid);
        RemoveAccountLog(String);
    }
    else if( resultid == THREAD_ISBLACKLISTED_CONNECT ) {
        if( cache_get_row_count(connectionHandle) ) {
            SendClientMessage(extraid,COLOR_RED,"Dieser Spielername wird auf diesem Server nicht toleriert! Nenne dich um!");
            SetTimerEx("KickEx",1873,false,"d",extraid);
        }
        else {
            IsIPBan(extraid);
            // -> THREADED auf mysql_CheckAccount(extraid);
        }
    }
    else if( resultid == THREAD_ADDBLACKLISTNAME ) {

    }
    else if( resultid == THREAD_LEADER ) {
        /*new
            name[MAX_PLAYER_NAME],
            frakid,
            fraktion[50],
            giveid,
            status[20],

            row,
            rows = cache_get_row_count(connectionHandle),
            String[920];
        String = COLOR_HEX_WHITE;
        while( row < rows ) {

            cache_get_row(row,0,name,connectionHandle);
            frakid = cache_get_row_int(row,1,connectionHandle);

            sscanf(name,"u",giveid);
            if( IsPlayerConnected(giveid) ) {
                status = ""#COLOR_HEX_GREEN"Online";
            }
            else {
                status = ""#COLOR_HEX_RED"Offline";
            }
            ReturnFraktionByID( frakid , fraktion );
            format(String,sizeof(String),"%s%s - %s ( %s"#COLOR_HEX_WHITE")\n",String,name,fraktion,status);
            row++;
        }
        ShowPlayerDialog(extraid,DIALOG_LEADER_LIST,DIALOG_STYLE_LIST,"Leader-Übersicht",String,"Ok","");
    }*/
    	new pName[24], lv, str2[2500], string[128], fraktion[50], count, frakid;
        str2 = "Status\tName\tLevel\tFraktion\n";
        new i, giveid, rows = cache_get_row_count(connectionHandle);
        while( i < rows ) {

            cache_get_field_content(i,"Name",pName, connectionHandle);
            lv = cache_get_field_content_int(i,"Level", connectionHandle);
            frakid = cache_get_field_content_int(i,"Fraktion", connectionHandle);
            ReturnFraktionByID(frakid, fraktion);

            sscanf(pName, "k<playername>", giveid);
            if (giveid != INVALID_PLAYER_ID){
				format(string, sizeof(string), "{228B22}Online (ID: %i)\t%s\t%d\t%s\n", giveid, pName, lv, fraktion);
            }else{
				format(string, sizeof(string), "{FF0000}Offline\t%s\t%d\t%s\n", pName, lv, fraktion);
			}

            strcat(str2, string);
            count++;
            i++;
        }
        new titel[40];
        new frakname[50];
        ReturnPlayerFraktion(extraid, frakname);
        format(titel, sizeof(titel), "Leaderliste");
        ShowPlayerDialog(extraid, DIALOG_NO_RESPONSE, DIALOG_STYLE_TABLIST_HEADERS, titel, str2, "Schließen", "");
	}
    else if(resultid == THREAD_NEW_SIM){
		new nummer;
	    new i, rows = cache_get_row_count(connectionHandle);
	    while( i < rows ) {
	    	nummer = cache_get_field_content_int(i,"HandyNr", connectionHandle);
			i++;
		}
        new neueNummer = GetPVarInt(extraid, "NEWHANDYNR");
        Kasse[BBikerZ] += 25000;
        if(nummer == neueNummer) return SendClientMessage(extraid, COLOR_RED, "[FEHLER] {FFFFFF}Diese Handynummer wird bereits von einem anderen Spieler verwendet!");
        Spieler[extraid][pHandyNr] = neueNummer;
        SCMFormatted(extraid, COLOR_GREEN, "* Du bist nun unter folgender Nummer zu erreichen: %i", neueNummer);
        GivePlayerCash(extraid,-500000);
        SaveAccount(extraid);
        //SaveAll();
        //mysql_pquery("SELECT NOW()",THREAD_SAVEALL,extraid,gSQL,MySQLThreadOwner);
	}
    else if(resultid == THREAD_FRAKBLACKLIST ) {
        new
            resultline[64],
            String[128],
            row,
            rows = cache_get_row_count(connectionHandle),
            i = 1;
        while( row < rows ) {
            cache_get_field_content(row,"name",resultline,connectionHandle);
            if( i == 1 ) {
                SendClientMessage(extraid,COLOR_BLUE,"========BLACKLIST========");
            }
            format(String,sizeof(String),"%d. %s",i,resultline);
            SendClientMessage(extraid,COLOR_YELLOW,String);
            i++;
            row++;
        }
    }
    else if(resultid == THREAD_FRAKBLACKLISTLABEL)
    {
        new fID;
        new i,rows = cache_get_row_count(connectionHandle);
        for(;i<rows;i++)
        {
            UpdateDynamic3DTextLabelText( Spieler[extraid][pBlacklistLabel], 0xFF0000FF," ");
            fID = cache_get_field_content_int(i,"fraktion", connectionHandle);
            new visibleto[MAX_PLAYERS] =INVALID_PLAYER_ID;
            new c;
            for(; c < MAX_PLAYERS ; c++)
            {
                if( IsPlayerConnected(c) )
                {
                    if(Spieler[c][pFraktion]==fID)
                    {
                        visibleto[extraid] = c;
                    }
                }
            }
            for(new b;b<MAX_PLAYERS;b++)
            {
                if(IsPlayerConnected(b))
                {
                    Streamer_RemoveArrayData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[extraid][pBlacklistLabel] , E_STREAMER_PLAYER_ID ,b);
                    if(fID!=0&&Spieler[b][pFraktion]==fID)
                    {
                        for(new v = 0 ; v < MAX_PLAYERS ; v++)
                        {
                            if( visibleto[v] != INVALID_PLAYER_ID)
                            {
                                if(Spieler[v][pFraktion] == 14) KillBlackSperre[extraid] = 1;
                                Streamer_AppendArrayData( STREAMER_TYPE_3D_TEXT_LABEL , Spieler[extraid][pBlacklistLabel] , E_STREAMER_PLAYER_ID , visibleto[v] );
                                UpdateDynamic3DTextLabelText( Spieler[extraid][pBlacklistLabel], 0xFF0000FF,"> BLACKLIST <");
                            }
                        }
                    }
                }
            }
        }
    }
    else if(resultid == THREAD_ADDFRAKBLACKLIST_COUNT ) {
        if( cache_get_row_count() >= 8 ) {
            SendClientMessage(extraid,COLOR_RED,"Die Fraktionsblacklist ist bereits voll! (8/8)");
        }
        else
        {
            new
                extra[24];
            ReadPlayerSQLExtra(extraid,extra);
            new queryb[2000];
            format(queryb,sizeof(queryb),"SELECT * FROM `accounts` WHERE `Name` = '%s'",extra);
            mysql_pquery(queryb , THREAD_FRAKBLACKLISTCHECK , extraid, gSQL,MySQLThreadOwner);
        }
    }
    else if(resultid == THREAD_ADDFRAKBLACKLIST ) {
    }
    else if(resultid == THREAD_DELFRAKBLACKLIST_COUNT ) {
        if( !cache_get_row_count(connectionHandle) ) {
            SendClientMessage(extraid,COLOR_RED,"Der Spieler befindet sich nicht auf der Fraktions-Blacklist");
        }
        else {
            new
                extra[24],
                String[128];
            ReadPlayerSQLExtra(extraid,extra);
            format(String,sizeof(String),"DELETE FROM `frakblacklist` WHERE `name` = '%s' AND `fraktion` = %d",extra,Spieler[extraid][pFraktion]);
            mysql_pquery(String,THREAD_DELFRAKBLACKLIST,extraid,gSQL,MySQLThreadOwner);
            format(String,sizeof(String),"Spieler %s wurde von der Fraktions-Blacklist gelöscht",extra);
            SendClientMessage(extraid,COLOR_WHITE,String);
        }
    }
    else if(resultid == THREAD_DELFRAKBLACKLIST ) {
    }
    else if(resultid == THREAD_LOADFIRMA) {
        new
            i,
            rows = cache_get_row_count(connectionHandle);
        while( i < rows ) {

            g_Firma[i][F_iID] = cache_get_row_int(i,0,connectionHandle);
            g_Firma[i][F_iJobID] = cache_get_row_int(i,1,connectionHandle);
            cache_get_row(i,2,g_Firma[i][F_sBezeichnung],connectionHandle,32);
            cache_get_row(i,3,g_Firma[i][F_sBesitzer],connectionHandle,MAX_PLAYER_NAME);
            g_Firma[i][F_iKasse] = cache_get_row_int(i,4,connectionHandle);
            g_Firma[i][F_iGehalt] = cache_get_row_int(i,5,connectionHandle);

            i++;
        }
    }
    else if(resultid == THREAD_LOADINFOS ) {
        new
            //resultline[200],
            row,
            rows = cache_get_row_count(connectionHandle),
            kassenbestand,
            fraktion[20];
        while( row < rows ) {
            cache_get_field_content(row,"Info",fraktion,connectionHandle);
            kassenbestand = cache_get_field_content_int(row,"Bestand",connectionHandle);

            if(!strcmp(fraktion,"Lager")) {
                lagerbestand = kassenbestand;
            }
            else if(!strcmp(fraktion,"StaatsKasse")) {
                Kasse[Staat] = kassenbestand;
            }
            else if(!strcmp(fraktion,"SAMDKasse")) {
                Kasse[Samd] = kassenbestand;
            }
            else if(!strcmp(fraktion,"SANAKasse")) {
                Kasse[Sana] = kassenbestand;
            }
            else if(!strcmp(fraktion,"OAMTKasse")) {
                Kasse[Oamt] = kassenbestand;
            }
            else if(!strcmp(fraktion,"GSKasse")) {
                Kasse[Grove] = kassenbestand;
            }
            else if(!strcmp(fraktion,"BALLASKasse")) {
                Kasse[Ballas] = kassenbestand;
            }
            else if(!strcmp(fraktion,"SchulKasse")) {
                Kasse[Fahrschule] = kassenbestand;
            }
            else if(!strcmp(fraktion,"Yakuza")) {
                Kasse[Yakuza] = kassenbestand;
            }
            else if(!strcmp(fraktion,"Aztecas")) {
                Kasse[Aztecas] = kassenbestand;
            }
            else if(!strcmp(fraktion,"Cali Kartell")) {
                Kasse[LCN] = kassenbestand;
            }
            else if(!strcmp(fraktion,"Vagos")) {
                Kasse[Vagos] = kassenbestand;
            }
            else if(!strcmp(fraktion,"Lotto")) {
                Lottostand = kassenbestand;
            }
            else if(!strcmp(fraktion,"Hitman")) {
                Kasse[Hitman] = kassenbestand;
            }
            else if(!strcmp(fraktion,"BBikerZ")) {
                Kasse[BBikerZ] = kassenbestand;
            }
            else if(!strcmp(fraktion,"Wheelmenk")) {
                Kasse[Wheelmenk] = kassenbestand;
            }
            else if(!strcmp(fraktion,"TerrorK")) {
                Kasse[TerrorK] = kassenbestand;
            }
            else if(!strcmp(fraktion,"OutlawzK")) {
                Kasse[OutlawzK] = kassenbestand;
            }
            else if(!strcmp(fraktion,"ndgradethaK")) {
                Kasse[ndgradethaK] = kassenbestand;
            }
            else if(!strcmp(fraktion,"Samen1")) {
                Samen1Bestand = kassenbestand;
            }
            else if(!strcmp(fraktion,"Samen2")) {
                Samen2Bestand = kassenbestand;
            }
            else if(!strcmp(fraktion,"Samen3")) {
                Samen3Bestand = kassenbestand;
            }
            else if(!strcmp(fraktion,"Samen4")) {
                Samen4Bestand = kassenbestand;
            }
            else if(!strcmp(fraktion,"Samen5")) {
                Samen5Bestand = kassenbestand;
            }else if(!strcmp(fraktion,"SW_WT")) {
                Schwarzmarkt_Waffenteile = kassenbestand;
            }else if(!strcmp(fraktion,"SW_WT_PREIS")) {
                Schwarzmarkt_Waffenteile_Preis = kassenbestand;
            }else if(!strcmp(fraktion,"SW_DRG")) {
                Schwarzmarkt_Drogen = kassenbestand;
            }else if(!strcmp(fraktion,"SW_DRG_PREIS")) {
                Schwarzmarkt_Drogen_Preis = kassenbestand;
            }else if(!strcmp(fraktion,"SW_SPC")) {
                Schwarzmarkt_Spice = kassenbestand;
            }else if(!strcmp(fraktion,"SW_SPC_PREIS")) {
                Schwarzmarkt_Spice_Preis = kassenbestand;
            }else if(!strcmp(fraktion,"SW_WCD")) {
                Schwarzmarkt_Wantedcodes = kassenbestand;
            }else if(!strcmp(fraktion,"SW_WCD_PREIS")) {
                Schwarzmarkt_Wantedcodes_Preis = kassenbestand;
            }
            else {
                printf("Keine Kasse definiert für %s mit %d$",fraktion,kassenbestand);
            }
            row++;
        }
        UpdateInfos();
    }
    else if(resultid == THREAD_BIZLOAD ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            i = 1;
        while( row < rows ) {
            Biz[i][bID] = cache_get_row_int(row,0,connectionHandle);
            Biz[i][EnterX] = cache_get_row_float(row,1,connectionHandle);
            Biz[i][EnterY] = cache_get_row_float(row,2,connectionHandle);
            Biz[i][EnterZ] = cache_get_row_float(row,3,connectionHandle);
            Biz[i][ExitX] = cache_get_row_float(row,4,connectionHandle);
            Biz[i][ExitY] = cache_get_row_float(row,5,connectionHandle);
            Biz[i][ExitZ] = cache_get_row_float(row,6,connectionHandle);
            cache_get_row(row,7,Biz[i][bBesitzer],connectionHandle,MAX_PLAYER_NAME);
            cache_get_row(row,8,Biz[i][bName],connectionHandle,32);
            Biz[i][bPreis] = cache_get_row_int(row,9,connectionHandle);
            Biz[i][bLock] = cache_get_row_int(row,10,connectionHandle);
            Biz[i][bInterior] = cache_get_row_int(row,11,connectionHandle);
            Biz[i][bKasse] = cache_get_row_int(row,12,connectionHandle);
            Biz[i][bEintritt] = cache_get_row_int(row,13,connectionHandle);
            Biz[i][bWaren] = cache_get_row_int(row,14,connectionHandle);
            Biz[i][bMaxWaren] = cache_get_row_int(row,15,connectionHandle);
            Biz[i][bWarenPreis] = cache_get_row_int(row,16,connectionHandle);
            Biz[i][bLadenAuf] = cache_get_row_int(row,17,connectionHandle);
            Biz[i][bLadenZu] = cache_get_row_int(row,18,connectionHandle);
            Biz[i][bErpresserFraktion] = cache_get_row_int(row,19,connectionHandle);
            Biz[i][bErpresserForderung] = cache_get_row_int(row,20,connectionHandle);
            Biz[i][bErpresserState] = cache_get_row_int(row,21,connectionHandle);

            new bStr[512];
            if (strcmp(Biz[i][bBesitzer], "Niemand", true) == 0) {
                format(bStr, sizeof(bStr), "{FFFFFF}[ {62E36D}%s {FFFFFF}]\n{62E36D}Dieses Geschäft ist zu verkaufen\n{FFFFFF}Preis: {62E36D}$%s\n{FFFFFF}Öffnungszeiten: {62E36D}%d Uhr bis %d Uhr\n\n{FFFFFF}Zum Kaufen tippe /Bizkaufen ein", Biz[i][bName], AddDelimiters(Biz[i][bPreis]), Biz[i][bLadenAuf], Biz[i][bLadenZu]);
                if (Biz[i][bErpresserFraktion] != 0) {
                    new frakname[50];
                    ReturnFraktionByID(Biz[i][bErpresserFraktion], frakname);
                    format(bStr, sizeof(bStr), "%s\n\n{FFFFFF}Erpresser: {%s}%s\n{FFFFFF}Erobern mit: {62E36D}/Bizfight", bStr, GetFactionColor(Biz[i][bErpresserFraktion]), frakname);
                }
                format(bStr, sizeof(bStr), "%s\n\n{FFFFFF}({62E36D}%d{FFFFFF})", bStr, Biz[i][bID]);
                Biz[i][bPickup] = CreateDynamicPickup(1318, 1, Biz[i][EnterX], Biz[i][EnterY], Biz[i][EnterZ], 0);
                Biz[i][bText] = CreateDynamic3DTextLabel(bStr, COLOR_PROP, Biz[i][EnterX], Biz[i][EnterY], Biz[i][EnterZ], 8, .worldid = 0);
            } else {
                format(bStr, sizeof(bStr), "{FFFFFF}[ {FFB732}%s {FFFFFF}]\n{FFFFFF}Besitzer: {FFB732}%s\n{FFFFFF}Eintritt: {FFB732}$%s\n{FFFFFF}Warenstand: {FFB732}%d/%d\n{FFFFFF}Öffnungszeiten: {FFB732}%d Uhr bis %d Uhr", Biz[i][bName], Biz[i][bBesitzer], AddDelimiters(Biz[i][bEintritt]), Biz[i][bWaren], Biz[i][bMaxWaren], Biz[i][bLadenAuf], Biz[i][bLadenZu]);
                if (Biz[i][bErpresserFraktion] != 0) {
                    new frakname[50];
                    ReturnFraktionByID(Biz[i][bErpresserFraktion], frakname);
                    format(bStr, sizeof(bStr), "%s\n\n{FFFFFF}Erpresser: {%s}%s\n{FFFFFF}Erobern mit: {FFB732}/Bizfight", bStr, GetFactionColor(Biz[i][bErpresserFraktion]), frakname);
                }
                format(bStr, sizeof(bStr), "%s\n\n{FFFFFF}({FFB732}%d{FFFFFF})", bStr, Biz[i][bID]);
                Biz[i][bPickup] = CreateDynamicPickup(1318, 1, Biz[i][EnterX], Biz[i][EnterY], Biz[i][EnterZ], 0);
                Biz[i][bText] = CreateDynamic3DTextLabel(bStr, COLOR_PROP, Biz[i][EnterX], Biz[i][EnterY], Biz[i][EnterZ], 8, .worldid = 0);
            }
            row++;
            i++;
        }
        CasinoBiz_Index = GetBizIndexByID(58);
        HandyShopBiz_Index = GetBizIndexByID(64);
        StromBiz_Index = GetBizIndexByID(65);
        Robbing_Init();
    }
    else if(resultid == THREAD_STATICBIZLOAD) {
        new
            rows = cache_get_row_count(connectionHandle),
            i = 0;
        while( i < rows ) {
            StaticBiz[i][SBD_iID] = cache_get_row_int(i,0,connectionHandle);
            StaticBiz[i][SBD_iTyp] = cache_get_row_int(i,1,connectionHandle);
            StaticBiz[i][SBD_iWaren] = cache_get_row_int(i,2,connectionHandle);
            StaticBiz[i][SBD_fX] = cache_get_row_float(i,3,connectionHandle);
            StaticBiz[i][SBD_fY] = cache_get_row_float(i,4,connectionHandle);
            StaticBiz[i][SBD_fZ] = cache_get_row_float(i,4,connectionHandle);

            StaticBiz[i][SBD_t3dLabel] = CreateDynamic3DTextLabel("Loading...", COLOR_BLUE, StaticBiz[i][SBD_fX],StaticBiz[i][SBD_fY],StaticBiz[i][SBD_fZ], 15);
            i++;
        }
    }
    else if(resultid == THREAD_ISVALIDGEBURTSTAG ) {
        if( cache_get_row_count() ) {
            SendClientMessage(extraid,COLOR_WHITE,"Wir brauchen noch dein Geburtsdatum!");
            ShowPlayerDialog(extraid,DIALOG_GEBURTSTAG,DIALOG_STYLE_INPUT,"Geburtstag",COLOR_HEX_WHITE "Gib dein Geburtstag in folgendem Format ein:\n dd.mm.yyy = z.B. 4.5.1992","Weiter","");
        }
        else {
            IsValidVornameDB(extraid);
        }
    }
    else if(resultid == THREAD_ISVALIDVORNAME) {
        if( cache_get_row_count(connectionHandle) ) {
            SendClientMessage(extraid,COLOR_WHITE,"Wir brauchen noch deinen Vornamen!");
            ShowPlayerDialog(extraid,DIALOG_VORNAME,DIALOG_STYLE_INPUT,"Vorname",COLOR_HEX_WHITE "Gib deinen Vornamen an.\n\nDein Vorname wird nicht öffentlich angezeigt, sondern dient lediglich\nder Authentifizierung und Benachrichtigung.","Weiter","Abbruch");
        }
        else {
            IsValidEmailDB(extraid);
        }
    }
    else if(resultid == THREAD_ISVALIDEMAIL) {
        if( cache_get_row_count(connectionHandle) ) {
            SendClientMessage(extraid,COLOR_WHITE,"Wir brauchen noch deine E-Mail Adresse!");
            ShowPlayerDialog(extraid,DIALOG_EMAIL,DIALOG_STYLE_INPUT,"E-Mail",COLOR_HEX_WHITE "Gib deine E-Mail Adresse an.\n\nDeine E-Mail Adresse wird nicht öffentlich angezeigt,\nsondern dient lediglich der Authentifizierung und Benachrichtigung.","Weiter","Abbruch");
        }
        else {
            TogglePlayerSpectating(extraid,false);
            SpawnPlayerEx(extraid);
            SetCameraBehindPlayer(extraid);
        }
    }
    else if(resultid == THREAD_WERBEBANNER ) {
        new
            rows = cache_get_row_count(connectionHandle),
            i = 0;
        while( i < rows ) {
            g_Werbebanner[i][W_iID] = cache_get_row_int(i,0,connectionHandle);
            g_Werbebanner[i][W_fX] = cache_get_row_float(i,1,connectionHandle);
            g_Werbebanner[i][W_fY] = cache_get_row_float(i,2,connectionHandle);
            g_Werbebanner[i][W_fZ] = cache_get_row_float(i,3,connectionHandle);
            g_Werbebanner[i][W_iModelID] = cache_get_row_int(i,4,connectionHandle);
            g_Werbebanner[i][W_fObjX] = cache_get_row_float(i,5,connectionHandle);
            g_Werbebanner[i][W_fObjY] = cache_get_row_float(i,6,connectionHandle);
            g_Werbebanner[i][W_fObjZ] = cache_get_row_float(i,7,connectionHandle);
            g_Werbebanner[i][W_fObjRotX] = cache_get_row_float(i,8,connectionHandle);
            g_Werbebanner[i][W_fObjRotY] = cache_get_row_float(i,9,connectionHandle);
            g_Werbebanner[i][W_fObjRotZ] = cache_get_row_float(i,10,connectionHandle);
            cache_get_row(i,11,g_Werbebanner[i][W_sText],connectionHandle,256);
            g_Werbebanner[i][W_iMaterialIndex] = cache_get_row_int(i,12,connectionHandle);
            g_Werbebanner[i][W_iMaterialSize] = cache_get_row_int(i,13,connectionHandle);
            cache_get_row(i,14,g_Werbebanner[i][W_iFontFace],connectionHandle,32);
            g_Werbebanner[i][W_iFontSize] = cache_get_row_int(i,15,connectionHandle);
            g_Werbebanner[i][W_iBold] = cache_get_row_int(i,16,connectionHandle);
            g_Werbebanner[i][W_iFontColor] = cache_get_row_int(i,17,connectionHandle);
            g_Werbebanner[i][W_iBackColor] = cache_get_row_int(i,18,connectionHandle);
            g_Werbebanner[i][W_iTextAlignment] = cache_get_row_int(i,19,connectionHandle);
            g_Werbebanner[i][W_unixBought] = cache_get_row_int(i,20,connectionHandle);
            cache_get_row(i,21,g_Werbebanner[i][W_sOwner],connectionHandle,MAX_PLAYER_NAME);

            AddWerbebanner(i);
            i++;
        }
        g_iWerbebanner = i;
    }
    else if(resultid == THREAD_HOTELLOADID ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            hStr[256];
        while( row < rows ) {
            if( iHotel >= MAX_HOTELS ) {
                break;
            }
            Hotel[iHotel][hID] = cache_get_row_int(row,0,connectionHandle);
            Hotel[iHotel][EnterX] = cache_get_row_float(row,1,connectionHandle);
            Hotel[iHotel][EnterY] = cache_get_row_float(row,2,connectionHandle);
            Hotel[iHotel][EnterZ] = cache_get_row_float(row,3,connectionHandle);
            Hotel[iHotel][ExitX] = cache_get_row_float(row,4,connectionHandle);
            Hotel[iHotel][ExitY] = cache_get_row_float(row,5,connectionHandle);
            Hotel[iHotel][ExitZ] = cache_get_row_float(row,6,connectionHandle);
            cache_get_row(row,7,Hotel[iHotel][hBesitzer],connectionHandle,MAX_PLAYER_NAME);
            cache_get_row(row,8,Hotel[iHotel][hName],connectionHandle,32);
            Hotel[iHotel][hLock] = cache_get_row_int(row,9,connectionHandle);
            Hotel[iHotel][hMietPreis] = cache_get_row_int(row,10,connectionHandle);
            Hotel[iHotel][hEnterInterior] = cache_get_row_int(row,11,connectionHandle);
            Hotel[iHotel][hExitInterior] = cache_get_row_int(row,12,connectionHandle);
            Hotel[iHotel][hEnterVirtualWorld] = cache_get_row_int(row,13,connectionHandle);

            if(strcmp(Hotel[iHotel][hBesitzer], "Niemand", true) == 0)
            {
                format(hStr, sizeof(hStr), "Dieses Hotelzimmer ist noch zu vermieten!\n\
                                            %s\n\
                                            Zimmer Mietpreis: $%s\n\
                                            Mit /Miethotelraum mietest du ein Hotelzimmer", Hotel[iHotel][hName], Hotel[iHotel][hMietPreis]);
                Hotel[iHotel][hPickup] = CreateDynamicPickup(19524, 1, Hotel[iHotel][EnterX], Hotel[iHotel][EnterY], Hotel[iHotel][EnterZ], Hotel[iHotel][hEnterVirtualWorld]);
                Hotel[iHotel][hText]     = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Hotel[iHotel][EnterX], Hotel[iHotel][EnterY], Hotel[iHotel][EnterZ], 8, .worldid = Hotel[iHotel][hEnterVirtualWorld]);
            }
            else
            {
                format(hStr, sizeof(hStr), "Besitzer: %s\nBeschreibung: %s", Hotel[iHotel][hBesitzer], Hotel[iHotel][hName]);
                Hotel[iHotel][hPickup] = CreateDynamicPickup(19522, 1, Hotel[iHotel][EnterX], Hotel[iHotel][EnterY], Hotel[iHotel][EnterZ], Hotel[iHotel][hEnterVirtualWorld]);
                Hotel[iHotel][hText]     = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Hotel[iHotel][EnterX], Hotel[iHotel][EnterY], Hotel[iHotel][EnterZ], 8, .worldid = Hotel[iHotel][hEnterVirtualWorld]);
            }
            row++;
            iHotel++;
        }
    }
    else if(resultid == THREAD_HOTELLOAD ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            hStr[256];
        while( row < rows ) {
            if( iHotel >= MAX_HOTELS ) {
                break;
            }
            Hotel[iHotel][hID] = cache_get_row_int(row,0,connectionHandle);
            Hotel[iHotel][EnterX] = cache_get_row_float(row,1,connectionHandle);
            Hotel[iHotel][EnterY] = cache_get_row_float(row,2,connectionHandle);
            Hotel[iHotel][EnterZ] = cache_get_row_float(row,3,connectionHandle);
            Hotel[iHotel][ExitX] = cache_get_row_float(row,4,connectionHandle);
            Hotel[iHotel][ExitY] = cache_get_row_float(row,5,connectionHandle);
            Hotel[iHotel][ExitZ] = cache_get_row_float(row,6,connectionHandle);
            cache_get_row(row,7,Hotel[iHotel][hBesitzer],connectionHandle,MAX_PLAYER_NAME);
            cache_get_row(row,8,Hotel[iHotel][hName],connectionHandle,32);
            Hotel[iHotel][hLock] = cache_get_row_int(row,9,connectionHandle);
            Hotel[iHotel][hMietPreis] = cache_get_row_int(row,10,connectionHandle);
            Hotel[iHotel][hEnterInterior] = cache_get_row_int(row,11,connectionHandle);
            Hotel[iHotel][hExitInterior] = cache_get_row_int(row,12,connectionHandle);
            Hotel[iHotel][hEnterVirtualWorld] = cache_get_row_int(row,13,connectionHandle);

            if(strcmp(Hotel[iHotel][hBesitzer], "Niemand", true) == 0)
            {
                format(hStr, sizeof(hStr), "Dieses Hotelzimmer ist noch zu vermieten!\n\
                                            %s\n\
                                            Zimmer Mietpreis: $%s\n\
                                            Mit /miethotelraum mietest du ein Hotelzimmer", Hotel[iHotel][hName], Hotel[iHotel][hMietPreis]);
                Hotel[iHotel][hPickup] = CreateDynamicPickup(19524, 1, Hotel[iHotel][EnterX], Hotel[iHotel][EnterY], Hotel[iHotel][EnterZ], Hotel[iHotel][hEnterVirtualWorld]);
                Hotel[iHotel][hText]     = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Hotel[iHotel][EnterX], Hotel[iHotel][EnterY], Hotel[iHotel][EnterZ], 8, .worldid = Hotel[iHotel][hEnterVirtualWorld]);
            }
            else
            {
                format(hStr, sizeof(hStr), "Besitzer: %s\nBeschreibung: %s", Hotel[iHotel][hBesitzer], Hotel[iHotel][hName]);
                Hotel[iHotel][hPickup] = CreateDynamicPickup(19522, 1, Hotel[iHotel][EnterX], Hotel[iHotel][EnterY], Hotel[iHotel][EnterZ], Hotel[iHotel][hEnterVirtualWorld]);
                Hotel[iHotel][hText]     = CreateDynamic3DTextLabel(hStr, COLOR_PROP, Hotel[iHotel][EnterX], Hotel[iHotel][EnterY], Hotel[iHotel][EnterZ], 8, .worldid = Hotel[iHotel][hEnterVirtualWorld]);
            }
            row++;
            iHotel++;
        }
    }
    else if( resultid == THREAD_WEBSQL_AKTE ) {
        if( IsPlayerConnected(extraid) && Spieler[extraid][pAdmin] > 0) {
            SendClientMessage(extraid,COLOR_YELLOW,"Eintrag in der Spielerakte angelegt");
        }
    }
    else if( resultid == THREAD_SAVEALL ) {
        SendClientMessage(extraid,COLOR_YELLOW,"Alle Daten gespeichert");
        new string[128];
		format(string, sizeof(string), "{FFFF00}Der Server wurde von {15951F}%s {FFFF00}abgespeichert.", GetName(extraid));
		SendClientMessageToAll(COLOR_WHITE, string);
    }
    else if( resultid == THREAD_LOADFRIENDLIST ) {
        new
            i,
            rows = cache_get_row_count(connectionHandle),
            //resultline[128],
            name[MAX_PLAYER_NAME],
            sender[MAX_PLAYER_NAME],
            empfaenger[MAX_PLAYER_NAME];
        GetPlayerName(extraid,name,sizeof(name));
        for( i =0; i < MAX_FRIEND_LIST ; i++) {
            g_FriendList[extraid][i][FL_sSpieler] = '\0';
            g_FriendList[extraid][i][FL_iStatus] = 0;
        }
        i = 0;
        while( i < rows ) {
            sender[0] = '\0';
            empfaenger[0] = '\0';

            cache_get_field_content(i,"Spieler",sender,connectionHandle);
            cache_get_field_content(i,"SpielerEx",empfaenger,connectionHandle);

            if( !strcmp(name,sender) ) {
                format( g_FriendList[extraid][i][FL_sSpieler] , MAX_PLAYER_NAME , "%s",empfaenger);
            }
            else if( !strcmp(name,empfaenger) ) {
                format( g_FriendList[extraid][i][FL_sSpieler] , MAX_PLAYER_NAME , "%s",sender);
            }
            g_FriendList[extraid][i][FL_iStatus] = FriendList_Active;
            i++;
        }
    }
    else if(resultid == THREAD_ADDFRIENDLIST ) {
    /*
        print("THREAD_ADDFRIENDLIST");
    */
    }
    else if(resultid == THREAD_DELFRIENDLIST ) {
    /*
        print("THREAD_DELFRIENDLIST");
        new
            giveid,
            sid[32];
        ReadPlayerSQLExtra(extraid,sid);
        sscanf(sid,"u",giveid);
        LoadPlayerFriendList(extraid);
        if( IsPlayerConnected(giveid) ) {
            LoadPlayerFriendList(giveid);
        }
    */
    }
    else if(resultid == THREAD_SAVEGANGZONES) {
    }
    else if(resultid == THREAD_LOADGANGZONES ) {
        new
            Text:Textdraw0,
            row,
            rows = cache_get_row_count(connectionHandle),
            color;
        while( row < rows ) {

            g_GangZone[iGangZones][GZ_iID] = cache_get_row_int(row,0,connectionHandle);
            g_GangZone[iGangZones][GZ_fMinX] = cache_get_row_float(row,1,connectionHandle);
            g_GangZone[iGangZones][GZ_fMaxX] = cache_get_row_float(row,2,connectionHandle);
            g_GangZone[iGangZones][GZ_fMinY] = cache_get_row_float(row,3,connectionHandle);
            g_GangZone[iGangZones][GZ_fMaxY] = cache_get_row_float(row,4,connectionHandle);
            g_GangZone[iGangZones][GZ_fIconX] = cache_get_row_float(row,5,connectionHandle);
            g_GangZone[iGangZones][GZ_fIconY] = cache_get_row_float(row,6,connectionHandle);
            g_GangZone[iGangZones][GZ_fIconZ] = cache_get_row_float(row,7,connectionHandle);
            g_GangZone[iGangZones][GZ_iOwner] = cache_get_row_int(row,8,connectionHandle);
            g_GangZone[iGangZones][GZ_iTimeout] = cache_get_row_int(row,9,connectionHandle);
            g_GangZone[iGangZones][GZ_igbestand] = cache_get_row_int(row,10,connectionHandle);
            g_GangZone[iGangZones][GZ_igupgrade] = cache_get_row_int(row,11,connectionHandle);
            g_GangZone[iGangZones][GZ_iAreaID] = CreateDynamicRectangle( g_GangZone[iGangZones][GZ_fMinX] , g_GangZone[iGangZones][GZ_fMinY] , g_GangZone[iGangZones][GZ_fMaxX], g_GangZone[iGangZones][GZ_fMaxY],.interiorid = 0 );
            //Streamer_SetIntData(STREAMER_TYPE_AREA,g_GangZone[iGangZones][GZ_iAreaID],E_STREAMER_EXTRA_ID,AREA_GANGZONE);
            g_GangZone[iGangZones][GZ_iGangZoneID] = GangZoneCreate(g_GangZone[iGangZones][GZ_fMinX] , g_GangZone[iGangZones][GZ_fMinY] , g_GangZone[iGangZones][GZ_fMaxX], g_GangZone[iGangZones][GZ_fMaxY]);
            g_GangZone[iGangZones][GZ_iIconID] = CreateDynamicPickup(1313,1,g_GangZone[iGangZones][GZ_fIconX],g_GangZone[iGangZones][GZ_fIconY],g_GangZone[iGangZones][GZ_fIconZ]);
            g_GangZone[iGangZones][GZ_t3dLabel] = CreateDynamic3DTextLabel("...",0x0000FFFF,g_GangZone[iGangZones][GZ_fIconX],g_GangZone[iGangZones][GZ_fIconY],g_GangZone[iGangZones][GZ_fIconZ] + 0.6, 10.0, .testlos = 1);
            Textdraw0 = TextDrawCreate(452.000000, 186.000000, "~n~~r~Angreifer: ~w~Ballas 5P. ~n~~y~Verteidiger: ~w~Vagos 21P.~n~~n~~p~Flagge: ~y~Vagos~n~");
            TextDrawBackgroundColor(Textdraw0, 255);
            TextDrawFont(Textdraw0, 1);
            TextDrawLetterSize(Textdraw0, 0.319999, 1.299999);
            TextDrawColor(Textdraw0, -1);
            TextDrawSetOutline(Textdraw0, 0);
            TextDrawSetProportional(Textdraw0, 1);
            TextDrawSetShadow(Textdraw0, 1);
            TextDrawUseBox(Textdraw0, 1);
            TextDrawBoxColor(Textdraw0, 0x00000090);
            TextDrawTextSize(Textdraw0, 636.000000, 10.000000);
            g_GangZone[iGangZones][GZ_tdInfo] = Textdraw0;

            color = GetZoneColorOfFaction(g_GangZone[iGangZones][GZ_iOwner]);
            GangZoneShowForAll( g_GangZone[iGangZones][GZ_iGangZoneID] , color );
            g_GangZone[iGangZones][GZ_iFlaggePlayer] = INVALID_PLAYER_ID;
            g_GangZone[iGangZones][GZ_iFlagge] = 0;
            iGangZones++;
            row++;
        }
        //printf("iGangZones %d",iGangZones);
    }
    else if(resultid == THREAD_LOADHAUSMOEBEL ) {
        new
            interior_index,
            row,
            rows = cache_get_row_count(connectionHandle),
            house_index,
            slot,
            moebel_index;
        while( row < rows ) {

            HausMoebelDummy[HMD_iID] = cache_get_row_int(row,0,connectionHandle);
            HausMoebelDummy[HMD_iHouseID] = cache_get_row_int(row,1,connectionHandle);
            HausMoebelDummy[HMD_iMoebelID] = cache_get_row_int(row,2,connectionHandle);
            HausMoebelDummy[HMD_fX] = cache_get_row_float(row,3,connectionHandle);
            HausMoebelDummy[HMD_fY] = cache_get_row_float(row,4,connectionHandle);
            HausMoebelDummy[HMD_fZ] = cache_get_row_float(row,5,connectionHandle);
            HausMoebelDummy[HMD_fRotX] = cache_get_row_float(row,6,connectionHandle);
            HausMoebelDummy[HMD_fRotY] = cache_get_row_float(row,7,connectionHandle);
            HausMoebelDummy[HMD_fRotZ] = cache_get_row_float(row,8,connectionHandle);
            row++;

            // Daten in g_HausMoebelObjekt überführen
            house_index = GetHouseIndexByID( HausMoebelDummy[HMD_iHouseID] );
            slot = GetHausMoebelFreeSlot( house_index );
            if(slot == -1 ) {
                printf("Für Haus %d sind zu viele Hausmöbel vorhanden",HausMoebelDummy[HMD_iHouseID]);
                continue;
            }
            moebel_index = GetHausMoebelIndex( HausMoebelDummy[HMD_iMoebelID] );
            if( moebel_index == -1 ) {
                printf("Ungültige Moebel ID %d",HausMoebelDummy[HMD_iMoebelID]);
                continue;
            }
            interior_index = GetHouseInteriorIndexByID( Haus[house_index][HouseInteriorID] );

            g_HausMoebelObjekt[house_index][slot][HMO_iID] = HausMoebelDummy[HMD_iID];
            g_HausMoebelObjekt[house_index][slot][HMO_iMoebelID] = HausMoebelDummy[HMD_iMoebelID];
            g_HausMoebelObjekt[house_index][slot][HMO_iObjectID] =
            CreateDynamicObject( g_HausMoebel[moebel_index][HM_iModelID],HausMoebelDummy[HMD_fX],HausMoebelDummy[HMD_fY],HausMoebelDummy[HMD_fZ],HausMoebelDummy[HMD_fRotX],HausMoebelDummy[HMD_fRotY],HausMoebelDummy[HMD_fRotZ], house_index , g_HouseInterior[interior_index][HI_iInterior] ,-1, 80.0);
        }
    }
    else if(resultid == THREAD_LOBEN ) {
    }
    else if(resultid == THREAD_LOBENSELECT ) {
        new
            anzahl;
        if( cache_get_row_count(connectionHandle) ) {
            // cache_get_row(0,0,resultline,connectionHandle);
            anzahl = cache_get_row_int(0,0,connectionHandle);
            if( anzahl > 2 ) {
                SendClientMessage(extraid,COLOR_RED,"Du hast heute schon 3 Spieler gelobt");
            }
            else {
                new
                    giveid,
                    Float:x,
                    Float:y,
                    Float:z,
                    String[128],
                    params[128];
                GetPVarString(extraid,"Loben",params,sizeof(params));
                sscanf(params,"u",giveid);
                GetPlayerPos(giveid,x,y,z);
                format(String,sizeof(String),"INSERT INTO `lob` VALUES(NULL,'%s','%s',CURDATE())",GetName(extraid),GetName(giveid));
                mysql_pquery(String,THREAD_LOBEN,extraid,gSQL,MySQLThreadOwner);
                SpielerGelobt(giveid);
                format(String,sizeof(String),"%s hat %s gelobt!",GetName(extraid),GetName(giveid));
                SendRoundMessage(x,y,z, COLOR_LIGHTGREY, String);
                format(String,sizeof(String),"Du hast Spieler %s gelobt!",GetName(giveid));
                SendClientMessage(extraid,COLOR_YELLOW,String);
                format(String,sizeof(String),"Spieler %s hat dich gelobt",GetName(extraid));
                SendClientMessage(giveid,COLOR_YELLOW,String);
            }
        }
    }

    else if(resultid == THREAD_LOAD_ACCOUNT_WEAPONS ) {
        new
            row,
            rows = cache_get_row_count(connectionHandle),
            bool:bInfo = false,
            weapons[13],
            weapon,
            muni;
        while( row < rows ) {
            for(new i ; i < sizeof(weapons) ; i++) {
                weapons[i] = cache_get_row_int(row,i,connectionHandle);
            }

            for(new i ; i < sizeof(weapons) ; i++) {
                Class_SplitWeaponInfo(weapons[i],weapon,muni);
                if( weapon && muni > 0 ) {
                    // printf("uncompressded weapon %d muni %d",weapon,muni);
                    GivePlayerWeapon(extraid,weapon,muni);
                    if( !bInfo ) {
                        bInfo = true;
                        SendClientMessage(extraid,COLOR_GREEN,"Deine Waffen sind wieder da!");
                    }
                }
            }
            row++;
        }
        SavePremiumWeaponData(extraid,true);
    }
    
    else if(resultid == THREAD_ADMINLIST) {
        new pName[24], lv, str2[2500], string[128], count, rk, rank[35];
        str2 = "Status\tName\tLevel\tAdminlevel\n";
        new i, giveid, rows = cache_get_row_count(connectionHandle);
        while( i < rows ) {

            cache_get_field_content(i,"Name",pName, connectionHandle);
            lv = cache_get_field_content_int(i,"Level", connectionHandle);
            rk = cache_get_field_content_int(i,"Admin", connectionHandle);
            
            if(rk == 1){
                rank="Supporter";
            }else if(rk == 2){
                rank="Event-Supporter";
            }else if(rk == 3){
                rank="Moderator";
            }else if(rk == 4){
                rank="Administrator";
            }else if(rk == 5){
                rank="Server-Manager";
            }else if(rk == 6){
                rank="Projektleiter";
            }else if(rk == 7){
                rank="Entwickler";
            }
            else if(rk == 8){
                rank="Projektverwalter";
            }

            sscanf(pName, "k<playername>", giveid);
            if (giveid != INVALID_PLAYER_ID){
				format(string, sizeof(string), "{228B22}Online (ID: %i)\t%s\t%d\t%d - %s\n", giveid, pName, lv, rk, rank);
            }else{
				format(string, sizeof(string), "{FF0000}Offline\t%s\t%d\t%d - %s\n", pName, lv, rk, rank);
			}
			
            strcat(str2, string);
            count++;
            i++;
        }

        new titel[40];
        new frakname[50];
        ReturnPlayerFraktion(extraid, frakname);
        format(titel, sizeof(titel), "Adminliste");
        ShowPlayerDialog(extraid, DIALOG_NO_RESPONSE, DIALOG_STYLE_TABLIST_HEADERS, titel, str2, "Schließen", "");
	}else if(resultid == THREAD_OFFLINEARREST2) {
        if( cache_get_row_count(connectionHandle) ) {
            new sName[128], wanteds;
            cache_get_row(0,0,sName,connectionHandle);
            wanteds = cache_get_row_int(0,1,connectionHandle);

            if(wanteds == 0) {
                SendClientMessage(extraid, COLOR_RED, "Der Spieler hat keine Wanteds");
            } else {
                new
                    Float:x,
                    Float:y,
                    Float:z,
                    bool:bTreffer,
                    offlinearrestString[160],
                    hashName = udb_hash( sName );
                for(new i ; i < MAX_DEATH_NOTICE ; i++) {
                    if( g_DeathNotice[i][DN_hashOwner] == hashName ) {
                        Streamer_GetFloatData( STREAMER_TYPE_PICKUP , g_DeathNotice[i][DN_iPickup] , E_STREAMER_X , x);
                        Streamer_GetFloatData( STREAMER_TYPE_PICKUP , g_DeathNotice[i][DN_iPickup] , E_STREAMER_Y , y);
                        Streamer_GetFloatData( STREAMER_TYPE_PICKUP , g_DeathNotice[i][DN_iPickup] , E_STREAMER_Z , z);
                        if( IsPlayerInRangeOfPoint(extraid,6.0,x,y,z) ) {
                            format(offlinearrestString,sizeof(offlinearrestString),"UPDATE `accounts` SET `Jailed` = 1,`JailTime` = ( 150 * `Wanteds` ),`JailType` = %d , `Wanteds` = 0 WHERE `Name` = '%s'",random(3),sName);
                            mysql_pquery(offlinearrestString,THREAD_OFFLINEARREST,extraid,gSQL,MySQLThreadOwner);
                            bTreffer = true;
                            break;
                        }
                    }
                }
                if(!bTreffer) {
                    format(offlinearrestString,sizeof(offlinearrestString),"Der Spieler %s ist nicht Offline-Geflüchtet, du bist zu weit entfernt oder es ist mehr als 30 Sekunden her.",sName);
                    SendClientMessage(extraid,COLOR_ORANGE,offlinearrestString);
                } else {
                    format(offlinearrestString,sizeof(offlinearrestString),"Der Spieler %s wird Offline in das Prison gesteckt",sName);
                    SendClientMessage(extraid,COLOR_ORANGE,offlinearrestString);
                }
            }
        }
        else {
            SendClientMessage(extraid,COLOR_RED,"Ein Spieler unter diesem Namen ist bei uns nicht registriert!");
        }
    }
    return 1;
}

stock PlayerSQLExtra(playerid,text[]) {
    SetPVarString(playerid,"SQLExtra",text);
    return 1;
}
stock ReadPlayerSQLExtra(playerid,text[] , len = sizeof(text) ) {
    GetPVarString(playerid,"SQLExtra",text, len );
    return 1;
}



public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
    printf("OnQueryError(%d,'%s','%s')",errorid,error,query);
    if( errorid == CR_SERVER_GONE_ERROR ) {
        mysql_reconnect( connectionHandle );
    }
    return 1;
}



stock IsArmoredVehicle(vehicleid) {
    new model = GetVehicleModel(vehicleid);
    for (new i = 0; i < sizeof(g_armoredVehicleModels); i++)
        if (g_armoredVehicleModels[i] == model) return true;

    return false;
}

stock IsTrunkOpen(vehicleid) {
    new engine,lights,doors,bonnet,boot,objective,alarm;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if( boot < 1) {
        return 0;
    }
    return 1;
}
stock IsDoorOpen(vehicleid) {
    new engine,lights,doors,bonnet,boot,objective,alarm;
    GetVehicleParamsEx(vehicleid,engine,lights,alarm,doors,bonnet,boot,objective);
    if( doors == 1) {
        return 0;
    }
    return 1;
}
stock ResetKofferraum(vehicleid) {
    g_Kofferraum[vehicleid][K_iDrogen] = 0;
    g_Kofferraum[vehicleid][K_iWaffenteile] = 0;
    g_Kofferraum[vehicleid][K_iWaffen] = 0;
    g_Kofferraum[vehicleid][K_iWantedcodes] = 0;
    g_Kofferraum[vehicleid][K_iSpice] = 0;
}
stock ShowKofferraum(playerid,vehicleid) {
    new
        String[256];
    for(new i ; i < sizeof(g_KofferraumBezeichnung); i++) {
        if(i == 2 ) {
            if( g_Kofferraum[vehicleid][e_Kofferraum:i] == 0 ) {
                format(String,sizeof(String),"%s%s: Keine Waffe\n",String,g_KofferraumBezeichnung[i]);
            }
            else {
                new
                    weapon,
                    muni,
                    wname[24];
                Class_SplitWeaponInfo( g_Kofferraum[vehicleid][e_Kofferraum:i] , weapon,muni);
                GetWeaponNameEx(weapon,wname,sizeof(wname));
                format(String,sizeof(String),"%s%s: %s mit %d Munition\n",String,g_KofferraumBezeichnung[i],wname,muni);
            }
        }else if(i == 5){
            format(String, sizeof(String),"%sIllegale Pakete: %d Pakete\n", String, bestand[vehicleid]);
		}
        else {
            format(String,sizeof(String),"%s%s: %d Stk\n",String,g_KofferraumBezeichnung[i],g_Kofferraum[vehicleid][e_Kofferraum:i]);
        }
    }
    ApplyAnimation(playerid, "BD_FIRE", "BD_PANIC_LOOP", 4.0, 1, 0, 0, 0, 0); // Kofferraum durchsuchen
    ShowPlayerDialog(playerid,DIALOG_KOFFERRAUM,DIALOG_STYLE_LIST,"Kofferraum",String,"Weiter","Abbruch");
    return 1;
}

stock ShowKoffer(playerid,giveid) {
    new
        String[256];
    for(new i ; i < sizeof(g_KofferBezeichnung); i++) {
        if(i == 2 ) {
            if( g_Koffer[giveid][e_Koffer:i] == 0 ) {
                format(String,sizeof(String),"%s%s: Keine Waffe\n",String,g_KofferBezeichnung[i]);
            }
            else {
                new
                    weapon,
                    muni,
                    wname[24];
                Class_SplitWeaponInfo( g_Koffer[giveid][e_Koffer:i] , weapon,muni);
                GetWeaponNameEx(weapon,wname,sizeof(wname));
                format(String,sizeof(String),"%s%s: %s mit %d Munition\n",String,g_KofferBezeichnung[i],wname,muni);
            }
        }
        else {
            format(String,sizeof(String),"%s%s: %d Stk\n",String,g_KofferBezeichnung[i],g_Koffer[giveid][e_Koffer:i]);
        }
    }
    ShowPlayerDialog(playerid,DIALOG_KOFFER,DIALOG_STYLE_LIST,"Koffer",String,"Weiter","Abbruch");
    return 1;
}
stock SendKofferInfo(playerid,giveid) {
    new
        String[256];
    format(String,sizeof(String),"Kofferinhalt von %s:",GetName(giveid));
    SendClientMessage(playerid,COLOR_WHITE,String);
    for(new i ; i < sizeof(g_KofferBezeichnung); i++) {
        if(i == 2 ) {
            if( g_Koffer[giveid][e_Koffer:i] == 0 ) {
                format(String,sizeof(String),"%s: Keine Waffe",g_KofferBezeichnung[i]);
            }
            else {
                new
                    weapon,
                    muni,
                    wname[24];
                Class_SplitWeaponInfo( g_Koffer[giveid][e_Koffer:i] , weapon,muni);
                GetWeaponNameEx(weapon,wname,sizeof(wname));
                format(String,sizeof(String),"%s: %s mit %d Munition\n",g_KofferBezeichnung[i],wname,muni);
            }
        }
        else {
            format(String,sizeof(String),"%s: %d Stk\n",g_KofferBezeichnung[i],g_Koffer[giveid][e_Koffer:i]);
        }
        SendClientMessage(playerid,COLOR_YELLOW,String);
    }
    return 1;
}
stock ResetKoffer(playerid) {
    g_Koffer[playerid][K_iDrogen] = 0;
    g_Koffer[playerid][K_iWaffenteile] = 0;
    g_Koffer[playerid][K_iWaffen] = 0;
    g_Koffer[playerid][K_iWantedcodes] = 0;
    g_Koffer[playerid][K_iSpice] = 0;
}

new const Float:g_TutCameraPos[][] = {
    {1441.5684,-1699.7312,33.8},
    {1519.45,-1626.48,33.5938},
    {1945.22,-1464.24,54.3545},
    {1488.76,-1058.72,39.7917},
    {322.974,-2077.92,33.7381}
};
new const Float:g_TutCameraLookAt[][] = {
    {1484.75,-1761.88,23.5938},
    {1552.55,-1676.48,23.4937},
    {2025.22,-1414.24,37.3545},
    {1465.86,-1018.72,33.4917},
    {389.974,-2027.42,16.3381}
};

forward ShowPlayerTutorial(playerid,step);
public ShowPlayerTutorial(playerid,step) {
    ClearPlayerChat(playerid);
    SetPlayerVirtualWorld(playerid,100 + playerid );
    KillTimer(Spieler[playerid][pTutTimer]);
    Spieler[playerid][pTutTimer] = INVALID_TIMER_ID;
    FreezePlayer(playerid);
    if( step == 0 ) {
        InterpolateCameraPos(playerid, 447.5718, -1750.7904, 17.8588 , g_TutCameraPos[0][0], g_TutCameraPos[0][1], g_TutCameraPos[0][2], 1000, CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, 448.5773, -1750.8137, 17.8939, g_TutCameraLookAt[0][0], g_TutCameraLookAt[0][1], g_TutCameraLookAt[0][2], 1000, CAMERA_MOVE );
        //SetPlayerCameraPos(playerid,1441.5684,-1699.7312,33.8);
        //SetPlayerCameraLookAt(playerid,1484.75,-1761.88,23.5938);

        SetPlayerPos(playerid,1490.6090,-1741.4506,13.5469);
        SetPlayerFacingAngle(playerid,152.2931);

        SendClientMessage(playerid,COLOR_YELLOW,"============================ LyD - Stadthalle ============================");
        SendClientMessage(playerid,COLOR_WHITE,"Dieser Platz ist einer der wichtigsten Orte auf LyD!");
        SendClientMessage(playerid,COLOR_WHITE,"Auf diesem Platz liegt das Arbeitsamt, wo du eine Auswahl von mehr als 20 Berufen hast.");
        SendClientMessage(playerid,COLOR_WHITE,"Staatsangehörigkeit, Fahrzeugzulassung, Meldestelle - alle diese");
        SendClientMessage(playerid,COLOR_WHITE,"Verwaltungsangelegenheiten lassen sich beim Stadtamt erledigen.");
        Spieler[playerid][pTutTimer] = SetTimerEx("ShowPlayerTutorial",20*1000,false,"dd",playerid,1);
    }
    else if( step == 1 ) {
        InterpolateCameraPos(playerid, g_TutCameraPos[step-1][0], g_TutCameraPos[step-1][1], g_TutCameraPos[step-1][2], g_TutCameraPos[step][0], g_TutCameraPos[step][1], g_TutCameraPos[step][2], 800, CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, g_TutCameraLookAt[step-1][0], g_TutCameraLookAt[step-1][1], g_TutCameraLookAt[step-1][2], g_TutCameraLookAt[step][0], g_TutCameraLookAt[step][1], g_TutCameraLookAt[step][2], 800, CAMERA_MOVE );
        //SetPlayerCameraPos(playerid,1519.45,-1626.48,33.5938);
        //SetPlayerCameraLookAt(playerid,1552.55,-1676.48,23.4937);

        SetPlayerPos(playerid,1541.2928,-1661.9829,13.5523);
        SetPlayerFacingAngle(playerid,224.5919);

        SendClientMessage(playerid,COLOR_YELLOW,"============================ LyD - Polizeizentrale ============================");
        SendClientMessage(playerid,COLOR_WHITE,"Das ist die Los Santos Polizeidienststelle, wo unter anderem auch gefährliche");
        SendClientMessage(playerid,COLOR_WHITE,"Straftäter hinter Gitter sitzen.");
        SendClientMessage(playerid,COLOR_WHITE,"Sollten die Verbrecher über den Weg laufen oder wenn du eine Straftat beobachtest,");
        SendClientMessage(playerid,COLOR_WHITE,"bitten wir dich umgehend die Polizei zu alarmieren!");
        SendClientMessage(playerid,COLOR_ORANGE,"Die Polizei alamierst du unter /Anrufen 110");
        Spieler[playerid][pTutTimer] = SetTimerEx("ShowPlayerTutorial",20*1000,false,"dd",playerid,2);
    }
    else if( step == 2 ) {
        InterpolateCameraPos(playerid, g_TutCameraPos[step-1][0], g_TutCameraPos[step-1][1], g_TutCameraPos[step-1][2], g_TutCameraPos[step][0], g_TutCameraPos[step][1], g_TutCameraPos[step][2], 1000, CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, g_TutCameraLookAt[step-1][0], g_TutCameraLookAt[step-1][1], g_TutCameraLookAt[step-1][2], g_TutCameraLookAt[step][0], g_TutCameraLookAt[step][1], g_TutCameraLookAt[step][2], 1000, CAMERA_MOVE );

        //SetPlayerCameraPos(playerid,1945.22,-1464.24,54.3545);
        //SetPlayerCameraLookAt(playerid,2025.22,-1414.24,37.3545);

        SetPlayerPos(playerid,2010.0386,-1438.3197,13.5547);
        SetPlayerFacingAngle(playerid,319.7918);

        SendClientMessage(playerid,COLOR_YELLOW,"============================ LyD - Rettungsdienstsstelle ============================");
        SendClientMessage(playerid,COLOR_WHITE,"Das ist die Rettungsdienstsstelle Los Santos wo du eine Krankenversicherung abschließen kannst,");
        SendClientMessage(playerid,COLOR_WHITE,"die Kosten für eine ärztliche Behandlung werden dann für dich kostenlos sein!");
        SendClientMessage(playerid,COLOR_WHITE,"Eine ärztliche Behandlung würde ohne einer Krankenversicherung 450$ kosten,");
        SendClientMessage(playerid,COLOR_WHITE,"eine Krankenversicherung kostet 50.000$ diese hält für 7 Tage.");
        SendClientMessage(playerid,COLOR_WHITE,"Wenn du stirbst kannst du den Rettungsdienst alarmieren diese werden dich dann");
        SendClientMessage(playerid,COLOR_WHITE,"an der Position wo du gestorben bist wiederbeleben.");
        SendClientMessage(playerid,COLOR_ORANGE,"Der Rettungsdienst ist unter /Service -> Rettungsdienst(Notruf) zu alarmieren!");
        Spieler[playerid][pTutTimer] = SetTimerEx("ShowPlayerTutorial",20*1000,false,"dd",playerid,3);
    }
    else if( step == 3 ) {
        InterpolateCameraPos(playerid, g_TutCameraPos[step-1][0], g_TutCameraPos[step-1][1], g_TutCameraPos[step-1][2], g_TutCameraPos[step][0], g_TutCameraPos[step][1], g_TutCameraPos[step][2], 1000, CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, g_TutCameraLookAt[step-1][0], g_TutCameraLookAt[step-1][1], g_TutCameraLookAt[step-1][2], g_TutCameraLookAt[step][0], g_TutCameraLookAt[step][1], g_TutCameraLookAt[step][2], 1000, CAMERA_MOVE );
        //SetPlayerCameraPos(playerid,1488.76,-1058.72,39.7917);
        //SetPlayerCameraLookAt(playerid,1465.86,-1018.72,33.4917);

        SetPlayerPos(playerid,1455.5131,-1024.8951,23.8281);
        SetPlayerFacingAngle(playerid,335.7801);

        SendClientMessage(playerid,COLOR_YELLOW,"============================ LyD - Landeszentralbank ============================");
        SendClientMessage(playerid,COLOR_WHITE,"Das ist die Landeszentralbank in Los Santos wo du ein Kredit aufnehmen kannst");
        SendClientMessage(playerid,COLOR_WHITE,"so wie dein Bankkonto mit einer Bankpinnummer anlegen kannst.");
        SendClientMessage(playerid,COLOR_WHITE,"In Los Santos gibt es zwei Banken, einmal die normale Los Santos Bank und die");
        SendClientMessage(playerid,COLOR_WHITE,"Landeszentralbank in Los Santos. Die Landeszentralbank kann überfallen werden!");
        Spieler[playerid][pTutTimer] = SetTimerEx("ShowPlayerTutorial",20*1000,false,"dd",playerid,4);
    }
    else if( step == 4 ) {
        InterpolateCameraPos(playerid, g_TutCameraPos[step-1][0], g_TutCameraPos[step-1][1], g_TutCameraPos[step-1][2], g_TutCameraPos[step][0], g_TutCameraPos[step][1], g_TutCameraPos[step][2], 1000, CAMERA_MOVE );
        InterpolateCameraLookAt(playerid, g_TutCameraLookAt[step-1][0], g_TutCameraLookAt[step-1][1], g_TutCameraLookAt[step-1][2], g_TutCameraLookAt[step][0], g_TutCameraLookAt[step][1], g_TutCameraLookAt[step][2], 1000, CAMERA_MOVE );
        //SetPlayerCameraPos(playerid,322.974,-2077.92,33.7381);
        //SetPlayerCameraLookAt(playerid,389.974,-2027.42,16.3381);

        SetPlayerPos(playerid,376.7904,-2020.4138,7.8301);
        SetPlayerFacingAngle(playerid,225.8178);

        SendClientMessage(playerid,COLOR_YELLOW,"============================ LyD - Freizeit ============================");
        SendClientMessage(playerid,COLOR_WHITE,"Auf LyD gibt es viele Orte wo du deine Freizeit genießen kannst!");
        SendClientMessage(playerid,COLOR_WHITE,"Du könntest eine Runde mit dem Riesenrad drehen oder schön in Ruhe angeln auf dem");
        SendClientMessage(playerid,COLOR_WHITE,"sonnigen LS Strand oder vielleicht mal auf der Go-Kartbahn oder auf unserem");
        SendClientMessage(playerid,COLOR_WHITE,"Wasser-Autoscooter herumdüsen und vieles mehr!");
        Spieler[playerid][pTutTimer] = SetTimerEx("ShowPlayerTutorial",20*1000,false,"dd",playerid,5);
    }
    else if( step == 5 ) {
        new
            String[128];
        UnfreezePlayer(playerid);
        SendClientMessage(playerid,COLOR_YELLOW,"Das Tutorial ist vorbei. Jetzt folgen noch einige Hilfetexte!");
        format(String,sizeof(String),"Wir begrüßen ganz herzlich unser neuen Spieler %s",GetName(playerid));
        SendClientMessageToAll(0xFF00B9FF,String);
        Spieler[playerid][pTut] = 1;
        pMakeTutorial[playerid] = 1;
        gPlayerLogged[playerid] = 1;
        Spieler[playerid][pLevel] = 1;

        //gPlayerLogged[playerid] = 1;
        //SetSpawnInfo(playerid, 0,0,0,0,0,0,0,0,0,0,0,0);
        // SetTimerEx("OnPlayerMoneyCheck", 1000, 1, "i", playerid);

        paydaywait[playerid] = 0;
        /*
        if(Spieler[playerid][pHandyNr] == 0)
        {
            Spieler[playerid][pHandyNr] = random(89999999)+10000000; //Handynummer mit 8 Ziffern
        }
        for(new fs;fs<sizeof(FightSystem);fs++)
        {
            GangZoneShowForPlayer(playerid, FightSystem[fs][fsZoneID], GetZoneColorOfFaction(FightSystem[fs][fsOwnerFaction]));
        }*/
        // SpawnPlayer(playerid);
        ShowPlayerDialog(playerid, DIALOG_TUT_3, DIALOG_STYLE_MSGBOX, COLOR_HEX_LIGHTBLUE"INFORMATION", COLOR_HEX_WHITE"Jetzt beginnt noch eine kleine Einführung der Funktionen, bitte lese die Hilfetexte gründlich durch,\num dich auf dem Server zurecht zu finden! Es dauert auch nicht mehr lange.", "Weiter", "Abbrechen");
    }
    Streamer_Update(playerid);
    return 1;
}


stock GetPlayerHandyName(playerid) {
    new
        playerhandy,
        String[26];
    playerhandy = Spieler[playerid][pHandy];
    format(String,sizeof(String), g_Mobiltelefon[playerhandy][M_sName]);
    return String;
}

stock ShowPlayerHandyList(playerid) {
    new
        String[1024];
    for(new i ; i < sizeof(g_Mobiltelefon) ; i++) {
        format(String,sizeof(String),"%s%s - $%s\n",String, g_Mobiltelefon[i][M_sName], AddDelimiters(g_Mobiltelefon[i][M_iPrice]));
    }
    ShowPlayerDialog(playerid, DIALOG_HANDYKAUFEN, DIALOG_STYLE_LIST, COLOR_HEX_ORANGE"Handy kaufen", String , "Sofortkauf", "Abbrechen");
    return 1;
}

stock ShowPlayerKampfStyleList(playerid) {
    new
        String[128];
    for(new i ; i < sizeof(g_KampfStyle) ; i++) {
        format(String,sizeof(String),"%s%s - $%s\n",String,g_KampfStyle[i][KS_sName], AddDelimiters(g_KampfStyle[i][KS_iPrice]));
    }
    ShowPlayerDialog(playerid,DIALOG_FIGHTSTYLE,DIALOG_STYLE_LIST,COLOR_HEX_ORANGE"Kampfstyle Kaufen",String,"Sofortkauf","Abbruch");
    return 1;
}


stock AddVehicleBlitzer(vehicleid,limit,geldstrafe) {
    new
        Float:Z,
        Float:X,
        Float:Y;
    if( g_iBlitzer >= sizeof(g_Blitzer) ) return 0;

    GetVehiclePos(vehicleid,X,Y,Z);

    g_Blitzer[g_iBlitzer][B_iObjectID] = INVALID_OBJECT_ID;
    g_Blitzer[g_iBlitzer][B_iArea] = CreateDynamicCircle(X,Y,15.0);
    g_Blitzer[g_iBlitzer][B_iAreaOuter] = CreateDynamicCircle(X,Y,55.0);
    g_Blitzer[g_iBlitzer][B_iVehicle] = vehicleid;

    aiVehicleBlitzer[vehicleid][FB_iBlitzerIndex] = g_iBlitzer;
    aiVehicleBlitzer[vehicleid][FB_iLimit] = limit;
    aiVehicleBlitzer[vehicleid][FB_iGeldStrafe] = geldstrafe;

    Streamer_SetIntData(STREAMER_TYPE_AREA, g_Blitzer[g_iBlitzer][B_iArea] ,E_STREAMER_EXTRA_ID, AREA_BLITZER_VEHICLE );
    Streamer_SetIntData(STREAMER_TYPE_AREA, g_Blitzer[g_iBlitzer][B_iAreaOuter] ,E_STREAMER_EXTRA_ID, AREA_BLITZER_OUTER );
    //printf("AddVehicleBlitzer(%d,%d,%d) AreaID: %d",vehicleid,limit,geldstrafe,g_Blitzer[g_iBlitzer][B_iArea]);
    g_iBlitzer++;
    return 1;
}

stock DestroyVehicleBlitzer(vehicleid) {
    new
        blitzer;
    blitzer = aiVehicleBlitzer[vehicleid][FB_iBlitzerIndex];
    //printf("DestroyVehicleBlitzer(%d) AreaID:%d",vehicleid,g_Blitzer[blitzer][B_iArea]);
    if( blitzer != -1 ) {
        DestroyDynamicArea( g_Blitzer[blitzer][B_iArea] );
        DestroyDynamicArea( g_Blitzer[blitzer][B_iAreaOuter] );
        g_Blitzer[blitzer][B_iArea] = -1;
        g_Blitzer[blitzer][B_iAreaOuter] = -1;
        g_Blitzer[blitzer][B_iObjectID] = INVALID_OBJECT_ID;
        g_Blitzer[blitzer][B_iVehicle] = INVALID_VEHICLE_ID;
        aiVehicleBlitzer[vehicleid][FB_iBlitzerIndex] = -1;
        aiVehicleBlitzer[vehicleid][FB_iLimit] = 0;
        aiVehicleBlitzer[vehicleid][FB_iGeldStrafe] = 0;
        return 1;
    }
    return 0;
}

stock InitTelefonzelle() {
    new
        Float:X,
        Float:Z,
        Float:Y;
    for(new i , j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT) ; i < j ; i++) {
        if( IsValidDynamicObject(i) ) {
            if( Streamer_GetIntData(STREAMER_TYPE_OBJECT,i,E_STREAMER_MODEL_ID) == 1216 ) {
                // Objekt für Blitzer gefunden,area erstellen
                if( g_iTelefonzelle >= sizeof(g_Blitzer) ) continue;

                Streamer_GetFloatData(STREAMER_TYPE_OBJECT,i,E_STREAMER_X,X);
                Streamer_GetFloatData(STREAMER_TYPE_OBJECT,i,E_STREAMER_Y,Y);
                Streamer_GetFloatData(STREAMER_TYPE_OBJECT,i,E_STREAMER_Z,Z);
                g_Telefonzelle[g_iTelefonzelle][T_iObjectID] = i;
                g_Telefonzelle[g_iTelefonzelle][T_t3dLabel] = CreateDynamic3DTextLabel("{FFFF00}- Telefonzelle -\n{00FF00}Befehl: /Telefonzelle",0xFFFFFFFF,X,Y,Z + 1.25 ,20.0, .testlos = 1);
                g_iTelefonzelle++;
            }
        }
    }
    // printf("g_iTelefonzelle %d",g_iTelefonzelle);
    return 1;
}



stock SetPlayerAutomatAnim(playerid) {
    switch(random(4)) {
        case 0: ApplyAnimation(playerid, "COP_AMBIENT", "COPLOOK_NOD", 4.0, 1, 0, 0, 0, 0); // cop view bankautomat
        case 1: ApplyAnimation(playerid, "CRACK", "BBALBAT_IDLE_01", 4.0, 1, 0, 0, 0, 0); // crack bankautomat
        case 2: ApplyAnimation(playerid, "INT_HOUSE", "WASH_UP", 4.0, 1, 0, 0, 0, 0); // 
        case 3: ApplyAnimation(playerid, "INT_SHOP", "SHOP_LOOP", 4.0, 1, 0, 0, 0, 0); // 
    }
    return 1;
}


stock GetClosestHouse(playerid) {
    for (new i = 0; i < iHaus; i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, Haus[i][EnterX], Haus[i][EnterY], Haus[i][EnterZ]))
        {
            return i;
        }
    }
    return 999;
}

stock GetClosestBiz(playerid) {
    for(new i=0;i<MAX_BIZES;i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, Biz[i][EnterX], Biz[i][EnterY], Biz[i][EnterZ]))
        {
            return i;
        }
    }
    return 999;
}

forward Pulse_Einbrechen(playerid,house);
public Pulse_Einbrechen(playerid,house) {
    if(!IsPlayerInRangeOfPoint(playerid, 2.0, Haus[house][EnterX], Haus[house][EnterY], Haus[house][EnterZ]))
    {
        new
            String[128],
            Float:x,
            Float:y,
            Float:z;
        KillTimer(Spieler[playerid][tEinbrechen]);
        GetPlayerPos(playerid,x,y,z);
        format(String,sizeof(String),"%s hat es nicht geschafft in ein Haus einzubrechen",GetName(playerid));
        SendRoundMessage(x,y,z, COLOR_GREEN, String);
        return 1;
    }
    if( Spieler[playerid][unixHausAufbrechen] <= gettime() ) {
        // Einbruch erfolgreich
        new
            String[128],
            Float:x,
            Float:y,
            Float:z,
            owner;
        GetPlayerPos(playerid,x,y,z);
        KillTimer(Spieler[playerid][tEinbrechen]);
        format(String,sizeof(String),"%s ist in ein Haus eingebrochen!",GetName(playerid));
        SendRoundMessage(x,y,z, COLOR_RED, String);

        new
            index;
        index = GetHouseInteriorIndexByID( Haus[house][HouseInteriorID] );
        SetPlayerInterior(playerid, g_HouseInterior[index][HI_iInterior] );

        SetPlayerVirtualWorld(playerid, house);
        SetPlayerPos(playerid, g_HouseInterior[index][HI_fExitX], g_HouseInterior[index][HI_fExitY], g_HouseInterior[index][HI_fExitZ]);

        //SetPlayerInterior(playerid, Haus[house][hInterior]);
        SetPlayerVirtualWorld(playerid, house);
        //SetPlayerPos(playerid, Haus[house][ExitX], Haus[house][ExitY], Haus[house][ExitZ]);
        sscanf(Haus[house][hBesitzer],"u",owner);
        if( IsPlayerConnected(owner)) {
            SendClientMessage(owner,COLOR_RED,"In deinem Haus wurde eingebrochen! Alarmiere schnellstmöglich die Polizei!");
        }
        return 1;
    }
    return 1;
}



forward FreeLicence();
public FreeLicence() {
    new now = gettime();
    for (new i; i <= GetPlayerPoolSize() ; i++) {
        if (IsPlayerConnected(i)) {
            // Auto
            if( Spieler[i][punixFSperre] != 0 && Spieler[i][punixFSperre] < now) {
                Spieler[i][punixFSperre] = 0;
                SendClientMessage(i,COLOR_YELLOW,"Deine Autoschein Sperre ist abgelaufen! Du kannst die Lizenz neu erwerben.");
            }
            // Flug
            if( Spieler[i][punixFlSperre] != 0 && Spieler[i][punixFlSperre] < now) {
                Spieler[i][punixFlSperre] = 0;
                SendClientMessage(i,COLOR_YELLOW,"Deine Flugschein Sperre ist abgelaufen! Du kannst die Lizenz neu erwerben.");
            }
            // Motorrad
            if( Spieler[i][punixMotoSperre] != 0 && Spieler[i][punixMotoSperre] < now) {
                Spieler[i][punixMotoSperre] = 0;
                SendClientMessage(i,COLOR_YELLOW,"Deine Motorradschein Sperre ist abgelaufen! Du kannst die Lizenz neu erwerben.");
            }
            // LKW
            if( Spieler[i][punixLKWSperre] != 0 && Spieler[i][punixLKWSperre] < now) {
                Spieler[i][punixLKWSperre] = 0;
                SendClientMessage(i,COLOR_YELLOW,"Deine LKW Scheinsperre ist abgelaufen! Du kannst die Lizenz neu erwerben.");
            }
            // Gun
            if( Spieler[i][punixGunSperre] != 0 && Spieler[i][punixGunSperre] < now) {
                Spieler[i][punixGunSperre] = 0;
                SendClientMessage(i,COLOR_YELLOW,"Deine Waffenschein Sperre ist abgelaufen! Du kannst die Lizenz neu erwerben.");
            }
        }
    }
    return 1;
}

stock GivePlayerStrafpunkte(playerid,schein,anzahl) {
    if(schein == 1)
    {
        if( anzahl < 0 ) {
            if(Spieler[playerid][pFPunkte] > 0 ) {
                new
                    String[128];
                format(String,sizeof(String),"Dir wurde/en %d Strafpunkt/e aus deinem Autoschein entfernt.",abs(anzahl));
                SendClientMessage(playerid, COLOR_YELLOW, String );
                Spieler[playerid][pFPunkte] += anzahl;
            }
        }
        else {
            Spieler[playerid][pFPunkte] += anzahl;
            if(Spieler[playerid][pFPunkte] >= 10)
            {
                Spieler[playerid][pCarLic] = 0;
                SendClientMessage(playerid, COLOR_RED, "Sie haben 10/10 Strafpunkte auf Ihrem Autoschein! Ihr Fahrerlaubnis ist hiermit für 7 Stunden entzogen.");
                Spieler[playerid][pFPunkte] = 0;
                Spieler[playerid][punixFSperre] = gettime() + 1*24*30*30;
            }
        }
    }
    if(schein == 2)
    {
        if( anzahl < 0 ) {
            if(Spieler[playerid][pFlPunkte] > 0 ) {
                new
                    String[128];
                format(String,sizeof(String),"Dir wurde/en %d Strafpunkt/e aus deinem Flugschein entfernt.",abs(anzahl));
                SendClientMessage(playerid, COLOR_YELLOW, String );
                Spieler[playerid][pFlPunkte] += anzahl;
            }
        }
        else {
            Spieler[playerid][pFlPunkte] += anzahl;
            if(Spieler[playerid][pFlPunkte] >= 10)
            {
                Spieler[playerid][pFlyLic] = 0;
                SendClientMessage(playerid, COLOR_RED, "Sie haben 10/10 Strafpunkte auf Ihrem Flugschein! Ihre Flugerlaubnis ist hiermit entzogen für 2 Tage.");
                Spieler[playerid][pFlPunkte] = 0;
                Spieler[playerid][punixFlSperre] = gettime() + 2*24*60*60;
            }
        }
    }
    if(schein == 3)
    {
        if( anzahl < 0 ) {
            if(Spieler[playerid][pMotoPunkte] > 0 ) {
                new
                    String[128];
                format(String,sizeof(String),"Dir wurde/en %d Strafpunkt/e aus deinem Motorradschein entfernt.",abs(anzahl));
                SendClientMessage(playerid, COLOR_YELLOW, String );
                Spieler[playerid][pMotoPunkte] += anzahl;
            }
        }
        else {
            Spieler[playerid][pMotoPunkte] += anzahl;
            if(Spieler[playerid][pMotoPunkte] >= 10)
            {
                Spieler[playerid][pMotoLic] = 0;
                SendClientMessage(playerid, COLOR_RED, "Sie haben 10/10 Strafpunkte auf Ihrem Motorradschein! Ihre Fahrerlaubnis ist hiermit für 10 Stunden entzogen.");
                Spieler[playerid][pMotoPunkte] = 0;
                Spieler[playerid][punixMotoSperre] = gettime() + 1*24*40*40;
            }
        }
    }
    if(schein == 4)
    {
        if( anzahl < 0 ) {
            if(Spieler[playerid][pLKWPunkte] > 0 ) {
                new
                    String[128];
                format(String,sizeof(String),"Dir wurde/en %d Strafpunkt/e aus deinem LKW-schein entfernt.",abs(anzahl));
                SendClientMessage(playerid, COLOR_YELLOW, String );
                Spieler[playerid][pLKWPunkte] += anzahl;
            }
        }
        else {
            Spieler[playerid][pLKWPunkte] += anzahl;
            if(Spieler[playerid][pLKWPunkte] >= 10)
            {
                Spieler[playerid][pLKWLic] = 0;
                SendClientMessage(playerid, COLOR_RED, "Sie haben 10/10 Strafpunkte auf Ihrem LKW-schein! Ihre Fahrerlaubnis ist hiermit für 2 Tage entzogen.");
                Spieler[playerid][pLKWPunkte] = 0;
                Spieler[playerid][punixLKWSperre] = gettime() + 2*24*60*60;
            }
        }
    }
    if(schein == 5)
    {
        if( anzahl < 0 ) {
            if(Spieler[playerid][pGunPunkte] > 0 ) {
                new
                    String[128];
                format(String,sizeof(String),"Dir wurde/en %d Strafpunkt/e aus deinem Waffenschein entfernt.",abs(anzahl));
                SendClientMessage(playerid, COLOR_YELLOW, String );
                Spieler[playerid][pGunPunkte] += anzahl;
            }
        }
        else {
            Spieler[playerid][pGunPunkte] += anzahl;
            if(Spieler[playerid][pGunPunkte] >= 10)
            {
                Spieler[playerid][pGunLic] = 0;
                Spieler[playerid][pGunLicB] = 0;
                SendClientMessage(playerid, COLOR_RED, "Sie haben 10/10 Strafpunkte auf Ihrem Waffenschein! Ihre Waffenerlaubnis ist hiermit für 2 Tage entzogen");
                Spieler[playerid][pGunPunkte] = 0;
                Spieler[playerid][punixGunSperre] = gettime() + 2*24*60*60;
            }
        }
    }
    return 1;
}



stock CreateHouseSellObject(houseindex) {
    Haus[houseindex][SellObjectID] = CreateDynamicObject(19471, Haus[houseindex][SellX], Haus[houseindex][SellY], Haus[houseindex][SellZ] - 1.0 ,0.0, 0.0 , Haus[houseindex][SellRot] + 90.0 );
    return 1;
}
stock DestroyHouseSellObject(houseindex) {
    DestroyDynamicObject(Haus[houseindex][SellObjectID]);
    Haus[houseindex][SellObjectID] = INVALID_OBJECT_ID;
    return 1;
}
stock DestroyPayDayTextdraw(playerid) {
    PlayerTextDrawDestroy(playerid,Spieler[playerid][ptPayDay]);
    return 1;
}

stock CreatePayDayTextdraw(playerid) {
    // Spieler[playerid][ptPayDay] = CreatePlayerTextDraw(playerid,406.000000, 27.000000, "..." );
    // PlayerTextDrawBackgroundColor(playerid,Spieler[playerid][ptPayDay], 85);
    // PlayerTextDrawFont(playerid,Spieler[playerid][ptPayDay], 2);
    // PlayerTextDrawLetterSize(playerid,Spieler[playerid][ptPayDay], 0.190000, 0.899999);
    // PlayerTextDrawColor(playerid,Spieler[playerid][ptPayDay], -1);
    // PlayerTextDrawSetOutline(playerid,Spieler[playerid][ptPayDay], 1);
    // PlayerTextDrawSetProportional(playerid,Spieler[playerid][ptPayDay], 1);
    // UpdatePayDayTextdraw(playerid);
    Spieler[playerid][ptPayDay] = CreatePlayerTextDraw(playerid, 540.0, 12.0, "PayDay");
    PlayerTextDrawBackgroundColor(playerid,Spieler[playerid][ptPayDay], 255);
    PlayerTextDrawFont(playerid,Spieler[playerid][ptPayDay], 3);
    PlayerTextDrawLetterSize(playerid,Spieler[playerid][ptPayDay], 0.28, 1.0);
    PlayerTextDrawColor(playerid,Spieler[playerid][ptPayDay], -1);
    PlayerTextDrawSetOutline(playerid,Spieler[playerid][ptPayDay], 1);
    PlayerTextDrawSetProportional(playerid,Spieler[playerid][ptPayDay], 1);
    PlayerTextDrawAlignment(playerid, Spieler[playerid][ptPayDay], 3);
    UpdatePayDayTextdraw(playerid);
    return 1;
}
stock UpdatePayDayTextdraw(playerid) {
    new String[64];
    format(String,sizeof(String),"~b~~h~~h~PayDay in: ~w~~h~~h~%d ~b~~h~~h~Min", 60 - Spieler[playerid][pPayDay]);
    PlayerTextDrawSetString(playerid,Spieler[playerid][ptPayDay],String);
    return 1;
}




stock SendUCPAktenEintrag( playerid, admin[] ,  spieler[] , text[] , thread = THREAD_WEBSQL_AKTE) {
    new
        query[256];
    // $query = mysql_oquery("INSERT INTO `akte` (`spieler`, `admin`, `content`) VALUES ('$spieler', '$admin', '$content')")
    format(query,sizeof(query),"INSERT INTO `akte` (`spieler`, `admin`, `content`) VALUES ('%s', '%s', '%s')",spieler,admin,text);
    mysql_pquery(query, thread ,playerid,gWebSQL,MySQLThreadOwner);
    return 1;
}



SSCANF:playername(string[]) {
    new name[MAX_PLAYER_NAME];
    for (new i = 0; i <= GetPlayerPoolSize(); i++) {
        if (!GetPlayerName(i, name, sizeof(name))) continue;
        if (!strcmp(name, string, true)) return i;
    }

    return INVALID_PLAYER_ID;
}



stock IsFriendSlotFree(playerid) {
    for(new i ; i < MAX_FRIEND_LIST ; i++) {
        if( isnull( g_FriendList[playerid][i][FL_sSpieler] ) ) {
            return 1;
        }
    }
    return 0;
}

stock GetFreeFriendSlot(playerid) {
    for(new i ; i < MAX_FRIEND_LIST ; i++) {
        if( isnull( g_FriendList[playerid][i][FL_sSpieler] ) ) {
            return i;
        }
    }
    return -1;
}
stock IsPlayerOnFriendList(playerid,giveid, status = FriendList_Active ) {
    new
        name[MAX_PLAYER_NAME];
    GetPlayerName(giveid,name,sizeof(name));
    for(new i ; i < MAX_FRIEND_LIST ; i++) {
        if( g_FriendList[playerid][i][FL_iStatus] == status ) {
            if( !isnull( g_FriendList[playerid][i][FL_sSpieler] ) ) {
                if(!strcmp(g_FriendList[playerid][i][FL_sSpieler],name)) {
                    return 1;
                }
            }
        }
    }
    return 0;
}

stock GetPlayerFriendSlot(playerid,giveid) {
    new
        name[MAX_PLAYER_NAME];
    GetPlayerName(giveid,name,sizeof(name));
    for(new i ; i < MAX_FRIEND_LIST ; i++) {
        if( !isnull( g_FriendList[playerid][i][FL_sSpieler] ) ) {
            if(!strcmp(g_FriendList[playerid][i][FL_sSpieler],name)) {
                return i;
            }
        }
    }
    return -1;
}

stock IsNameOnFriendList(playerid,name[],&index) {
    for(new i ; i < MAX_FRIEND_LIST ; i++) {
        if( !isnull( g_FriendList[playerid][i][FL_sSpieler] ) ) {
            if(!strcmp(g_FriendList[playerid][i][FL_sSpieler],name)) {
                index = i;
                return 1;
            }
        }
    }
    return 0;
}
stock LoadPlayerFriendList(playerid) {
    new
        String[256];
    format(String,sizeof(String),"SELECT `Spieler`,`SpielerEx` FROM `friendlist` WHERE `Spieler` = '%s' LIMIT "#MAX_FRIEND_LIST"",
        GetName(playerid),GetName(playerid));
    mysql_pquery( String ,THREAD_LOADFRIENDLIST,playerid,gSQL,MySQLThreadOwner);
    return 1;
}

stock GetPlayerWantedRang(playerid) {
    new rang[20] = "INVALID";
    for(new i ; i < sizeof(g_WantedRang) ; i++ ) {
        if( g_WantedRang[i][WR_iPoints] <= Spieler[playerid][pWanteds] ) {
            format(rang,sizeof(rang),g_WantedRang[i][WR_sRang]);
        }
    }
    return rang;
}




stock ClearPolizeiPartner(playerid) {
    g_PolizeiPartner[playerid][PP_iPartner] = INVALID_PLAYER_ID;
    g_PolizeiPartner[playerid][PP_iStatus] = 0;
    return 1;
}

stock ShowBuyInformation(playerid,text[],time = 4) {
    new PlayerText:td;
    td = CreatePlayerTextDraw(playerid,200.000000, 360.000000, text );
    PlayerTextDrawBackgroundColor(playerid,td, 255);
    PlayerTextDrawFont(playerid,td, 1);
    PlayerTextDrawLetterSize(playerid,td, 0.470000, 2.100000);
    PlayerTextDrawColor(playerid,td, -1);
    PlayerTextDrawSetOutline(playerid,td, 1);
    PlayerTextDrawSetProportional(playerid,td, 1);
    PlayerTextDrawShow(playerid,td);
    SetTimerEx("KillBuyInformation", time * 1000,0,"dd",playerid,_:td);
    return 1;
}

forward KillBuyInformation(playerid,PlayerText:td);
public KillBuyInformation(playerid,PlayerText:td) {
    PlayerTextDrawHide(playerid,td);
    PlayerTextDrawDestroy(playerid,td);
    return 1;
}


/*forward SpawnHack();
public SpawnHack() {
    new
        String[128];
    for(new i ; i < MAX_PLAYERS ; i++ ) {
        if( IsPlayerConnected(i) ) {
            if( !IsPlayerNPC(i) ) {
                if( gSpawned{i} == 0 ) {
                    if( !IsPlayerInRangeOfPoint(i,2.0,1133.0504,-2038.4034,69.1000) &&
                        !IsPlayerInRangeOfPoint(i,2.0,1416.5498,-806.5092,85.0357) &&
                        !IsPlayerInRangeOfPoint(i,2.0,483.1288,-1762.5616,7.1238) &&
                        !IsPlayerInRangeOfPoint(i,2.0,1490.6090,-1741.4506,13.5469) &&
                        !IsPlayerInRangeOfPoint(i,2.0,1541.2928,-1661.9829,13.5523) &&
                        !IsPlayerInRangeOfPoint(i,2.0,2010.0386,-1438.3197,13.5547) &&
                        !IsPlayerInRangeOfPoint(i,2.0,1455.5131,-1024.8951,23.8281) &&
                        !IsPlayerInRangeOfPoint(i,2.0,376.7904,-2020.4138,7.8301) ) {

                        format(String,sizeof(String),"[WARNUNG] %s verdacht auf Login/Register Hacker",GetName(i));
                        SendAdminMessage(COLOR_RED, String);
                        //KickDelay(i);
                    }
                }
            }
        }
    }
    return 1;
}*/


stock GetOnlinePlayers( ) {
    new
        players;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            //#if defined USE_NPCS
            if( IsPlayerNPC(i) ) continue;
            //#endif
            players++;
        }
    }
    return players;
}

IsPlayerAtWaffenlager(playerid) {
    for (new i; i < MAX_FACTIONS; i++) {
        if(IsAFightFaction(g_fraktion[i][Fr_FrakID]) || g_fraktion[i][Fr_FrakID] == 14 || g_fraktion[i][Fr_FrakID] == 15)
        {
            if (Spieler[playerid][pFraktion] == 14 && IsPlayerInRangeOfPoint(playerid, 3.0, 1518.8368,-1457.2957,9.5000)) return WEAPON_DEPOT_OWN;
            if (!IsPlayerInRangeOfPoint(playerid, 3.0, g_fraktion[i][Fr_WaffenlagerX], g_fraktion[i][Fr_WaffenlagerY], g_fraktion[i][Fr_WaffenlagerZ])) continue;
            if (Spieler[playerid][pFraktion] != g_fraktion[i][Fr_FrakID]) return WEAPON_DEPOT_OTHER;
            if (!g_fraktion[i][Fr_WaffenlagerStatus]) return WEAPON_DEPOT_OWN;
            return WEAPON_DEPOT_CLOSED;
        }
    }

    return WEAPON_DEPOT_NONE;
}



stock GetWaffenLagerIndex(fraktion) {
    for (new i; i < MAX_FACTIONS; i++) if (g_fraktion[i][Fr_FrakID] == fraktion ) return i;
    return -1;
}

stock ShowWaffenLager(playerid, menuid) {
    switch (menuid) {
        case 0: return ShowPlayerDialog(playerid, DIALOG_WAFFENLAGER, DIALOG_STYLE_LIST, COLOR_HEX_LIGHTBLUE "Waffenlager", 
            "Einlagern\nWaffe bauen\nLagerinformation", "Weiter", "Schließen");
        case 1: return ShowPlayerDialog(playerid, DIALOG_WAFFENLAGER_LAGERN, DIALOG_STYLE_INPUT, COLOR_HEX_LIGHTBLUE "Waffenlager - Einlagern", 
            "{FFFFFF}Gib an, wieviele Waffenteile du im\nWaffenlager einlagern möchtest.", "Einlagern", "Zurück");
        case 2: {
            new waffe[24], dialogText[600];
            dialogText = "Waffe\tMunition\tWaffenteile\n";
            for (new i = 0; i < sizeof(g_WaffenLagerConfig); i++) {
                if (g_WaffenLagerConfig[i][WLC_iWaffe] == -1) waffe = "Schutzweste/HP";
                else GetWeaponNameEx(g_WaffenLagerConfig[i][WLC_iWaffe], waffe, sizeof(waffe));
                format(dialogText, sizeof(dialogText), "%s%s\t%d\t%d\n", dialogText, waffe, g_WaffenLagerConfig[i][WLC_iMuni], g_WaffenLagerConfig[i][WLC_iPrice]);
            }
            return ShowPlayerDialog(playerid, DIALOG_WAFFENLAGER_BAUEN, DIALOG_STYLE_TABLIST_HEADERS, COLOR_HEX_LIGHTBLUE "Waffenlager - Bauen", dialogText, "Bauen", "Zurück");
        }
        case 3: {
            new index = GetWaffenLagerIndex(Spieler[playerid][pFraktion]), fraktion[50], String[128];
            ReturnPlayerFraktion(playerid, fraktion); 
            format(String, sizeof(String), "{FFFFFF}Waffenlager: %s\nWaffenteile: %s Stück", fraktion, AddDelimiters(g_fraktion[index][Fr_WaffenlagerTeile]));
            return ShowPlayerDialog(playerid, DIALOG_WAFFENLAGER_INFO, DIALOG_STYLE_MSGBOX, COLOR_HEX_LIGHTBLUE "Waffenlager - Lagerinformation", String , "Zurück", "");
        }
    }

    return 1;
}

forward RobSpritCheck(playerid);
public RobSpritCheck(playerid) {
    if(!IsPlayerInRangeOfPoint(playerid, 80.0, 268.9609,1384.2981,10.1610)){
        new String[128];
        SendClientMessage(playerid, COLOR_RED, "Die Mission wurde abgebrochen, weil du dich zu weit entfernt hast!");
        format(String, sizeof(String), "[EILMELDUNG] Räuber %s hat den Sprit-Raub abgebrochen!", GetName(playerid), playerid);
        SendFraktionMessage(1, COLOR_GREEN, String);
        SendFraktionMessage(2, COLOR_GREEN, String);
        SendFraktionMessage(16, COLOR_GREEN, String);
        SendFraktionMessage(18, COLOR_GREEN, String);
        SendFraktionMessage(22, COLOR_GREEN, String);
        KillTimer(SpritTimer[playerid]);
        KillTimer(SpritCheckTimer[playerid]);
        DeletePVar(playerid, "SPRITROB");
		DeletePVar(playerid, "STARTSPRIT");
		DeletePVar(playerid, "SPRITMENGE");

        spritstatus = false;
    }
    return 1;
}

forward RobSprit(playerid);
public RobSprit(playerid) {
	SCMFormatted(playerid, COLOR_GREEN,"[INFO] {FFFFFF}Du konntest %d Liter Sprit klauen! Fahre nun zum Spritlager!", GetPVarInt(playerid, "SPRITMENGE"));
	KillTimer(SpritCheckTimer[playerid]);
	SetPlayerCheckpointEx(playerid, 764.9532,347.7378,20.0458, 6.0, CP_ROBSPRIT);
	return 1;
}



forward uselbstmord(playerid);
public uselbstmord(playerid) {
	DeletePVar(playerid, "TERROR.SELBSTMORD");
	return 1;
}



stock GetColorCodeFromHex(hexColor)
{
    new
        string[9]
    ;
    format(string, sizeof(string), "{%06x}", hexColor >>> 8);
    return string;
}

stock ClearAnimationsEx(playerid,delay = 50 ) {
    SetTimerEx("_ClearAnimationsEx",delay,false,"d",playerid);
    return 1;
}
forward _ClearAnimationsEx(playerid,delay ) ;
public _ClearAnimationsEx(playerid,delay ) {
    ClearAnimations(playerid,1);
    return 1;
}
stock ClearAnimationsExx(playerid,delay = 50 ) {
    SetTimerEx("_ClearAnimationsExx",delay,false,"d",playerid);
    return 1;
}
forward _ClearAnimationsExx(playerid,delay ) ;
public _ClearAnimationsExx(playerid,delay ) {
    ClearActorAnimations(playerid);
    return 1;
}


stock SpielerGelobt(playerid) {
    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_LOBEN , 345, 1, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 );
    SetTimerEx("RemovePlayerAttachedObjectEx",73,false,"dd",playerid,ATTACHED_INDEX_LOBEN);
    Spieler[playerid][pLobe]++;
    return 1;
}

forward RemovePlayerAttachedObjectEx(playerid,index);
public RemovePlayerAttachedObjectEx(playerid,index) {
    RemovePlayerAttachedObject(playerid,index);
    return 1;
}

stock UnLoadPurgeVerleih() {
    for(new i ; i < sizeof(g_PurgeVerleihFahrzeuge) ; i++) {
		DestroyVehicle(g_PurgeVerleihFahrzeuge[i][FVF_iVehicleID]);
		DestroyDynamic3DTextLabel(g_PurgeVerleihFahrzeuge[i][FVF_t3dLabel]);
	}
	return 1;
}

stock LoadPurgeVerleih() {
    new
        modelid,
        price,
        String[128];
    for(new i ; i < sizeof(g_PurgeVerleihFahrzeuge) ; i++) {
        modelid = g_PurgeVerleihFahrzeuge[i][FVF_iModel];
        price = g_PurgeVerleihFahrzeuge[i][FVF_iPrice];
        format(String,sizeof(String),"{FFBB00}%s\n\
        Mietpreis: $%s, für 7 Stunden",CarName[modelid - 400], AddDelimiters(price));
        g_PurgeVerleihFahrzeuge[i][FVF_iVehicleID] = CreateVehicle( modelid ,  g_PurgeVerleihFahrzeuge[i][FVF_fX] , g_PurgeVerleihFahrzeuge[i][FVF_fY] , g_PurgeVerleihFahrzeuge[i][FVF_fZ] , g_PurgeVerleihFahrzeuge[i][FVF_fRot],-1,-1, 60 );
        g_PurgeVerleihFahrzeuge[i][FVF_t3dLabel] = CreateDynamic3DTextLabel( String , 0xFF8C00FF , 0.0,0.0 , 1.0 , 25.0 ,.attachedvehicle = g_PurgeVerleihFahrzeuge[i][FVF_iVehicleID] );
        SetVehicleNumberPlate(g_PurgeVerleihFahrzeuge[i][FVF_iVehicleID],"PURGE");
        SetVehicleToRespawn(g_PurgeVerleihFahrzeuge[i][FVF_iVehicleID]);
        aiVehicles[ g_PurgeVerleihFahrzeuge[i][FVF_iVehicleID] ] = VEH_PVERLEIH;
        //Attach
    }
    SetTimer("FahrzeugVerleih_Pulse",15149,true);
    return 1;
}

stock GetPurgeVerleihIndex( vehicleid ) {
    for(new i ; i < sizeof(g_PurgeVerleihFahrzeuge) ; i++) {
        if( g_PurgeVerleihFahrzeuge[i][FVF_iVehicleID] == vehicleid) {
            return i;
        }
    }
    return -1;
}

stock GetFreePurgeVerleihSpawn( index ) {
    new
        i;
    for( i = 0 ; i < sizeof(g_PurgeVerleihSpawn) ; i++) {
        if( g_PurgeVerleihSpawn[i][FVS_iVerleihIndex] == index) {
            if( g_PurgeVerleihSpawn[i][FVS_bFree] == true) {
                return i;
            }
        }
    }
    // Wenn alle geblockt,setzen wir einfach alle wieder auf frei und fangen bei 0 an
    for( i = 0 ; i < sizeof(g_PurgeVerleihSpawn) ; i++) {
        if( g_PurgeVerleihSpawn[i][FVS_iVerleihIndex] == index) {
            g_PurgeVerleihSpawn[i][FVS_bFree] = true;
        }
    }
    return GetFreePurgeVerleihSpawn(index);
}

stock LoadFahrzeugVerleih() {
    new
        modelid,
        price,
        String[128];
    for(new i ; i < sizeof(g_FahrzeugVerleihFahrzeuge) ; i++) {
        modelid = g_FahrzeugVerleihFahrzeuge[i][FVF_iModel];
        price = g_FahrzeugVerleihFahrzeuge[i][FVF_iPrice];
        format(String,sizeof(String),"{FFBB00}%s\n\
        Mietpreis: $%s, für 3 Stunden",CarName[modelid - 400], AddDelimiters(price));
        g_FahrzeugVerleihFahrzeuge[i][FVF_iVehicleID] = CreateVehicle( modelid ,  g_FahrzeugVerleihFahrzeuge[i][FVF_fX] , g_FahrzeugVerleihFahrzeuge[i][FVF_fY] , g_FahrzeugVerleihFahrzeuge[i][FVF_fZ] , g_FahrzeugVerleihFahrzeuge[i][FVF_fRot],-1,-1, 60 );
        g_FahrzeugVerleihFahrzeuge[i][FVF_t3dLabel] = CreateDynamic3DTextLabel( String , 0xFF8C00FF , 0.0,0.0 , 1.0 , 25.0 ,.attachedvehicle = g_FahrzeugVerleihFahrzeuge[i][FVF_iVehicleID] );
        SetVehicleNumberPlate(g_FahrzeugVerleihFahrzeuge[i][FVF_iVehicleID],"VERLEIH");
        SetVehicleToRespawn(g_FahrzeugVerleihFahrzeuge[i][FVF_iVehicleID]);
        aiVehicles[ g_FahrzeugVerleihFahrzeuge[i][FVF_iVehicleID] ] = VEH_VERLEIH;
        //Attach
    }
    SetTimer("FahrzeugVerleih_Pulse",15149,true);
    return 1;
}

stock GetFahrzeugVerleihIndex( vehicleid ) {
    for(new i ; i < sizeof(g_FahrzeugVerleihFahrzeuge) ; i++) {
        if( g_FahrzeugVerleihFahrzeuge[i][FVF_iVehicleID] == vehicleid) {
            return i;
        }
    }
    return -1;
}

stock GetFreeFahrzeugVerleihSpawn( index ) {
    new
        i;
    for( i = 0 ; i < sizeof(g_FahrzeugVerleihSpawn) ; i++) {
        if( g_FahrzeugVerleihSpawn[i][FVS_iVerleihIndex] == index) {
            if( g_FahrzeugVerleihSpawn[i][FVS_bFree] == true) {
                return i;
            }
        }
    }
    // Wenn alle geblockt,setzen wir einfach alle wieder auf frei und fangen bei 0 an
    for( i = 0 ; i < sizeof(g_FahrzeugVerleihSpawn) ; i++) {
        if( g_FahrzeugVerleihSpawn[i][FVS_iVerleihIndex] == index) {
            g_FahrzeugVerleihSpawn[i][FVS_bFree] = true;
        }
    }
    return GetFreeFahrzeugVerleihSpawn(index);
}

stock SetCameraBehindPlayerEx(playerid,delay = 50 ) {
    SetTimerEx("_SetCameraBehindPlayerEx",delay,false,"d",playerid);
    return 1;
}

forward _SetCameraBehindPlayerEx(playerid);
public _SetCameraBehindPlayerEx(playerid) {
    SetCameraBehindPlayer(playerid);
    return 1;
}

forward FahrzeugVerleih_Pulse();
public FahrzeugVerleih_Pulse() {
    new
        modelid,
        String[128],
        jetzt = gettime();
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            //#if defined USE_NPCS
            if( IsPlayerNPC(i)) continue;
            //#endif
            if( Spieler[i][pVehicleVerleih] != INVALID_VEHICLE_ID ) {
                if( Spieler[i][tickVehicleVerleih] < jetzt ) {
                    modelid = GetVehicleModel( Spieler[i][pVehicleVerleih] );
                    //printf("playerid %d modelid %d",i,modelid);
                    format(String,sizeof(String),"Die Leihzeit ist abgelaufen ( Fahrzeug: %s )",CarName[modelid - 400]);
                    SendClientMessage(i,COLOR_RED,String);
                    Spieler[i][tickVehicleVerleih] = 0;
                    DestroyVehicleEx(Spieler[i][pVehicleVerleih]);
                    Spieler[i][pVehicleVerleih] = INVALID_VEHICLE_ID;
                }
            }
        }
    }
    return 1;
}



forward DelayCameraMove(playerid,time,Float:x,Float:y,Float:z,Float:offset_x,Float:offset_y,Float:offset_z);
public DelayCameraMove(playerid,time,Float:x,Float:y,Float:z,Float:offset_x,Float:offset_y,Float:offset_z) {
    /* wiki.sa-mp.com */
    new
        // Float:x,Float:y,Float:z,
        Float:fScale = 5.0,
        Float:fPX, Float:fPY, Float:fPZ,
        Float:fVX, Float:fVY, Float:fVZ,
        Float:object_x, Float:object_y, Float:object_z;

    // Change me to change the scale you want. A larger scale increases the distance from the camera.
    // A negative scale will inverse the vectors and make them face in the opposite direction.

    GetPlayerCameraPos(playerid, fPX, fPY, fPZ);
    GetPlayerCameraFrontVector(playerid, fVX, fVY, fVZ);

    /*
    x = g_FahrzeugVerleihSpawn[spawn][FVS_fX];
    y = g_FahrzeugVerleihSpawn[spawn][FVS_fY];
    z = g_FahrzeugVerleihSpawn[spawn][FVS_fZ];
    */

    object_x = fPX + floatmul(fVX, fScale);
    object_y = fPY + floatmul(fVY, fScale);
    object_z = fPZ + floatmul(fVZ, fScale);
    /* --- */
    InterpolateCameraPos(playerid, fPX, fPY, fPZ ,x + offset_x , y + offset_y ,z + offset_z , 2750,CAMERA_MOVE);
    InterpolateCameraLookAt(playerid, object_x , object_y , object_z, x, y, z + 1.0 , 2750 , CAMERA_MOVE);
    SetCameraBehindPlayerEx(playerid,time);
    SetTimerEx("TogglePlayerControllableEx",time + 307,false,"dd",playerid,true);
    SetTimerEx("RemovePlayerFromVehicleEx",time + 307,false,"d",playerid);
    return 1;
}

ShowKreditLimitUebersicht(playerid,page,referenz = 0) {
    new
        String[400];
    if( page == 0 ) {
        for(new i ; i < sizeof(g_KreditLimit) ; i++) {
            format(String,sizeof(String),"%s%d$\n",String,g_KreditLimit[i][KL_iKreditwert]);
        }
        ShowPlayerDialog(playerid,DIALOG_KREDITUEBERSICHT,DIALOG_STYLE_LIST,COLOR_HEX_ORANGE"Kreditübersicht",String,"Weiter","Abbruch");
    }
    else if(page == 1 ) {
        strcat(String,""COLOR_HEX_WHITE"Informationen zu dem "COLOR_HEX_GREEN"$%s "COLOR_HEX_WHITE"Kredit:\n\n\
					   Der Kredit muss in Raten zurückgezahlt werden.\n\n\
					   Die Raten belaufen sich auf "COLOR_HEX_GREEN"$%s "COLOR_HEX_WHITE"pro PayDay.\n\
					   Zudem benötigen wir eine Anzahlung i.H.v. "COLOR_HEX_YELLOW"$%s"COLOR_HEX_WHITE".\n\
					   Wenn Sie damit einverstanden sind, drücken Sie auf "COLOR_HEX_GREEN"Akzeptieren.",sizeof(String));
		format(String,sizeof(String),String,AddDelimiters(g_KreditLimit[referenz][KL_iKreditwert]),AddDelimiters(g_KreditLimit[referenz][KL_iKreditRate]),AddDelimiters(g_KreditLimit[referenz][KL_iKreditRate]));
        Spieler[playerid][pKreditAuswahl] = referenz;
        ShowPlayerDialog(playerid,DIALOG_KREDITCONFIRM,DIALOG_STYLE_MSGBOX,COLOR_HEX_ORANGE"Informationen zum Kredit",String,"Akzeptieren","Abbruch");
    }
    return 1;
}


forward Pulse_Tickets();
public Pulse_Tickets() {
    new tickets;
    new String[64];
    for(new i=0 ; i< MAX_PLAYERS ;i++)
    {
        if(IsPlayerConnected(i) && gPlayerLogged[i] == 1)
        {
            if(Spieler[i][pAdmin] > 0 ) {
                TextDrawShowForPlayer(i,tdOffeneTickets);
            }
            else {
                TextDrawHideForPlayer(i,tdOffeneTickets);
            }
            //
            if(PlayerNeedsHelp[i] == 1)
            {
                tickets++;
            }
        }
    }
    if( tickets == 0 ) {
        format(String,sizeof(String),"Offene Support-Tickets: ~g~0");
    }
    else {
        format(String,sizeof(String),"Offene Support-Tickets: ~y~%d",tickets);
    }
    TextDrawSetString(tdOffeneTickets,String);
    return 1;
}

stock MaxVehicles(playerid) {
    if( !Spieler[playerid][pPremiumCarSlot] ) {
        return (MaxVeh - 1);
    }
    return MaxVeh;
}



/*stock IsPlayerSpawned(playerid){
    new statex = GetPlayerState(playerid);
    if(statex != PLAYER_STATE_NONE && statex != PLAYER_STATE_WASTED && statex != PLAYER_STATE_SPAWNED) return true;
    return false;
}*/

forward LoadPremiumWeaponData(playerid);
public LoadPremiumWeaponData(playerid) {
    new
        query[550];
    for (new i = 0; i < 13; i++) {
        if( !isnull(query) ) {
            format(query,sizeof(query),"%s,`weapondata_slot%02d`",query,i);
        }
        else {
            format(query,sizeof(query),"`weapondata_slot%02d`",i);
        }
    }
    format(query,sizeof(query),"SELECT %s FROM `accounts` WHERE `name` = '%s'",query,GetName(playerid));
    mysql_pquery(query,THREAD_LOAD_ACCOUNT_WEAPONS,playerid,gSQL,MySQLThreadOwner);
    //printf("LoadPremiumWeaponData(%d) - %s",playerid,query);
    return 1;
}

stock SavePremiumWeaponData(playerid,bool:clear = false) {
    new
        info,
        query[600],
        Waffen[2];
    format(query,sizeof(query),"UPDATE `accounts` SET");
    for (new i = 0; i < 13; i++)
    {
        if( clear ) {
            format(query,sizeof(query),"%s `weapondata_slot%02d` = %d ",query,i,0);
            if( i != 12 ) {
                strcat(query,",",sizeof(query));
            }
        }
        else {
            GetPlayerWeaponData(playerid, i, Waffen[0], Waffen[1]);
            if (Waffen[0] == WEAPON_CHAINSAW) continue;
            info = Class_CompressWeaponInfo( Waffen[0], Waffen[1]);
            if( Waffen[0] && Waffen[1] > 0 ) {
                format(query,sizeof(query),"%s `weapondata_slot%02d` = %d ",query,i,info);
            }
            else {
                format(query,sizeof(query),"%s `weapondata_slot%02d` = %d ",query,i,info);
            }
            if( i != 12 ) {
                strcat(query,",",sizeof(query));
            }
        }
    }
    format(query,sizeof(query),"%s WHERE `Name` = '%s'",query,GetName(playerid));
    //printf("SavePremiumWeaponData(%d) %s",playerid,query);
    mysql_oquery(query,THREAD_SAVE_ACCOUNT_WEAPONS,playerid,gSQL);
    return 1;
}




stock PlaySoundForAll(soundid) {
    for(new i ; i < MAX_PLAYERS ; i++) {
        PlayerPlaySound(i,soundid,0.0,0.0,0.0);
    }
    return 1;
}

forward EventUhr();
public EventUhr() {
    new
        String[128];
    g_EventUhr[EU_iLeft]--;
    if( g_EventUhr[EU_iLeft] == 0 ) {
        KillTimer(g_EventUhr[EU_tTimer]);
        g_EventUhr[EU_tTimer] = INVALID_TIMER_ID;
        GameTextForAll("~g~Go Go Go",1550,5);
        PlaySoundForAll(1057);
    }
    else {
        format(String,sizeof(String),"~y~%d",g_EventUhr[EU_iLeft]);
        GameTextForAll(String,1260,5);
        PlaySoundForAll(1056);
    }
    return 1;
}


stock InitBallon() {
    new
        index;
    g_BallonConfig[BC_iStep] = 4;
    index = g_BallonConfig[BC_iStep];
    g_BallonConfig[BC_bForward] = false;
    g_BallonConfig[BC_iObject] = CreateDynamicObject( 19338 , g_BallonRoute[index][BR_fX], g_BallonRoute[index][BR_fY], g_BallonRoute[index][BR_fZ] , 0.0 , 0.0 , 0.0 );
    MoveBallon();
    return 1;
}
forward MoveBallon();
public MoveBallon() {
    new
        Float:x,
        Float:y,
        Float:z,
        index;
    //printf("MoveBallon Step %d Forward %d sizeof %d ",g_BallonConfig[BC_iStep],g_BallonConfig[BC_bForward], sizeof(g_BallonRoute) );
    if( g_BallonConfig[BC_bForward] == true ) {
        g_BallonConfig[BC_iStep]++;
        index = g_BallonConfig[BC_iStep];
        /*
        if( index == sizeof(g_BallonRoute) - 1 ) {
            printf("index %d",index);
            x = g_BallonRoute[index][BR_fX]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            y = g_BallonRoute[index][BR_fY]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            z = g_BallonRoute[index][BR_fZ]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            MoveDynamicObject( g_BallonConfig[BC_iObject] , x , y , z , g_BallonRoute[index][BR_fSpeed] + 8.0  ,  0.0  , 0.0  , frandom(0.0,360.0,1));
            printf("x,y,z = %.1f %.1f %.1f ",x,y,z);
            // Umdrehen
            print("Umdrehen");
            SendClientMessageToAll(COLOR_YELLOW,"Umdrehen");
        }
        */
        if( index == sizeof(g_BallonRoute)  ) {
            g_BallonConfig[BC_bForward] = false;
            SetTimer("MoveBallon",2*60*1000,false);
        }
        else {
            //printf("index %d",index);
            x = g_BallonRoute[index][BR_fX]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            y = g_BallonRoute[index][BR_fY]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            z = g_BallonRoute[index][BR_fZ]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            MoveDynamicObject( g_BallonConfig[BC_iObject] , x , y , z , g_BallonRoute[index][BR_fSpeed] ,  0.0  , 0.0  , frandom(0.0,360.0,1));
            //printf("x,y,z = %.1f %.1f %.1f ",x,y,z);
        }
    }
    else {
        g_BallonConfig[BC_iStep]--;
        index = g_BallonConfig[BC_iStep];
        if( index < 0 ) {
            // Umdrehen
            g_BallonConfig[BC_bForward] = true;
            SetTimer("MoveBallon",2*60*1000,false);
        }
        else {
            x = g_BallonRoute[index][BR_fX]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            y = g_BallonRoute[index][BR_fY]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            z = g_BallonRoute[index][BR_fZ]  + random( g_BallonRoute[index][BR_iOffset] ) - random( g_BallonRoute[index][BR_iOffset] );
            MoveDynamicObject( g_BallonConfig[BC_iObject] , x , y , z , g_BallonRoute[index][BR_fSpeed] ,  0.0  , 0.0  , frandom(0.0,360.0,1));
            //printf("x,y,z = %.1f %.1f %.1f ",x,y,z);
        }
    }
    return 1;
}

stock ShowHausUpgrade(playerid,bool:safebox = true) {
    new String[256], String2[256],String3[256],Stringfinal[1028];
    if( safebox ) {
        format(String,sizeof(String),"%s: %d Stk\n",g_HouseUpgradeBezeichnung[0],Spieler[playerid][pHausSafeboxDrogen]);
        format(String,sizeof(String),"%s%s: %d Stk\n",String,g_HouseUpgradeBezeichnung[1],Spieler[playerid][pHausSafeboxSpice]);
        ShowPlayerDialog(playerid, DIALOG_HAUSUPGRADE_SB ,DIALOG_STYLE_LIST,"Haus - Safebox",String,"Weiter","Abbruch");
    }
    else 
    {
        if( Spieler[playerid][pHausWaffenlager1] == 0 ) 
        {
            format(String,sizeof(String),"Slot 1: Keine Waffe\n");
        }
        else 
        {
            new weapon,muni,wname[24];
            Class_SplitWeaponInfo( Spieler[playerid][pHausWaffenlager1] , weapon,muni);
            GetWeaponNameEx(weapon,wname,sizeof(wname));
            format(String,sizeof(String),"Slot 1: %s mit %d Munition\n",wname,muni);
        }
        if( Spieler[playerid][pHausWaffenlager2] == 0 ) 
        {
            format(String2,sizeof(String2),"Slot 2: Keine Waffe\n");
        }
        else 
        {
            new weapon,muni,wname[24];
            Class_SplitWeaponInfo( Spieler[playerid][pHausWaffenlager2] , weapon,muni);
            GetWeaponNameEx(weapon,wname,sizeof(wname));
            format(String2,sizeof(String2),"Slot 2: %s mit %d Munition\n",wname,muni);
        }
        if( Spieler[playerid][pHausWaffenlager3] == 0 ) 
        {
            format(String3,sizeof(String3),"Slot 3: Keine Waffe\n");
        }
        else 
        {
            new weapon,muni,wname[24];
            Class_SplitWeaponInfo( Spieler[playerid][pHausWaffenlager3] , weapon,muni);
            GetWeaponNameEx(weapon,wname,sizeof(wname));
            format(String3,sizeof(String3),"Slot 3: %s mit %d Munition\n",wname,muni);
        }
        format(Stringfinal,sizeof(Stringfinal),"%s\n%s\n%s",String,String2,String3);
        ShowPlayerDialog(playerid, DIALOG_HAUSUPGRADE_WL ,DIALOG_STYLE_LIST,"Haus - Waffenlager",Stringfinal,"Weiter","Abbruch");
    }
    return 1;
}


stock Haustier_SetPlayer(playerid) {
    if( Spieler[playerid][pHaustier] == 1 ) {
        new
            Float:a,
            Float:x,
            Float:y,
            Float:z;
        GetPlayerPos(playerid,x,y,z);
        GetPlayerFacingAngle(playerid,a);
        Spieler[playerid][pHaustierObject] = CreateDynamicObject(19315,x + 1.5  ,y + 1.5 ,z - 0.7,0.0,0.0, a + 9.0 );
        //SetPlayerAttachedObject( playerid, ATTACHED_INDEX_HAUSTIER, 19315, 15, -0.430907, -0.020142, -1.312935, 344.807861, 358.984252, 258.654113, 1.000000, 1.000000, 1.000000 ); // deer01 - haustier
    }
    else if( Spieler[playerid][pHaustier] == 2 ) {
        SetPlayerAttachedObject(playerid,ATTACHED_INDEX_HAUSTIER,19078,1,0.320722,-0.067912,-0.165151,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000); // Parrot
    }
    else if( Spieler[playerid][pHaustier] == 3 ) {
        SetPlayerAttachedObject(playerid,ATTACHED_INDEX_HAUSTIER,1609,15,0.121000, -0.012000, 0.062000, -11.399999, 13.200001, -178.000000, 0.079000, 0.070000, 0.085000); // Turtle
    }
    return 1;
}

stock Haustier_RemovePlayer(playerid) {
    if( Spieler[playerid][pHaustier] == 1 ) {
        DestroyDynamicObject( Spieler[playerid][pHaustierObject] );
        Spieler[playerid][pHaustierObject] = INVALID_OBJECT_ID;
    }
    else {
        RemovePlayerAttachedObject(playerid,ATTACHED_INDEX_HAUSTIER);
    }
    return 1;
}

stock Haustier_OnFoot(playerid) {
    if( Spieler[playerid][pHaustierSpawned] ) {
        if( Spieler[playerid][pHaustier] == 1 ) {
            if( Spieler[playerid][pHaustierObject] != INVALID_OBJECT_ID ) {
                return 1;
            }
        }
        else if( Spieler[playerid][pHaustier] > 1 ) {
            if( IsPlayerAttachedObjectSlotUsed(playerid,ATTACHED_INDEX_HAUSTIER)) {
                return 1;
            }
        }
    }
    return 0;
}

forward Haustier_Follow();
public Haustier_Follow() {
    new
        time = gettime(),
        Float:speed,
        Float:opos[3],
        Float:distance,
        Float:a,
        Float:x,
        Float:y,
        Float:z;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( Spieler[i][pHaustier] == 1 ) {
                if( Haustier_OnFoot(i) ) {
                    if( GetPlayerState(i) == PLAYER_STATE_ONFOOT ) {
                        // Hund,gespawnt und zu Fuß!
                        GetPlayerPos(i,x,y,z);
                        if( Spieler[i][pPos][0] != x || Spieler[i][pPos][1] != y || Spieler[i][pPos][2] != z ) {
                            Spieler[i][pPos][0] = x;
                            Spieler[i][pPos][1] = y;
                            Spieler[i][pPos][2] = z;
                            // Hat sich bewegt, also Tier eventuell bewegen
                            GetPlayerFacingAngle(i,a);
                            GetDynamicObjectPos( Spieler[i][pHaustierObject] , opos[0], opos[1], opos[2]);
                            distance = GetDistance( x , y, z, opos[0] , opos[1] , opos[2] );
                            GetXYInFrontOfPosition(x,y,a, -HAUSTIER_OFFSET );
                            //printf("Bewegte Distanz zwischen Tier und Position %.2f",distance);
                            if( distance >= HAUSTIER_OFFSET + 2.0 ) {
                                // Nicht immer sofort bewegen,erst bei genug bewegung zur letzten Tierposition
                                speed = distance;
                                if( speed > 8.0 ) speed = 8.0; // Maximalgeschwindigkeit
                                if( !(distance > 22.0)  ) {
                                    // Zu weit weg,bewegt sich nicht mehr
                                    MoveDynamicObject( Spieler[i][pHaustierObject] , x,y, z - 0.6, distance , 0.0,0.0, a + 90.0);
                                }
                                else {
                                    if( Spieler[i][pHaustierDistanceAlert] < time ) {
                                        Spieler[i][pHaustierDistanceAlert] = time + 30; // Alle 30 Sekunden nur melden
                                        SendClientMessage(i,COLOR_YELLOW,"Du bist zu weit entfernt von deinem Hund. Er findet dich nicht!");
                                    }
                                }
                            }
                        }
                        else {
                            // Hund aus langeweile bewegen / drehen ?
                        }
                    }
                }
            }
        }
    }
    return 1;
}

stock ShowPlayerTacho(playerid, gear = 0 ) {
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Name] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Border][0] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Border][1] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Border][2] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Border][3] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Border][4] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Border][5] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Info] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Speed] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Tank] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_TankInfo] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Kennzeichen] );
    PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Liter] );
    if(gear) {
        PlayerTextDrawShow(playerid, g_PlayerTacho[playerid][pt_Gear] );
    }
    return 1;
}
stock HidePlayerTacho(playerid) {
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Name] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Border][0] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Border][1] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Border][2] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Border][3] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Border][4] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Border][5] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Info] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Speed] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Tank] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_TankInfo] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Kennzeichen] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Liter] );
    PlayerTextDrawHide(playerid, g_PlayerTacho[playerid][pt_Gear] );
    return 1;
}
stock DestroyPlayerTacho(playerid) {
    if(!IsPlayerNPC(playerid)) {
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Name] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Border][0] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Border][1] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Border][2] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Border][3] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Border][4] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Border][5] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Info] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Speed] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Tank] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_TankInfo] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Kennzeichen] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Liter] );
        PlayerTextDrawDestroy(playerid, g_PlayerTacho[playerid][pt_Gear] );
        return 1;
    }
    return 0;
}
stock CreatePlayerTacho(playerid) {
    new PlayerText:Textdraw0;
    new PlayerText:Textdraw1;
    new PlayerText:Textdraw2;
    new PlayerText:Textdraw3;
    new PlayerText:Textdraw4;
    new PlayerText:Textdraw5;
    new PlayerText:Textdraw6;
    new PlayerText:Textdraw7;
    new PlayerText:Textdraw8;
    new PlayerText:Textdraw9;
    new PlayerText:Textdraw10;
    new PlayerText:Textdraw11;
    new PlayerText:Textdraw12;
    new PlayerText:Textdraw13;


    // Create the textdraws:
    Textdraw0 = CreatePlayerTextDraw(playerid,547.000000, 357.000000, " ~n~~n~~n~~n~~n~~n~~n~~n~");
    PlayerTextDrawAlignment(playerid,Textdraw0, 2);
    PlayerTextDrawBackgroundColor(playerid,Textdraw0, 255);
    PlayerTextDrawFont(playerid,Textdraw0, 2);
    PlayerTextDrawLetterSize(playerid,Textdraw0, 0.300000, 1.200000);
    PlayerTextDrawColor(playerid,Textdraw0, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw0, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw0, 1);
    PlayerTextDrawSetShadow(playerid,Textdraw0, 0);
    PlayerTextDrawUseBox(playerid,Textdraw0, 1);
    PlayerTextDrawBoxColor(playerid,Textdraw0, 0x00000050);
    PlayerTextDrawTextSize(playerid,Textdraw0, -9.000000, 157.000000);

    Textdraw1 = CreatePlayerTextDraw(playerid,631.000000, 357.000000, "~n~");
    PlayerTextDrawBackgroundColor(playerid,Textdraw1, 255);
    PlayerTextDrawFont(playerid,Textdraw1, 2);
    PlayerTextDrawLetterSize(playerid,Textdraw1, 8.769996, 9.600004);
    PlayerTextDrawColor(playerid,Textdraw1, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw1, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw1, 1);
    PlayerTextDrawSetShadow(playerid,Textdraw1, 1);
    PlayerTextDrawUseBox(playerid,Textdraw1, 1);
    PlayerTextDrawBoxColor(playerid,Textdraw1, 255);
    PlayerTextDrawTextSize(playerid,Textdraw1, 624.000000, 270.000000);

    Textdraw2 = CreatePlayerTextDraw(playerid,468.000000, 357.000000, "~n~");
    PlayerTextDrawBackgroundColor(playerid,Textdraw2, 255);
    PlayerTextDrawFont(playerid,Textdraw2, 2);
    PlayerTextDrawLetterSize(playerid,Textdraw2, 8.769996, 9.600004);
    PlayerTextDrawColor(playerid,Textdraw2, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw2, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw2, 1);
    PlayerTextDrawSetShadow(playerid,Textdraw2, 1);
    PlayerTextDrawUseBox(playerid,Textdraw2, 1);
    PlayerTextDrawBoxColor(playerid,Textdraw2, 255);
    PlayerTextDrawTextSize(playerid,Textdraw2, 466.000000, 270.000000);

    Textdraw3 = CreatePlayerTextDraw(playerid,469.000000, 357.000000, "~n~");
    PlayerTextDrawBackgroundColor(playerid,Textdraw3, 255);
    PlayerTextDrawFont(playerid,Textdraw3, 1);
    PlayerTextDrawLetterSize(playerid,Textdraw3, 0.500000, -0.200000);
    PlayerTextDrawColor(playerid,Textdraw3, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw3, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw3, 1);
    PlayerTextDrawSetShadow(playerid,Textdraw3, 1);
    PlayerTextDrawUseBox(playerid,Textdraw3, 1);
    PlayerTextDrawBoxColor(playerid,Textdraw3, 255);
    PlayerTextDrawTextSize(playerid,Textdraw3, 626.000000, -37.000000);

    Textdraw4 = CreatePlayerTextDraw(playerid,469.000000, 445.000000, "~n~");
    PlayerTextDrawBackgroundColor(playerid,Textdraw4, 255);
    PlayerTextDrawFont(playerid,Textdraw4, 1);
    PlayerTextDrawLetterSize(playerid,Textdraw4, 0.500000, -0.200000);
    PlayerTextDrawColor(playerid,Textdraw4, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw4, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw4, 1);
    PlayerTextDrawSetShadow(playerid,Textdraw4, 1);
    PlayerTextDrawUseBox(playerid,Textdraw4, 1);
    PlayerTextDrawBoxColor(playerid,Textdraw4, 255);
    PlayerTextDrawTextSize(playerid,Textdraw4, 626.000000, -37.000000);

    Textdraw5 = CreatePlayerTextDraw(playerid,469.000000, 371.000000, "~n~");
    PlayerTextDrawBackgroundColor(playerid,Textdraw5, 255);
    PlayerTextDrawFont(playerid,Textdraw5, 1);
    PlayerTextDrawLetterSize(playerid,Textdraw5, 0.500000, -0.200000);
    PlayerTextDrawColor(playerid,Textdraw5, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw5, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw5, 1);
    PlayerTextDrawSetShadow(playerid,Textdraw5, 1);
    PlayerTextDrawUseBox(playerid,Textdraw5, 1);
    PlayerTextDrawBoxColor(playerid,Textdraw5, 255);
    PlayerTextDrawTextSize(playerid,Textdraw5, 626.000000, -37.000000);

    Textdraw6 = CreatePlayerTextDraw(playerid,475.000000, 372.000000, "Kraftstoff:  ~n~Zustand:  ~n~Radio:  ~n~Fahrzeugtuer:  ");
    PlayerTextDrawBackgroundColor(playerid,Textdraw6, 255);
    PlayerTextDrawFont(playerid,Textdraw6, 1);
    new Float:height = 0.22;
    PlayerTextDrawLetterSize(playerid,Textdraw6, height, height * 4.16); // 4.16
    PlayerTextDrawColor(playerid,Textdraw6, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw6, 1);
    PlayerTextDrawSetProportional(playerid,Textdraw6, 1);

    Textdraw7 = CreatePlayerTextDraw(playerid,475.0, 413.0, "Km/h: 0");
    PlayerTextDrawBackgroundColor(playerid,Textdraw7, 255);
    PlayerTextDrawFont(playerid,Textdraw7, 1);
    PlayerTextDrawLetterSize(playerid,Textdraw7, 0.53, 1.65);
    PlayerTextDrawColor(playerid,Textdraw7, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw7, 1);
    PlayerTextDrawSetProportional(playerid,Textdraw7, 1);

    Textdraw8 = CreatePlayerTextDraw(playerid,611.000000, 376.000000, "~n~");
    PlayerTextDrawBackgroundColor(playerid,Textdraw8, 68);
    PlayerTextDrawFont(playerid,Textdraw8, 3);
    PlayerTextDrawLetterSize(playerid,Textdraw8, 1.00, 6.000000);
    PlayerTextDrawColor(playerid,Textdraw8, 0x00FF0070);
    PlayerTextDrawSetOutline(playerid,Textdraw8, 1);
    PlayerTextDrawSetProportional(playerid,Textdraw8, 1);

    Textdraw9 = CreatePlayerTextDraw(playerid,469.000000, 432.000000, "~n~");
    PlayerTextDrawBackgroundColor(playerid,Textdraw9, 255);
    PlayerTextDrawFont(playerid,Textdraw9, 1);
    PlayerTextDrawLetterSize(playerid,Textdraw9, 0.500000, -0.200000);
    PlayerTextDrawColor(playerid,Textdraw9, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw9, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw9, 1);
    PlayerTextDrawSetShadow(playerid,Textdraw9, 1);
    PlayerTextDrawUseBox(playerid,Textdraw9, 1);
    PlayerTextDrawBoxColor(playerid,Textdraw9, 255);
    PlayerTextDrawTextSize(playerid,Textdraw9, 626.000000, -37.000000);

    Textdraw10 = CreatePlayerTextDraw(playerid,582.000000, 372.000000, "Tank:");
    PlayerTextDrawBackgroundColor(playerid,Textdraw10, 255);
    PlayerTextDrawFont(playerid,Textdraw10, 1);
    PlayerTextDrawLetterSize(playerid,Textdraw10, 0.250000, 1.100000);
    PlayerTextDrawColor(playerid,Textdraw10, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw10, 1);
    PlayerTextDrawSetProportional(playerid,Textdraw10, 1);

    Textdraw11 = CreatePlayerTextDraw(playerid,486.000000, 431.000000, " ");
    PlayerTextDrawBackgroundColor(playerid,Textdraw11, 255);
    PlayerTextDrawFont(playerid,Textdraw11, 1);
    PlayerTextDrawLetterSize(playerid,Textdraw11, 0.350000, 1.200000);
    PlayerTextDrawColor(playerid,Textdraw11, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw11, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw11, 1);
    PlayerTextDrawSetShadow(playerid,Textdraw11, 1);

    Textdraw12 = CreatePlayerTextDraw(playerid,608.000000, 381.000000, "0 l");
    PlayerTextDrawAlignment(playerid,Textdraw12, 3);
    PlayerTextDrawBackgroundColor(playerid,Textdraw12, 255);
    PlayerTextDrawFont(playerid,Textdraw12, 2);
    PlayerTextDrawLetterSize(playerid,Textdraw12, 0.220000, 0.899999);
    PlayerTextDrawColor(playerid,Textdraw12, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw12, 1);
    PlayerTextDrawSetProportional(playerid,Textdraw12, 1);

    Textdraw13 = CreatePlayerTextDraw(playerid,557.000000, 340.000000, "1 ~g~2 ~w~3");
    PlayerTextDrawBackgroundColor(playerid,Textdraw13, 255);
    PlayerTextDrawFont(playerid,Textdraw13, 3);
    PlayerTextDrawLetterSize(playerid,Textdraw13, 0.390000, 1.400000);
    PlayerTextDrawColor(playerid,Textdraw13, -1);
    PlayerTextDrawSetOutline(playerid,Textdraw13, 0);
    PlayerTextDrawSetProportional(playerid,Textdraw13, 0);
    PlayerTextDrawSetShadow(playerid,Textdraw13, 1);
    PlayerTextDrawUseBox(playerid,Textdraw13, 1);
    PlayerTextDrawBoxColor(playerid,Textdraw13, 119);
    PlayerTextDrawTextSize(playerid,Textdraw13, 599.000000, 0.000000);

    g_PlayerTacho[playerid][pt_Name] = Textdraw0;
    g_PlayerTacho[playerid][pt_Border][0] = Textdraw1;
    g_PlayerTacho[playerid][pt_Border][1] = Textdraw2;
    g_PlayerTacho[playerid][pt_Border][2] = Textdraw3;
    g_PlayerTacho[playerid][pt_Border][3] = Textdraw4;
    g_PlayerTacho[playerid][pt_Border][4] = Textdraw5;
    g_PlayerTacho[playerid][pt_Border][5] = Textdraw9;
    g_PlayerTacho[playerid][pt_Info] = Textdraw6;
    g_PlayerTacho[playerid][pt_Speed] = Textdraw7;
    g_PlayerTacho[playerid][pt_Tank] = Textdraw8;
    g_PlayerTacho[playerid][pt_TankInfo] = Textdraw10;
    g_PlayerTacho[playerid][pt_Kennzeichen] = Textdraw11;
    g_PlayerTacho[playerid][pt_Liter] = Textdraw12;
    g_PlayerTacho[playerid][pt_Gear] = Textdraw13;

    return 1;
}

forward ConnectBot(c);
public ConnectBot(c)
{
    if( c < sizeof(g_Bots) ) {
        //printf("ConnectNPC(\"%s\",\"%s\")",g_Bots[c][Bot_sName] , g_Bots[c][Bot_sScript]);
        ConnectNPC( g_Bots[c][Bot_sName] , g_Bots[c][Bot_sScript]);
        SetTimerEx("ConnectBot",11500,false,"d",++c);
    }
    return true;
}

/*static Float:s_WeaponRange[] = {
    0.0, // 0 - Fist
    0.0, // 1 - Brass knuckles
    0.0, // 2 - Golf club
    0.0, // 3 - Nitestick
    0.0, // 4 - Knife
    0.0, // 5 - Bat
    0.0, // 6 - Shovel
    0.0, // 7 - Pool cue
    0.0, // 8 - Katana
    0.0, // 9 - Chainsaw
    0.0, // 10 - Dildo
    0.0, // 11 - Dildo 2
    0.0, // 12 - Vibrator
    0.0, // 13 - Vibrator 2
    0.0, // 14 - Flowers
    0.0, // 15 - Cane
    0.0, // 16 - Grenade
    0.0, // 17 - Teargas
    0.0, // 18 - Molotov
    90.0, // 19 - Vehicle M4 (custom)
    75.0, // 20 - Vehicle minigun (custom)
    0.0, // 21
    35.0, // 22 - Colt 45
    35.0, // 23 - Silenced
    35.0, // 24 - Deagle
    40.0, // 25 - Shotgun
    35.0, // 26 - Sawed-off
    40.0, // 27 - Spas
    35.0, // 28 - UZI
    45.0, // 29 - MP5
    70.0, // 30 - AK47
    90.0, // 31 - M4
    35.0, // 32 - Tec9
    100.0, // 33 - Cuntgun
    320.0, // 34 - Sniper
    0.0, // 35 - Rocket launcher
    0.0, // 36 - Heatseeker
    0.0, // 37 - Flamethrower
    75.0  // 38 - Minigun
};*/


public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if(Spieler[playerid][pAntiSpawnKillOn]) return 0;
    new playerzone = GetPlayerGangZone(playerid);
    new hitzone = GetPlayerGangZone(hitid);

    if (hittype == BULLET_HIT_TYPE_PLAYER && IsPlayerConnected(hitid)) {
        if(playerzone != hitzone){
            for(new i ; i < iGangZones ; i++){
                if( g_GangZone[i][GZ_iStatus] == 1 && damagesperre[hitid] == 0){
                    SendClientMessage(playerid, COLOR_RED, "[GF]{FFFFFF} Du darfst nicht aus dem Gebiet schießen!");
                    return 0;
                }
            }
        }
    }
    if(hittype == BULLET_HIT_TYPE_VEHICLE){
        for(new i; i < MAX_PLAYERS; i++){
            if(GetPlayerVehicleID(i) == hitid){
                hitzone = GetPlayerGangZone(i);
                if(playerzone != hitzone){
                    for(new o ; o < iGangZones ; o++){
                        if( g_GangZone[o][GZ_iStatus] == 1){
                            SendClientMessage(playerid, COLOR_RED, "[GF]{FFFFFF} Du darfst nicht aus dem Gebiet schießen!");
                            return 0;
                        }
                    }
                }
            }
        }
    }
    if (hittype == BULLET_HIT_TYPE_PLAYER && IsPlayerConnected(hitid)) {
        if(playerzone == hitzone && playerzone != -1) {
            for(new i; i < iGangZones; i++) {
                if (g_GangZone[i][GZ_iStatus] == 1 && (Spieler[playerid][pFraktion] == g_GangZone[i][GZ_iOwner] || Spieler[playerid][pFraktion] == g_GangZone[i][GZ_iAttacker])) {
                    if (IsDeagleZone(g_GangZone[i][GZ_iID])) {
                        if (!(weaponid == 24 || weaponid == 25)) {
                            SendClientMessage(playerid, COLOR_RED, "[GF]{FFFFFF} Du darfst in diesem Gebiet nur Deagle oder Shotgun nutzen!");
                            return 0;
                        }
                    } else if (weaponid == 33 || weaponid == 34) {
                        SendClientMessage(playerid, COLOR_RED, "[GF]{FFFFFF} Du darfst in einem Aktiven Gangfight nicht Snipen!");
                        return 0;
                    }
                }
            }
        }
    }
    if (hittype == BULLET_HIT_TYPE_PLAYER && IsPlayerConnected(hitid)) { // Bizfight
		if(HasBizfight(Spieler[playerid][pFraktion])) {
			new b = GetBizfightID(Spieler[playerid][pFraktion]);
			if(GetPlayerVirtualWorld(playerid) == Bizfight[b][BF_VW] && GetPlayerVirtualWorld(hitid) == Bizfight[b][BF_VW]) {
				if(!(weaponid == 24 || weaponid == 25)) {
                    SendClientMessage(playerid, COLOR_RED, "[BIZFIGHT]{FFFFFF} Du darfst im Bizfight nur Deagle oder Shotgun nutzen!");
                    return 0;
				}
			}
		}
	}
    if (!((22 <= weaponid <= 34) || weaponid == 38) && Spieler[playerid][pAdmin] < 5) {
        SendClientMessage(playerid, COLOR_RED, "Gebannt vom Server-System, Grund: Erkannter Player-Crasher");
        Ban(playerid);
    }

    // Anti Wide Shot Message
    /*if (s_WeaponRange[weaponid] == 0.0)
        return 1;*/

    new Float:fOriginX, Float:fOriginY, Float:fOriginZ;
    GetPlayerLastShotVectors(playerid, fOriginX, fOriginY, fOriginZ, fX, fY, fZ);
    new Float:vectorSize = VectorSize(fOriginX - fX, fOriginY - fY, fOriginZ - fZ);

    /*if (vectorSize > s_WeaponRange[weaponid]) {
        //new string[128], weaponName[24];
        //GetWeaponNameEx(weaponid, weaponName, sizeof(weaponName));
        //format(string, sizeof(string), "[AC] Spieler %s (%d) hat einen Weitschussbug. (Waffe: %s, Schussdistanz: %.1f, Max. Distanz der Waffe: %.1f)", GetName(playerid), playerid, vectorSize, s_WeaponRange[weaponid]);
        //SendAdminMessage(COLOR_RED, string);
        return 0;
    }*/

    // LSPD Tazer
    if (PlayerIsPaintballing[playerid] || !Spieler[playerid][pDuty]) return 1;

    new pKeys, kUpdown, kLeftright;
    GetPlayerKeys(playerid, pKeys, kUpdown, kLeftright);
    
    if (weaponid == WEAPON_SILENCED){
        if (!(Spieler[playerid][pFraktion] == 1 || Spieler[playerid][pFraktion] == 2 || Spieler[playerid][pFraktion] == 16 || Spieler[playerid][pFraktion] == 5 || Spieler[playerid][pFraktion] == 18 || !(Spieler[playerid][pAdmin] < 5))) return 1;
        if(Spieler[hitid][pAdminDienst])return 0;
        if (TazerTime[playerid] == 0) return 0;
        if(IsPlayerAFK(hitid) || IsAFK[playerid]) return 0;
        if(IsPlayerExecutive(hitid)) return 0;
        if(Spieler[hitid][pTot]) return 0;

        if (hittype == BULLET_HIT_TYPE_PLAYER && IsPlayerConnected(hitid)) {
            new string[128];

            if (Tazered[hitid] == 1) return 0;
            if (vectorSize > 8.0) {
                SendClientMessage(playerid, COLOR_RED, "Du bist zu weit weg, der Tazer hat verfehlt.");
                return 0;
            }
            if (IsABike(GetVehicleModel(GetPlayerVehicleID(hitid)))) {
                return 0;
            }
            FreezePlayer(hitid);
            TazerTime[playerid] = 0;
            TextDrawShowForPlayer(hitid, TazerBox);
            ClearAnimations(hitid);
            ApplyAnimation(hitid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0,0, 1); // Dieing of Crack
            SetTimerEx("TazerReady", 5000, 0, "i", playerid);
            Tazered[hitid] = 1;
            unfreezewait[hitid] = SetTimerEx("UnFreeze", 15000, 0, "i", hitid);
            if(Spieler[hitid][bMaske])
            {
                format(string, sizeof(string), "schiesst mit seinem Tazer auf Unbekannt.");
            }
            else
            {
                format(string, sizeof(string), "schiesst mit seinem Tazer auf %s.", GetName(hitid));
            }
            cmd_me(playerid, string);
        }

        return 0;
    }

    if (weaponid == WEAPON_DEAGLE && Spieler[playerid][pFraktion] == 5 && Spieler[playerid][pDuty]) return 0;

    return 1;
}

forward unfreezeWertpap(playerid);
public unfreezeWertpap(playerid){
    UnFreeze(playerid);
    new belohnung = RandomEx(20000, 80000);
    if(GetPlayerVirtualWorld(playerid) == VW_BANKINTERIORLS){
        SCMFormatted(playerid, COLOR_GREEN, "[BANKRAUB] {FFFFFF}Du hast Wertpapiere im Wert von $%i gefunden!", belohnung);
        GivePlayerCash(playerid, belohnung);
    }
    ClearAnimations(playerid);
}



forward c4explodieren(playerid);
public c4explodieren(playerid){
    DestroyObject(c4id);
    CreateExplosion(c4x, c4y, c4z, 0, 10.0);
    c4x = 0.0;
    c4y = 0.0;
    c4z = 0.0;
    isC4 = false;
    new belohnung = RandomEx(80000, 150000);
    if(GetPlayerVirtualWorld(playerid) == VW_BANKINTERIORLS){
        SCMFormatted(playerid, COLOR_GREEN, "[BANKRAUB] Du hast aus den Tresoren $%i erhalten!", belohnung);
        GivePlayerCash(playerid, belohnung);
    }
}

public OnPlayerShootDynamicObject(playerid, weaponid, STREAMER_TAG_OBJECT:objectid, Float:x, Float:y, Float:z) {
    // Calls OnPlayerWeaponShot
    for(new i = 0; i < 6; i++){
        if(HP_bankInteriorLs[i] == objectid){
            if(HP_Tresor[i] <= 0) return 1;
            if(g_iBankraubStatus != Bankraub_Aktiv) return SendClientMessage(playerid, COLOR_RED, "Aktuell läuft kein Bankraub!");
            HP_Tresor[i] -= random(30);
            new String[128];
            format(String, sizeof(String), "{FFFFFF}- Kleiner Tresor -\n\n{CB2720}Verschlossen\nHP: %i", HP_Tresor[i]);
            Update3DTextLabelText(Label_HP_bankInteriorLs[i], 0x008080FF, String);

            if(HP_Tresor[i] <= 0){
                new belohnung = RandomEx(20000, 80000);
                SCMFormatted(playerid, COLOR_GREEN, "[BANKRAUB] {FFFFFF}Du hast einen kleinen Tresor zerstört! (Belohnung: $%i)", belohnung);
                GivePlayerCash(playerid, belohnung);
                Update3DTextLabelText(Label_HP_bankInteriorLs[i], 0x008080FF, "{FFFFFF}- Kleiner Tresor -\n\n{6CD818}Zerstört");
                if(HP_bankInteriorLs[i] == HP_bankInteriorLs[0]){
                    DestroyDynamicObject(HP_bankInteriorLs[i]);
                    HP_bankInteriorLs[0] = CreateDynamicObject(1829, 1686.8259, -1031.4426, 1333.7956, 0.0000, 0.0000, -90.0000, VW_BANKINTERIORLS);//Tresor Auf
                }else if(HP_bankInteriorLs[i] == HP_bankInteriorLs[1]){
                    DestroyDynamicObject(HP_bankInteriorLs[i]);
                    HP_bankInteriorLs[1] = CreateDynamicObject(1829, 1689.5681, -1019.7673, 1340.2413, 0.0000, 0.0000, 0.0000, VW_BANKINTERIORLS);//Tresor Auf
                }else if(HP_bankInteriorLs[i] == HP_bankInteriorLs[2]){
                    DestroyDynamicObject(HP_bankInteriorLs[i]);
                    HP_bankInteriorLs[2] = CreateDynamicObject(1829, 1684.2133, -1035.0657, 1333.7956, 0.0000, 0.0000, 180.0000, VW_BANKINTERIORLS);//Tresor Auf
                }else if(HP_bankInteriorLs[i] == HP_bankInteriorLs[3]){
                    DestroyDynamicObject(HP_bankInteriorLs[i]);
                    HP_bankInteriorLs[3] = CreateDynamicObject(1829, 1695.2431, -1019.7673, 1340.2413, 0.0000, 0.0000, 0.0000, VW_BANKINTERIORLS);//Tresor Auf
                }else if(HP_bankInteriorLs[i] == HP_bankInteriorLs[4]){
                    DestroyDynamicObject(HP_bankInteriorLs[i]);
                    HP_bankInteriorLs[4] = CreateDynamicObject(1829, 1691.2214, -1035.0546, 1333.7956, 0.0000, 0.0000, 180.0000, VW_BANKINTERIORLS);//Tresor Auf
                }else if(HP_bankInteriorLs[i] == HP_bankInteriorLs[5]){
                    DestroyDynamicObject(HP_bankInteriorLs[i]);
                    HP_bankInteriorLs[5] = CreateDynamicObject(1829, 1688.9193, -1030.3500, 1333.7956, 0.0000, 0.0000, 90.0000, VW_BANKINTERIORLS);//Tresor Auf
                }

                new breakingNewsMessage[128];
                Spieler[playerid][pWanteds] += 2;
                SendClientMessage(playerid, COLOR_DARKRED, "Du hast ein Verbrechen begangen! (Zerstören von Tresoren) Reporter: Polizeizentrale");
                format(breakingNewsMessage, sizeof(breakingNewsMessage), "Dein Aktuelles Wanted Level: %d", Spieler[playerid][pWanteds]);
                SendClientMessage(playerid, COLOR_YELLOW, breakingNewsMessage);
                format(breakingNewsMessage, sizeof(breakingNewsMessage), "HQ: %s (ID: %d) hat ein Verbrechen begangen: Zerstören von Tresoren, over.", GetName(playerid), playerid);
                SendFraktionMessage(1, COLOR_LIGHTRED, breakingNewsMessage);
                SendFraktionMessage(2, COLOR_LIGHTRED, breakingNewsMessage);
                SendFraktionMessage(16, COLOR_LIGHTRED, breakingNewsMessage);
                SendFraktionMessage(18, COLOR_LIGHTRED, breakingNewsMessage);
                SendFraktionMessage(22, COLOR_LIGHTRED, breakingNewsMessage);
                format(breakingNewsMessage, sizeof(breakingNewsMessage), "HQ: Reporter: Polizeizentrale, Aktuelles Wantedlevel: %d, over", Spieler[i][pWanteds]);
                SendFraktionMessage(1, COLOR_LIGHTRED, breakingNewsMessage);
                SendFraktionMessage(2, COLOR_LIGHTRED, breakingNewsMessage);
                SendFraktionMessage(16, COLOR_LIGHTRED, breakingNewsMessage);
                SendFraktionMessage(18, COLOR_LIGHTRED, breakingNewsMessage);
                SendFraktionMessage(22, COLOR_LIGHTRED, breakingNewsMessage);
            }
        }
    }
    if(objectid == CASINOROB_TRESOR[0]) {
        if(CasinoTresorLeben > 0) {
            if(CasinoRobStatus != Bankraub_Aktiv) return SendClientMessage(playerid, COLOR_YELLOW, "[Casino-Raub]{8E2E1B} Aktuell läuft kein Casino-Raub!");
            if(CasinoTresorLeben <= 0) return Update3DTextLabelText(Label_Casino[0], 0x008080FF, "{FFFFFF}- Casino Tresor -\n\n{6CD818}Zerstört"), 1;
            if(CasinoRobBild == false) return 1;

            CasinoTresorLeben -= random(45);
            new String[128];
            format(String, sizeof(String), "{FFFFFF}- Casino Tresor -\n\n{CB2720}Verschlossen\nHP: %i", CasinoTresorLeben);
            UpdateDynamic3DTextLabelText(Label_Casino[0], 0x008080FF, String);

            if(CasinoTresorLeben <= 0){
                new tresorbeute;
                CasinoRob_Tresor_Status = true;
                tresorbeute = RandomEx(50000,100000);
                CasinoRob_Beute += tresorbeute;
                SCMFormatted(playerid,COLOR_YELLOW,"[Casino-Raub]{007433} Du hast den Tresor zerstört und %s$ erbeutet.",AddDelimiters(tresorbeute));
                DestroyDynamicObject(CASINOROB_TRESOR[0]);
                CASINOROB_TRESOR[0] = CreateDynamicObject(1829, 1494.256835, -1522.610107, 1001.687805, 0.0, 0.0, 180.0, VW_CASINOROB);
                SendRoundMessage(1494.256835, -1522.610107, 1001.687805, COLOR_YELLOW,"[Casino-Raub]{007433} Brecht die Hinter Tür auf um früher zu entkommen.");
                Update3DTextLabelText(Label_Casino[0], 0x008080FF, "{FFFFFF}- Casino Tresor -\n\n{6CD818}Zerstört");
            }
        }
    }
    if(objectid == CASINOROB_KEYPAD[0] || objectid == CASINOROB_KEYPAD[1]) {
        if(CasinoRobStatus != Bankraub_Aktiv) return SendClientMessage(playerid, COLOR_YELLOW, "[Casino-Raub]{8E2E1B} Aktuell läuft kein Casino-Raub!");
        if(GetRobPlayers() > 0 && CasinoRob[playerid]) { 
            MoveDynamicObject(CASINOROB_KEYPAD[0], 1512.4006, -1511.7517, 1000.0152, 5.0, -78.1, 7.6, 78.2);
            MoveDynamicObject(CASINOROB_DOOR[0], 1512.1502, -1513.8281, 1000.0145, 3.0, 0.0, 0.0, -18.3000);
            MoveDynamicObject(CASINOROB_DOOR[3], 1502.5474, -1521.4482, 999.9843, 3.0 ,0.0, 0.0, -9.0);
        }
    }
    return 1;
}

public OnPlayerFloodControl(playerid, iCount, iTimeSpan) {
    if (iCount > 3 && iTimeSpan < 10000) Ban(playerid);
    return 1;
}
/*
forward AntiDriveBy();
public AntiDriveBy() {
    new
        String[128],
        weapon;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( !IsPlayerNPC(i) ) {
                weapon = GetPlayerWeapon(i);
                if( IsPlayerDrivebying(i) ) {
                    if( !(weapon == 29 || weapon == 31) ) {
                        format(String,sizeof(String),"Gun Reset %d",weapon);
                        SendClientMessage(i,COLOR_YELLOW,String);
                        SetPlayerArmedWeapon(i,0);
                    }
                }
            }
        }
    }
    return 1;
}

public OnPlayerStartDriveby(playerid) {
    new
        weapon,
        String[128];
    weapon = GetPlayerWeapon(playerid);
    format(String,sizeof(String),"OnPlayerStartDriveby(%d) Weapon: %d",playerid,weapon);
    SendClientMessage(playerid,COLOR_YELLOW,String);
    if( !(weapon == 29 || weapon == 31) ) {
        SendClientMessage(playerid,COLOR_YELLOW,"Gun Reset");
        SetPlayerArmedWeapon(playerid,0);
    }
    return 1;
}
public OnPlayerStopDriveby(playerid) {
    //SendClientMessage(playerid,COLOR_YELLOW,"OnPlayerStopDriveby");
    return 1;
}*/

forward AimbotTest_Reset(playerid,giveid,Float:x,Float:y,Float:z,Float:fa);
public AimbotTest_Reset(playerid,giveid,Float:x,Float:y,Float:z,Float:fa) {
    new
        Float:facingangle,
        Float:differenz,
        String[128];
    GetPlayerFacingAngle(giveid, Spieler[playerid][pAimbotTestValues][1] );
    SendClientMessage(playerid,COLOR_WHITE,"Aimbot-Test Daten");
    AimbotLog("Aimbot-Test Daten");
    format(String,sizeof(String),"Von: %s  An: %s",GetName(playerid),GetName(giveid));
    AimbotLog(String);
    SendClientMessage(playerid,COLOR_WHITE,String);
    format(String,sizeof(String),"Ausrichtung Anfang: %.2f  Ausrichtung Ende: %.2f",Spieler[playerid][pAimbotTestValues][0],Spieler[playerid][pAimbotTestValues][1]);
    AimbotLog(String);
    SendClientMessage(playerid,COLOR_WHITE,String);

    facingangle = Spieler[playerid][pAimbotTestValues][1] + 180.0;
    if( facingangle > 360.0 ) {
        facingangle -= 360.0;
    }
    differenz = facingangle - Spieler[playerid][pAimbotTestValues][0];
    differenz = floatabs(differenz);
    if( 0 <= differenz <= 25.0 ) {// 50° als range
        format(String,sizeof(String),"Tendenz: Wahrscheinlich Aimbot ");
    }
    else {
        format(String,sizeof(String),"Tendenz: Kein Aimbot");
    }
    AimbotLog(String);
    SendClientMessage(playerid,COLOR_WHITE,String);

    SetPlayerPos(playerid, x,y,z);
    SetPlayerFacingAngle( playerid, fa );
    SetCameraBehindPlayer(playerid);
    return 1;
}

stock AimbotLog(text[])
{
    new File:LogFile, jahr, monat, tag, stunde, minute, sekunde, string[128], path[64];
    getdate(jahr, monat, tag);
    gettime(stunde, minute, sekunde);
    format(path, sizeof(path), "/Logs/AimbotLog/%02d-%02d-%d.txt", tag, monat, jahr);
    LogFile = fopen(path, io_append);
    format(string, sizeof(string), "[Aimbot] [%02d:%02d:%02d] - %s\r\n", stunde, minute, sekunde, text);
    fwrite(LogFile, string);
    fclose(LogFile);
    return 1;
}






stock IsPoliceVehicleAllowed(pfraktion,vfraktion) {
    if( vfraktion == 1 || vfraktion == 2 || vfraktion == 16 ) {
        if( pfraktion == 1 || pfraktion == 2 || pfraktion == 16 ) {
            return 1;
        }
    }
    return 0;
}



forward FlasherFunc();
public FlasherFunc() {
    new panelsx,doorsx,lightsx,tiresx;
    for (new i = 1; i<GetVehiclePoolSize(); i++)
    {
        if (Flasher[i] == 1)
        {
            GetVehicleDamageStatus(i,panelsx,doorsx,lightsx,tiresx);
            if (FlasherState[i] == 1)
            {
                UpdateVehicleDamageStatus(i, panelsx, doorsx, 4, tiresx);
                FlasherState[i] = 0;
            }
            else
            {
                UpdateVehicleDamageStatus(i, panelsx, doorsx, 1, tiresx);
                FlasherState[i] = 1;
            }
        }
    }
    return 1;
}



stock GetOnlineExecutive() {
    new
        c;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i)) {
            if( IsPlayerExecutive(i) ) {
                c++;
            }
        }
    }
    return c;
}

stock RandomEx(min, max) //Y_Less
{
    return random(max - min) + min;
}

stock Tankstelle_Ueberfall_Stop(playerid,tankstelle,reason) {
    new
        String[128];
    KillTimer( Spieler[playerid][tTankeUeberfall] );
    Spieler[playerid][tTankeUnix] = 0;
    if( tankstelle == -1 ) {
        for(new i ; i < MAX_TANKEN ; i++) {
            if( Tanke[i][tRobberID] == playerid ) {
                tankstelle = i;
            }
        }
    }
    Tanke[tankstelle][tUnixRob] = gettime() + 30*60;
    Tanke[tankstelle][tRobberID] = INVALID_PLAYER_ID;
    if( reason == 0 ) { // Distanz
        if( Tanke[tankstelle][tAutomatischerNotruf] == true ) {
            format(String,sizeof(String),"Tankstellen-Überfall abgebrochen - Grund: Flucht , Spieler: %s",GetName(playerid) );
            SendExecutiveMessage(COLOR_YELLOW,String);
        }
        if( Tanke[tankstelle][tVideoueberwachung] == true ) {
            format(String,sizeof(String),"Tankstellen-Überfall abgebrochen - Grund: Flucht");
            new besitzerid;
            sscanf( Tanke[tankstelle][tBesitzer], "u",besitzerid);
            if( IsPlayerConnected(besitzerid) ) {
                SendClientMessage(besitzerid,COLOR_YELLOW,String);
            }
        }
        SendClientMessage(playerid,COLOR_RED,"Tankstellen-Überfall abgebrochen. Du hast dich zu weit entfernt.");
    }
    else if( reason == 1 ) { // Erfolgreich
        new besitzerid;
        sscanf( Tanke[tankstelle][tBesitzer], "u",besitzerid);
        if( Tanke[tankstelle][tKasse] < 10000 ) {
            SendClientMessage(playerid,COLOR_ORANGE,"Der Überfall war erfolgreich, jedoch besitzt die Tankstelle kein Geld! Du konntest nichts erbeuten.");
            if( IsPlayerConnected(besitzerid) ) {
                SendClientMessage(besitzerid,COLOR_ORANGE,"Deine Tankstelle wurde überfallen! Erbeutetes Geld: Keines");
            }
            return 1;
        }
        else {
            new beute, beuteString[64];
            beute = RandomEx( 10000 , (Tanke[tankstelle][tKasse] > 50000 ? 50000 : Tanke[tankstelle][tKasse]));
            beuteString = AddDelimiters(beute);
            format(String,sizeof(String),"Du hast die Tankstelle erfolgreich überfallen! Erbeutetes Geld: $%s", beuteString);
            SendClientMessage(playerid,COLOR_GREEN,String);
            if( IsPlayerConnected(besitzerid) ) {
                format(String,sizeof(String),"Deine Tankstelle wurde überfallen! Erbeutetes Geld: $%s", beuteString);
                SendClientMessage(besitzerid,COLOR_RED,String);
            }
            if( Tanke[tankstelle][tAutomatischerNotruf] == true ) {
                format(String,sizeof(String),"Die Tankstelle wurde von %s erfolgreich ausgeraubt! Erbeutetes Geld: $%s",GetName(playerid), beuteString);
                SendExecutiveMessage(COLOR_RED,String);
            }
            Tanke[tankstelle][tKasse] -= beute;
            GivePlayerCash(playerid,beute);
        }
    }
    else if( reason == 2 ) { // Disconnect
        /*
        if( Tanke[tankstelle][tAutomatischerNotruf] == true ) {
            format(String,sizeof(String),"Tankstellen-Überfall abgebrochen - Grund: Server verlassen , Spieler: %s",GetName(playerid) );
            SendExecutiveMessage(COLOR_YELLOW,String);
        }
        if( Tanke[tankstelle][tVideoueberwachung] == true ) {
            format(String,sizeof(String),"Tankstellen-Überfall abgebrochen - Grund: Server verlassen");
            new besitzerid;
            sscanf( Tanke[tankstelle][tBesitzer], "u",besitzerid);
            if( IsPlayerConnected(besitzerid) ) {
                SendClientMessage(besitzerid,COLOR_YELLOW,String);
            }
        }
        */
    }
    else if( reason == 3 ) { // Death
        /*
        if( Tanke[tankstelle][tAutomatischerNotruf] == true ) {
            format(String,sizeof(String),"Tankstellen-Überfall abgebrochen - Grund: Täter gestorben , Spieler: %s",GetName(playerid) );
            SendExecutiveMessage(COLOR_YELLOW,String);
        }
        if( Tanke[tankstelle][tVideoueberwachung] == true ) {
            format(String,sizeof(String),"Tankstellen-Überfall abgebrochen - Grund: Täter gestorben");
            new besitzerid;
            sscanf( Tanke[tankstelle][tBesitzer], "u",besitzerid);
            if( IsPlayerConnected(besitzerid) ) {
                SendClientMessage(besitzerid,COLOR_YELLOW,String);
            }
        }
        */
        SendClientMessage(playerid,COLOR_RED,"Tankstellen-Überfall abgebrochen. Du bist leider gestorben");
    }
    return 1;

}
forward Tankstelle_Ueberfall(playerid,tankstelle);
public Tankstelle_Ueberfall(playerid,tankstelle) {
    if( IsPlayerAtTanke(playerid,8.0) != tankstelle ) {
        Tankstelle_Ueberfall_Stop(playerid,tankstelle,0);
        return 0;
    }
    new
        time = gettime();
    if( Spieler[playerid][tTankeUnix] <= time ) {
        // Zeit rum
        Tankstelle_Ueberfall_Stop(playerid,tankstelle,1);
    }
    return 1;
}


stock GetErpresserCount(fraktionid) {
    new
        c;
    for(new i=0;i<MAX_BIZES;i++) {
        if( Biz[i][bErpresserFraktion] == fraktionid ) {
            c++;
        }
    }
    for(new i=0;i<MAX_TANKEN;i++) {
        if( Tanke[i][tErpresserFraktion] == fraktionid ) {
            c++;
        }
    }
    return c;
}
stock udb_hash(buf[]) {
    new length=strlen(buf);
    new s1 = 1;
    new s2 = 0;
    new n;
    for (n=0; n<length; n++)
    {
       s1 = (s1 + buf[n]) % 65521;
       s2 = (s2 + s1)     % 65521;
    }
    return (s2 << 16) + s1;
}



stock ConvertSec(secs,&sec,&min,&hour,&days = 0) {
    new rest;
    sec = 0;
    min = 0;
    hour = 0;
    days = (secs / (60*60*24));
    rest = (secs % (60*60*24));
    hour = (rest / (60*60));
    min  = (rest / 60);
    sec = (rest % 60);
    return 1;
}


stock GetPlayerLawyerSkillValue(playerid) {
    new
        value,
        points = Spieler[playerid][pLawyerPoints];
    for(new i ; i < sizeof(g_LawyerSkills) ; i++) {
        if( points >= g_LawyerSkills[i][LS_iJobs] ) {
            value = g_LawyerSkills[i][LS_iJailTime];
        }
    }
    return value;
}

stock GetPlayerLawyerLevel(playerid) {
    new
        level,
        points = Spieler[playerid][pLawyerPoints];
    for(new i ; i < sizeof(g_LawyerSkills) ; i++) {
        if( points >= g_LawyerSkills[i][LS_iJobs] ) {
            level = i + 1;
        }
    }
    return level;
}

stock GetPlayerGangFightSkillLevel(playerid) {
    new
        value,
        points = Spieler[playerid][pKillsGangFight];
    for(new i ; i < sizeof(g_GangFightSkills) ; i++) {
        if( points >= g_GangFightSkills[i][GFS_iKills] ) {
            value = i + 1;
        }
    }
    return value;
}


stock GetPlayerLawyerStateShare(playerid) {
    new
        share,
        points = Spieler[playerid][pLawyerPoints];
    for(new i ; i < sizeof(g_LawyerSkills) ; i++) {
        if( points >= g_LawyerSkills[i][LS_iJobs] ) {
            share = g_LawyerSkills[i][LS_iStateShare];
        }
    }
    return share;
}



stock LoadGangZones() {
    mysql_oquery("SELECT * FROM `gangfight`",THREAD_LOADGANGZONES,INVALID_PLAYER_ID,gSQL);
    tdGangZoneHeader = TextDrawCreate(469.000000, 169.000000, "Gangzone");
    TextDrawBackgroundColor(tdGangZoneHeader, 255);
    TextDrawFont(tdGangZoneHeader, 1);
    TextDrawLetterSize(tdGangZoneHeader, 0.549999, 1.900000);
    TextDrawColor(tdGangZoneHeader, -1);
    TextDrawSetOutline(tdGangZoneHeader, 0);
    TextDrawSetProportional(tdGangZoneHeader, 1);
    TextDrawSetShadow(tdGangZoneHeader, 1);
    TextDrawSetString(tdGangZoneHeader,"Gangzone");
    return 1;
}
stock SaveGangZones() {
    new
        query[128];
    for(new i ; i < iGangZones ; i++) {
        format(query,sizeof(query),"UPDATE `gangfight` SET \
            `owner` = %d, \
            `timeout` = %d, \
            `gbestand` = %d, \
            `gupgrade` = %d \
            WHERE `id` = %d",
            g_GangZone[i][GZ_iOwner],
            g_GangZone[i][GZ_iTimeout],
            g_GangZone[i][GZ_igbestand],
            g_GangZone[i][GZ_igupgrade],
            g_GangZone[i][GZ_iID]);
        mysql_oquery( query ,THREAD_SAVEGANGZONES,i,gSQL);
    }
    return 1;
}

forward GangZone_Pulse();
public GangZone_Pulse() {
    //print("GangZone_Pulse");
    new
        time,
        String[200],
        color;
    time = gettime();
    if(kampfzone[2] < time && kampfzone[1])
	{
	    new highsocre;
	    for(new i;i<MAX_FACTIONS;i++)
	    {
			if(kampfzonePoints[i] > kampfzonePoints[highsocre])
			{
			    highsocre = i;
			}
			kampfzonePoints[i] = 0;
	    }
	    //~~~~
	    new string[128];
	    format(string,sizeof(string),"[KAMPFGEBIET]: "COLOR_HEX_WHITE"Die Gewinner des heutigen Kampfes lautet: "COLOR_HEX_GREEN"%s",factionNames[highsocre]);
	    SendClientMessageToAll(COLOR_GREEN,string);

	    switch(highsocre)
	    {
		    case 6:
		    {
		        Kasse[Grove] += 500000;
		    }
		    case 7:
		    {
		        Kasse[Ballas] += 500000;
		    }
		    case 10:
		    {
		        Kasse[Yakuza] += 500000;
		    }
			case 11:
			{
			    Kasse[Aztecas] += 500000;
			}
			case 12:
			{
			    Kasse[LCN] += 500000;
			}
			case 13:
			{
			    Kasse[Vagos] += 500000;
			}
			case 20:
			{
			    Kasse[OutlawzK] += 500000;
			}
			case 21:
			{
			    Kasse[ndgradethaK] += 500000;
			}
			default:
			{

			}
		}
	    g_fraktion[highsocre][Fr_FSDrogen] += 1500;
     	g_fraktion[highsocre][Fr_FSWaffenteile] += 50000;
	    g_fraktion[highsocre][Fr_FSSpice] += 750;
	    //~~~
		GangZoneHideForAll(kampfzone[0]);
	    kampfzone[1] = false;
	}
    for(new i ; i < iGangZones ; i++) {
        color = GetZoneColorOfFaction(g_GangZone[i][GZ_iOwner]);
        GangZoneShowForAll( g_GangZone[i][GZ_iGangZoneID], color );
        if( g_GangZone[i][GZ_iGangWarEnd] > time ) {
            if( g_GangZone[i][GZ_iStatus] == 0 ) {
                color = GetZoneColorOfFaction(g_GangZone[i][GZ_iOwner]);
                GangZoneShowForAll( g_GangZone[i][GZ_iGangZoneID], color );
            }
            else if( g_GangZone[i][GZ_iStatus] == 1 ) {
                //printf("GangZone %d - Attacker %s %d Pkt vs Owner %s %d Pkt",i, GetFactionNameOfFaction(g_GangZone[i][GZ_iAttacker]) , g_GangZone[i][GZ_iAttackerScore],GetFactionNameOfFaction(g_GangZone[i][GZ_iOwner]),g_GangZone[i][GZ_iOwnerScore] );
                color = GetZoneColorOfFaction( g_GangZone[i][GZ_iAttacker] );
                GangZoneFlashForAll( g_GangZone[i][GZ_iGangZoneID], color );
                // Im Gangfight
                if( g_GangZone[i][GZ_iFlaggeEnd] != 0 ) {
                    // Flaggeneroberung läuft
                    new
                        giveid;
                    giveid = g_GangZone[i][GZ_iFlaggePlayer];
                    if( !IsPlayerConnected(giveid)) {
                        g_GangZone[i][GZ_iFlaggeEnd] = 0;
                        g_GangZone[i][GZ_iFlaggePlayer] = INVALID_PLAYER_ID;
                    }
                    if( !IsPlayerInRangeOfPoint( giveid , 7.0 , g_GangZone[i][GZ_fIconX],g_GangZone[i][GZ_fIconY],g_GangZone[i][GZ_fIconZ] )) {
                        g_GangZone[i][GZ_iFlaggeEnd] = 0;
                        g_GangZone[i][GZ_iFlaggePlayer] = INVALID_PLAYER_ID;
                        SendClientMessage(giveid,COLOR_ORANGE,"Du hast dich zu weit von der Flagge entfernt.");
                        format(String,sizeof(String),"Die Eroberung der Flagge wurde abgebrochen, da sich %s zu weit davon entfernt hat.",GetName(giveid));
                        SendFraktionMessage( g_GangZone[i][GZ_iOwner] , COLOR_YELLOW, String );
                        SendFraktionMessage( g_GangZone[i][GZ_iAttacker] , COLOR_YELLOW, String );
                    }
                    if( time >= g_GangZone[i][GZ_iFlaggeEnd] && g_GangZone[i][GZ_iFlaggeEnd] != 0 ) {
                        // 60 Sekunden bei Flaggeneroberung abgelaufen
                        new position[16];
                        if( Spieler[giveid][pFraktion] == g_GangZone[i][GZ_iOwner] ) {
                            position = "Verteidiger";
                            g_GangZone[i][GZ_iFlagge] = 0;
                            g_GangZone[i][GZ_iOwnerScore] += 2;
                        }
                        else if( Spieler[giveid][pFraktion] == g_GangZone[i][GZ_iAttacker] ) {
                            position = "Angreifer";
                            g_GangZone[i][GZ_iFlagge] = 1;
                            g_GangZone[i][GZ_iAttackerScore] += 2;
                        }
                        g_GangZone[i][GZ_iFlaggeEnd] = 0;
                        g_GangZone[i][GZ_iFlaggePlayer] = INVALID_PLAYER_ID;
                        format(String,sizeof(String),"->GANGFIGHT<- {00FF00}Die Flagge wurde erobert durch %s ( %s: %s ) (2P.)",GetName(giveid),position,GetFactionNameOfFaction(Spieler[giveid][pFraktion]));
                        SendFraktionMessage( g_GangZone[i][GZ_iOwner] ,COLOR_YELLOW,String);
                        SendFraktionMessage( g_GangZone[i][GZ_iAttacker] ,COLOR_YELLOW,String);
                    }
                }
                if( g_GangZone[i][GZ_iCounter] <= time ) {
                    if( g_GangZone[i][GZ_iFlagge] == 0 ) {
                        g_GangZone[i][GZ_iOwnerScore]++;
                    }
                    else if( g_GangZone[i][GZ_iFlagge] == 1 ) {
                        g_GangZone[i][GZ_iAttackerScore]++;
                    }
                    g_GangZone[i][GZ_iCounter] = time + 60;
                }
                UpdateGangFightInfo(i);
            }
        }
        else {
            // Gangwar Zeit agelaufen
            if( g_GangZone[i][GZ_iStatus] == 1 ) {
                new
                    #if defined NEUE_WIRTSCHAFT
                        betrag = 25000,
                    #else
                        betrag = 50000,
                    #endif
                    score,
                    winner,
                    loser;
                GangZoneStopFlashForAll( g_GangZone[i][GZ_iGangZoneID] );

                if( g_GangZone[i][GZ_iAttackerScore] > g_GangZone[i][GZ_iOwnerScore]) {
                    winner = g_GangZone[i][GZ_iAttacker];
                    loser = g_GangZone[i][GZ_iOwner];
                    score = g_GangZone[i][GZ_iAttackerScore];
                    g_GangZone[i][GZ_iOwner] = g_GangZone[i][GZ_iAttacker];
                }
                else if( g_GangZone[i][GZ_iAttackerScore] <= g_GangZone[i][GZ_iOwnerScore]) {
                    loser = g_GangZone[i][GZ_iAttacker];
                    winner = g_GangZone[i][GZ_iOwner];
                    score = g_GangZone[i][GZ_iOwnerScore];
                }
                //printf("Attacker %d Owner %d",g_GangZone[i][GZ_iAttacker],g_GangZone[i][GZ_iOwner]);

                g_GangZone[i][GZ_iOwnerScore] = 0;
                g_GangZone[i][GZ_iAttackerScore] = 0;
                g_GangZone[i][GZ_iAttacker] = 0;
                g_GangZone[i][GZ_iGangWarEnd] = 0;
                g_GangZone[i][GZ_iTimeout] = gettime() + 2*60*60;
                g_GangZone[i][GZ_iStatus] = 0;
                g_GangZone[i][GZ_iFlaggeEnd] = 0;
                g_GangZone[i][GZ_iFlaggePlayer] = INVALID_PLAYER_ID;
                g_GangZone[i][GZ_iFlagge] = 0;

                for(new j ; j < MAX_PLAYERS ; j++) {
                    if( IsPlayerConnected(j)) {
                        if( IsPlayerInDynamicArea(i,g_GangZone[i][GZ_iAreaID]) &&
                            (Spieler[j][pFraktion] == winner || Spieler[j][pFraktion] == loser)) {
                            TextDrawHideForPlayer( j,tdGangZoneHeader );
                            TextDrawHideForPlayer( j,g_GangZone[i][GZ_tdInfo] );
                        }
                    }
                }
                color = GetZoneColorOfFaction(g_GangZone[i][GZ_iOwner]);
                GangZoneShowForAll( g_GangZone[i][GZ_iGangZoneID], color );

                if(winner == 6)Kasse[Grove] += betrag;
                else if(winner == 7) Kasse[Ballas] += betrag;
                else if(winner == 10) Kasse[Yakuza] += betrag;
                else if(winner == 11) Kasse[Aztecas] += betrag;
                else if(winner == 12) Kasse[LCN] += betrag;
                else if(winner == 13) Kasse[Vagos] += betrag;
                else if(winner == 14) Kasse[Hitman] += betrag;
                else if(winner == 20) Kasse[OutlawzK] += betrag;
                else if(winner == 21) Kasse[ndgradethaK] += betrag;

                if(loser == 6)Kasse[Grove] -= betrag;
                else if(loser == 7) Kasse[Ballas] -= betrag;
                else if(loser == 10) Kasse[Yakuza] -= betrag;
                else if(loser == 11) Kasse[Aztecas] -= betrag;
                else if(loser == 12) Kasse[LCN] -= betrag;
                else if(loser == 13) Kasse[Vagos] -= betrag;
                else if(loser == 14) Kasse[Hitman] -= betrag;
                else if(loser == 20) Kasse[OutlawzK] -= betrag;
                else if(loser == 21) Kasse[ndgradethaK] -= betrag;
                gangfightpause[loser]=gettime()+600;
                gangfightpause[winner]=gettime()+600;

                #if !defined NEUE_WIRTSCHAFT
                    g_fraktion[winner][Fr_FSWaffenteile]+=25000;
                #endif
                new arrayid,teamid[2],c;
                for(new z;z<2;z++)
                {
                    if(gangfightkampffraks[0][z]==winner)
                    {
                        arrayid=0;
                        teamid[0]=z;
                    }
                    else if(gangfightkampffraks[1][z]==winner)
                    {
                        arrayid=1;
                        teamid[0]=z;
                    }
                    else if(gangfightkampffraks[2][z]==winner)
                    {
                        arrayid=2;
                        teamid[0]=z;
                    }
                    else if(gangfightkampffraks[3][z]==winner)
                    {
                        arrayid=3;
                        teamid[0]=z;
                    }
                }
                if(teamid[0]==1)
                {
                    teamid[1]=0;
                }
                else
                {
                    teamid[1]=1;
                }
                new winpot,losepot;
                for(;c<MAX_PLAYERS;c++)
                {
                    if(gangfightwettenppp[c]==winner)
                    {
                        winpot+=gangfightwettenpp[c];
                    }
                }
                losepot=gangfightwettenpot[arrayid]-winpot;
                new gwstring[400];
                format(gwstring,400,
                "Der Pot für den Gangfight zwischen %s und %s beträgt $%s. Es wurden $%s auf %s und $%s auf %s gewettet.",
                GetFactionNameOfFaction(winner),GetFactionNameOfFaction(loser),AddDelimiters(gangfightwettenpot[arrayid]), AddDelimiters(winpot),GetFactionNameOfFaction(winner),AddDelimiters(losepot),GetFactionNameOfFaction(loser));
                SendClientMessageToAll(COLOR_YELLOW,gwstring);
                for(c=0;c<MAX_PLAYERS;c++)
                {
                    if(gangfightwettenppp[c]==winner)
                    {
                        gangfightwettenpot[arrayid]-=gangfightwettenpp[c];
                    }
                }
                for(c=0;c<MAX_PLAYERS;c++)
                {
                    if(gangfightwettenppp[i]==winner)
                    {
                        if(IsPlayerConnected(i))
                        {
                            Spieler[i][pBank] += gangfightwettenpp[i] * 2;
                            new gewinnstr[200];
                            format(gewinnstr,200,"Du hast die Gangfight-Wette gewonnen und deinen Gewinn in Höhe von $%s auf die Bank überwiesen bekommen!", AddDelimiters(gangfightwettenpp[i] * 2));
                            SendClientMessage(i,COLOR_GREEN,gewinnstr);
                        }
                        else
                        {
                            bankchange[i]=-128391;
                            new query[256];
                            format(query,sizeof(query),"SELECT `Bank` FROM `accounts` WHERE `Name` = '%s'",gangfightwettenp[i]);
                            mysql_pquery(query , THREAD_BANKCHANGE , i, gSQL,MySQLThreadOwner);
                            if(bankchange[i]!=-128391)
                            {
                                format(query,sizeof(query),"UPDATE `accounts` SET `Bank` = '%i' WHERE `Name` = '%s'",gangfightwettenpp[i]+bankchange[i],gangfightwettenp[i]);
                                mysql_tquery(gSQL,query);
                            }
                        }
                        gangfightwettenppp[i]=0,gangfightwettenpp[i]=0;
                    }
                    else if(gangfightwettenppp[c]==loser)
                    {
                        gangfightwettenppp[c]=0,gangfightwettenpp[c]=0;
                    }
                }
                gangfightwetten[arrayid]=0,gangfightwettenpot[arrayid]=0,gangfightkampffraks[arrayid][0]=0,gangfightkampffraks[arrayid][1]=0;
                for(new b;b<MAX_PLAYERS;b++)
                {
                    format(gangfightwettenp[b],32,"");
                }
                format(String,sizeof(String),"->GANGFIGHT<- {FFFFFF}Die %s hat den Gangfight mit %dP. gewonnen!",GetFactionNameOfFaction(winner),score);
                SendFraktionMessage(winner,COLOR_YELLOW,String);
                SendFraktionMessage(loser,COLOR_YELLOW,String);

                #if defined NEUE_WIRTSCHAFT
                    format(String,sizeof(String),"->GANGFIGHT<- {00FF00}$25.000 und das Gebiet gehen an die %s.",GetFactionNameOfFaction(winner));
                #else
                    format(String,sizeof(String),"->GANGFIGHT<- {00FF00}$50.000 + 25.000 Waffenteile und das Gebiet gehen an die %s.",GetFactionNameOfFaction(winner));
                #endif

                SendFraktionMessage(winner,COLOR_YELLOW,String);
                SendFraktionMessage(loser,COLOR_YELLOW,String);
                format(String,sizeof(String),"[GANGFIGHT-MELDUNG] {FFFFFF}Die %s haben den Gangfight mit %dP. gegen die %s gewonnen!",GetFactionNameOfFaction(winner),score,GetFactionNameOfFaction(loser));
                SendClientMessageToAll(COLOR_YELLOW, String);
                //
                new team1_killer = GZ_GetBestKiller(winner);
                new team2_killer = GZ_GetBestKiller(loser);
                if( IsPlayerConnected(team1_killer)) {
                    format(String,sizeof(String),"->GANGFIGHT<- %s aus der %s hat mit %d die meisten Kills gemacht.",GetName(team1_killer),GetFactionNameOfFaction(winner),Spieler[team1_killer][pKillsGangFightSession] );
                    SendClientMessageToAll(COLOR_YELLOW, String);
                    /*SendFraktionMessage(winner,COLOR_YELLOW,String);
                    SendFraktionMessage(loser,COLOR_YELLOW,String);*/
                }

                if( IsPlayerConnected(team2_killer)) {
                    format(String,sizeof(String),"%s aus der %s hat mit %d die meisten Kills gemacht.",GetName(team2_killer),GetFactionNameOfFaction(loser),Spieler[team2_killer][pKillsGangFightSession] );
                    SendClientMessageToAll(COLOR_YELLOW, String);
                    /*SendFraktionMessage(winner,COLOR_YELLOW,String);
                    SendFraktionMessage(loser,COLOR_YELLOW,String);*/
                }
                // Spieler[killerid][pKillsGangFightSession]++;
            }
            /*
            else if( g_GangZone[i][GZ_iStatus] == 0 ) {
                format(String,sizeof(String),"~n~~h~~b~Besitzer: ~w~%s~n~",GetFactionNameOfFaction(g_GangZone[i][GZ_iOwner]));
                TextDrawSetString(g_GangZone[i][GZ_tdInfo],String);
            }*/
        }
        KillTimer(AStopTimer);
        if (IsDeagleZone(g_GangZone[i][GZ_iID])) {
            format(String, sizeof(String), "{FFFFFF}[ {1E90FF}GANGFIGHT {FFFFFF}- {1E90FF}Deagle/Shotgun {FFFFFF}]\n{FFFFFF}Besitzer: {%s}%s\n{FFFFFF}Erobern mit: {1E90FF}/Gangfight\n\n{FFFFFF}({1E90FF}%d{FFFFFF})", GetFactionColor(g_GangZone[i][GZ_iOwner]), GetFactionNameOfFaction(g_GangZone[i][GZ_iOwner]), g_GangZone[i][GZ_iID]);
        } else {
            format(String, sizeof(String), "{FFFFFF}[ {1E90FF}GANGFIGHT {FFFFFF}]\n{FFFFFF}Besitzer: {%s}%s\n{FFFFFF}Erobern mit: {1E90FF}/Gangfight\n\n{FFFFFF}({1E90FF}%d{FFFFFF})", GetFactionColor(g_GangZone[i][GZ_iOwner]), GetFactionNameOfFaction(g_GangZone[i][GZ_iOwner]), g_GangZone[i][GZ_iID]);
        }
        UpdateDynamic3DTextLabelText(g_GangZone[i][GZ_t3dLabel], 0x1E90FFFF, String);
    }
    return 1;
}

stock GetFactionOnlinePlayers(fraktion) {
    new
        count;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i)) {
            if( Spieler[i][pFraktion] == fraktion ) {
                count++;
            }
        }
    }
    return count;
}

stock IsGangInFight(fraktion) {
    for(new i ; i < iGangZones ; i++) {
        if( g_GangZone[i][GZ_iStatus] == 1 ) {
            if( g_GangZone[i][GZ_iOwner] == fraktion || g_GangZone[i][GZ_iAttacker] == fraktion) {
                return 1;
            }
        }
    }
    return 0;
}
stock GetGangFight(fraktion) {
    for(new i ; i < iGangZones ; i++) {
        if( g_GangZone[i][GZ_iStatus] == 1 ) {
            if( g_GangZone[i][GZ_iOwner] == fraktion || g_GangZone[i][GZ_iAttacker] == fraktion) {
                return i;
            }
        }
    }
    return -1;
}

stock GetPlayerGangZone(playerid) {
    for(new i ; i < iGangZones ; i++) {
        if( IsPlayerInDynamicArea(playerid, g_GangZone[i][GZ_iAreaID]) ) {
            return i;
        }
    }
    return -1;
}

stock IsDeagleZone(zone) {
    if (zone == 3 || zone == 4 || zone == 7 || zone == 8 || zone == 9 || zone == 10 || zone == 12 || zone == 15 || zone == 19 || zone == 21 || zone == 23 || zone == 25 || zone == 26 || zone == 27 || zone == 28) {
        return 1;
    }
    return 0;
}






stock UpdateGangFightInfo(id) {
    new
        secs_left = g_GangZone[id][GZ_iGangWarEnd] - gettime(),
        sec,
        minute,
        hour,
        String[256],
        flagge[64];
    if( g_GangZone[id][GZ_iFlagge] == 0 ) {
        strcat(flagge, GetFactionNameOfFaction(g_GangZone[id][GZ_iOwner]));
    }
    else if(g_GangZone[id][GZ_iFlagge] == 1 ) {
        strcat(flagge, GetFactionNameOfFaction(g_GangZone[id][GZ_iAttacker]));
    }
    else if(g_GangZone[id][GZ_iFlagge] == -1 ) {
        flagge = "Niemand";
    }
    ConvertSec(secs_left,sec,minute,hour);
    format(String,sizeof(String),"~n~~y~Verteidiger: ~w~%s %dP.~n~~r~Angreifer: ~w~%s %dP. ~n~~n~~p~Flagge: ~w~%s~n~~b~~h~Ende: ~w~%02d:%02d~n~",GetFactionNameOfFaction(g_GangZone[id][GZ_iOwner]),g_GangZone[id][GZ_iOwnerScore],GetFactionNameOfFaction(g_GangZone[id][GZ_iAttacker]),g_GangZone[id][GZ_iAttackerScore],flagge,minute,sec);
    TextDrawSetString(g_GangZone[id][GZ_tdInfo],String);
    return 1;
}

stock ReleasePlayerKeys(playerid,extra = true) {
    Spieler[playerid][pPlayerBiz] = 999;
    Spieler[playerid][pPlayerBizEx] = 999;
    Spieler[playerid][pPlayerHotel] = 999;
    Spieler[playerid][pPlayerTank] = 999;
    Spieler[playerid][pPlayerHouse] = 999;
    Spieler[playerid][pPlayerFirma] = 999;
    if(extra) {
        Spieler[playerid][pHouseMieteKey] = 999;
    }
    return 1;
}
stock CheckPlayerBiz(playerid) {
	new
	    c = 0,
	    name[MAX_PLAYER_NAME];
	GetPlayerName(playerid,name,sizeof(name));
	for(new i = 1; i < sizeof(Biz) ; i++) {
        if(!strcmp(Biz[i][bBesitzer], "#",true)){continue;}
		if(!strcmp(Biz[i][bName],"#",true)){continue;}

		if(strcmp(Biz[i][bBesitzer], name, true) == 0)
	    {
	        c++;
	        if( c == 1 ) {

				Spieler[playerid][pPlayerBiz] = i;
			}
	        else {
	            if( Spieler[playerid][pPremiumBizSlot] == 1 ) {
					Spieler[playerid][pPlayerBizEx] = i;
	            }
	            else {
	                printf("Weiteres Biz '%s' id: %i Spieler %s gefunden, besitzt aber kein Premium BizSlot!",Biz[i][bName],i,GetName(playerid));
	            }
			}
			printf("Besitzer: %s | Biz ID: %i | Name:%s",GetName(playerid),i,Biz[i][bName]);
	    }
	}
	return 1;
}
stock CheckPlayerHotel(playerid) {
    new
        name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    for(new i ; i < iHotel ; i++) {
        if(!strcmp(name,Hotel[i][hBesitzer],true)) {
            Spieler[playerid][pPlayerHotel] = i;
        }
    }/*
    if( Spieler[playerid][pPlayerHotel] != 999 ) {
        printf("Hotel für %s gefunden",GetName(playerid));
    }
    */
    return 1;
}
stock CheckPlayerHouse(playerid) {
    new
        name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    for(new i=0 ; i < iHaus ; i++) {
        if(!strcmp(name,Haus[i][hBesitzer],true)) {
            Spieler[playerid][pPlayerHouse] = i;
            return 1;
        }
    }
    return 0;
}
stock CheckPlayerTanke(playerid) {
    new
        name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    for(new i ; i < iTanke ; i++) {
        if(!strcmp(name,Tanke[i][tBesitzer],true)) {
            Spieler[playerid][pPlayerTank] = i;
        }
    }
    /*
    if( Spieler[playerid][pPlayerTank] != 999 ) {
        printf("Tanke für %s gefunden",GetName(playerid));
    }
    */
    return 1;
}
stock CheckPlayerFirma(playerid) {
    new
        name[MAX_PLAYER_NAME];
    GetPlayerName(playerid,name,sizeof(name));
    for(new i ; i < sizeof(g_Firma) ; i++) {
        if(!strcmp(name,g_Firma[i][F_sBesitzer],true)) {
            Spieler[playerid][pPlayerFirma] = i;
        }
    }/*
    if( Spieler[playerid][pPlayerTank] != 999 ) {
        printf("Tanke für %s gefunden",GetName(playerid));
    }
    */
    return 1;
}







stock GivePlayerRP(playerid, points) {
    Spieler[playerid][pExp] += points;
    if (Spieler[playerid][pExp] >= Spieler[playerid][pLevel] * 4) {
        Spieler[playerid][pExp] = Spieler[playerid][pExp] - Spieler[playerid][pLevel] * 4;
        Spieler[playerid][pLevel]++;
        SetPlayerScore(playerid, Spieler[playerid][pLevel]);
        GameTextForPlayer(playerid, "~y~Level UP", 4000, 3);
    }

    return 1;
}



stock BuyCar(playerid,paymethod) {
    if (Spectating[playerid][0] == -1) return 1;
    if (PlayerHaveCar[playerid][PlayerKey[playerid]]) {
        RemovePlayerFromVehicle(playerid);
        SendClientMessage(playerid, COLOR_ORANGE, "Du hast bereits ein Fahrzeug auf diesem Carkey. Wechsele ihn per /Carkey.");
        UnfreezePlayer(playerid);
        return 1;
    }

    new preis = Kaufliste[Spectating[playerid][0]][aPreis];
    if ((paymethod == 1 && CheckMoney(playerid) < preis) || (paymethod == 2 && Spieler[playerid][pBank] < preis)) {
        if (paymethod == 1) SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld dabei!");
        else SendClientMessage(playerid, COLOR_RED, "Du hast nicht genug Geld auf der Bank!");
        RemovePlayerFromVehicle(playerid);
        UnfreezePlayer(playerid);
        return 1;
    }

    new autohaus = Kaufliste[Spectating[playerid][0]][Autohaus];
    new index = GetBizIndexByID(dealerShipBizID[autohaus]);
    if (Biz[index][bWaren] < 5) {
        SendClientMessage(playerid, COLOR_RED, "Das BIZ hat nicht genügend Waren.");
        UnfreezePlayer(playerid);
        RemovePlayerFromVehicle(playerid);
        return 1;
    }
    
    if (paymethod == 1) GivePlayerCash(playerid, -preis);
    else Spieler[playerid][pBank] -= preis;
    
    new prname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, prname, sizeof prname);
    CreatePlayerCar(playerid, Autospawns[autohaus][CarPos_x] , Autospawns[autohaus][CarPos_y] , Autospawns[autohaus][CarPos_z] ,Autospawns[autohaus][CarRotate],Kaufliste[Spectating[playerid][0]][Modelid] , -1 , -1 );
    // -> THREADED PlayerCar[playerid][PlayerKey[playerid]][Id] = cache_insert_id (); // WICHTIG! Nie löschen!
    PlayerCar[playerid][PlayerKey[playerid]][Id] = 0;
    PlayerCar[playerid][PlayerKey[playerid]][CarOwner] = prname;
    PlayerCar[playerid][PlayerKey[playerid]][CarId]=Spectating[playerid][0];
    PlayerCar[playerid][PlayerKey[playerid]][CarModel]=Kaufliste[Spectating[playerid][0]][Modelid];
    PlayerCar[playerid][PlayerKey[playerid]][CarPos_x]=Autospawns[autohaus][CarPos_x];
    PlayerCar[playerid][PlayerKey[playerid]][CarPos_y]=Autospawns[autohaus][CarPos_y];
    PlayerCar[playerid][PlayerKey[playerid]][CarPos_z]=Autospawns[autohaus][CarPos_z];
    PlayerCar[playerid][PlayerKey[playerid]][CarRotate]=Autospawns[autohaus][CarRotate];
    PlayerCar[playerid][PlayerKey[playerid]][CarNitro]=0;
    PlayerCar[playerid][PlayerKey[playerid]][CarHyd]=0;
    PlayerCar[playerid][PlayerKey[playerid]][CarWheel]=0;
    PlayerCar[playerid][PlayerKey[playerid]][CarAusp]=0;
    PlayerCar[playerid][PlayerKey[playerid]][CarSideL]=0;
    PlayerCar[playerid][PlayerKey[playerid]][CarSideR]=0;
    PlayerCar[playerid][PlayerKey[playerid]][CarFB]=0;
    PlayerCar[playerid][PlayerKey[playerid]][CarRB]=0;
    PlayerCar[playerid][PlayerKey[playerid]][CarSpoiler]=0;
    PlayerCar[playerid][PlayerKey[playerid]][CarRoof]=0;
    PlayerCar[playerid][PlayerKey[playerid]][CarHood]=0;
    PlayerCar[playerid][PlayerKey[playerid]][CarVents]=0;
    PlayerCar[playerid][PlayerKey[playerid]][CarLamps]=0;
    PlayerCar[playerid][PlayerKey[playerid]][CarPJ]=-1;
    PlayerCar[playerid][PlayerKey[playerid]][CarC1]=1;
    PlayerCar[playerid][PlayerKey[playerid]][CarC2]=1;
    PlayerCar[playerid][PlayerKey[playerid]][CarPreis]=preis/2;
    PlayerCar[playerid][PlayerKey[playerid]][CarTank]=Kaufliste[Spectating[playerid][0]][Tank];
    PlayerCar[playerid][PlayerKey[playerid]][CarState]=e_Vehicle_Status_Normal;
    PlayerCar[playerid][PlayerKey[playerid]][TUV]=0;
    //new snp[24];
    // format(snp, 24, "%s", GetName(playerid));
    PlayerCar[playerid][PlayerKey[playerid]][CarId] = CreateVehicle(PlayerCar[playerid][PlayerKey[playerid]][CarModel],PlayerCar[playerid][PlayerKey[playerid]][CarPos_x],PlayerCar[playerid][PlayerKey[playerid]][CarPos_y],PlayerCar[playerid][PlayerKey[playerid]][CarPos_z],PlayerCar[playerid][PlayerKey[playerid]][CarRotate],PlayerCar[playerid][PlayerKey[playerid]][CarC1],PlayerCar[playerid][PlayerKey[playerid]][CarC2], -1);/*vehicle spawn*/
    g_VehicleDistance[ PlayerCar[playerid][PlayerKey[playerid]][CarId] ] = 0;
    aiVehicles[PlayerCar[playerid][PlayerKey[playerid]][CarId]] = VEH_PRIVAT;
    SetVehicleNumberPlate(PlayerCar[playerid][PlayerKey[playerid]][CarId], "");
    format( PlayerCar[playerid][PlayerKey[playerid]][CarNumberplate] ,32 , KEIN_KENNZEICHEN );
    gGas[PlayerCar[playerid][PlayerKey[playerid]][CarId]] = Kaufliste[Spectating[playerid][0]][Tank];
    gMaxGas[PlayerCar[playerid][PlayerKey[playerid]][CarId]] = Kaufliste[Spectating[playerid][0]][Tank];
    LockCar(PlayerCar[playerid][PlayerKey[playerid]][CarId]);
    PlayerHaveCar[playerid][PlayerKey[playerid]] = 1;
    PlayerPlaySound(playerid,1054,0.0,0.0,0.0);
    aiVehicles[ PlayerCar[playerid][PlayerKey[playerid]][CarId] ] = VEH_PRIVAT;
    FrakCarInfo[PlayerCar[playerid][PlayerKey[playerid]][CarId]][f_frak] = 0;
    FrakCarInfo[PlayerCar[playerid][PlayerKey[playerid]][CarId]][f_dbid] = 0;

    SCMFormatted(playerid, COLOR_GREEN, "Du hast dir eine(n) %s gekauft.", CarName[PlayerCar[playerid][PlayerKey[playerid]][CarModel] - 400]);
    SendClientMessage(playerid, COLOR_RED, "Unter /Help siehst du alle Befehle, die du für die Nutzung und Verwaltung deines Fahrzeuges wissen musst.");
    if (!IsBicycle(PlayerCar[playerid][PlayerKey[playerid]][CarModel])) {
        SendClientMessage(playerid, COLOR_ORANGE, "Vergiss nicht, dein Fahrzeug amtlich noch anzumelden!");
        SendClientMessage(playerid, COLOR_ORANGE, "Unter /Navi -> Behörden -> Fahrzeug Zulassungsstelle kannst du dein Fahrzeug amtlich zulassen.");
    }
    new sInfo[64];
    format(sInfo,sizeof(sInfo),"~y~Fahrzeug ~w~gekauft! ( %s )", paymethod == 1 ? ("Barzahlung") : ("EC-Karte") );
    ShowBuyInformation(playerid, sInfo);

    new CarMoneyFinal = (preis/100)*30;//0,08%
    TreasuryDeposit(preis-CarMoneyFinal);
    TogglePlayerControllable(playerid,false);

    SetTimerEx("DelayCameraMove",59,false,"ddffffff",playerid,3500,Autospawns[autohaus][CarPos_x],Autospawns[autohaus][CarPos_y],Autospawns[autohaus][CarPos_z],7.0,-3.0,3.0);
    Biz[index][bKasse] += CarMoneyFinal;
    Biz[index][bWaren] -= 5;
    return 1;
}

stock GetFreePhoneNumber(playerid) {
    new
        query[80],
        number = random(900000)+100000; // 6 Ziffern
    format(query,sizeof(query),"SELECT `HandyNr` FROM `accounts` WHERE `HandyNr` = %d LIMIT 1",number);
    Spieler[playerid][pHandyNr_Temp] = number;
    mysql_pquery(query,THREAD_FREEPHONENUMBER,playerid,gSQL,MySQLThreadOwner);
    Spieler[playerid][pHandyNr_Counter]++;
    return 1;
}

stock CreateBlitzerWarnung() {
    tdBlitzerWarnung=TextDrawCreate(250.000000, 331.000000, "~r~Vorsicht! ~w~Radarfalle");
    TextDrawBackgroundColor(tdBlitzerWarnung, 255);
    TextDrawFont(tdBlitzerWarnung, 1);
    TextDrawLetterSize(tdBlitzerWarnung, 0.500000, 2.200001);
    TextDrawColor(tdBlitzerWarnung, -1);
    TextDrawSetOutline(tdBlitzerWarnung, 0);
    TextDrawSetProportional(tdBlitzerWarnung, 1);
    TextDrawSetShadow(tdBlitzerWarnung, 1);
    return 1;
}

stock ShowPlayerBlitzerWarnung(playerid) {
    Spieler[playerid][punixRadarfallenWarnung] = gettime() + 2;
    if( Spieler[playerid][tRadarfallenWarnung] == INVALID_TIMER_ID ) {
        Spieler[playerid][tRadarfallenWarnung] = SetTimerEx("Pulse_BlitzerWarnung",1009,true,"d",playerid);
        TextDrawShowForPlayer(playerid,tdBlitzerWarnung);
    }
    return 1;
}

forward Pulse_BlitzerWarnung(playerid);
public Pulse_BlitzerWarnung(playerid) {
    if( gettime() >= Spieler[playerid][punixRadarfallenWarnung] ) {
        KillTimer(Spieler[playerid][tRadarfallenWarnung]);
        Spieler[playerid][tRadarfallenWarnung] = INVALID_TIMER_ID;
        Spieler[playerid][punixRadarfallenWarnung] = 0;
        TextDrawHideForPlayer(playerid,tdBlitzerWarnung);
    }
    return 1;
}


forward World_Pulse();
public World_Pulse() {
    //print("World_Pulse");
    new
        hour,
        minute;
    gettime(hour,minute);
    if( random(10) == 0 ) { // chance 1:5 dass es regnet
        SetWeatherEx(10);
    }
    else {
        if( 7 <= hour <= 17 ) {
            SetWorldTime(17);
        }
        else if( 18 <= hour <= 20 ) {
            SetWorldTime(23);
        }
        else if( 21 <= hour <= 23 ) {
            SetWorldTime(24);
        }
        else if( 0 <= hour <= 6 ) {
            SetWorldTime(3);
        }
    }
    return 1;
}


stock ShowNextGeldTStation(playerid) {
    new
        r,
        index,
        bit,
        bitval;
    do {
        r = random( sizeof(GT_GELDT) );
        index = r / 32;
        bit = (r % 32) + 1;
        bitval = 1 << bit;
    }
    while( (Spieler[playerid][pGELDT][index] & bitval) );
    Spieler[playerid][pGELDT][index] |= bitval;
    Spieler[playerid][pGeldTCP] = r;
    SetPlayerCheckpointEx(playerid,GT_GELDT[r][GT_fPosX],GT_GELDT[r][GT_fPosY],GT_GELDT[r][GT_fPosZ],8.0,CP_GELDT);
    return 1;
}

stock ShowNextMuellStation(playerid) {
    new
        r,
        index,
        bit,
        bitval;
    do {
        r = random( sizeof(g_Muell) );
        index = r / 32;
        bit = (r % 32) + 1;
        bitval = 1 << bit;
    }
    while( (Spieler[playerid][pMuell][index] & bitval) );
    Spieler[playerid][pMuell][index] |= bitval;
    Spieler[playerid][pMuellCP] = r;
    SetPlayerCheckpointEx(playerid,g_Muell[r][M_fPosX],g_Muell[r][M_fPosY],g_Muell[r][M_fPosZ],8.0,CP_MUELL);
    return 1;
}

stock GetBitCount(input) {
    input = input - ((input >>> 1) & 0x55555555);
    input = (input & 0x33333333) + ((input >>> 2) & 0x33333333);
    new count = ((input + (input >>> 4) & 0xF0F0F0F) * 0x1010101) >>> 24;
    return count;
}


stock MuellInit() {
	// TODO: Peek Müll map file?
    CreateDynamicObject(1344, 1575.32, -1860.68, 13.33, 0.00, 0.00, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1575.31, -1794.34, 13.24, 0.00, 0.00, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1575.25, -1743.08, 13.33, 0.00, 0.00, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1372.86, -1726.57, 13.32, 0.00, 0.00, 0.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1319.92, -1724.81, 13.33, 0.00, 0.00, -43.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1318.34, -1673.26, 13.33, 0.00, 0.00, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1318.24, -1625.49, 13.33, 0.00, 0.00, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1318.29, -1583.30, 13.33, 0.00, 0.00, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1319.13, -1556.67, 13.32, 0.00, 0.00, -98.69,0,0,-1,150.0);
	CreateDynamicObject(1344, 1354.74, -1476.45, 13.33, 0.00, 0.00, 256.31,0,0,-1,150.0);
	CreateDynamicObject(1344, 1363.24, -1420.69, 13.33, 0.00, 0.00, -93.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1291.04, -1389.49, 13.20, 0.00, 0.00, 0.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1266.28, -1360.01, 13.26, 0.00, 0.00, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1266.27, -1308.70, 13.28, 0.00, 0.00, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1223.79, -1156.61, 23.43, 0.00, 0.00, -142.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1268.74, -1127.32, 23.80, 0.00, 3.53, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1268.72, -1070.70, 28.36, 0.00, 7.80, -92.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1268.90, -981.15, 36.95, 0.00, 6.88, -90.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1254.53, -920.78, 42.56, 0.00, 0.00, 11.41,0,0,-1,150.0);
	CreateDynamicObject(1344, 1230.39, -913.43, 42.88, 0.00, 0.00, -80.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1143.15, -938.38, 42.80, 0.00, 0.00, 5.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1065.78, -944.34, 42.78, 0.00, 0.00, 8.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1004.78, -952.55, 41.96, 0.00, -0.69, 7.12,0,0,-1,150.0);
	CreateDynamicObject(1344, 878.50, -980.15, 36.11, 0.00, -5.45, 32.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 833.05, -1021.84, 25.96, 0.00, -9.27, 42.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 787.50, -1036.63, 24.42, 0.00, 0.00, 41.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 488.16, -1276.06, 15.49, 0.00, -0.49, 39.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 436.02, -1315.29, 14.87, 0.00, 0.00, 35.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 336.44, -1375.30, 14.11, 0.00, 0.00, 29.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 230.99, -1433.80, 13.15, 0.00, 0.00, 43.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 168.37, -1514.36, 12.15, 0.00, -0.59, 59.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 107.49, -1630.59, 10.10, 0.00, -0.39, 82.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 113.44, -1694.20, 9.38, 0.00, -0.69, 103.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 181.91, -1741.32, 4.13, 0.00, 0.29, -176.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 237.01, -1738.04, 3.99, 0.00, 0.00, -177.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 289.05, -1742.17, 4.12, 0.00, 0.20, 172.57,0,0,-1,150.0);
	CreateDynamicObject(1344, 335.57, -1747.85, 4.43, 0.00, 0.00, 139.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 459.64, -1767.67, 5.44, 0.00, 1.47, -129.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 499.18, -1732.62, 11.29, 0.00, 0.78, 170.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 563.40, -1740.97, 12.62, 0.00, 1.27, 171.31,0,0,-1,150.0);
	CreateDynamicObject(1344, 631.54, -1752.13, 13.14, 0.00, -0.59, 169.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 713.01, -1775.15, 13.42, 0.00, 0.69, 160.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 804.34, -1789.93, 13.26, 0.00, 0.78, -180.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 938.16, -1796.69, 13.65, 0.00, 1.47, 168.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1030.30, -1825.45, 13.64, 0.00, -0.49, 128.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1096.22, -1858.12, 13.34, 0.00, 0.00, -180.51,0,0,-1,150.0);
	CreateDynamicObject(1344, 1157.66, -1858.00, 13.33, 0.00, 0.00, 180.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1234.37, -1857.95, 13.33, 0.00, 0.00, 180.00,0,0,-1,150.0);
	CreateDynamicObject(1344, 1415.44, -1878.07, 13.33, 0.00, 0.00, 180.00,0,0,-1,150.0);
	return 1;
}


stock LoadFirma() {
    mysql_oquery("SELECT * FROM `firma`",THREAD_LOADFIRMA,INVALID_PLAYER_ID,gSQL);
    return 1;
}

stock IsJobFirma(jobid) {
    for(new i ; i < sizeof(g_Firma) ; i++) {
        if( g_Firma[i][F_iJobID] == jobid ) {
            return 1;
        }
    }
    return 0;
}

stock GetJobFirmaIndex(jobid) {
    for(new i ; i < sizeof(g_Firma) ; i++) {
        if( g_Firma[i][F_iJobID] == jobid ) {
            return i;
        }
    }
    return -1;
}

stock GetJobFirmaIndexByID(firmenid) {
    for(new i ; i < sizeof(g_Firma) ; i++) {
        if( g_Firma[i][F_iID] == firmenid ) {
            return i;
        }
    }
    return -1;
}

stock SaveFirma() {
    new query[128];
    for(new i ; i < sizeof(g_Firma) ; i++) {
        format(query,sizeof(query),"UPDATE `firma` SET \
            `kasse` = %d,\
            `gehalt` = %d,\
            `besitzer` = '%s' \
            WHERE `id` = %d",
            g_Firma[i][F_iKasse],
            g_Firma[i][F_iGehalt],
            g_Firma[i][F_sBesitzer],
            g_Firma[i][F_iID]
        );
        mysql_oquery(query,THREAD_SAVEFIRMA,i,gSQL);
    }
    return 1;
}

stock strtolower(text[])
{
    for(new i, j = strlen(text); j != i; ++i)
    {
        if((90 > text[i] > 64) || (222 > text[i] > 191)) text[i] |= 32;
    }
    return true;
}

stock GetPlayerHouse(playerid) {
    if( Spieler[playerid][pPlayerHouse] != 999 ) { // Hausbesitzer
        return Spieler[playerid][pPlayerHouse];
    }
    if( Spieler[playerid][pHouseMieteKey] != 999 ) { // Hausmieter
        new index;
        index = GetHouseIndexByID(Spieler[playerid][pHouseMieteKey]);
        return index;
    }
    return 999;
}



stock GiveCheckpointPrison(pID, amount, reason[], playerid = INVALID_PLAYER_ID) { // playerid can be left empty (Server-System)
    new issuer[64] = "Server-System";

    if (playerid != INVALID_PLAYER_ID)
        format(issuer, sizeof(issuer), "%s %s", GetPlayerAdminRang(playerid), GetName(playerid));

    SCMFormatted(pID,COLOR_RED,"[PRISON] Du wurdest von %s zum Checkpoint-Lauf verdonnert!", issuer);
    SCMFormatted(pID,COLOR_RED,"Du musst insgesamt %d Checkpoints ablaufen. Grund: %s.", amount, reason);

    mysql_real_escape_string(reason, reason, gSQL, strlen(reason));

    new String[256];
    format(String,sizeof(String),"[PRISON] Spieler %s wurde von %s zum Checkpoint-Lauf verdonnert!", GetName(pID), issuer);
    SendAdminMessage(COLOR_RED,String);
    format(String,sizeof(String),"[PRISON] Checkpoints: %d, Grund: %s", amount, reason);
    SendAdminMessage(COLOR_RED,String);

    format(String,sizeof(String),"Spieler %s wurde von %s zum Checkpoint-Lauf verdonnert! Checkpoints: %d, Grund: %s", GetName(pID), issuer, amount, reason);
    SendUCPAktenEintrag(pID, playerid != INVALID_PLAYER_ID ? GetName(playerid) : issuer, GetName(pID) , String);

    SetPlayerPrisonRun(pID);
    Spieler[pID][pPrisonRun] = amount;
    Spieler[pID][pPrisonRunCount] = 0;
    Spieler[pID][pPrisonRunStep] = 0;
    SpawnPlayerEx(pID);
    return 1;
}

stock SetPlayerPrisonRun(playerid) {
    TogglePlayerControllable(playerid,true);
    SetPlayerPos(playerid,-1403.6885,-254.3693,1043.6117);
    SetPlayerVirtualWorld(playerid,0);
    SetPlayerInterior(playerid,7);
    Spieler[playerid][pPrisonRunStep] = 0;
    DisablePlayerCheckpointEx(playerid);
    SetPlayerPrisonRunCheckpoint(playerid);
    return 1;
}
stock RemovePlayerPrisonRun(playerid) {
    SetPlayerVirtualWorld(playerid,0);
    SetPlayerInterior(playerid,0);
    return 1;
}
stock SetPlayerPrisonRunCheckpoint(playerid) {
    new index = Spieler[playerid][pPrisonRunStep];
    SetPlayerCheckpointEx(playerid, g_PrisonRunCheckpoint[index][PRC_fX], g_PrisonRunCheckpoint[index][PRC_fY], g_PrisonRunCheckpoint[index][PRC_fZ], 4.0 , CP_PRISONRUN );
    Spieler[playerid][pPrisonRunStep]++;
    if (Spieler[playerid][pPrisonRunStep] >= sizeof(g_PrisonRunCheckpoint)) Spieler[playerid][pPrisonRunStep] = 0;
    return 1;
}


stock Zoll_Init() {
    for(new i ; i < sizeof(g_Zoll); i++) {
        g_Zoll[i][Z_iObject] = CreateDynamicObject( g_Zoll[i][Z_iModel],g_Zoll[i][Z_fX],g_Zoll[i][Z_fY],g_Zoll[i][Z_fZ],g_Zoll[i][Z_fRotX],g_Zoll[i][Z_fRotY],g_Zoll[i][Z_fRotZ],.streamdistance = 150.0);
        g_Zoll[i][Z_iArea] = CreateDynamicCircle(g_Zoll[i][Z_fX],g_Zoll[i][Z_fY],12.0);
        Streamer_SetIntData(STREAMER_TYPE_OBJECT, g_Zoll[i][Z_iObject] ,E_STREAMER_EXTRA_ID, OBJECT_ZOLL );
        Streamer_SetIntData(STREAMER_TYPE_AREA, g_Zoll[i][Z_iArea] ,E_STREAMER_EXTRA_ID, AREA_ZOLL );
    }
    return 1;
}

stock Zoll_Open(zoll,playerid = INVALID_PLAYER_ID) {
    if( g_Zoll[zoll][Z_iStatus] == 0 ) {
        MoveDynamicObject( g_Zoll[zoll][Z_iObject] , g_Zoll[zoll][Z_fX],g_Zoll[zoll][Z_fY],g_Zoll[zoll][Z_fZ] - 4.0 , 1.2 );
        g_Zoll[zoll][Z_iPlayerID] = playerid;
        g_Zoll[zoll][Z_iStatus] = 1;
        return 1;
    }
    return 0;
}
stock Zoll_Close(zoll) {
    if( g_Zoll[zoll][Z_iStatus] == 2 ) {
        StopDynamicObject( g_Zoll[zoll][Z_iObject] );
        MoveDynamicObject( g_Zoll[zoll][Z_iObject] , g_Zoll[zoll][Z_fX],g_Zoll[zoll][Z_fY],g_Zoll[zoll][Z_fZ] , 1.2 );
        g_Zoll[zoll][Z_iPlayerID] = INVALID_PLAYER_ID;
        g_Zoll[zoll][Z_iStatus] = 3;
        return 1;
    }
    return 0;
}

stock Zoll_IsOpen(zoll) {
    return ( g_Zoll[zoll][Z_iStatus] == 2 );
}
stock GetPlayerZollArea(playerid) {
    for(new i ; i < sizeof(g_Zoll); i++) {
        if( IsPlayerInDynamicArea(playerid,g_Zoll[i][Z_iArea])) return i;
    }
    return -1;
}
stock GetPlayerZollAreaUser(playerid) {
    for(new i ; i < sizeof(g_Zoll); i++) {
        if( playerid == g_Zoll[i][Z_iPlayerID] ) {
            return i;
        }
    }
    return -1;
}


forward OpenTollStations();
public OpenTollStations() {
    tTollTimer = INVALID_TIMER_ID;
    for(new i ; i < sizeof(g_Zoll) ; i++) {
        g_Zoll[i][Z_bSperre] = false;
    }
    SendClientMessageToAll(COLOR_RED,"[STAAT] "#COL_GREEN"Alle Zollstationen wurden wieder geöffnet! Die polizeiliche Maßnahme wurde beendet.");
    return 1;
}

stock PlayerSkillUpgrade(playerid, SpielerDaten:attribute, skill, points ) {
    new
        String[128];
    if( skill == 0 ) {
        new
            old_level,
            new_level;
        old_level = GetPlayerHureLevel(playerid);
        Spieler[playerid][attribute] += points;
        new_level = GetPlayerHureLevel(playerid);
        if( old_level < new_level ) {
            format(String,sizeof(String),"Herzlichen Glückwunsch! "#COL_GREEN"Du hast %s-Skill %d erreicht!",("Huren"),new_level);
            SendClientMessage(playerid,COLOR_YELLOW,String);
            format(String,sizeof(String),"~y~Herzlichen Glueckwunsch!~n~~g~Du hast %s-Skill %d erreicht!",("Huren"),new_level);
            SkillUpgrade(playerid,String);
            format(String,sizeof(String),"%s hat %s-Skill %d erreicht",GetName(playerid),("Huren"),new_level);
            SkillLog(String);
        }
    }
    else if( skill == 1 ) {
        new
            old_level,
            new_level;
        old_level = GetPlayerDetectivLevel(playerid);
        Spieler[playerid][attribute] += points;
        new_level = GetPlayerDetectivLevel(playerid);
        if( old_level < new_level ) {
            format(String,sizeof(String),"Herzlichen Glückwunsch! "#COL_GREEN"Du hast %s-Skill %d erreicht!",("Detektiv"),new_level);
            SendClientMessage(playerid,COLOR_YELLOW,String);
            format(String,sizeof(String),"~y~Herzlichen Glueckwunsch!~n~~g~Du hast %s-Skill %d erreicht!",("Detektiv"),new_level);
            SkillUpgrade(playerid,String);
            format(String,sizeof(String),"%s hat %s-Skill %d erreicht",GetName(playerid),("Detektiv"),new_level);
            SkillLog(String);
        }
    }
    else if( skill == 2 ) {
        new
            old_level,
            new_level;
        old_level = GetPlayerLawyerLevel(playerid);
        Spieler[playerid][attribute] += points;
        new_level = GetPlayerLawyerLevel(playerid);
        if( old_level < new_level ) {
            format(String,sizeof(String),"Herzlichen Glückwunsch! "#COL_GREEN"Du hast %s-Skill %d erreicht!",("Anwalt"),new_level);
            SendClientMessage(playerid,COLOR_YELLOW,String);
            format(String,sizeof(String),"~y~Herzlichen Glueckwunsch!~n~~g~Du hast %s-Skill %d erreicht!",("Anwalt"),new_level);
            SkillUpgrade(playerid,String);
            format(String,sizeof(String),"%s hat %s-Skill %d erreicht",GetName(playerid),("Anwalt"),new_level);
            SkillLog(String);
        }
    }
    else if( skill == 3 ) {
        new
            cur_level,
            new_level;
        cur_level = GetPlayerGangFightSkillLevel(playerid);
        Spieler[playerid][attribute] += points;
        new_level = GetPlayerGangFightSkillLevel(playerid);
        if( new_level > cur_level ) {
            // Skill Upgrade
            format(String,sizeof(String),"Herzlichen Glückwunsch! "#COL_GREEN"Du hast %s-Skill %d erreicht!",("Gangfight"),new_level);
            SendClientMessage(playerid,COLOR_YELLOW,String);
            format(String,sizeof(String),"~y~GANGFIGHT-SKILL ~g~%d ~y~erreicht!",new_level);
            SkillUpgrade(playerid,String);
            format(String,sizeof(String),"%s hat %s-Skill %d erreicht",GetName(playerid),("Gangfight"),new_level);
            SkillLog(String);
        }
    }
    else if( skill == 4 ) {
        // drogen
        new
            old_level,
            new_level;
        old_level = GetPlayerDrogenSkillLevel(playerid);
        Spieler[playerid][attribute] += points;
        new_level = GetPlayerDrogenSkillLevel(playerid);
        if( old_level < new_level ) {
            format(String,sizeof(String),"Herzlichen Glückwunsch! "#COL_GREEN"Du hast %s-Skill %d erreicht!",("Drogen"),new_level);
            SendClientMessage(playerid,COLOR_YELLOW,String);
            format(String,sizeof(String),"~y~Herzlichen Glueckwunsch!~n~~g~Du hast %s-Skill %d erreicht!",("Drogen"),new_level);
            SkillUpgrade(playerid,String);
            format(String,sizeof(String),"%s hat %s-Skill %d erreicht",GetName(playerid),("Drogen"),new_level);
            SkillLog(String);
        }
    }
    else if( skill == 5 ) {
        // waffenteile
        new
            old_level,
            new_level;
        old_level = GetPlayerWaffenteileSkillLevel(playerid);
        Spieler[playerid][attribute] += points;
        new_level = GetPlayerWaffenteileSkillLevel(playerid);
        if( old_level < new_level ) {
            format(String,sizeof(String),"Herzlichen Glückwunsch! "#COL_GREEN"Du hast %s-Skill %d erreicht!",("Waffenteile"),new_level);
            SendClientMessage(playerid,COLOR_YELLOW,String);
            format(String,sizeof(String),"~y~Herzlichen Glueckwunsch!~n~~g~Du hast %s-Skill %d erreicht!",("Waffenteile"),new_level);
            SkillUpgrade(playerid,String);
            format(String,sizeof(String),"%s hat %s-Skill %d erreicht",GetName(playerid),("Waffenteile"),new_level);
            SkillLog(String);
        }
    }
    return 1;
}


enum e_CowPosition {
    Float:CP_fX,
    Float:CP_fY,
    Float:CP_fZ
}
new g_CowPosition[92][e_CowPosition];

stock CowInit() {
    new
        j,
        Float:x,
        Float:y,
        Float:z,
        start,
        end;
    start = CreateDynamicObject(16442, -125.96608, 60.06145, 3.79410, 0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16442, -136.70894, 45.77469, 3.79410, 0.00000, 0.00000, -84.84000);
    CreateDynamicObject(16442, -142.35411, 59.64023, 3.79410, 0.00000, 0.00000, -123.77999);
    CreateDynamicObject(16442, -189.92209, 78.36684, 3.79410, 0.00000, 0.00000, -151.01997);
    CreateDynamicObject(16442, -142.78531, 26.97668, 3.79410, 0.00000, 0.00000, -202.07996);
    CreateDynamicObject(16442, -156.97450, 32.99458, 3.79410, 0.00000, 0.00000, -155.76006);
    CreateDynamicObject(16442, -153.67236, 44.32209, 3.79410, 0.00000, 0.00000, -55.14002);
    CreateDynamicObject(16442, -162.36833, 59.40239, 3.79410, 0.00000, 0.00000, -55.14002);
    CreateDynamicObject(16442, -167.94984, 46.01622, 3.79410, 0.00000, 0.00000, -194.39999);
    CreateDynamicObject(16442, -169.17175, 74.79633, 3.79410, 0.00000, 0.00000, -194.39999);
    CreateDynamicObject(16442, -186.03668, 64.81738, 3.79410, 0.00000, 0.00000, -166.13998);
    CreateDynamicObject(16442, -177.28195, 56.27567, 3.79410, 0.00000, 0.00000, -65.28000);
    CreateDynamicObject(16442, -177.15005, 32.90548, 3.79410, 0.00000, 0.00000, -118.25998);
    CreateDynamicObject(16442, -170.76878, 20.71162, 3.79410, 0.00000, 0.00000, -118.25998);
    CreateDynamicObject(16442, -155.91841, 15.99560, 3.79410, 0.00000, 0.00000, -63.23999);
    CreateDynamicObject(16442, -164.42017, 1.40912, 3.79410, 0.00000, 0.00000, 52.20001);
    CreateDynamicObject(16442, -151.31874, -6.77877, 3.79410, 0.00000, 0.00000, 119.40004);
    CreateDynamicObject(16442, -180.38377, 2.73226, 3.79410, 0.00000, 0.00000, 119.40004);
    CreateDynamicObject(16442, -189.64589, 19.43103, 3.79410, 0.00000, 0.00000, -25.97997);
    CreateDynamicObject(16442, -189.44766, 37.67817, 3.79410, 0.00000, 0.00000, -281.81985);
    CreateDynamicObject(16442, -195.65918, 54.06594, 3.79410, 0.00000, 0.00000, -216.53981);
    CreateDynamicObject(16442, -203.63411, 33.18205, 3.79410, 0.00000, 0.00000, -209.63980);
    CreateDynamicObject(16442, -207.05188, 16.92773, 3.79410, 0.00000, 0.00000, -125.81982);
    CreateDynamicObject(16442, -199.79311, 4.35569, 3.79410, 0.00000, 0.00000, -49.07981);
    CreateDynamicObject(16442, -184.25958, -8.11793, 3.79410, 0.00000, 0.00000, -135.41980);
    CreateDynamicObject(16442, -167.08412, -11.64091, 3.79410, 0.00000, 0.00000, -226.43982);
    CreateDynamicObject(16442, -163.65929, -28.10913, 3.79410, 0.00000, 0.00000, -159.89984);
    CreateDynamicObject(16442, -178.11102, -19.60854, 3.79410, 0.00000, 0.00000, -69.47988);
    CreateDynamicObject(16442, -198.38930, -9.75505, 3.79410, 0.00000, 0.00000, -163.37994);
    CreateDynamicObject(16442, -216.46967, 2.87481, 3.79410, 0.00000, 0.00000, -163.37994);
    CreateDynamicObject(16442, -217.98761, 27.46272, 3.79410, 0.00000, 0.00000, -201.83995);
    CreateDynamicObject(16442, -211.16953, 46.68614, 3.79410, 0.00000, 0.00000, -201.83995);
    CreateDynamicObject(16442, -203.40834, 67.33411, 3.79410, 0.00000, 0.00000, -357.23990);
    CreateDynamicObject(16442, -209.08920, 83.95598, 3.79410, 0.00000, 0.00000, -400.67978);
    CreateDynamicObject(16442, -220.10411, 66.67113, 3.79410, 0.00000, 0.00000, -513.71991);
    CreateDynamicObject(16442, -225.33287, 46.97904, 3.79410, 0.00000, 0.00000, -443.93997);
    CreateDynamicObject(16442, -230.53523, 18.26859, 3.79410, 0.00000, 0.00000, -409.62006);
    CreateDynamicObject(16442, -176.35732, -35.41095, 3.79410, 0.00000, 0.00000, -138.83987);
    CreateDynamicObject(16442, -192.73196, -28.26979, 3.79410, 0.00000, 0.00000, -42.23987);
    CreateDynamicObject(16442, -211.92059, -13.80678, 3.79410, 0.00000, 0.00000, -19.67987);
    CreateDynamicObject(16442, -228.34785, -6.93035, 3.79410, 0.00000, 0.00000, 18.60013);
    CreateDynamicObject(16442, -234.40105, 5.73009, 3.79410, 0.00000, 0.00000, -248.69977);
    CreateDynamicObject(16442, -237.71082, 35.86252, 3.79410, 0.00000, 0.00000, -248.69977);
    CreateDynamicObject(16442, -247.81337, 17.44417, 3.79410, 0.00000, 0.00000, -178.55975);
    CreateDynamicObject(16442, -246.63646, -1.44542, 3.79410, 0.00000, 0.00000, -178.55975);
    CreateDynamicObject(16442, -241.43004, -19.83572, 3.79410, 0.00000, 0.00000, -325.13980);
    CreateDynamicObject(16442, -224.37344, -25.81573, 3.79410, 0.00000, 0.00000, -347.75980);
    CreateDynamicObject(16442, -208.56688, -33.83857, 3.79410, 0.00000, 0.00000, -435.83975);
    CreateDynamicObject(16442, -192.42683, -42.66315, 3.79410, 0.00000, 0.00000, -435.83975);
    CreateDynamicObject(16442, -182.66054, -63.79105, 3.79410, 0.00000, 0.00000, -480.53967);
    CreateDynamicObject(16442, -176.47409, -49.94964, 3.79410, 0.00000, 0.00000, -538.67987);
    CreateDynamicObject(16442, -198.60461, -55.33841, 3.79410, 0.00000, 0.00000, -538.67987);
    CreateDynamicObject(16442, -217.00060, -50.44470, 3.79410, 0.00000, 0.00000, -445.97980);
    CreateDynamicObject(16442, -228.46001, -38.65093, 3.79410, 0.00000, 0.00000, -358.79971);
    CreateDynamicObject(16442, -241.26224, -31.79682, 3.79410, 0.00000, 0.00000, -512.57983);
    CreateDynamicObject(16442, -254.79425, -13.62565, 3.79410, 0.00000, 0.00000, -510.83990);
    CreateDynamicObject(16442, -256.67801, -30.15676, 3.79410, 0.00000, 0.00000, -510.83990);
    CreateDynamicObject(16442, -245.45988, -46.40671, 3.79410, 0.00000, 0.00000, -388.49979);
    CreateDynamicObject(16442, -227.45573, -59.87135, 3.79410, 0.00000, 0.00000, -411.77975);
    CreateDynamicObject(16442, -209.08817, -63.18591, 3.79410, 0.00000, 0.00000, -442.19977);
    CreateDynamicObject(16442, -193.53641, -73.94958, 3.79410, 0.00000, 0.00000, -442.19977);
    CreateDynamicObject(16442, -210.03889, -74.42095, 3.79410, 0.00000, 0.00000, -337.43976);
    CreateDynamicObject(16442, -227.86240, -73.47112, 3.79410, 0.00000, 0.00000, -414.41974);
    CreateDynamicObject(16442, -239.99902, -61.39411, 3.79410, 0.00000, 0.00000, -307.73984);
    CreateDynamicObject(16442, -259.56262, -51.51152, 3.79410, 0.00000, 0.00000, -254.87981);
    CreateDynamicObject(16442, -249.32695, -56.90627, 3.79410, 0.00000, 0.00000, -254.87981);
    CreateDynamicObject(16442, -120.97840, 98.95062, 3.79410, 0.00000, 0.00000, 0.00000);
    CreateDynamicObject(16442, -119.09953, 114.50349, 3.79410, 0.00000, 0.00000, 121.74000);
    CreateDynamicObject(16442, -110.85193, 133.16795, 3.79410, 0.00000, 0.00000, 74.10000);
    CreateDynamicObject(16442, -119.25746, 145.32318, 3.79410, 0.00000, 0.00000, 47.46000);
    CreateDynamicObject(16442, -130.21591, 126.46263, 3.79410, 0.00000, 0.00000, -5.04000);
    CreateDynamicObject(16442, -131.05293, 110.43054, 3.79410, 0.00000, 0.00000, -5.04000);
    CreateDynamicObject(16442, -142.77469, 108.09543, 3.89481, 0.00000, 0.00000, -31.44000);
    CreateDynamicObject(16442, -140.56607, 119.21395, 4.09187, 0.00000, 0.00000, -188.63998);
    CreateDynamicObject(16442, -130.43369, 137.11520, 4.20977, 0.00000, 0.00000, -188.63998);
    CreateDynamicObject(16442, -132.40044, 153.83987, 4.85039, 0.00000, 0.00000, -155.34000);
    CreateDynamicObject(16442, -140.95828, 146.12637, 4.85039, 0.00000, 0.00000, -155.34000);
    CreateDynamicObject(16442, -144.22665, 132.24455, 4.85039, 0.00000, 0.00000, -345.29999);
    CreateDynamicObject(16442, -157.28069, 119.55559, 4.17385, 0.00000, 0.00000, -465.65994);
    CreateDynamicObject(16442, -172.40321, 124.76702, 4.29686, 0.00000, 0.00000, -505.37997);
    CreateDynamicObject(16442, -159.88194, 133.50537, 4.26611, 0.00000, 0.00000, -549.83997);
    CreateDynamicObject(16442, -154.25711, 147.40797, 5.06773, 0.00000, 0.00000, -629.16003);
    CreateDynamicObject(16442, -149.42297, 159.71071, 6.14143, 0.00000, 0.00000, -697.79980);
    CreateDynamicObject(16442, -167.93280, 142.32567, 5.26359, 0.00000, 0.00000, -697.79980);
    CreateDynamicObject(16442, -164.26904, 157.79172, 6.64802, 0.00000, 0.00000, -867.89978);
    CreateDynamicObject(16442, -177.29436, 151.29977, 6.64802, 0.00000, 0.00000, -867.89978);
    CreateDynamicObject(16442, -182.19092, 137.17256, 5.41141, 0.00000, 0.00000, -721.07971);
    CreateDynamicObject(16442, -202.92041, 143.22769, 5.41141, 0.00000, 0.00000, -721.07971);
    CreateDynamicObject(16442, -190.84160, 151.50127, 6.33961, 0.00000, 0.00000, -659.63989);
    CreateDynamicObject(16442, -181.28932, 163.01686, 8.06141, 0.00000, 0.00000, -731.99969);
    CreateDynamicObject(16442, -196.45894, 162.49364, 7.30664, 0.00000, 0.00000, -877.49963);
    end = CreateDynamicObject(16442, -195.89185, 135.60809, 4.51406, 0.00000, 0.00000, -877.49963);
    for(new i = start ; i <= end ; i++) {
        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,i,E_STREAMER_X,x);
        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,i,E_STREAMER_Y,y);
        Streamer_GetFloatData(STREAMER_TYPE_OBJECT,i,E_STREAMER_Z,z);
        g_CowPosition[j][CP_fX] = x;
        g_CowPosition[j][CP_fY] = y;
        g_CowPosition[j][CP_fZ] = z;
        j++;
        if( j >= sizeof(g_CowPosition)) break;
    }
    return 1;
}

stock StartPlayerCow(playerid) {
    DisablePlayerCheckpointEx(playerid);
    Spieler[playerid][pCow][0] = 0;
    Spieler[playerid][pCow][1] = 0;
    Spieler[playerid][pCow][2] = 0;
    //
    ShowNextCow(playerid);
    return 1;
}
forward Cow_ShowNext(playerid);
public Cow_ShowNext(playerid) {
    new
        c;
    c += GetBitCount(Spieler[playerid][pCow][0]);
    c += GetBitCount(Spieler[playerid][pCow][1]);
    c += GetBitCount(Spieler[playerid][pCow][2]);
    DisablePlayerCheckpointEx(playerid);
    ClearAnimations(playerid);
    if( c >= 10 ) {
        SendClientMessage(playerid,COLOR_YELLOW,"Gute Arbeit! Bringe die Milch zum Milchstand.");
        SetPlayerCheckpointEx(playerid,-12.5640,47.6324,3.1172,5.0,CP_COW_FINISH);
    }
    else {
        new
            String[80];
        format(String,sizeof(String),"Du hast die Kuh gemolken! Auf zur Nächsten (%d/10)",c);
        SendClientMessage(playerid,COLOR_YELLOW,String);
        ShowNextCow(playerid);
    }
    SetPlayerAttachedObject( playerid, ATTACHED_INDEX_JOB, 2713, 5, 0.182957, -0.116972, 0.000000, 0.000000, 259.876800, 26.083478, 1.000000, 1.000000, 1.000000 ); // DYN_FIREBIN0 - eimer
    return 1;
}

stock ShowNextCow(playerid) {
    new
        r,
        index,
        bit,
        bitval;
    do {
        r = random( sizeof(g_CowPosition) );
        index = r / 32;
        bit = (r % 32) + 1;
        bitval = 1 << bit;
    }
    while( (Spieler[playerid][pCow][index] & bitval) );
    Spieler[playerid][pCow][index] |= bitval;
    SetPlayerCheckpointEx(playerid,g_CowPosition[r][CP_fX],g_CowPosition[r][CP_fY],g_CowPosition[r][CP_fZ],2.0,CP_COW);
    return 1;
}


stock SkillUpgrade(playerid,text[]) {
    new PlayerText:playertext;
    playertext = CreatePlayerTextDraw(playerid,190.000000, 240.000000, text);
    PlayerTextDrawBoxColor(playerid,playertext, 255);
    PlayerTextDrawFont(playerid,playertext, 1);
    PlayerTextDrawLetterSize(playerid,playertext, 0.620000, 2.900000);
    PlayerTextDrawColor(playerid,playertext, -1);
    PlayerTextDrawSetOutline(playerid,playertext, 0);
    PlayerTextDrawSetProportional(playerid,playertext, 1);
    PlayerTextDrawSetShadow(playerid,playertext, 1);
    PlayerTextDrawShow(playerid,playertext);

    SetTimerEx("SkillUpgrade_Destroy",5179,false,"dd",playerid,_:playertext);
    return 1;
}

forward SkillUpgrade_Destroy(playerid,playertext);
public SkillUpgrade_Destroy(playerid,playertext) {
    PlayerTextDrawDestroy(playerid,PlayerText:playertext);
    return 1;
}


stock GetFreeWasserScooterSlot() {
    new
        freecount;
    for(new i = 0 ; i < sizeof(g_WasserScooterSlot) ; i++) {
        if( g_WasserScooterSlot[i][ASS_bUsed] == false ) {
            freecount++;
        }
    }
    if( freecount ) {
        new
            c,
            r = random(freecount);
        for(new i = 0 ; i < sizeof(g_WasserScooterSlot) ; i++) {
            if( g_WasserScooterSlot[i][ASS_bUsed] == false ) {
                if( c == r) {
                    return i;
                }
                c++;
            }
        }
    }
    return -1;
}

forward Pulse_Wasserscooter();
public Pulse_Wasserscooter() {
    //print("Pulse_Autoscooter");
    if( g_WasserScooter[AS_ibStatus] == 1 ) {
        // Start
        KillTimer( g_WasserScooter[AS_tID] );
        g_WasserScooter[AS_tickUpdate] = gettime() + 2*60;
        g_WasserScooter[AS_tID] = SetTimer("Pulse_Wasserscooter",2203,true);
        g_WasserScooter[AS_ibStatus] = 2;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( Spieler[i][pFahrgeschaeft] == 5 ) {
                SendClientMessage(i,COLOR_ORANGE,"Los gehts! 2 Minuten Wasserspaß.");
                TogglePlayerControllable(i,true);
                SetVehicleParamsEx( GetPlayerVehicleID(i) , VEHICLE_PARAMS_ON , VEHICLE_PARAMS_ON, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF);
            }
        }
    }
    else if( g_WasserScooter[AS_ibStatus] == 2 ) {
        if( gettime() > g_WasserScooter[AS_tickUpdate] ) {
            //SendClientMessage(i,COLOR_YELLOW,"Autoscooter beendet");
            ClearWasserscooter();
        }
        else {
            new
                veh;
            for(new i = 0 ; i < MAX_PLAYERS ; i++) {
                if( Spieler[i][pFahrgeschaeft] == 5 ) {
                    veh = GetPlayerVehicleID(i);
                    if(veh) {
                        Benzin[veh] = 100;
                        SetVehicleHealth(veh,1000.0);
                    }
                }
            }
        }
    }
    return 1;
}
stock InitWasserscooter() {
    for(new i = 0 ; i < sizeof(g_WasserScooterSlot) ; i++) {
        g_WasserScooterSlot[i][ASS_iVehicle] = CreateVehicle(539,g_WasserScooterSlot[i][ASS_fX],g_WasserScooterSlot[i][ASS_fY],g_WasserScooterSlot[i][ASS_fZ],g_WasserScooterSlot[i][ASS_fFace],-1,-1,-1);
        if( g_WasserScooterSlot[i][ASS_iVehicle] != INVALID_VEHICLE_ID ) {
            aiVehicles[ g_WasserScooterSlot[i][ASS_iVehicle] ] = VEH_WASSERSCOOTER;
        }
    }
    return 1;
}

stock ClearWasserscooter() {
    KillTimer( g_WasserScooter[AS_tID] );
    g_WasserScooter[AS_ibStatus] = 0;
    g_WasserScooter[AS_tickUpdate] = 0;
    for(new i = 0 ; i < MAX_PLAYERS ; i++) {
        if( Spieler[i][pFahrgeschaeft] == 5 ) {
            RemovePlayerWasserScooter(i);
        }
    }
    for(new i = 0 ; i < sizeof(g_WasserScooterSlot) ; i++) {
        SetVehicleToRespawn( g_WasserScooterSlot[i][ASS_iVehicle] );
        g_WasserScooterSlot[i][ASS_bUsed]= false;
    }
    return 1;
}
stock RemovePlayerWasserScooter(playerid) {
    SetPlayerPos(playerid,396.3516,-2152.5928,7.8399);
    SetPlayerFacingAngle(playerid,92.0);
    Streamer_Update(playerid);
    Spieler[playerid][pFahrgeschaeft] = -1;
    return 1;
}

stock GetFreeAutoScooterSlot() {
    new
        freecount;
    for(new i = 0 ; i < sizeof(g_AutoScooterSlot) ; i++) {
        if( g_AutoScooterSlot[i][ASS_bUsed] == false ) {
            freecount++;
        }
    }
    if( freecount ) {
        new
            c,
            r = random(freecount);
        for(new i = 0 ; i < sizeof(g_AutoScooterSlot) ; i++) {
            if( g_AutoScooterSlot[i][ASS_bUsed] == false ) {
                if( c == r) {
                    return i;
                }
                c++;
            }
        }
    }
    return -1;
}

forward Pulse_Autoscooter();
public Pulse_Autoscooter() {
    //print("Pulse_Autoscooter");
    if( g_AutoScooter[AS_ibStatus] == 1 ) {
        // Start
        KillTimer( g_AutoScooter[AS_tID] );
        g_AutoScooter[AS_tickUpdate] = gettime() + 3*60;
        g_AutoScooter[AS_tID] = SetTimer("Pulse_Autoscooter",2203,true);
        g_AutoScooter[AS_ibStatus] = 2;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( Spieler[i][pFahrgeschaeft] == 1 ) {
                SendClientMessage(i,COLOR_ORANGE,"Los gehts! 3 Minuten Autoscooter");
                TogglePlayerControllable(i,true);
                SetVehicleParamsEx( GetPlayerVehicleID(i) , VEHICLE_PARAMS_ON , VEHICLE_PARAMS_ON, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF);
            }
        }
    }
    else if( g_AutoScooter[AS_ibStatus] == 2 ) {
        if( gettime() > g_AutoScooter[AS_tickUpdate] ) {
            //SendClientMessage(i,COLOR_YELLOW,"Autoscooter beendet");
            ClearAutoscooter();
        }
        else {
            new
                veh;
            for(new i = 0 ; i < MAX_PLAYERS ; i++) {
                if( Spieler[i][pFahrgeschaeft] == 1 ) {
                    veh = GetPlayerVehicleID(i);
                    if(veh) {
                        Benzin[veh] = 100;
                        SetVehicleHealth(veh,1000.0);
                    }
                }
            }
        }
    }
    return 1;
}
stock InitAutoscooter() {
    for(new i = 0 ; i < sizeof(g_AutoScooterSlot) ; i++) {
        g_AutoScooterSlot[i][ASS_iVehicle] = CreateVehicle(539,g_AutoScooterSlot[i][ASS_fX],g_AutoScooterSlot[i][ASS_fY],g_AutoScooterSlot[i][ASS_fZ],g_AutoScooterSlot[i][ASS_fFace],-1,-1,-1);
        if( g_AutoScooterSlot[i][ASS_iVehicle] != INVALID_VEHICLE_ID ) {
            aiVehicles[ g_AutoScooterSlot[i][ASS_iVehicle] ] = VEH_AUTOSCOOTER;
        }
    }
    return 1;
}

stock ClearAutoscooter() {
    KillTimer( g_AutoScooter[AS_tID] );
    g_AutoScooter[AS_ibStatus] = 0;
    g_AutoScooter[AS_tickUpdate] = 0;
    for(new i = 0 ; i < MAX_PLAYERS ; i++) {
        if( Spieler[i][pFahrgeschaeft] == 1 ) {
            RemovePlayerAutoscooter(i);
        }
    }
    for(new i = 0 ; i < sizeof(g_AutoScooterSlot) ; i++) {
        SetVehicleToRespawn( g_AutoScooterSlot[i][ASS_iVehicle] );
        g_AutoScooterSlot[i][ASS_bUsed]= false;
    }
    return 1;
}
stock RemovePlayerAutoscooter(playerid) {
    SetPlayerPos(playerid,373.5172,-2059.1106,7.8831);
    SetPlayerFacingAngle(playerid,92.0);
    Streamer_Update(playerid);
    Spieler[playerid][pFahrgeschaeft] = -1;
    return 1;
}

stock GetFreeKartbahnSlot() {
    new
        freecount;
    for(new i = 0 ; i < sizeof(g_KartbahnSlot) ; i++) {
        if( g_KartbahnSlot[i][ASS_bUsed] == false ) {
            freecount++;
        }
    }
    if( freecount ) {
        new
            c,
            r = random(freecount);
        for(new i = 0 ; i < sizeof(g_KartbahnSlot) ; i++) {
            if( g_KartbahnSlot[i][ASS_bUsed] == false ) {
                if( c == r) {
                    return i;
                }
                c++;
            }
        }
    }
    return -1;
}

forward Pulse_Kartbahn();
public Pulse_Kartbahn() {
    //print("Pulse_Kartbahn");
    if( g_Kartbahn[AS_ibStatus] == 1 ) {
        // Start
        KillTimer( g_Kartbahn[AS_tID] );
        g_Kartbahn[AS_tickUpdate] = gettime() + 3*60;
        g_Kartbahn[AS_tID] = SetTimer("Pulse_Kartbahn",2203,true);
        g_Kartbahn[AS_ibStatus] = 2;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( Spieler[i][pFahrgeschaeft] == 4 ) {
                SendClientMessage(i,COLOR_ORANGE,"Los gehts! 3 Minuten Kartrennen");
                TogglePlayerControllable(i,true);
                SetVehicleParamsEx( GetPlayerVehicleID(i) , VEHICLE_PARAMS_ON , VEHICLE_PARAMS_ON, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF, VEHICLE_PARAMS_OFF);
            }
        }
    }
    else if( g_Kartbahn[AS_ibStatus] == 2 ) {
        if( gettime() > g_Kartbahn[AS_tickUpdate] ) {
            //SendClientMessage(i,COLOR_YELLOW,"Autoscooter beendet");
            ClearKartbahn();
        }
        else {
            new
                veh;
            for(new i = 0 ; i < MAX_PLAYERS ; i++) {
                if( Spieler[i][pFahrgeschaeft] == 4 ) {
                    veh = GetPlayerVehicleID(i);
                    if(veh) {
                        Benzin[veh] = 100;
                        SetVehicleHealth(veh,1000.0);
                    }
                }
            }
        }
    }
    return 1;
}
stock InitKartbahn() {
    for(new i = 0 ; i < sizeof(g_KartbahnSlot) ; i++) {
        g_KartbahnSlot[i][ASS_iVehicle] = CreateVehicle(571,g_KartbahnSlot[i][ASS_fX],g_KartbahnSlot[i][ASS_fY],g_KartbahnSlot[i][ASS_fZ],g_KartbahnSlot[i][ASS_fFace],-1,-1,-1);
        if( g_KartbahnSlot[i][ASS_iVehicle] != INVALID_VEHICLE_ID ) {
            aiVehicles[ g_KartbahnSlot[i][ASS_iVehicle] ] = VEH_KARTBAHN;
        }
    }
    return 1;
}

stock ClearKartbahn() {
    KillTimer( g_Kartbahn[AS_tID] );
    g_Kartbahn[AS_ibStatus] = 0;
    g_Kartbahn[AS_tickUpdate] = 0;
    for(new i = 0 ; i < MAX_PLAYERS ; i++) {
        if( Spieler[i][pFahrgeschaeft] == 4 ) {
            RemovePlayerKartbahn(i);
        }
    }
    for(new i = 0 ; i < sizeof(g_KartbahnSlot) ; i++) {
        SetVehicleToRespawn( g_KartbahnSlot[i][ASS_iVehicle] );
        g_KartbahnSlot[i][ASS_bUsed]= false;
    }
    return 1;
}
stock RemovePlayerKartbahn(playerid) {
    SetPlayerPos(playerid,-2038.8239,-97.9802,35.1641);
    SetPlayerFacingAngle(playerid,92.0);
    Streamer_Update(playerid);
    Spieler[playerid][pFahrgeschaeft] = -4;
    return 1;
}

forward Pulse_Fallturm();
public Pulse_Fallturm() {
    //printf("Pulse_Fallturm %d",g_FallTurm[FT_ibStatus]);
    if( g_FallTurm[FT_ibStatus] == 1 ) {
        // Start
        KillTimer( g_FallTurm[FT_tTimer] );
        g_FallTurm[FT_ibStatus] = 2;
        SendFahrgeschaeftMessage(0,COLOR_YELLOW,"Ticketverkäufer sagt: Der Fallturm setzt sich in Bewegung.");
        MoveUpFallturm();
    }
    else if( g_FallTurm[FT_ibStatus] == 3 ) {
        KillTimer(g_FallTurm[FT_tTimer]);
        g_FallTurm[FT_ibStatus] = 4;
        FallDownFallturm();
    }
    else if(g_FallTurm[FT_ibStatus] == 5) {
        KillTimer(g_FallTurm[FT_tTimer]);
        g_FallTurm[FT_ibStatus] = 6;
        MoveUpFallturm();
    }
    else if( g_FallTurm[FT_ibStatus] == 7 ) {
        KillTimer(g_FallTurm[FT_tTimer]);
        g_FallTurm[FT_ibStatus] = 8;
        FallDownFallturm();
    }
    else if( g_FallTurm[FT_ibStatus] == 9 ) {
        new
            Float:x = 374.2830,
            Float:y = -2123.8054;
        KillTimer(g_FallTurm[FT_tTimer]);
        g_FallTurm[FT_ibStatus] = 0;
        SendFahrgeschaeftMessage(0,COLOR_YELLOW,"Ticketverkäufer sagt: Die Fahrt ist zuende! Ich hoffe, dass Ihnen die Fahrt gefallen hat.");
        for(new i = 0 ; i < MAX_PLAYERS ; i++) {
            if( Spieler[i][pFahrgeschaeft] == 0 ) {
                Spieler[i][pFahrgeschaeft] = -1;
                //ResetPlayerPos(i,x + frandom(2.0,-2.0) ,y + frandom(2.0,-2.0) , 7.8831 );
                SetTimerEx("SetPlayerPosEx",110 + random(90),false,"dfffdd",i, x + frandom(2.0,-2.0) ,y + frandom(2.0,-2.0) , 7.8831, 0, 0);
                SetPlayerFacingAngle(i,83.5);
                SetCameraBehindPlayer(i);
                Streamer_Update(i);
            }
        }
        for(new i ; i < 4 ; i++) {
            g_FallTurm[FT_abUsed][i] = false;
        }
    }
    else if( g_FallTurm[FT_ibStatus] == 4 || g_FallTurm[FT_ibStatus] == 8 ) {
        new
            Float:x,
            Float:y,
            Float:z,

            Float:ox,
            Float:oy,
            Float:oz;
        GetDynamicObjectPos(g_FallTurm[FT_aiWagonObject][0],ox,oy,oz);
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( Spieler[i][pFahrgeschaeft] == 0 ) {
                if( !IsObjectFallturmWagon( GetPlayerSurfingObjectID(i) )) {
                    if( GetPlayerPos(i,x,y,z) ) {
                        SetPlayerPos(i,x,y,oz - 1.6 );
                    }
                }
            }
        }
    }
    return 1;
}

stock GetFreeFallTurmSlot() {
    new
        freecount;
    for(new i = 0 ; i < 4 ; i++) {
        if( g_FallTurm[FT_abUsed][i] == false ) {
            freecount++;
        }
    }
    //printf("GetFreeFallTurmSlot() free %d",free);
    if( freecount ) {
        new
            c,
            r = random(freecount);
        for(new i = 0 ; i < 4 ; i++) {
            if( g_FallTurm[FT_abUsed][i] == false ) {
                if( c == r) {
                    return i;
                }
                c++;
            }
        }
    }
    return -1;
}

stock MoveUpFallturm() {
	new
	    Float:x,
	    Float:y,
	    Float:z;
	for(new i ; i < 4 ; i++) {
		GetDynamicObjectPos( g_FallTurm[FT_aiWagonObject][i] , x,y,z);
		MoveDynamicObject( g_FallTurm[FT_aiWagonObject][i] , x , y, z + 80.0 , 4.5);
		//MoveDynamicObject( g_FallTurm[FT_aiCamera][i] , x , y, z + 80.0 , 2.85);
	}
	GetDynamicObjectPos( g_FallTurm[FT_iScheibeObjekt] , x,y,z);
	MoveDynamicObject( g_FallTurm[FT_iScheibeObjekt] , x , y, z + 80.0 , 4.5);
	return 1;
}
stock FallDownFallturm() {
	new
	    Float:speed,
	    Float:x,
	    Float:y,
	    Float:z;
	/*
	for(new i ; i < MAX_PLAYERS ; i++) {
	    if( Spieler[i][pFahrgeschaeft] == 0 ) {
	        TogglePlayerControllable(i,false);
	        SetCameraBehindPlayer(i);
	    }
	}
	*/
	KillTimer(g_FallTurm[FT_tTimer]);
	g_FallTurm[FT_tTimer] = SetTimer("Pulse_Fallturm",197,true);
	speed = frandom(25.0,23.0,3);
	for(new i ; i < 4 ; i++) {
		GetDynamicObjectPos( g_FallTurm[FT_aiWagonObject][i] , x, y , z);
		MoveDynamicObject( g_FallTurm[FT_aiWagonObject][i] , x , y, z - 80.0 , speed);
		//MoveDynamicObject( g_FallTurm[FT_aiCamera][i] , x , y, z - 80.0, speed);
	}
	GetDynamicObjectPos( g_FallTurm[FT_iScheibeObjekt] , x,y,z);
	MoveDynamicObject( g_FallTurm[FT_iScheibeObjekt] , x , y, z - 80.0 , speed);
	return 1;
}

stock SetPlayerToFahrgeschaeft(playerid,fahrgeschaeft) {
	if( fahrgeschaeft == 0 ) {  // fallturm
	    if( g_FallTurm[FT_ibStatus] == 0 || g_FallTurm[FT_ibStatus] == 1 ) { // Wartend oder Warm-Up
	        new
	            slot = GetFreeFallTurmSlot();
			//printf("GetFreeFallTurmSlot() %d",slot);
			if( slot == -1 ) {
			    return SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Fallturm ist bereits voll. Versuch es später erneut");
			}
	    	if( g_FallTurm[FT_ibStatus] == 0 ) {
		    	g_FallTurm[FT_tTimer] = SetTimer("Pulse_Fallturm",2*60*1000,false);
		    	g_FallTurm[FT_ibStatus] = 1;
			}
			new
			    Float:x,
			    Float:y,
			    Float:z;
			GetDynamicObjectPos( g_FallTurm[FT_aiWagonObject][slot] , x,y,z);
	    	SetPlayerPos( playerid, x,y,z );
	    	g_FallTurm[FT_abUsed][slot] = true;
	    	Spieler[playerid][pFahrgeschaeft] = fahrgeschaeft;
			SendFahrgeschaeftMessage(0,COLOR_YELLOW,"Ticketverkäufer sagt: Bitte warten. Fallturm beginnt in spätestens 2 Minuten!");
	    	GivePlayerCash(playerid,-300);
	    	SetCameraBehindPlayer(playerid);
			Streamer_Update(playerid);
	    }
	    else {
	        SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Ein Runde Fallturm läuft bereits");
	    }
	}
	else if( fahrgeschaeft == 1 ) { // autoscooter
	    if( g_AutoScooter[AS_ibStatus] == 0 || g_AutoScooter[AS_ibStatus] == 1 ) { // Wartend oder Warm-Up
	        new
	            slot = GetFreeAutoScooterSlot();
			if( slot == -1 ) {
			    return SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Autoscooter ist bereits voll. Versuch es später erneut");
			}
	    	if( g_AutoScooter[AS_ibStatus] == 0 ) {
		    	g_AutoScooter[AS_tID] = SetTimer("Pulse_Autoscooter",2*60*1000,false);
		    	g_AutoScooter[AS_ibStatus] = 1;
			}
	    	PutPlayerInVehicle(playerid, g_AutoScooterSlot[slot][ASS_iVehicle],0 );
	    	g_AutoScooterSlot[slot][ASS_bUsed] = true;
	    	SetCameraBehindPlayer(playerid);
			Streamer_Update(playerid);
	    	TogglePlayerControllable(playerid,false);
	    	Spieler[playerid][pFahrgeschaeft] = fahrgeschaeft;
			SendFahrgeschaeftMessage(1,COLOR_YELLOW,"Ticketverkäufer sagt: Bitte warten. Autoscooter beginnt in spätestens 2 Minuten");
	    	GivePlayerCash(playerid,-300);
	    }
	    else {
	        SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Ein Runde Autoscooter läuft bereits");
	    }
	}
	else if( fahrgeschaeft == 2 ) {// breakdancer
	    if( g_BreakDancer[BD_ibStatus] == 0 || g_BreakDancer[BD_ibStatus] == 1 ) { // Wartend oder Warm-Up
	        new
	            slot = GetFreeBreakdancerSlot();
			if( slot == -1 ) {
			    return SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Breakdancer ist bereits voll. Versuch es später erneut");
			}
	    	if( g_BreakDancer[BD_ibStatus] == 0 ) {
		    	g_BreakDancer[BD_tTimer] = SetTimer("Pulse_Breakdancer",2*60*1000,false);
		    	//g_BreakDancer[BD_tTimer] = SetTimer("Pulse_Breakdancer",2*1000,false);
		    	g_BreakDancer[BD_ibStatus] = 1;
			}
	    	SetPlayerPos( playerid, g_BreakDancerSlot[slot][BDS_fX] + 0.25 , g_BreakDancerSlot[slot][BDS_fY] + 0.35 , g_BreakDancerSlot[slot][BDS_fZ] - 1.5 );
	    	g_BreakDancerSlot[slot][BDS_bUsed] = true;
	    	SetCameraBehindPlayer(playerid);
			Streamer_Update(playerid);
	    	//TogglePlayerSpectating(playerid,true);
	    	Spieler[playerid][pFahrgeschaeft] = fahrgeschaeft;
			SendFahrgeschaeftMessage(2,COLOR_YELLOW,"Ticketverkäufer sagt: Bitte warten. Die Fahrt beginnt in spätestens 2 Minuten");
	    	GivePlayerCash(playerid,-300);
			ApplyAnimation(playerid, "ATTRACTORS", "STEPSIT_LOOP", 4.0, 1, 1, 1, 1, 0,1);
	    }
	    else {
	        SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Ein Runde BreakDancer läuft bereits");
	    }
	}
	else if( fahrgeschaeft == 3 ) {// schiff
	    SetPlayerToShip(playerid);
    	SetCameraBehindPlayer(playerid);
	    Streamer_Update(playerid);
	    Spieler[playerid][pFahrgeschaeftData] = gettime() + 1*60;
    	Spieler[playerid][pFahrgeschaeft] = fahrgeschaeft;
        SendClientMessage(playerid,COLOR_ORANGE,"Ticketverkäufer sagt: Du kannst nun 1 Minuten auf dem Schiff verbringen");
    }
    else if( fahrgeschaeft == 4 ) { // Kartbahn
        if( g_Kartbahn[AS_ibStatus] == 0 || g_Kartbahn[AS_ibStatus] == 1 ) { // Wartend oder Warm-Up
            new
                slot = GetFreeKartbahnSlot();
            if( slot == -1 ) {
                return SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Kartbahn ist bereits voll. Versuch es später erneut");
            }
            if( g_Kartbahn[AS_ibStatus] == 0 ) {
                g_Kartbahn[AS_tID] = SetTimer("Pulse_Kartbahn",2*60*1000,false);
                g_Kartbahn[AS_ibStatus] = 1;
            }
            PutPlayerInVehicle(playerid, g_KartbahnSlot[slot][ASS_iVehicle],0 );
            g_KartbahnSlot[slot][ASS_bUsed] = true;
            SetCameraBehindPlayer(playerid);
            Streamer_Update(playerid);
            TogglePlayerControllable(playerid,false);
            Spieler[playerid][pFahrgeschaeft] = fahrgeschaeft;
            SendFahrgeschaeftMessage(4,COLOR_YELLOW,"Ticketverkäufer sagt: Bitte warten. Das Kartrennen beginnt in spätestens 2 Minuten");
            GivePlayerCash(playerid,-300);
        }
        else {
            SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Ein Runde Kartrennen läuft bereits");
        }
    }
    else if( fahrgeschaeft == 5 ) { // Wasserscooter
        if( g_WasserScooter[AS_ibStatus] == 0 || g_WasserScooter[AS_ibStatus] == 1 ) { // Wartend oder Warm-Up
            new
                slot = GetFreeWasserScooterSlot();
            if( slot == -1 ) {
                return SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Jemand befindet sich bereits auf der Wasserbahn. Versuch es später erneut");
            }
            if( g_WasserScooter[AS_ibStatus] == 0 ) {
                g_WasserScooter[AS_tID] = SetTimer("Pulse_Wasserscooter",1*60,false);
                g_WasserScooter[AS_ibStatus] = 1;
            }
            PutPlayerInVehicle(playerid, g_WasserScooterSlot[slot][ASS_iVehicle],0 );
            g_WasserScooterSlot[slot][ASS_bUsed] = true;
            SetCameraBehindPlayer(playerid);
            Streamer_Update(playerid);
            TogglePlayerControllable(playerid,false);
            Spieler[playerid][pFahrgeschaeft] = fahrgeschaeft;
            SendFahrgeschaeftMessage(5,COLOR_YELLOW,"Ticketverkäufer sagt: Bitte warten. Wasserbahn beginnt in spätestens 1 Minute");
            GivePlayerCash(playerid,-300);
        }
        else {
            SendClientMessage(playerid,COLOR_RED,"Ticketverkäufer sagt: Jemand befindet sich bereits auf der Wasserbahn. Versuch es später erneut");
        }
    }
    return 1;
}

stock InitFallturm() {
    g_FallTurm[FT_ibStatus] = 0;
    g_FallTurm[FT_iScheibeObjekt] = CreateDynamicObject(19278, 385.37869, -2127.62549, 59.5,   0.00000, 180.00000, 0.00000);

    g_FallTurm[FT_aiWagonObject][0] = CreateDynamicObject(19277, 385.24939, -2133.14404, 8.55,   0.00000, 0.00000, 0.00000);
    g_FallTurm[FT_aiWagonObject][1] = CreateDynamicObject(19277, 380.04660, -2127.43018, 8.55,   0.00000, 0.00000, 272.58011);
    g_FallTurm[FT_aiWagonObject][2] = CreateDynamicObject(19277, 385.24939, -2122.27832, 8.55,   0.00000, 0.00000, 180.00000);
    g_FallTurm[FT_aiWagonObject][3] = CreateDynamicObject(19277, 390.41589, -2127.43018, 8.55,   0.00000, 0.00000, 90.00000);

    /*
    g_FallTurm[FT_aiCamera][0] = CreateDynamicObject(19300, 385.24939, -2133.14404, 8.29360 ,   0.00000, 0.00000, 0.00000);
    g_FallTurm[FT_aiCamera][1] = CreateDynamicObject(19300, 380.04660, -2127.43018, 8.29360 ,   0.00000, 0.00000, 272.58011);
    g_FallTurm[FT_aiCamera][2] = CreateDynamicObject(19300, 385.24939, -2122.27832, 8.29360 ,   0.00000, 0.00000, 180.00000);
    g_FallTurm[FT_aiCamera][3] = CreateDynamicObject(19300, 390.41589, -2127.43018, 8.29360 ,   0.00000, 0.00000, 90.00000);
    */

    Streamer_SetIntData(STREAMER_TYPE_OBJECT, g_FallTurm[FT_iScheibeObjekt] ,E_STREAMER_EXTRA_ID, OBJECT_FALLTURM_PLATTE );
    for(new i ; i < 4 ; i++) {
        // Streamer_SetIntData(STREAMER_TYPE_OBJECT, g_FallTurm[FT_aiWagonObject][i] ,E_STREAMER_EXTRA_ID, OBJECT_FALLTURM );
        g_FallTurm[FT_abUsed][i] = false;
    }
    return 1;
}
stock IsObjectFallturmWagon(objectid) {
    for(new i ; i  < 4 ; i++) {
        if( objectid == g_FallTurm[FT_aiWagonObject][i] ) {
            return 1;
        }
    }
    return 0;
}
// /schiff 372.10446 -2175.82153 20.05120
/*stock SchaukelschiffInit() {
    g_Schiff[S_ibStatus] = 0;
    g_Schiff[S_fSpeed] = frandom(9.0,7.5,3);
    g_Schiff[S_fX] = 372.10446;
    g_Schiff[S_fY] = -2175.82153;
    g_Schiff[S_fZ] = 20.05120;

    g_Schiff[S_fOffsetX] = 15.858;
    g_Schiff[S_fOffsetY] = 0.0;
    g_Schiff[S_fOffsetZ] = 15.000 - 5.740;

    g_Schiff[S_iObject] = CreateDynamicObject(8493, 372.10446, -2175.82153, 20.05120,   0.00000, 0.00000, 86.0);
    //Streamer_SetIntData(STREAMER_TYPE_OBJECT, g_Schiff[S_iObject] ,E_STREAMER_EXTRA_ID, OBJECT_SCHIFF );
    g_Schiff[S_ibStatus] = 1;
	MoveDynamicObject( g_Schiff[S_iObject] , g_Schiff[S_fX] , g_Schiff[S_fY], g_Schiff[S_fZ] + 0.5 , g_Schiff[S_fSpeed], frandom(35.0,28.0,3) , 0.0 , 86.0 );
	return 1;
}
forward Pulse_Schiff();
public Pulse_Schiff() {
    // printf("g_Schiff[S_ibStatus] %d",g_Schiff[S_ibStatus]);
    g_Schiff[S_fSpeed] = frandom(8.5,7.5,3);
	if( g_Schiff[S_ibStatus] == 2) {
	    g_Schiff[S_ibStatus] = 3;
		MoveDynamicObject( g_Schiff[S_iObject] , g_Schiff[S_fX] , g_Schiff[S_fY], g_Schiff[S_fZ] , g_Schiff[S_fSpeed], 0.0 , 0.0 , 86.0 );
	}
	else if( g_Schiff[S_ibStatus] == 5) {
	    g_Schiff[S_ibStatus] = 6;
		MoveDynamicObject( g_Schiff[S_iObject] , g_Schiff[S_fX] , g_Schiff[S_fY], g_Schiff[S_fZ] , g_Schiff[S_fSpeed], 0.0 , 0.0 , 86.0 );
	}
	return 1;
}*/

stock GetFreeBreakdancerSlot() {
    new
        freecount;
    for(new i = 0 ; i < sizeof(g_BreakDancerSlot) ; i++) {
        if( g_BreakDancerSlot[i][BDS_bUsed] == false ) {
            freecount++;
        }
    }
    if( freecount ) {
        new
            c,
            r = random(freecount);
        for(new i = 0 ; i < sizeof(g_BreakDancerSlot) ; i++) {
            if( g_BreakDancerSlot[i][BDS_bUsed] == false ) {
                if( c == r) {
                    return i;
                }
                c++;
            }
        }
    }
    return -1;
}

stock InitBreakdancer() {
    new
        i;
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 355.99719, -2153.05029, 10.65203,   0.00000, 0.00000, 39.35999);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 358.37784, -2152.10815, 10.65203,   0.00000, 0.00000, -3.96001);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 360.97186, -2151.81274, 10.65203,   0.00000, 0.00000, -29.04001);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 363.17868, -2153.27148, 10.65203,   0.00000, 0.00000, -49.92001);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 364.26526, -2155.45947, 10.65203,   0.00000, 0.00000, -96.48002);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 364.21054, -2158.06372, 10.65203,   0.00000, 0.00000, -121.14003);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 362.63095, -2160.13013, 10.65203,   0.00000, 0.00000, -149.87991);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 360.36526, -2161.11035, 10.65203,   0.00000, 0.00000, -191.03987);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 357.87384, -2160.74023, 10.65203,   0.00000, 0.00000, -214.49988);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 356.06296, -2159.25684, 10.65203,   0.00000, 0.00000, -258.89969);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 355.16202, -2157.21045, 10.65203,   0.00000, 0.00000, -258.05984);
    g_BreakDancerSlot[i++][BDS_iObject] = CreateDynamicObject(18879, 355.09671, -2155.01904, 10.65203,   0.00000, 0.00000, -286.43948);
    return 1;
}

forward Pulse_Breakdancer();
public Pulse_Breakdancer() {
    KillTimer(g_BreakDancer[BD_tTimer]);
    if( g_BreakDancer[BD_ibStatus] == 1 ) {
        //g_BreakDancer[BD_tTimer] = SetTimer("Pulse_Breakdancer",3*60*1000,false);
        g_BreakDancer[BD_tTimer] = SetTimer("Pulse_Breakdancer",20*1000,false);
        SendFahrgeschaeftMessage(2,COLOR_YELLOW,"Ticketverkäufer sagt: Die Fahrt beginnt. Viel Spaß!");
        g_BreakDancer[BD_ibStatus] = 2;
        for(new i = 0 ; i < sizeof(g_BreakDancerSlot) ; i++) {
            g_BreakDancerSlot[i][BDS_iStep] = i;
        }
        MoveBreakdancer();
    }
    else if( g_BreakDancer[BD_ibStatus] == 2 ) {
        g_BreakDancer[BD_tTimer] = SetTimer("Pulse_Breakdancer",6*1000,false);
        g_BreakDancer[BD_ibStatus] = 3;
    }
    else if( g_BreakDancer[BD_ibStatus] == 3 ) {
        SendFahrgeschaeftMessage(2,COLOR_YELLOW,"Ticketverkäufer sagt: Die Fahrt ist zuende! Ich hoffe, dass Ihnen die Fahrt gefallen hat.");
        for(new i = 0 ; i < MAX_PLAYERS ; i++) {
            if( Spieler[i][pFahrgeschaeft] == 2 ) {
                //TogglePlayerControllable(i,true);
                //TogglePlayerSpectating(i,false);
                //SetPlayerPos(i,356.7114,-2149.5613,7.8779);
                //Streamer_Update(i);
                Spieler[i][pFahrgeschaeft] = -1;
                SetPlayerPos(i,356.7114,-2149.5613,7.8779);
                SetPlayerFacingAngle(i,162.0);
                SetCameraBehindPlayer(i);
                ClearAnimations(i);
            }
        }
        g_BreakDancer[BD_tTimer] = SetTimer("Pulse_Breakdancer",3500,false);
        g_BreakDancer[BD_ibStatus] = 4;
    }
    else if( g_BreakDancer[BD_ibStatus] == 4 ) {
		for(new i = 0 ; i < sizeof(g_BreakDancerSlot) ; i++) {
		    StopObject(g_BreakDancerSlot[i][BDS_iObject]);
	    	SetDynamicObjectPos(g_BreakDancerSlot[i][BDS_iObject] ,g_BreakDancerSlot[i][BDS_fX],g_BreakDancerSlot[i][BDS_fY],g_BreakDancerSlot[i][BDS_fZ]);
	    	SetDynamicObjectRot(g_BreakDancerSlot[i][BDS_iObject] ,0.0,0.0,0.0);
	    	g_BreakDancerSlot[i][BDS_iStep] = 0;
	    	g_BreakDancerSlot[i][BDS_bUsed] = false;
		}
        g_BreakDancer[BD_ibStatus] = 0;
    }
    return 1;
}

stock MoveBreakdancer() {
	new
	    Float:speed,
	    Float:rx,
	    Float:ry,
	    Float:rz,
	    slot;
	if( g_BreakDancer[BD_ibStatus] == 4 ) {
	    speed = frandom(2.0,1.8,3); // langsamer,da ende
	}
	else {
	    speed = frandom(4.3,4.1,3);
	}
	for(new i = 0 ; i < sizeof(g_BreakDancerSlot) ; i++) {
	    slot = (++g_BreakDancerSlot[i][BDS_iStep]) % sizeof(g_BreakDancerSlot);
		rx = frandom(10.0,-10.0,2);
		ry = frandom(10.0,-10.0,2);
		rz = frandom(360.0,0.0,2);
	    MoveDynamicObject( g_BreakDancerSlot[i][BDS_iObject],g_BreakDancerSlot[slot][BDS_fX],g_BreakDancerSlot[slot][BDS_fY],g_BreakDancerSlot[slot][BDS_fZ],speed,rx,ry,rz);
	}
	return 1;
}

stock ResetPlayerPos(playerid,Float:x,Float:y,Float:z) {
    //printf("ResetPlayerPos(%d)",playerid);
    Spieler[playerid][ResetX] = x;
    Spieler[playerid][ResetY] = y;
    Spieler[playerid][ResetZ] = z;
    return 1;
}
stock SetPlayerToShip(playerid) {
	new
	    Float:x,
	    Float:y,
	    Float:z;
	GetDynamicObjectPos(g_Schiff[S_iObject],x,y,z);
	SetPlayerPos(playerid,x,y,z - 0.5);
	return 1;
}


stock AddOnlinePlayer(playerid) {
    new
        String[128];
    format(String,sizeof(String),"INSERT INTO `onlineplayers` (`playername`, `id`) VALUES ('%s', '%d')",GetName(playerid),playerid);
    mysql_oquery( String ,  THREAD_ADDONLINEPLAYER , 0 ,gSQL);
    return 1;
}
stock DeleteOnlinePlayer(playerid) {
    new
        String[100];
    format(String,sizeof(String),"DELETE FROM `onlineplayers` WHERE `playername` = '%s'",GetName(playerid));
    mysql_oquery( String ,  THREAD_DELONLINEPLAYER , 0 ,gSQL);
    return 1;
}
stock ClearOnlinePlayers() {
    mysql_oquery( "TRUNCATE `onlineplayers`" ,  THREAD_DUMMY , 0 ,gSQL);
    return 1;
}
forward Pulse_Banksystem();
public Pulse_Banksystem() {
    mysql_oquery( "SELECT * FROM `bank` WHERE `PushOnlineAn` = 1 OR `PushOnlineVon` = 1" ,  THREAD_BANKSYSTEM , gettime() ,gSQL);
    return 1;
}
forward Pulse_TSBOT();
public Pulse_TSBOT() {
    SendRconCommand("reloadfs TS-Controller");//
    return 1;
}


stock IsSecurePassword(password[]) {
    new
        numbers,
        len;
    len = strlen(password);
    if( len < 8 ) {
        return 0;
    }
    for(new i = 0 ; i < len ; i++) {
        if( password[i] >= '0' && password[i] <= '9' ) {
            numbers++;
        }
    }
    if( numbers < 2 ) {
        return 0;
    }
    return 1;
}

// credits go to: RyDeR`
stock randomString(strDest[], strLen = 32)
{
    while(strLen--)
        strDest[strLen] = random(2) ? (random(26) + (random(2) ? 'a' : 'A')) : (random(10) + '0');
}

stock HashPasswords() {
    mysql_oquery("SELECT `Name` FROM `accounts` WHERE `SaltKey` = ''",THREAD_HASHPASSWORDS,INVALID_PLAYER_ID,gSQL);
    return 1;
}

stock UpdateUserPassword(playerid,password[]) {
    new
        sql[220],
        rndstring[33];
    randomString( rndstring );
    format(sql,sizeof(sql),"UPDATE `accounts` SET `Passwort` = SHA2( CONCAT('%s','%s'),256 ) ,`SaltKey` = '%s' WHERE `Name` = '%s'",password,rndstring,rndstring,GetName(playerid));
    mysql_pquery(sql,THREAD_UPDATE_PLAYER_PASSWORD,playerid,gSQL,MySQLThreadOwner);
    return 1;
}



stock SetRandomPoliceTask(playerid) {
    new
        police = INVALID_PLAYER_ID,
        count,
        r;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if(i != playerid ) {
                if( Spieler[i][pFraktion] == 1 ||
                    Spieler[i][pFraktion] == 16) {
                    if( Spieler[i][pDuty] == 1 && Spieler[i][pDutyTask] == 0 ) {
                        count++;
                    }
                }
            }
        }
    }
    //printf("SetRandomPoliceTask(%d) count = %d",playerid,count);
    if(count) {
        r = random(count);
        count = 0;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i) ) {
                if(i != playerid ) {
                    if( Spieler[i][pFraktion] == 1 ||
                        Spieler[i][pFraktion] == 16) {
                        if( Spieler[i][pDuty] == 1 && Spieler[i][pDutyTask] == 0 ) {
                            if(count == r ) {
                                police = i;
                                break;
                            }
                            count++;
                        }
                    }
                }
            }
        }
        //
        new
            String[128],
            Float:x,
            Float:y,
            Float:z;
        GetPlayerPos(playerid,x,y,z);
        SendClientMessage(police,COLOR_ORANGE,"[LEITZENTRALE] Ein Notruf ist eingegangen, fahren Sie dorthin!");
        //format(String,sizeof(String),"Anrufer: %s, meldet: %s.",GetName(playerid,("Text"));
        //SendClientMessage(playerid,COLOR_ORANGE,String);

        format(String,sizeof(String),"[LEITZENTRALE] Polizeibeamter %s wurde in ein Notruf zugeordnet und ist nicht verfügbar!",GetName(police));
        SendFraktionMessage(1, COLOR_RED, String);
        SendFraktionMessage(2, COLOR_RED, String);
        SendFraktionMessage(16, COLOR_RED, String);
        Spieler[police][pDutyTask] = 1;

        KillTimer(pBackupTimer[police]);
        SetPlayerCheckpointEx(police, x, y, z, 5.0, CP_BACKUP);
        pBackupTimer[police] = SetTimerEx("RemoveBackupCP", 30000, 0, "i", police);
        //printf("SetRandomPoliceTask(%d) police = %d",playerid,police);
        return 1;
    }
    return 0;
}

stock SetRandomOAMTTask(playerid) {
    new
        oamt = INVALID_PLAYER_ID,
        count,
        r;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if(i != playerid ) {
                if( Spieler[i][pFraktion] == 5) {
                    if( Spieler[i][pDuty] == 1 && Spieler[i][pDutyTask] == 0 ) {
                        count++;
                    }
                }
            }
        }
    }
    //printf("SetRandomPoliceTask(%d) count = %d",playerid,count);
    if(count) {
        r = random(count);
        count = 0;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i) ) {
                if(i != playerid ) {
                    if( Spieler[i][pFraktion] == 5) {
                        if( Spieler[i][pDuty] == 1 && Spieler[i][pDutyTask] == 0 ) {
                            if(count == r ) {
                                oamt = i;
                                break;
                            }
                            count++;
                        }
                    }
                }
            }
        }
        //
        new
            String[128],
            Float:x,
            Float:y,
            Float:z;
        GetPlayerPos(playerid,x,y,z);
        SendClientMessage(oamt,COLOR_ORANGE,"[LEITZENTRALE] Ein Service-Ruf ist eingegangen, fahren Sie dorthin!");
        //format(String,sizeof(String),"Anrufer: %s, meldet: %s.",GetName(playerid,("Text"));
        //SendClientMessage(playerid,COLOR_ORANGE,String);

        format(String,sizeof(String),"[LEITZENTRALE] Ordnungsbeamter %s wurde in einem Service-Ruf zugeordnet und ist nicht verfügbar!",GetName(oamt));
        SendFraktionMessage(5, COLOR_RED, String);
        Spieler[oamt][pDutyTask] = 1;

        KillTimer(pBackupTimer[oamt]);
        SetPlayerCheckpointEx(oamt, x, y, z, 5.0, CP_BACKUP);
        pBackupTimer[oamt] = SetTimerEx("RemoveBackupCP", 30000, 0, "i", oamt);
        //printf("SetRandomPoliceTask(%d) police = %d",playerid,police);
        return 1;
    }
    return 0;
}

stock SetRandomMedicTask(playerid) {
    new
        medic = INVALID_PLAYER_ID,
        count,
        r;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if(i != playerid ) {
                if( Spieler[i][pFraktion] == 3) {
                    if( Spieler[i][pDuty] == 1 && Spieler[i][pDutyTask] == 0 ) {
                        count++;
                    }
                }
            }
        }
    }
    if(count) {
        r = random(count);
        count = 0;
        for(new i ; i < MAX_PLAYERS ; i++) {
            if( IsPlayerConnected(i) ) {
                if(i != playerid ) {
                    if( Spieler[i][pFraktion] == 3) {
                        if( Spieler[i][pDuty] == 1 && Spieler[i][pDutyTask] == 0 ) {
                            if(count == r ) {
                                medic = i;
                                break;
                            }
                            count++;
                        }
                    }
                }
            }
        }
        //
        new
            String[128],
            Float:x,
            Float:y,
            Float:z;
        GetPlayerPos(playerid,x,y,z);
        SendClientMessage(medic,COLOR_ORANGE,"[LEITZENTRALE] Ein Notruf ist eingegangen, fahren Sie dorthin!");

        format(String,sizeof(String),"[LEITZENTRALE] Notarzt %s wurde in ein Notruf zugeordnet und ist nicht verfügbar!",GetName(medic));
        SendFraktionMessage(3, COLOR_RED, String);
        Spieler[medic][pDutyTask] = 1;

        KillTimer(pBackupTimer[medic]);
        SetPlayerCheckpointEx(medic, x, y, z, 5.0, CP_BACKUP);
        pBackupTimer[medic] = SetTimerEx("RemoveBackupCP", 30000, 0, "i", medic);
        return 1;
    }
    return 0;
}

stock InitAdienstMeldung() {
    new Text:AdminDraw;
    AdminDraw = TextDrawCreate(320.000000, 376.000000, "~r~ Du bist im Admindienst!");
    TextDrawAlignment(AdminDraw, 2);
    TextDrawBackgroundColor(AdminDraw, 255);
    TextDrawFont(AdminDraw, 1);
    TextDrawLetterSize(AdminDraw, 0.509999, 2.299999);
    TextDrawColor(AdminDraw, -16776961);
    TextDrawSetOutline(AdminDraw, 1);
    TextDrawSetProportional(AdminDraw, 1);
    TextDrawUseBox(AdminDraw, 1);
    TextDrawBoxColor(AdminDraw, 85);
    TextDrawTextSize(AdminDraw, 417.000000, 137.000000);
    g_AdienstMeldung[OnDuty] = AdminDraw;
    return 1;
}

stock InitZentralMeldung() {
    new Text:Textdraw0;
    Textdraw0 = TextDrawCreate(108.000000, 288.000000, "~y~ZENTRALE~w~: verfuegbar");
    TextDrawAlignment(Textdraw0, 2);
    TextDrawBackgroundColor(Textdraw0, 255);
    TextDrawFont(Textdraw0, 1);
    TextDrawLetterSize(Textdraw0, 0.250000, 1.600000);
    TextDrawColor(Textdraw0, -1);
    TextDrawSetOutline(Textdraw0, 0);
    TextDrawSetProportional(Textdraw0, 1);
    TextDrawSetShadow(Textdraw0, 1);
    TextDrawUseBox(Textdraw0, 1);
    TextDrawBoxColor(Textdraw0, 85);
    TextDrawTextSize(Textdraw0, 195.000000, 195.000000);
    g_Zentralmeldung[Z_tdVerfuegbar] = Textdraw0;

    Textdraw0 = TextDrawCreate(108.000000, 288.000000, "~y~ZENTRALE~r~: nicht verfuegbar");
    TextDrawAlignment(Textdraw0, 2);
    TextDrawBackgroundColor(Textdraw0, 255);
    TextDrawFont(Textdraw0, 1);
    TextDrawLetterSize(Textdraw0, 0.250000, 1.600000);
    TextDrawColor(Textdraw0, -1);
    TextDrawSetOutline(Textdraw0, 0);
    TextDrawSetProportional(Textdraw0, 1);
    TextDrawSetShadow(Textdraw0, 1);
    TextDrawUseBox(Textdraw0, 1);
    TextDrawBoxColor(Textdraw0, 85);
    TextDrawTextSize(Textdraw0, 195.000000, 195.000000);
    g_Zentralmeldung[Z_tdNichtVerfuegbar] = Textdraw0;
    return 1;
}

stock HasWeaponBlock(playerid) {
    if( gettime() <= Spieler[playerid][pWaffenSperre]) {
        return 1;
    }
    return 0;
}
stock SendWeaponBlockInfo(playerid) {
    if( Spieler[playerid][pWaffenSperre] > 1 && Spieler[playerid][pWaffenSperre] > gettime() ) {
        new
            year,
            m,
            d,
            h,
            minute,
            sec,
            String[128];
        TimestampToDate( Spieler[playerid][pWaffenSperre] , year,m,d,h,minute,sec,1,0);
        SendClientMessage(playerid,COLOR_RED,"Du hast aufgrund eines Regelverstoßes eine Waffensperre erteilt bekommen!");
        format(String,sizeof(String),"Ablauf: %02d.%02d.%d - %d:%d",d,m,year,h,minute);
        SendClientMessage(playerid,COLOR_RED,String);
        return 1;
    }
    return 0;
}

stock InitSchilder() {
	new
	    modelid,
	    Float:Z,
	    Float:X,
	    Float:Y;
	// TODO: Peek schilder map file?
    /*LV und SF Schilder
	CreateDynamicObject(1324, -1753.73096, -619.88928, 17.60860, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, -1768.81104, -619.88928, 17.60860, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1324, -2001.11462, 145.46530, 28.14950, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, -2011.87463, 145.46530, 28.14950, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, -2350.88452, -75.34860, 35.76590, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1324, -2350.88452, -65.20860, 35.78590, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1324, -2711.35205, 2.09120, 4.80350, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1324, -2701.61206, 2.09120, 4.78350, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, -1564.04590, 482.17050, 7.65400, 0.10000, 0.00000, -130.00000);
	CreateDynamicObject(1324, -1576.31860, 490.28519, 7.65400, 0.10000, 0.00000, 60.00000);
	CreateDynamicObject(1324, 1798.60059, 679.34583, 16.93130, 0.00000, 0.00000, -97.30000);
	CreateDynamicObject(1324, 1769.11023, 684.26971, 17.29130, 0.00000, 0.00000, 90.30000);
	CreateDynamicObject(1324, 1917.70923, 638.44830, 11.27390, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1324, 1917.70923, 628.00830, 11.27390, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1324, 1917.09058, 768.03497, 11.27390, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1324, 1917.09058, 778.45502, 11.27390, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1324, 2152.63867, 692.86243, 11.27390, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, 2142.19873, 692.86243, 11.27390, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1324, 2077.63306, 1393.56421, 11.27390, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, 2037.17310, 1393.56421, 11.27390, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1324, 1812.34973, 1993.14111, 5.13390, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, 1782.38965, 1993.14111, 5.13390, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1324, 2732.60010, 1662.03870, 7.11390, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, 2702.70020, 1662.03870, 7.11390, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1324, 1927.11963, 2543.57422, 7.11390, 0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1324, 1927.11963, 7.11390, 7.11390, 0.00000, 0.00000, 20.00000);
	CreateDynamicObject(1324, 1934.44995, 2514.51904, 7.11390, 0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1324, 2037.72705, 2649.45410, 11.29370, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1324, 2037.72705, 2639.03418, 11.29370, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1324, 2027.75183, 2736.95947, 11.27110, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1324, 2027.75183, 2747.41943, 11.25110, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1324, 1597.07214, 2728.07520, 11.23400, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1324, 1597.07214, 2738.41528, 11.23400, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1324, 1527.04846, 2584.65723, 11.24970, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1324, 1527.12854, 2594.97729, 11.24970, 0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1324, 1327.00073, 2594.97803, 11.27760, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1324, 1327.00073, 2584.61792, 11.27760, 0.00000, 0.00000, 180.00000);*/
	//LS Schilder und Autobahn
    CreateDynamicObject(1324, 2498.3999, -2303, 25.2, 0, 0, 134);
    CreateDynamicObject(1324, 2506.3999, -2295.8, 25.1, 0, 0, 314);
    CreateDynamicObject(1324, 1967, -2094.5, 14, 0, 0, 270);
    CreateDynamicObject(1324, 1956.3, -2094.7, 14, 0, 0, 89.5);
    CreateDynamicObject(1324, 2027.2, -1927.1, 14, 0, 0, 0);
    CreateDynamicObject(1324, 2026.7, -1942.6, 14, 0, 0, 178);
    CreateDynamicObject(1324, 2320, -1653.5, 14.6, 0, 0, 0);
    CreateDynamicObject(1324, 2320.2, -1664.4, 14.6, 0, 0, 182);
    CreateDynamicObject(1324, 2033.1, -1747, 14, 0, 0, 0);
    CreateDynamicObject(1324, 2032.5, -1757.5, 14, 0, 0, 180);
    CreateDynamicObject(1324, 2112.8999, -1295.5, 24.5, 0, 0, 0);
    CreateDynamicObject(1324, 2113, -1306.2, 24.5, 0, 0, 182);
    CreateDynamicObject(1324, 1773.4, -1727.1, 14, 0, 0, 0);
    CreateDynamicObject(1324, 1773, -1737.4, 14, 0, 0, 180);
    CreateDynamicObject(1324, 1370.8, -1727, 14, 0, 0, 0);
    CreateDynamicObject(1324, 1370.8, -1737.5, 14, 0, 0, 178);
    CreateDynamicObject(1324, 1524.6, -1954.2, 20.5, 0, 0, 86);
    CreateDynamicObject(1324, 1535.3, -1954, 20.3, 0, 0, 272);
    CreateDynamicObject(1324, 1156.3, -1846.9, 14, 0, 0, 0);
    CreateDynamicObject(1324, 1156, -1857.5, 14, 0, 0, 178);
    CreateDynamicObject(1324, 1100.1, -1707, 14, 0, 0, 0);
    CreateDynamicObject(1324, 1099.9, -1717.5, 14, 0, 0, 180);
    CreateDynamicObject(1324, 1043.7, -2302, 13.6, 0, 0, 118);
    CreateDynamicObject(1324, 1066.3, -2289.7, 13.6, 0, 0, 298);
    CreateDynamicObject(1324, 655.29999, -1730.4, 14.4, 0, 0, 350);
    CreateDynamicObject(1324, 648.70001, -1755.2, 13.9, 0, 0, 166);
    CreateDynamicObject(1324, 546.29999, -1508.9, 15, 0, 0, 272);
    CreateDynamicObject(1324, 524.29999, -1508.9, 15, 0, 0, 90);
    CreateDynamicObject(1324, 514.79999, -1255.2, 16.7, 0, 0, 38);
    CreateDynamicObject(1324, 526.5, -1272.1, 16.8, 0, 0, 216);
    CreateDynamicObject(1324, 1090.1, -1577.5, 14, 0, 0, 180);
    CreateDynamicObject(1324, 1090.3, -1567.1, 14, 0, 0, 2);
    CreateDynamicObject(1324, 1013.6, -1390.1, 13.8, 0, 0, 0);
    CreateDynamicObject(1324, 1013.5, -1411.1, 13.7, 0, 0, 180);
    CreateDynamicObject(1324, 1337.4, -1374.9, 14.1, 0, 0, 90);
    CreateDynamicObject(1324, 1362.9, -1375.1, 14.1, 0, 0, 270);
    CreateDynamicObject(1324, 1373.8, -1058.3, 27.3, 0, 0, 266);
    CreateDynamicObject(1324, 1347.9, -1056.4, 27.3, 0, 0, 84);
    CreateDynamicObject(1324, 1258, -721.59998, 94.6, 0, 0, 24);
    CreateDynamicObject(1324, 1261.2, -730.59998, 94.7, 0, 0, 202);
    CreateDynamicObject(1324, 1125.5, -940, 43.4, 0, 0, 0);
    CreateDynamicObject(1324, 1126.8, -961, 43.2, 0, 0, 184);
    CreateDynamicObject(1324, 1141.1, -1033.9, 32.5, 0, 0, 0);
    CreateDynamicObject(1324, 1140.7, -1044.7, 32.4, 0, 0, 178);
    CreateDynamicObject(1324, 1000, -1135.4, 24.3, 0, 0, 0);
    CreateDynamicObject(1324, 998.79999, -1154.8, 24.3, 0, 0, 182);
    CreateDynamicObject(1324, 791.79999, -1370.4, 14, 0, 0, 88);
    CreateDynamicObject(1324, 802.70001, -1370.7, 14, 0, 0, 272);
    CreateDynamicObject(1324, 2902.2, -856.79999, 11.5, 0, 0, 268);
    CreateDynamicObject(1324, 2866, -856.40002, 11.6, 0, 0, 88);
    CreateDynamicObject(1323, 1480.6, -967.70001, 37.1, 0, 0, 152);
    CreateDynamicObject(1323, 1717.5, -692, 46.3, 0, 0, 264);
    CreateDynamicObject(1323, 1692, -688.20001, 46.3, 0, 0, 80);
    CreateDynamicObject(1323, 1594.1, -1760.7, 28.3, 0, 0, 102);
    CreateDynamicObject(1323, 1624.6, -1756.2, 28.4, 0, 0, 280);
    CreateDynamicObject(1323, 1963.8, -1492.6, 4, 0, 0, 0);
    CreateDynamicObject(1323, 1963.7, -1522.6, 4, 0, 0, 182);
    //Verkehrsberuhigte Zone
    CreateDynamicObject(8548, 1558.15564, -1737.48230, 13.75410,   0.00000, 0.00000, 265.49109);
    CreateDynamicObject(8548, 1558.15564, -1726.94690, 13.75410,   0.00000, 0.00000, 85.52088);
    //CreateDynamicObject(8548, 1434.65601, -1662.11084, 13.75410,   0.00000, 0.00000, 0.00000);//SH
    //CreateDynamicObject(8548, 1424.29236, -1662.36926, 13.75410,   0.00000, 0.00000, -178.00000);//sh
    CreateDynamicObject(8548, 1447.63989, -1597.48877, 13.75410,   0.00000, 0.00000, 268.51483);
    CreateDynamicObject(8548, 1447.63989, -1587.06335, 13.75410,   0.00000, 0.00000, 85.34580);
    CreateDynamicObject(8548, 1543.63818, -1597.68958, 13.75410,   0.00000, 0.00000, 272.20981);
    CreateDynamicObject(8548, 1543.63818, -1586.82422, 13.75410,   0.00000, 0.00000, 85.25610);
    CreateDynamicObject(8548, 1418.56360, -1726.93066, 13.68501,   0.00000, 0.00000, 86.50762);
	//CreateDynamicObject(8548, 1418.56360, -1737.53503, 13.68500,   0.00000, 0.00000, 264.23343);

    for(new i , j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT) ; i < j ; i++) {
        if( IsValidDynamicObject(i) ) {
            modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT,i,E_STREAMER_MODEL_ID);
            if( modelid == 1324 ) {
                GetDynamicObjectPos(i,X,Y,Z);
                CreateDynamic3DTextLabel("{FF0000}Geschwindigkeit:{FFA500}\n80 km/h",0xFFFFFFFF,X,Y,Z + 1.5,42.0, .testlos = 1);
            }
            else if( modelid == 1323 ) {
                GetDynamicObjectPos(i,X,Y,Z);
                CreateDynamic3DTextLabel("{FF0000}Geschwindigkeit:{FFA500}\n130 km/h",0xFFFFFFFF,X,Y,Z + 1.5,45.0, .testlos = 1);
            }
            else if( modelid == 8548 ) {
                GetDynamicObjectPos(i,X,Y,Z);
                CreateDynamic3DTextLabel("{0077FF}VERKEHRSBERUHIGTE ZONE\n{FF0000}Geschwindigkeit:{FFA500}\n40 km/h",0xFFFFFFFF,X,Y,Z + 1.5,42.0, .testlos = 1);
            }
            else if( modelid == 1350 ) {
                GetDynamicObjectPos(i,X,Y,Z);
                CreateDynamic3DTextLabel("{FFFFFE}An dieser Ampel\n{FFFFFE}bei {FF0000}ROT{FFFFFE} halten!\nGilt von 15.00 bis 22.00 Uhr",0xFFFFFFFF,X,Y,Z + 1.5,20.0, .testlos = 1);
            }
        }
    }
    return 1;
}
stock IsPlayerAtParkautomat(playerid)
{
    for(new a=0;a<g_iParkscheinAutomat;a++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 3.0, g_ParkscheinAutomat[a][PA_fX], g_ParkscheinAutomat[a][PA_fY], g_ParkscheinAutomat[a][PA_fZ]))
        {
            return a;
        }
    }
    return 999;
}

stock InitParkscheibe() {
	new
	    modelid,
	    Float:Z,
	    Float:X,
	    Float:Y;
	// TODO: Peek parkscheiben map file?
    CreateDynamicObject(963, 1351.64575, -1270.84008, 13.41868, 90.00000, 0.00000, 0.00000); //Hauptammu Parkscheinautomat
	CreateDynamicObject(963, 1523.273559, -1799.463867, 13.636719, 89.699981, 89.302856, 179.996978); // STADTHALLE PARKSCHEINAUTOMAT
	CreateDynamicObject(963, 1431.887084, -1798.368774, 13.632292, 89.699981, 89.302856, 0.597012); // STADTHALLE PARKSCHEINAUTOMAT
	for(new i , j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT) ; i < j ; i++) {
	    if( IsValidDynamicObject(i) ) {
	        modelid = Streamer_GetIntData(STREAMER_TYPE_OBJECT,i,E_STREAMER_MODEL_ID);
	        if( modelid == 963 ) {
	            if(g_iParkscheinAutomat >= sizeof(g_ParkscheinAutomat)) continue;
	            GetDynamicObjectPos(i,X,Y,Z);
	            CreateDynamic3DTextLabel("{FF0000}- PARKSCHEIN-AUTOMAT -{FFA500}\nBefehl: /Parkschein",0xFFFFFFFF,X,Y,Z + 1.2,15.0, .testlos = 1);
                g_ParkscheinAutomat[g_iParkscheinAutomat][PA_fX] = X;
                g_ParkscheinAutomat[g_iParkscheinAutomat][PA_fY] = Y;
                g_ParkscheinAutomat[g_iParkscheinAutomat][PA_fZ] = Z;
                g_iParkscheinAutomat++;

            }
        }
    }
    return 1;
}

stock GetVehicleName(modelid) {
    new String[50];
    if (modelid > 400 && modelid < 611)
        format(String, sizeof(String), "%s", CarName[modelid - 400]);
        
    return String;
}

// Now use GetWeaponNameExEx
stock GetWeaponNameEx(weaponid, weapon[], len = sizeof(weapon))
{
    switch (weaponid)
    {
        case 18:
        {
            return weapon[0] = 0, strcat(weapon, "Molotov Cocktail", len), true;
        }
        case 44:
        {
            return weapon[0] = 0, strcat(weapon, "Thermal Goggles", len), true;
        }
        case 45:
        {
            return weapon[0] = 0, strcat(weapon, "Night Vision Goggles", len), true;
        }
        default:
        {
            return GetWeaponName(weaponid, weapon, len);
        }
    }
    return false;
}

//Für neue Hitbox ausklammern
/*
stock ReturnWeaponName(weaponid) {
    new string[64];
    GetWeaponNameEx(weaponid, string, sizeof(string));

    return string;
}*/



stock GZ_GetBestKiller(fraktion) {
    new
        tmp_kills = -1,
        tmp_playerid = INVALID_PLAYER_ID;
    for(new i ; i < MAX_PLAYERS ; i++) {
        if( IsPlayerConnected(i) ) {
            if( Spieler[i][pFraktion] == fraktion ) {
                if( Spieler[i][pKillsGangFightSession] > tmp_kills ) {
                    tmp_kills = Spieler[i][pKillsGangFightSession];
                    tmp_playerid = i;
                }
            }
        }
    }
    return tmp_playerid;
}

forward PlayerLoginTimeout(playerid);
public PlayerLoginTimeout(playerid) {
    SendClientMessage(playerid,COLOR_RED,"Deine Anmeldungszeit (30 Sekunden) ist abgelaufen, deshalb wurdest du gekickt vom Server!");
    KickDelay(playerid);
    return 1;
}

forward PlayerRegsperreKick(playerid);
public PlayerRegsperreKick(playerid) {
    SendClientMessage(playerid,COLOR_RED,"Die Registration ist aus aktuellem Anlass deaktiviert, deshalb wurdest du gekickt vom Server!");
    KickDelay(playerid);
    return 1;
}

stock IsValidVorname(string[]) {
    new len = strlen(string);
    new forbiddenChars[64] = "0123456789!\"§$%&/()=?]}[{-:,;_#+*><|~@'";

    if (len < 3)
        return false;

    for (new i; i < len; i++)
        for (new j; j < strlen(forbiddenChars); j++)
            if (string[i] == forbiddenChars[j])
                return false;

    return true;
}

stock IsValidEmail(const email[]) //By Jan "DracoBlue" Schütze - Edited by Jeffry.
{
    new len=strlen(email);
    new cstate=0;
    for(new i=0;i<len;i++)
    {
        if ((cstate==0 || cstate==1) && (email[i]>='A' && email[i]<='Z') || (email[i]>='a' && email[i]<='z')  || (email[i]>='0' && email[i]<='9')  || (email[i]=='.')  || (email[i]=='-')  || (email[i]=='_'))
        {
        }
        else
        {
            if ((cstate==0) &&(email[i]=='@'))
            {
                cstate=1;
            }
            else
            {
                return false;
            }
        }
    }
    if (cstate<1)
    {
        return false;
    }
    if (len<6)
    {
        return false;
    }
    if ((email[len-3]=='.') || (email[len-4]=='.') || (email[len-5]=='.'))
    {
        return true;
    }
    return false;
}

stock GetHausMoebelIndex(itemid) {
    for(new i ; i < sizeof(g_HausMoebel); i++) {
        if( g_HausMoebel[i][HM_iID] == itemid ) {
            return i;
        }
    }
    return -1;
}
stock GetHausMoebelItemTitle(itemid) {
    new
        String[64] = "Fehler";
    for(new i ; i < sizeof(g_HausMoebel); i++) {
        if( g_HausMoebel[i][HM_iID] == itemid ) {
            String[0] = '\0';
            strcat(String,g_HausMoebel[i][HM_sTitel],sizeof(String));
            break;
        }
    }
    return String;
}

stock GetHausMoebelItemPrice(itemid) {
    for(new i ; i < sizeof(g_HausMoebel); i++) {
        if( g_HausMoebel[i][HM_iID] == itemid ) {
            return g_HausMoebel[i][HM_iPrice];
        }
    }
    return 0;
}

// - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
stock Hausmoebel_ResetHausMoebel(haus,itemid) {
    g_HausMoebelObjekt[haus][itemid][HMO_iMoebelID] = 0;
    if( IsValidDynamicObject(g_HausMoebelObjekt[haus][itemid][HMO_iObjectID])) {
        DestroyDynamicObject(g_HausMoebelObjekt[haus][itemid][HMO_iObjectID]);
    }
    g_HausMoebelObjekt[haus][itemid][HMO_iObjectID] = INVALID_OBJECT_ID;
    // g_HausMoebelObjekt[haus][itemid][HMO_iHouseID] = 0;
    g_HausMoebelObjekt[haus][itemid][HMO_iID] = 0;
    return 1;
}
stock Hausmoebel_Init() {
    for(new i = 0 ; i < sizeof(g_HausMoebelObjekt);i++) {
        for(new j = 0 ; j < MAX_HAUS_MOEBEL ; j++) {
            Hausmoebel_ResetHausMoebel(i,j);
        }
    }
    mysql_oquery("SELECT * FROM `hausmoebel`",THREAD_LOADHAUSMOEBEL,INVALID_PLAYER_ID,gSQL);
    return 1;
}
stock GetMoebelKatalogMenuTitle(id) {
    new
        str[32] = "Error";
    for(new i = 0 ; i < sizeof(g_HausMoebelKategorie); i++) {
        if( g_HausMoebelKategorie[i][HMK_iID] == id ) {
            str[0] = '\0';
            strcat(str,g_HausMoebelKategorie[i][HMK_sTitel],sizeof(str));
            break;
        }
    }
    return str;
}
stock GetHausMoebelFreeSlot(hausid) { // hausid = index
    for(new i ; i < sizeof(g_HausMoebelObjekt[]);i++) {
        if( g_HausMoebelObjekt[hausid][i][HMO_iObjectID] == INVALID_OBJECT_ID ) {
            return i;
        }
    }
    return -1;
}
stock GetMoebelKategorieItem(kategorieid,item) {
    new
        c;
    for(new i ; i < sizeof(g_HausMoebel);i++) {
        if(g_HausMoebel[i][HM_iHMKID] == kategorieid) {
            if( c == item ) {
                return g_HausMoebel[i][HM_iID];
            }
            c++;
        }
    }
    return 0;
}

stock GetMoebelMoebelID(playerid,dbid) {
    new
        id,
        h;
    h = Spieler[playerid][pPlayerHouse];
    for(new i = 0 ; i < MAX_HAUS_MOEBEL ; i++) {
        id = g_HausMoebelObjekt[h][i][HMO_iID];
        if( dbid == id ) {
            return g_HausMoebelObjekt[h][i][HMO_iMoebelID];
        }
    }
    return 0;
}
stock IsPlayerInHouse(playerid,houseid) {
    new
        interior = GetPlayerInterior(playerid),
        vw = GetPlayerVirtualWorld(playerid),

        house_index,
        interior_id,
        interior_index;
    house_index = GetHouseIndexByID(houseid);
    interior_id = Haus[house_index][HouseInteriorID];
    interior_index = GetHouseInteriorIndexByID(interior_id);
    /*
    printf("interior %d",interior);
    printf("vw %d",vw);
    printf("house_index %d",house_index);
    printf("interior_id %d",interior_id);
    printf("interior_index %d",interior_index);
    */
    if( interior == g_HouseInterior[interior_index][HI_iInterior] &&
        vw == house_index &&
        IsPlayerInRangeOfPoint(playerid,25.0,g_HouseInterior[interior_index][HI_fExitX],g_HouseInterior[interior_index][HI_fExitY],g_HouseInterior[interior_index][HI_fExitZ])
        ) {
        return 1;
    }
    return 0;
}

stock ShowPlayerHausMoebel(playerid,type = 0 ) {
    new
        h,
        String[1024],
        Header[44],
        dialogid = 0;
    h = Spieler[playerid][pPlayerHouse];
    // printf("ShowPlayerHausMoebel(%d,%d) h = %d",playerid,type,h);
    if(!type) {
        new
            item,
            price;
        Header = "Möbelübersicht - Verkaufen";
        dialogid = DIALOG_HAUSMENU_MOEBEL_SELL;
        for(new i = 0 ; i < MAX_HAUS_MOEBEL ; i++) {
            if( g_HausMoebelObjekt[h][i][HMO_iID] != 0 ) {
                item = g_HausMoebelObjekt[h][i][HMO_iMoebelID];
                price = GetHausMoebelItemPrice(item) / 2;
                format(String,sizeof(String),"%s%d) %s - +$%s\n",String,i,GetHausMoebelItemTitle(item), AddDelimiters(price));
            }
        }
        if( isnull(String)) {
            ShowPlayerDialog(playerid,DIALOG_HAUSMENU_EMPTY,DIALOG_STYLE_MSGBOX,Header,"Keine Möbel zum Verkauf vorhanden","Zurück","");
        }
        else {
            ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_LIST,Header,String,"Weiter","Zurück");
        }
        return 1;
    }
    else if(type == 1) {
    }
    else if(type == 2 ) { // Kauf Menu
        Header = "Möbelübersicht - Kaufen";
        dialogid = DIALOG_HAUSMENU_MOEBEL_BUY_KAT;
        for(new i = 0 ; i < sizeof(g_HausMoebelKategorie) ; i++) {
            format(String,sizeof(String),"%s%s\n",String,g_HausMoebelKategorie[i][HMK_sTitel]);
        }
        ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_LIST,Header,String,"Weiter","Zurück");
        return 1;
    }
    else if(type == 3 ) { // Verkaufen bestätigen
        new
            item,
            moebel_index,
            index,
            price;
        index = Spieler[playerid][pTempMoebelID];
        item = g_HausMoebelObjekt[h][index][HMO_iMoebelID];
        moebel_index = GetHausMoebelIndex(item);
        /*
        printf("item %d",item);
        printf("index %d",index);
        printf("moebel_index %d",moebel_index);
        */
        price = g_HausMoebel[moebel_index][HM_iPrice];

        Header = "Möbelübersicht - Verkauf bestätigen";
        dialogid = DIALOG_HAUSMENU_MOEBEL_SELL_CONFIRM;
        format(String,sizeof(String),"Willst du folgendes Möbelstück wirklich verkaufen?\nName: %s\nNeupreis: $%s\nVerkaufspreis: $%s\n",
            g_HausMoebel[moebel_index][HM_sTitel],
            AddDelimiters(price),
           AddDelimiters(price / 2));
        ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_MSGBOX,Header,String,"Verkaufen","Zurück");
        return 1;
    }
    else if(type == 4 ) { // Bearbeitungs Auswahl

    }
    else if(type == 5 ) { // Kauf Menu Item
        new
            kategorie = Spieler[playerid][pTempMoebelKategorie];
        format(Header,sizeof(Header),"Hausmöbel Kaufen - %s",GetMoebelKatalogMenuTitle(kategorie) );
        dialogid = DIALOG_HAUSMENU_MOEBEL_BUY_ITEM;
        for(new i = 0 ; i < sizeof(g_HausMoebel) ; i++) {
            if( g_HausMoebel[i][HM_iHMKID] == kategorie ) {
                format(String,sizeof(String),"%s%s - $%s\n",String,g_HausMoebel[i][HM_sTitel],AddDelimiters(g_HausMoebel[i][HM_iPrice]));
            }
        }
        ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_LIST,Header,String,"Kaufen","Zurück");
        return 1;
    }
    else if(type == 6 ) { // Kauf Bestätigen
        new
            item = Spieler[playerid][pTempMoebelID];
        format(Header,sizeof(Header),"Hausmöbel Kaufen - %s",GetHausMoebelItemTitle(item) );
        dialogid = DIALOG_HAUSMENU_MOEBEL_BUY_ITEM_CONFIRM;
        format(String,sizeof(String),"Möchtest du wirklich folgendes Item für dein Haus kaufen?\nBezeichnung: %s\nPreis: $%s",GetHausMoebelItemTitle(item), AddDelimiters(GetHausMoebelItemPrice(item)));
        ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_MSGBOX,Header,String,"Kaufen","Zurück");
        return 1;
    }
    else if(type == 7 ) { // Bearbeiten Übersicht
        new
            item;
        Header = "Möbelübersicht - Bearbeiten";
        dialogid = DIALOG_HAUSMENU_MOEBEL_EDIT;
        for(new i = 0 ; i < MAX_HAUS_MOEBEL ; i++) {
            if( g_HausMoebelObjekt[h][i][HMO_iID] != 0 ) {
                item = g_HausMoebelObjekt[h][i][HMO_iMoebelID];
                format(String,sizeof(String),"%s%d) %s\n",String,i,GetHausMoebelItemTitle(item));
            }
        }
        if( isnull(String)) {
            ShowPlayerDialog(playerid,DIALOG_HAUSMENU_EMPTY,DIALOG_STYLE_MSGBOX,Header,"Keine Möbel zum Bearbeiten vorhanden","Zurück","");
        }
        else {
            ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_LIST,Header,String,"Weiter","Zurück");
        }
        return 1;
    }
    ShowPlayerDialog(playerid,dialogid,DIALOG_STYLE_LIST,Header,String,"Kaufen","Zurück");
    return 1;
}
stock ShowHausMoebelKatalog(playerid,menu = 0) {
    new
        String[512];
    if( !menu ) {
        for(new i = 0 ; i < sizeof(g_HausMoebelKategorie) ; i++) {
            format(String,sizeof(String),"%s%s\n",String,g_HausMoebelKategorie[i][HMK_sTitel]);
        }
        ShowPlayerDialog(playerid,DIALOG_HAUSMOEBEL_KATALOG,DIALOG_STYLE_LIST,"Hausmöbel Katalog",String,"Weiter","Zurück");
    }
    else {
        new
            Header[64];
        format(Header,sizeof(Header),"Möbelkatalog - %s", GetMoebelKatalogMenuTitle(menu) );
        for(new i = 0 ; i < sizeof(g_HausMoebel) ; i++) {
            if( g_HausMoebel[i][HM_iHMKID] == menu ) {
                format(String,sizeof(String),"%s%s - $%s\n",String,g_HausMoebel[i][HM_sTitel], AddDelimiters(g_HausMoebel[i][HM_iPrice]));
            }
        }
        ShowPlayerDialog(playerid,DIALOG_HAUSMOEBEL_KATALOG_EX,DIALOG_STYLE_LIST,"Hausmöbel Katalog",String,"Zurück","");
    }
    return 1;
}
public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz) {
    if(Spieler[playerid][pEditObjectModeFS] == 1)
    {
        if(response == EDIT_RESPONSE_FINAL)
        {
            if(SelectedPickup==1)
            {
                g_fraktion[SelectedPlayer[playerid]][Fr_WaffenX] = x;
                g_fraktion[SelectedPlayer[playerid]][Fr_WaffenY] = y;
                g_fraktion[SelectedPlayer[playerid]][Fr_WaffenZ] = z;
                SelectedPickup=0;
                ReloadFrak();
            }
            else if(SelectedPickup==2)
            {
                g_fraktion[SelectedPlayer[playerid]][Fr_FSafeboxX] = x;
                g_fraktion[SelectedPlayer[playerid]][Fr_FSafeboxY] = y;
                g_fraktion[SelectedPlayer[playerid]][Fr_FSafeboxZ] = z;
                SelectedPickup=0;
                ReloadFrak();
            }
            else if(SelectedPickup==3)
            {
                g_fraktion[SelectedPlayer[playerid]][Fr_WaffenlagerX] = x;
                g_fraktion[SelectedPlayer[playerid]][Fr_WaffenlagerY] = y;
                g_fraktion[SelectedPlayer[playerid]][Fr_WaffenlagerZ] = z;
                SelectedPickup=0;
                ReloadFrak();
            }
            else if(SelectedPickup==4)
            {
                g_fraktion[SelectedPlayer[playerid]][Fr_GangitemX] = x;
                g_fraktion[SelectedPlayer[playerid]][Fr_GangitemY] = y;
                g_fraktion[SelectedPlayer[playerid]][Fr_GangitemZ] = z;
                SelectedPickup=0;
                ReloadFrak();
            }
            else if(SelectedPickup==5)
            {
                g_fraktion[SelectedPlayer[playerid]][Fr_FSkinX] = x;
                g_fraktion[SelectedPlayer[playerid]][Fr_FSkinY] = y;
                g_fraktion[SelectedPlayer[playerid]][Fr_FSkinZ] = z;
                SelectedPickup=0;
                ReloadFrak();
            }
            else if(SelectedPickup==6)
            {
                g_fraktion[SelectedPlayer[playerid]][Fr_EnterX] = x;
                g_fraktion[SelectedPlayer[playerid]][Fr_EnterY] = y;
                g_fraktion[SelectedPlayer[playerid]][Fr_EnterZ] = z;
                SelectedPickup=0;
                ReloadFrak();
            }
            else if(SelectedPickup==7)
            {
                g_fraktion[SelectedPlayer[playerid]][Fr_ExitX] = x;
                g_fraktion[SelectedPlayer[playerid]][Fr_ExitY] = y;
                g_fraktion[SelectedPlayer[playerid]][Fr_ExitZ] = z;
                SelectedPickup=0;
                ReloadFrak();
            }
            else if(SelectedPickup==8)
            {
                g_fraktion[SelectedPlayer[playerid]][Fr_AufzugUX] = x;
                g_fraktion[SelectedPlayer[playerid]][Fr_AufzugUY] = y;
                g_fraktion[SelectedPlayer[playerid]][Fr_AufzugUZ] = z;
                SelectedPickup=0;
                ReloadFrak();
            }
            else if(SelectedPickup==9)
            {
                g_fraktion[SelectedPlayer[playerid]][Fr_AufzugOX] = x;
                g_fraktion[SelectedPlayer[playerid]][Fr_AufzugOY] = y;
                g_fraktion[SelectedPlayer[playerid]][Fr_AufzugOZ] = z;
                SelectedPickup=0;
                ReloadFrak();
            }
            Spieler[playerid][pEditObjectModeFS] = 0;
            DestroyDynamicObject(g_fraktion[SelectedPlayer[playerid]][Fr_Object]);
            PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
        }
        if(response == EDIT_RESPONSE_CANCEL)
        {
            DestroyDynamicObject(g_fraktion[SelectedPlayer[playerid]][Fr_Object]);
            Spieler[playerid][pEditObjectModeFS] = 0;
            SendClientMessage(playerid,COLOR_RED,"Die Änderungen werden nicht gespeichert");
        }
    }
    if( Spieler[playerid][pEditObjectMode] == 1 ) { // Bearbeitung
        new
            String[180],
            slot,
            h = Spieler[playerid][pPlayerHouse];
        slot = Streamer_GetIntData(STREAMER_TYPE_OBJECT,objectid,E_STREAMER_EXTRA_ID);
        if(response == EDIT_RESPONSE_FINAL) {
            if(slot == -1) {
                printf("Etwas ist falsch gelaufen!");
                printf("h = %d slot %d",h,slot);
            }
            format(String,sizeof(String),"UPDATE `hausmoebel` SET \
                `x` = '%.3f',\
                `y` = '%.3f',\
                `z` = '%.3f',\
                `rx` = '%.3f',\
                `ry` = '%.3f',\
                `rz` = '%.3f' \
                WHERE `id` = %d",x,y,z,rx,ry,rz,g_HausMoebelObjekt[h][slot][HMO_iID]);
            mysql_oquery( String , THREAD_UPDATEHAUSMOEBEL , Hausmoebel_Compress(h,slot) ,gSQL);
            //print(String);
            Spieler[playerid][pTempMoebelKategorie] = 0;
            Spieler[playerid][pTempMoebelID] = 0;
            Spieler[playerid][pEditObjectMode] = 0;
            // Fix weil Position nicht gespeichert wird
            SetDynamicObjectPos(objectid,x,y,z);
            SetDynamicObjectRot(objectid,rx,ry,rz);
            PlayerPlaySound(playerid,1058,0.0,0.0,0.0);
        }
        else if(response == EDIT_RESPONSE_CANCEL ) {
            new vw = GetPlayerVirtualWorld(playerid);
            SetPlayerVirtualWorld(playerid,0);
            Streamer_Update(playerid);
            SendClientMessage(playerid,COLOR_RED,"Die Änderungen am Möbelstück werden nicht gespeichert");
            Spieler[playerid][pTempMoebelKategorie] = 0;
            Spieler[playerid][pTempMoebelID] = 0;
            Spieler[playerid][pEditObjectMode] = 0;
            PlayerPlaySound(playerid,1055,0.0,0.0,0.0);
            SetPlayerVirtualWorld(playerid,vw);
            Streamer_Update(playerid);
        }
    }
    return 1;
}
stock Hausmoebel_Compress(house,slot) {
    new var = (house << 16 | slot);
    return var;
}
stock Hausmoebel_Uncompress(var,&house,&slot) {
    slot = (var & 0xFFFF);
    house = (( var >> 16 ) & 0xFFFF);
    return 1;
}
// - - - - - - - - - - - - - - - - - - - - -

forward SetVehicleZAngleEx(vehicleid,Float:angle);
public SetVehicleZAngleEx(vehicleid,Float:angle) {
    SetVehicleZAngle(vehicleid, angle);
    return 1;
}

RemovePlayerFromTaxi(driverid, playerid) {
    for (new i; i < MAX_TAXI_KUNDEN; i++) {
        if (Spieler[driverid][pTaxiKunden][i] == playerid) {
            Spieler[driverid][pTaxiKunden][i] = INVALID_PLAYER_ID;
            Spieler[driverid][pTaxiKundenStart][i] = 0;
            DestroyTaxiTextdraw(playerid);
            return 1;
        }
    }

    return 0;
}

ClearPlayerTaxiSlots(playerid, cancel = 0) {
    for (new i; i < MAX_TAXI_KUNDEN; i++) {
        if (Spieler[playerid][pTaxiKunden][i] == INVALID_PLAYER_ID) continue;
        if (cancel) RemovePlayerFromVehicle(Spieler[playerid][pTaxiKunden][i]);
        DestroyTaxiTextdraw(Spieler[playerid][pTaxiKunden][i]);
        Spieler[playerid][pTaxiKundenStart][i] = 0;
    }
    return 1;
}

HasPlayerTaxiCustomers(playerid) {
    if (IsPlayerNPC(playerid)) return 0;
    for (new i; i < MAX_TAXI_KUNDEN; i++) if (Spieler[playerid][pTaxiKunden][i] != INVALID_PLAYER_ID) return 1;
    return 0;
}

// HasPlayerFreeTaxiSlot(playerid) {
//     if (IsPlayerNPC(playerid)) return 0;
//     for (new i; i < MAX_TAXI_KUNDEN; i++) if( Spieler[playerid][pTaxiKunden][i] == INVALID_PLAYER_ID) return 1;
//     return 0;
// }

AddPlayerTaxiSlot(playerid, targetid) {
    for (new i; i < MAX_TAXI_KUNDEN; i++) {
        if (Spieler[playerid][pTaxiKunden][i] != INVALID_PLAYER_ID) continue;
        new vehicleid = GetPlayerVehicleID(playerid);
        Spieler[playerid][pTaxiKunden][i] = targetid;
        Spieler[playerid][pTaxiKundenStart][i] = g_VehicleDistance[vehicleid];
        CreateTaxiTextdraw(playerid);
        CreateTaxiTextdraw(targetid);
        return 1;
    }

    return 0;
}

GetTaxiDriverCustomerSlot(driver, playerid) {
    for (new i; i < MAX_TAXI_KUNDEN; i++) if (Spieler[driver][pTaxiKunden][i] == playerid) return i;
    return -1;
}

GetPlayerTaxiCosts(driver, playerid) {
    new distance, costs, vehicleid = Spieler[driver][pTaxiVehicle], slot = GetTaxiDriverCustomerSlot(driver,playerid);
    if (slot != -1) {
        distance = g_VehicleDistance[vehicleid] - Spieler[driver][pTaxiKundenStart][slot];
        costs = (distance / 100) * Spieler[driver][pTaxiPreis];
    }

    return costs;
}

IsPlayerAnyTaxiCustomer(playerid) {
    for (new i; i < MAX_PLAYERS; i++) {
        if (!IsPlayerConnected(i) || playerid == i) continue;
        for (new j; j < MAX_TAXI_KUNDEN; j++) if (Spieler[i][pTaxiKunden][j] == playerid) return i;
    }

    return -1;
}

SendTaxiMessage(driver,color,msg[]) {
    for (new i; i < MAX_TAXI_KUNDEN; i++) if (Spieler[driver][pTaxiKunden][i] != INVALID_PLAYER_ID) SendClientMessage(Spieler[driver][pTaxiKunden][i], color, msg);
    return 1;
}

stock Gutscheinmsg(playerid) {
	SendClientMessage(playerid, COLOR_BLUE, INFO_STRING"/Creategutschein [Beliebiger Code] [Geschenk-ID]");
	SendClientMessage(playerid, COLOR_BLUE, "[INFO] {FFFFFF}1 = 30.000$ | 2 = 80.000$ | 3 = 1 Level-Up | 4 = 2 Level-Up | 5 = 3 RP | 6 = 6 RP | 7 = Neon-Premium | 8 = Extra-Fahrzeugkey");
	return 1;
}


forward Pulse_SInfo();
public Pulse_SInfo()
{
    new String[200];
    for(new i ; i < MAX_PLAYERS ; i++)
    {
        if( IsPlayerConnected(i) )
        {
            if( !IsPlayerNPC(i) )
            {
                if( Spieler[i][t3dSInfo] != Text3D:INVALID_3DTEXT_ID )
                {
                    // Aktualisierung
                    format(String,sizeof(String),"Ping: %d\nFPS: %d", GetPlayerPing(i), pFPS[i] );
                    UpdateDynamic3DTextLabelText(Spieler[i][t3dSInfo], COLOR_GREY, String);
                }
            }
        }
    }
    return 1;
}

stock AddVehiclePassenger(vehicleid,playerid) {
    new
        sName[MAX_PLAYER_NAME],
        sNameUnpacked[MAX_PLAYER_NAME];
    strunpack(sNameUnpacked,g_aiLastPassengers[vehicleid][0]);
    GetPlayerName(playerid,sName,sizeof(sName));
    if( isnull(sNameUnpacked) || strcmp(sNameUnpacked,sName) != 0) {
        for(new i = MAX_PASSANGERS_TRACKER - 1 ; i != 0 ; i--) {
            g_aiLastPassengers[vehicleid][i] = g_aiLastPassengers[vehicleid][i - 1];
        }
        strpack(g_aiLastPassengers[vehicleid][0], sName );
        return 1;
    }
    return 0;
}
stock ResetVehiclePassengers(vehicleid) {
    for(new j ; j < MAX_PASSANGERS_TRACKER ; j++) {
        g_aiLastPassengers[vehicleid][j][0] = '\0';
    }
    return 1;
}

stock GetPlayerDrogenSkillLevel(playerid) {
    new
        value,
        points = Spieler[playerid][pDrogenPoints];
    for(new i ; i < sizeof(g_DrogenSkills) ; i++) {
        if( points >= g_DrogenSkills[i][DS_iTour] ) {
            value = i + 1;
        }
    }
    return value;
}

stock GetPlayerDrogenSkillValue(playerid) {
    new
        value,
        points = Spieler[playerid][pDrogenPoints];
    for(new i ; i < sizeof(g_DrogenSkills) ; i++) {
        if( points >= g_DrogenSkills[i][DS_iTour] ) {
            value = g_DrogenSkills[i][DS_iPackets];
        }
    }
    return value;
}

stock GetPlayerWaffenteileSkillLevel(playerid) {
    new
        value,
        points = Spieler[playerid][pWaffenteilePoints];
    for(new i ; i < sizeof(g_WaffenteileSkills) ; i++) {
        if( points >= g_WaffenteileSkills[i][WS_iTour] ) {
            value = i + 1;
        }
    }
    return value;
}

stock GetPlayerWaffenteileSkillValue(playerid) {
    new
        value,
        points = Spieler[playerid][pWaffenteilePoints];
    for(new i ; i < sizeof(g_WaffenteileSkills) ; i++) {
        if( points >= g_WaffenteileSkills[i][WS_iTour] ) {
            value = g_WaffenteileSkills[i][WS_iPackets];
        }
    }
    return value;
}

stock GetPlayerSamenSkillLevel(playerid) {
    new
        value,
        points = Spieler[playerid][pSpiceSamenPoints];
    if(points >= 0 && points < 500) { value = 1; }
    if(points >= 500 && points < 1500) { value = 2; }
    if(points >= 1500 && points < 2500) { value = 3; }
    if(points >= 2500 && points < 3500) { value = 4; }
    if(points > 3500) { value = 5; }
    return value;
}

stock GetPlayerSamenSkillLevelValue(playerid) {
    new
        value,
        skill = GetPlayerSamenSkillLevel(playerid);
	if(skill == 1) { value = 5; }
	if(skill == 2) { value = 10; }
	if(skill == 3) { value = 15; }
	if(skill == 4) { value = 20; }
	if(skill == 5) { value = 25; }
	return value;
}

stock GetPlayerPilotSkillLevel(playerid) {
    new
        value,
        points = Spieler[playerid][pPilotPoints];
    if(points >= 0 && points < 25) { value = 1; }
    if(points >= 25 && points < 100) { value = 2; }
    if(points >= 100 && points < 150) { value = 3; }
    if(points >= 150 && points < 300) { value = 4; }
    if(points > 300) { value = 5; }
    return value;
}

stock CheckTeleHack(spielerid,zeitms)
{
    if (Spieler[spielerid][pAdmin] > 3) return 1;

    if(GetPlayerDistanceFromPoint(spielerid,oldposx[spielerid],oldposy[spielerid],oldposz[spielerid])>=6)
    {
        printf("ID,x,y,z,distanz %i %f %f %f %f",spielerid,oldposx[spielerid],oldposy[spielerid],oldposz[spielerid],
        GetPlayerDistanceFromPoint(spielerid,oldposx[spielerid],oldposy[spielerid],oldposz[spielerid]));
        if(playertimestamp[spielerid]+zeitms/1000<gettime())
        {
            printf("timestamp ergebnis gettime %i %i %i",playertimestamp[spielerid],playertimestamp[spielerid]+zeitms/1000,gettime());
            playertimestamp[spielerid]=gettime();
        }
        else
        {
            SendClientMessage(spielerid, COLOR_RED, "[BANNED] Du wurdest soeben vom Server-System dauerhaft aus dem Server gebannt. Grund: Teleporthack");
            SendClientMessage(spielerid, COLOR_RED, "Sind Sie der Meinung das diese Sperre falsch war? Dann schreiben Sie auf www.LyD-Roleplay.de ein Entbannantrag!");
            new query[256];
            format(query,sizeof(query),"Gebannt: %s von: System, Grund: Teleporthack, Dauer: Permanent",GetName(spielerid));
            BanLog(query);
            format(query,sizeof(query),"%s wurde von Server-System dauerhaft gebannt, Grund: Teleporthack",GetName(spielerid));
            SendUCPAktenEintrag(spielerid,"Server-System",GetName(spielerid),query);
            new String[256];
            format(String,sizeof(String),"System hat Spieler %s dauerhaft gebannt, Grund: Teleporthack",GetName(spielerid));
            AdminLog(String);
            format(query,sizeof(query),"UPDATE `accounts` SET `GebanntVon` = 'Server-System' ,`BanGrund` = 'Teleporthack', `Banned` = 1 WHERE `Name` = '%s'",GetName(spielerid));
            mysql_pquery(query,THREAD_BAN,spielerid,gSQL,MySQLThreadOwner);
            KickDelay(spielerid);
        }
    }
    GetPlayerPos(spielerid,oldposx[spielerid],oldposy[spielerid],oldposz[spielerid]);
    return 1;
}

forward meslockrelease(playerid);
public meslockrelease(playerid)
{
    meslock[playerid]=0;
}

stock GetWeekDay(day = 0, month = 0, year = 0) {
    new weekday_str[20];

    switch (GetWeekDayNumber(day, month, year))
    {
        case 0: weekday_str = "Montag";
        case 1: weekday_str = "Dienstag";
        case 2: weekday_str = "Mittwoch";
        case 3: weekday_str = "Donnerstag";
        case 4: weekday_str = "Freitag";
        case 5: weekday_str = "Samstag";
        case 6: weekday_str = "Sonntag";
    }

    return weekday_str;
}

GetWeekDayNumber(day = 0, month = 0, year = 0) {
    if (!day)
        getdate(year, month, day);

    new j, e;

    if (month <= 2)
    {
        month += 12;
        --year;
    }

    j = year % 100;
    e = year / 100;

    return ((day + (month + 1) * 26 / 10 + j + j / 4 + e / 4 - 2 * e) % 7);
}

forward fraklabeltimer();
public fraklabeltimer()
{
    for(new i;i<MAX_PLAYERS;i++)
    {
        if(IsPlayerConnected(i))
        {
            new query[128];
            format(query,sizeof(query),"SELECT `fraktion` FROM `frakblacklist` WHERE `name` = '%s'",GetName(i));
            mysql_pquery(query,THREAD_FRAKBLACKLISTLABEL,i,gSQL,MySQLThreadOwner);
        }
    }
}
stock GetPlayerFPS(playerid)
{
    SetPVarInt(playerid, "DrunkL", GetPlayerDrunkLevel(playerid));
    if(GetPVarInt(playerid, "DrunkL") < 100) SetPlayerDrunkLevel(playerid, 2000);
        else{
            if(GetPVarInt(playerid, "LDrunkL") != GetPVarInt(playerid, "DrunkL"))
            {
                SetPVarInt(playerid, "FPS", (GetPVarInt(playerid, "LDrunkL") - GetPVarInt(playerid, "DrunkL")));
                SetPVarInt(playerid, "LDrunkL", GetPVarInt(playerid, "DrunkL"));
                if((GetPVarInt(playerid, "FPS") > 0) && (GetPVarInt(playerid, "FPS") < 256))
                {
                    return GetPVarInt(playerid, "FPS") - 1;
                }
            }
        }
    return 0;
}
forward miettimercheck(playerid);
public miettimercheck(playerid)
{
    if(miettimer[playerid]==1)
    {
        new vID = GetPlayerVehicleID(playerid);
        UnLockCar(vID);
        RemovePlayerFromVehicle(playerid);
        miettimer[playerid]=0;
        ShowPlayerDialog(playerid,DIALOG_PECH,DIALOG_STYLE_MSGBOX,"Abbruch","Da du nicht reagiert hast wurde das mieten abgebrochen","OK","");
    }
}

public Reload_FCars() {
    new i,count = cache_get_row_count();
	new string[55];
	for(; i < count; i++){
        new Float:x,Float:y,Float:z,Float:r,c1,c2,sirene,modelid,world;
        c1 = cache_get_field_content_int(i, "c1", gSQL);
        c2 = cache_get_field_content_int(i, "c2", gSQL);
        sirene = cache_get_field_content_int(i, "sirene", gSQL);
        modelid = cache_get_field_content_int(i, "modelid", gSQL);
        x = cache_get_field_content_float(i, "X", gSQL);
        y = cache_get_field_content_float(i, "Y", gSQL);
        z = cache_get_field_content_float(i, "Z", gSQL);
        r = cache_get_field_content_float(i, "R", gSQL);
		new e=1;
		for(; e<MAX_VEHICLES;e++)
		{
		    if(IsValidVehicle(e)) continue;
		    FrakCarInfo[e][f_veh] = AddStaticVehicleEx(modelid,x,y,z,r,c1,c2,-1,sirene);
		    FrakCarInfo[e][f_frak] = cache_get_field_content_int(i, "fraktion", gSQL);
		    FrakCarInfo[e][f_dbid] = cache_get_field_content_int(i, "id", gSQL);
		    FrakCarInfo[e][f_world] = cache_get_field_content_int(i, "world", gSQL);
            FrakCarInfo[e][f_Nitro] = cache_get_field_content_int(i, "nitro", gSQL);
            FrakCarInfo[e][f_Hyd] = cache_get_field_content_int(i, "hyd", gSQL);
            FrakCarInfo[e][f_Wheel] = cache_get_field_content_int(i, "wheel", gSQL);
            FrakCarInfo[e][f_Ausp] = cache_get_field_content_int(i, "ausp", gSQL);
            FrakCarInfo[e][f_SideL] = cache_get_field_content_int(i, "sideL", gSQL);
            FrakCarInfo[e][f_SideR] = cache_get_field_content_int(i, "sideR", gSQL);
            FrakCarInfo[e][f_FB] = cache_get_field_content_int(i, "fb", gSQL);
            FrakCarInfo[e][f_RB] = cache_get_field_content_int(i, "rb", gSQL);
            FrakCarInfo[e][f_Spoiler] = cache_get_field_content_int(i, "spoiler", gSQL);
            FrakCarInfo[e][f_Roof] = cache_get_field_content_int(i, "roof", gSQL);
            FrakCarInfo[e][f_Hood] = cache_get_field_content_int(i, "hood", gSQL);
            FrakCarInfo[e][f_Vents] = cache_get_field_content_int(i, "vents", gSQL);
            FrakCarInfo[e][f_Lamps] = cache_get_field_content_int(i, "lamps", gSQL);
		    SetVehicleVirtualWorld(FrakCarInfo[e][f_veh],world);
            if(FrakCarInfo[e][f_frak] == 1 && (modelid == 560 || modelid == 541 || modelid == 415 || modelid == 426 || modelid == 445 || modelid == 579)){
                format(string,sizeof(string),"%s%s",#COLOR_HEX_BLACK, "LS-4826");
                SetVehicleNumberPlate(FrakCarInfo[e][f_veh], string);
            }else{
                format(string,sizeof(string),"%s%s",#COLOR_HEX_BLACK,NumberPlates[FrakCarInfo[e][f_frak]]);
                SetVehicleNumberPlate(FrakCarInfo[e][f_veh], string);
            }
        	SetVehicleNumberPlate(FrakCarInfo[e][f_veh], string);
            SetTimerEx("FCarTuning", 700,0, "i",e);

			switch (FrakCarInfo[e][f_frak])
        	{
        	    case 1: {aiVehicles[e] = VEH_LSPDCARS;}
        	    case 2: {aiVehicles[e] = VEH_FBICARS;}
        	    case 3: {aiVehicles[e] = VEH_SANICARS;}
        	    case 4: {aiVehicles[e] = VEH_NEWSCARS;}
        	    case 5: {aiVehicles[e] = VEH_OAMTCARS;}
        	    case 6: {aiVehicles[e] = VEH_GROVECARS;}
        	    case 7: {aiVehicles[e] = VEH_BALLASCARS;}
        	    case 8: {aiVehicles[e] = VEH_FSCARS;}
        	    case 9: {aiVehicles[e] = VEH_STAATCARS;}
        	    case 10: {aiVehicles[e] = VEH_YAKUCARS;}
        	    case 11: {aiVehicles[e] = VEH_AZTCARS;}
        	    case 12: {aiVehicles[e] = VEH_LCNCARS;}
        	    case 13: {aiVehicles[e] = VEH_VAGOSCARS;}
        	    case 14: {aiVehicles[e] = VEH_HITMANC;}
        	    case 15: {aiVehicles[e] = VEH_BIKERCARS;}
        	    case 16: {aiVehicles[e] = VEH_ZOLLCARS;}
        	    case 17: {aiVehicles[e] = VEH_WHEELCARS;}
        	    case 18: {aiVehicles[e] = VEH_ARMYCARS;}
        	    case 19: {aiVehicles[e] = VEH_TERRORCARS;}
                case 20: {aiVehicles[e] = VEH_OUTLAWZSCARS;}
				case 21: {aiVehicles[e] = VEH_TRIADENCARS;}
				case 22: {aiVehicles[e] = VEH_ZOLLCARS;}
				default: {aiVehicles[e] = 0;}
        	}

        	if( FrakCarInfo[e][f_frak] == 1 ) { // Panzerung der LSPD-Cars beim Laden
			    if( GetVehicleModel(e) == 596 || GetVehicleModel(e) == 597 || GetVehicleModel(e) ==598 || GetVehicleModel(e) == 601 || GetVehicleModel(e) == 407
			    || GetVehicleModel(e) == 599 || GetVehicleModel(e) == 497 || GetVehicleModel(e) == 490 || GetVehicleModel(e) ==433 || GetVehicleModel(e) == 427
				|| GetVehicleModel(e) == 560 || GetVehicleModel(e) == 541) {
			        SetVehicleHealth(e, 2000.0);
			    }
		    }
        	break;
		}
	}
}

public Load_FrakcarsEx() {
	new count = cache_get_row_count();
	new string[55];
	for(new i=0; i < count; i++){
        new Float:x,Float:y,Float:z,Float:r,c1,c2,sirene,modelid,tank,world;
        c1 = cache_get_field_content_int(i, "c1", gSQL);
        c2 = cache_get_field_content_int(i, "c2", gSQL);
        sirene = cache_get_field_content_int(i, "sirene", gSQL);
        tank = cache_get_field_content_int(i, "tank", gSQL);
        modelid = cache_get_field_content_int(i, "modelid", gSQL);
        x = cache_get_field_content_float(i, "X", gSQL);
        y = cache_get_field_content_float(i, "Y", gSQL);
        z = cache_get_field_content_float(i, "Z", gSQL);
        r = cache_get_field_content_float(i, "R", gSQL);
		for(new e=0; e<MAX_VEHICLES;e++)
		{
            if(IsValidVehicle(e)) continue;
            FrakCarInfo[e][f_veh] = AddStaticVehicleEx(modelid,x,y,z,r,c1,c2,-1,sirene);
            FrakCarInfo[e][f_frak] = cache_get_field_content_int(i, "fraktion", gSQL);
            FrakCarInfo[e][f_dbid] = cache_get_field_content_int(i, "id", gSQL);
            FrakCarInfo[e][f_world] = cache_get_field_content_int(i, "world", gSQL);
            FrakCarInfo[e][f_Nitro] = cache_get_field_content_int(i, "nitro", gSQL);
            FrakCarInfo[e][f_Hyd] = cache_get_field_content_int(i, "hyd", gSQL);
            FrakCarInfo[e][f_Wheel] = cache_get_field_content_int(i, "wheel", gSQL);
            FrakCarInfo[e][f_Ausp] = cache_get_field_content_int(i, "ausp", gSQL);
            FrakCarInfo[e][f_SideL] = cache_get_field_content_int(i, "sideL", gSQL);
            FrakCarInfo[e][f_SideR] = cache_get_field_content_int(i, "sideR", gSQL);
            FrakCarInfo[e][f_FB] = cache_get_field_content_int(i, "fb", gSQL);
            FrakCarInfo[e][f_RB] = cache_get_field_content_int(i, "rb", gSQL);
            FrakCarInfo[e][f_Spoiler] = cache_get_field_content_int(i, "spoiler", gSQL);
            FrakCarInfo[e][f_Roof] = cache_get_field_content_int(i, "roof", gSQL);
            FrakCarInfo[e][f_Hood] = cache_get_field_content_int(i, "hood", gSQL);
            FrakCarInfo[e][f_Vents] = cache_get_field_content_int(i, "vents", gSQL);
            FrakCarInfo[e][f_Lamps] = cache_get_field_content_int(i, "lamps", gSQL);
            SetVehicleVirtualWorld(FrakCarInfo[e][f_veh],world);
            gGas[FrakCarInfo[e][f_veh]] = tank;
            if (gGas[FrakCarInfo[e][f_veh]] > gMaxGas[FrakCarInfo[e][f_veh]]) gGas[FrakCarInfo[e][f_veh]] = gMaxGas[FrakCarInfo[e][f_veh]];
            gMaxGas[FrakCarInfo[e][f_veh]] = GetMaxTank(FrakCarInfo[e][f_veh]);
            gGas[e] = GetMaxTank(e);
            gMaxGas[e] = GetMaxTank(e);
            if(FrakCarInfo[e][f_frak] == 1 && (modelid == 560 || modelid == 541 || modelid == 415 || modelid == 426 || modelid == 445 || modelid == 579)){
                format(string,sizeof(string),"%s%s",#COLOR_HEX_BLACK, "LS-4826");
                SetVehicleNumberPlate(FrakCarInfo[e][f_veh], string);
            }else{
                format(string,sizeof(string),"%s%s",#COLOR_HEX_BLACK,NumberPlates[FrakCarInfo[e][f_frak]]);
                SetVehicleNumberPlate(FrakCarInfo[e][f_veh], string);
            }
            SetVehicleNumberPlate(FrakCarInfo[e][f_veh], string);
            SetTimerEx("FCarTuning", 700,0, "i",e);

            switch (FrakCarInfo[e][f_frak])
            {
                case 1: {aiVehicles[e] = VEH_LSPDCARS;}
                case 2: {aiVehicles[e] = VEH_FBICARS;}
                case 3: {aiVehicles[e] = VEH_SANICARS;}
                case 4: {aiVehicles[e] = VEH_NEWSCARS;}
                case 5: {aiVehicles[e] = VEH_OAMTCARS;}
                case 6: {aiVehicles[e] = VEH_GROVECARS;}
                case 7: {aiVehicles[e] = VEH_BALLASCARS;}
                case 8: {aiVehicles[e] = VEH_FSCARS;}
                case 9: {aiVehicles[e] = VEH_STAATCARS;}
                case 10: {aiVehicles[e] = VEH_YAKUCARS;}
                case 11: {aiVehicles[e] = VEH_AZTCARS;}
                case 12: {aiVehicles[e] = VEH_LCNCARS;}
                case 13: {aiVehicles[e] = VEH_VAGOSCARS;}
                case 14: {aiVehicles[e] = VEH_HITMANC;}
                case 15: {aiVehicles[e] = VEH_BIKERCARS;}
                case 16: {aiVehicles[e] = VEH_ZOLLCARS;}
                case 17: {aiVehicles[e] = VEH_WHEELCARS;}
                case 18: {aiVehicles[e] = VEH_ARMYCARS;}
                case 19: {aiVehicles[e] = VEH_TERRORCARS;}
                case 20: {aiVehicles[e] = VEH_OUTLAWZSCARS;}
                case 21: {aiVehicles[e] = VEH_TRIADENCARS;}
                case 22: {aiVehicles[e] = VEH_ZOLLCARS;}
                default: {aiVehicles[e] = 0;}
            }            
            if( FrakCarInfo[e][f_frak] == 1 ) { // Panzerung der LSPD-Cars beim Laden
                if( GetVehicleModel(e) == 596 || GetVehicleModel(e) == 597 || GetVehicleModel(e) ==598 || GetVehicleModel(e) == 601 || GetVehicleModel(e) == 407
                || GetVehicleModel(e) == 599 || GetVehicleModel(e) == 497 || GetVehicleModel(e) == 490 || GetVehicleModel(e) ==433 || GetVehicleModel(e) == 427
                || GetVehicleModel(e) == 560 || GetVehicleModel(e) == 541) {
                    SetVehicleHealth(e, 2000.0);
                }
            }
            break;
		}
	}
}



stock SaveFrctionCars() {
	for(new i=0;i<GetVehiclePoolSize();i++){
		if(FrakCarInfo[i][f_dbid] != 0){
		    new query[512];
			format(query, sizeof(query), "UPDATE `"#SERVERFRAKCARS_DB"` SET `tank` = '%d', `nitro` = '%d', \
            `hyd` = '%d', `wheel` = '%d', `ausp` = '%d', `sideL` = '%d', `sideR` = '%d', `fb` = '%d', `rb` = '%d', \
            `spoiler` = '%d', `roof` = '%d', `hood` = '%d', `vents` = '%d', `lamps` = '%d' WHERE `id` = %d",gGas[i], 
            FrakCarInfo[i][f_Nitro],
            FrakCarInfo[i][f_Hyd],
            FrakCarInfo[i][f_Wheel],
            FrakCarInfo[i][f_Ausp],
            FrakCarInfo[i][f_SideL],
            FrakCarInfo[i][f_SideR],
            FrakCarInfo[i][f_FB],
            FrakCarInfo[i][f_RB],
            FrakCarInfo[i][f_Spoiler],
            FrakCarInfo[i][f_Roof],
            FrakCarInfo[i][f_Hood],
            FrakCarInfo[i][f_Vents],
            FrakCarInfo[i][f_Lamps],
            FrakCarInfo[i][f_dbid]);
			mysql_oquery( query ,THREAD_DUMMY,i,gSQL);
	    }
	}
	return 1;
}


stock LoadFrakCars() 
{
    return mysql_tquery(gSQL, "SELECT * FROM `"#SERVERFRAKCARS_DB"`", "Load_FrakcarsEx");
}




stock GetTowedCar(veh) {
 	for(new i = 0 ; i < GetVehiclePoolSize(); i++)
	{
 		new vID = GetVehicleTrailer(i);
		if(vID == veh) return true;
	}
	return false;
}

stock ResetFrakInfo(veh) {
	FrakCarInfo[veh][f_dbid] = 0;
	FrakCarInfo[veh][f_veh] = INVALID_VEHICLE_ID;
	FrakCarInfo[veh][f_frak] = 0;
	FrakCarInfo[veh][f_world] = 0;
	FrakCarInfo[veh][f_sperre] = false;
    FrakCarInfo[veh][f_Nitro] = 0;
    FrakCarInfo[veh][f_Hyd] = 0;
    FrakCarInfo[veh][f_Wheel] = 0;
    FrakCarInfo[veh][f_Ausp] = 0;
    FrakCarInfo[veh][f_SideL] = 0;
    FrakCarInfo[veh][f_SideR] = 0;
    FrakCarInfo[veh][f_FB] = 0;
    FrakCarInfo[veh][f_RB] = 0;
    FrakCarInfo[veh][f_Spoiler] = 0;
    FrakCarInfo[veh][f_Roof] = 0;
    FrakCarInfo[veh][f_Hood] = 0;
    FrakCarInfo[veh][f_Vents] = 0;
    FrakCarInfo[veh][f_Lamps] = 0;
}

stock GetNeededSkill(playerid,i)
{
	new x;
	switch(i)
	{
	    case 1://hure
	    {
			if(Spieler[playerid][pHurePoints] >= 100)
   			{
   			    return 100;
   			}
   			else if(Spieler[playerid][pHurePoints] >= 80)
   			{
   			    return 100;
   			}
   			else if(Spieler[playerid][pHurePoints] >= 50)
   			{
   			    return 80;
   			}
   			else if(Spieler[playerid][pHurePoints] >= 30)
   			{
   			    return 50;
   			}
   			else if(Spieler[playerid][pHurePoints] >= 10)
   			{
   			    return 30;
   			}
   			else if(Spieler[playerid][pHurePoints] >= 0)
   			{
   			    return 10;
   			}
		}
		case 2://Anwalt
	    {
   			if(Spieler[playerid][pLawyerPoints] >= 420)
   			{
   			    return 420;
   			}
   			else if(Spieler[playerid][pLawyerPoints] >= 250)
   			{
   			    return 420;
   			}
   			else if(Spieler[playerid][pLawyerPoints] >= 120)
   			{
   			    return 250;
   			}
   			else if(Spieler[playerid][pLawyerPoints] >= 80)
   			{
   			    return 120;
   			}
   			else if(Spieler[playerid][pLawyerPoints] >= 20)
   			{
   			    return 80;
   			}
   			else if(Spieler[playerid][pLawyerPoints] >= 0)
   			{
   			    return 20;
   			}
		}
		case 3://Detektiv
	    {
            if(Spieler[playerid][pDetektivPoints] >= 540)
   			{
   			    return 540;
   			}
   			else if(Spieler[playerid][pDetektivPoints] >= 310)
   			{
   			    return 540;
   			}
   			else if(Spieler[playerid][pDetektivPoints] >= 150)
   			{
   			    return 310;
   			}
   			else if(Spieler[playerid][pDetektivPoints] >= 50)
   			{
   			    return 150;
   			}
   			else if(Spieler[playerid][pDetektivPoints] >= 0)
   			{
   			    return 50;
   			}

		}
		case 4://Drogendealer
	    {
			if(Spieler[playerid][pDrogenPoints] >= 510)
   			{
   			    x = 510;
   			}
   			else if(Spieler[playerid][pDrogenPoints] >= 280)
   			{
   			    x = 510;
   			}
   			else if(Spieler[playerid][pDrogenPoints] >= 100)
   			{
   			    x = 280;
   			}
   			else if(Spieler[playerid][pDrogenPoints] >= 50)
   			{
   			    x = 100;
   			}
   			else if(Spieler[playerid][pDrogenPoints] >= 0)
   			{
   			    x = 50;
   			}
		}
		case 5://Waffendealer
		{
            if(Spieler[playerid][pWaffenteilePoints] >= 710)
   			{
   			    x = 710;
   			}
   			else if(Spieler[playerid][pWaffenteilePoints] >= 440)
   			{
   			    x = 710;
   			}
   			else if(Spieler[playerid][pWaffenteilePoints] >= 200)
   			{
   			    x = 440;
   			}
   			else if(Spieler[playerid][pWaffenteilePoints] >= 80)
   			{
   			    x = 200;
   			}
   			else if(Spieler[playerid][pWaffenteilePoints] >= 0)
   			{
   			    x = 80;
   			}
		}
        case 6://Samen Spice
		{
            if(Spieler[playerid][pSpiceSamenPoints] >= 3500)
   			{
   			    x = 5000;
   			}
   			else if(Spieler[playerid][pSpiceSamenPoints] >= 2500)
   			{
   			    x = 3500;
   			}
   			else if(Spieler[playerid][pSpiceSamenPoints] >= 1500)
   			{
   			    x = 2500;
   			}
   			else if(Spieler[playerid][pSpiceSamenPoints] >= 500)
   			{
   			    x = 1500;
   			}
   			else if(Spieler[playerid][pSpiceSamenPoints] >= 0)
   			{
   			    x = 500;
   			}
		}
        case 7://Pilot
		{
            if(Spieler[playerid][pPilotPoints] >= 300)
   			{
   			    x = 300;
   			}
   			else if(Spieler[playerid][pPilotPoints] >= 150)
   			{
   			    x = 300;
   			}
   			else if(Spieler[playerid][pPilotPoints] >= 100)
   			{
   			    x = 150;
   			}
   			else if(Spieler[playerid][pPilotPoints] >= 25)
   			{
   			    x = 100;
   			}
   			else if(Spieler[playerid][pPilotPoints] >= 0)
   			{
   			    x = 25;
   			}
		}
		default://kein skill
	    {
	        if(Spieler[playerid][pKillsGangFight] >= 1000)
   			{
   			    x = 1000;
   			}
   			else if(Spieler[playerid][pKillsGangFight] >= 880)
   			{
   			    x = 1000;
   			}
   			else if(Spieler[playerid][pKillsGangFight] >= 620)
   			{
   			    x = 880;
   			}
   			else if(Spieler[playerid][pKillsGangFight] >= 560)
   			{
   			    x = 620;
   			}
   			else if(Spieler[playerid][pKillsGangFight] >= 430)
   			{
   			    x = 560;
   			}
   			else if(Spieler[playerid][pKillsGangFight] >= 260)
   			{
   			    x = 430;
   			}
   			else if(Spieler[playerid][pKillsGangFight] >= 130)
   			{
   			    x = 260;
   			}
   			else if(Spieler[playerid][pKillsGangFight] >= 60)
   			{
   			    x = 130;
   			}
   			else if(Spieler[playerid][pKillsGangFight] >= 20)
   			{
   			    x = 60;
   			}
   			else if(Spieler[playerid][pKillsGangFight] >= 0)
   			{
   			    x = 20;
   			}
		}
	}
	return x;
}

stock PKillstreak(playerid, killerid) {
    new message[128];
    
    Streak[playerid] = 0;
    Streak[killerid] ++;
    
    if(IsPlayerConnected(killerid)) {
	    switch (Streak[killerid]) {
		    case 3: {
		    	format(message, sizeof(message), "[PAINTBALL] {FFFFFF}%s hat eine 3er-Killstreak erreicht! Seine HP stiegen auf 130.", GetName(killerid));
		   		SendPaintballMessage(COLOR_ORANGE, message);
		     	SetPlayerHealth(killerid, 130);
			}
		 	case 6: {
		  		format(message, sizeof(message), "[PAINTBALL] {FFFFFF}%s hat eine 6er-Killstreak erreicht! Seine HP stiegen auf 160.", GetName(killerid));
		  		SendPaintballMessage(COLOR_ORANGE, message);
		    	SetPlayerHealth(killerid, 160);
		  	}
		   	case 9: {
		    	format(message, sizeof(message), "[PAINTBALL] {FFFFFF}%s hat eine 9er-Killstreak erreicht! Seine HP stiegen auf 190.", GetName(killerid));
		     	SendPaintballMessage(COLOR_ORANGE, message);
		      	SetPlayerHealth(killerid, 190);
		   	}
		    case 12: {
		    	format(message, sizeof(message), "[PAINTBALL] {FFFFFF}%s hat eine 12er-Killstreak erreicht! Seine HP stiegen auf 220.", GetName(killerid));
		     	SendPaintballMessage(COLOR_ORANGE, message);
		      	SetPlayerHealth(killerid, 220);
		   	}
		   	case 15: {
		    	format(message, sizeof(message), "[PAINTBALL] {FFFFFF}%s hat eine 15er-Killstreak erreicht! Seine HP stiegen auf 250.", GetName(killerid));
		     	SendPaintballMessage(COLOR_ORANGE, message);
		      	SetPlayerHealth(killerid, 250);
		   	}
		    case 18: {
		    	format(message, sizeof(message), "[PAINTBALL] {FFFFFF}%s hat eine 18er-Killstreak erreicht! Seine HP stiegen auf 280.", GetName(killerid));
		     	SendPaintballMessage(COLOR_ORANGE, message);
		      	SetPlayerHealth(killerid, 280);
		   	}
		   	case 21: {
				format(message, sizeof(message), "[PAINTBALL] {FFFFFF}%s hat eine 21er-Killstreak erreicht! Seine HP stiegen auf 310.", GetName(killerid));
		  		SendPaintballMessage(COLOR_ORANGE, message);
				SetPlayerHealth(killerid, 310);
		  	}
		   	case 24: {
				format(message, sizeof(message), "[PAINTBALL] {FFFFFF}%s hat eine 24er-Killstreak erreicht! Seine HP stiegen auf 340.", GetName(killerid));
		  		SendPaintballMessage(COLOR_ORANGE, message);
				SetPlayerHealth(killerid, 340);
		  	}
		   	case 27: {
				format(message, sizeof(message), "[PAINTBALL] {FFFFFF}%s hat eine 27er-Killstreak erreicht! Seine HP stiegen auf 370.", GetName(killerid));
		  		SendPaintballMessage(COLOR_ORANGE, message);
				SetPlayerHealth(killerid, 370);
		  	}
		   	case 30: {
				format(message, sizeof(message), "[PAINTBALL] {FFFFFF}%s hat eine 30er-Killstreak erreicht! Seine HP stiegen auf 400.", GetName(killerid));
		  		SendPaintballMessage(COLOR_ORANGE, message);
				SetPlayerHealth(killerid, 400);
		  	}
	   	}
	}
	return 1;
}

stock CreateRoadblock(Object,Float:x,Float:y,Float:z,Float:Angle)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
    {
        if(Roadblocks[i][sCreated] == 0)
        {
            Roadblocks[i][sCreated] = 1;
            Roadblocks[i][sX] = x;
            Roadblocks[i][sY] = y;
            Roadblocks[i][sZ] = z;
            Roadblocks[i][sObject] = CreateDynamicObject(Object, x, y, z, 0, 0, Angle);
            return 1;
        }
    }
    return 0;
}

stock DeleteAllRoadblocks(playerid)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 100, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
        {
            if(Roadblocks[i][sCreated] == 1)
            {
                Roadblocks[i][sCreated] = 0;
                Roadblocks[i][sX] = 0.0;
                Roadblocks[i][sY] = 0.0;
                Roadblocks[i][sZ] = 0.0;
                DestroyDynamicObject(Roadblocks[i][sObject]);
            }
        }
    }
    return 0;
}

stock DeleteClosestRoadblock(playerid)
{
    for(new i = 0; i < sizeof(Roadblocks); i++)
    {
        if(IsPlayerInRangeOfPoint(playerid, 5.0, Roadblocks[i][sX], Roadblocks[i][sY], Roadblocks[i][sZ]))
        {
            if(Roadblocks[i][sCreated] == 1)
            {
                Roadblocks[i][sCreated] = 0;
                Roadblocks[i][sX] = 0.0;
                Roadblocks[i][sY] = 0.0;
                Roadblocks[i][sZ] = 0.0;
                DestroyDynamicObject(Roadblocks[i][sObject]);
                return 1;
            }
        }
    }
    return 0;
}

stock GetXYBehindOfVehicle(vehicleid, &Float:x, &Float:y, Float:distance)
{
    new
        Float:a;
    GetVehiclePos( vehicleid, x, y, a );
    GetVehicleZAngle( vehicleid, a );
    x += ( distance * floatsin( -a+180, degrees ));
    y += ( distance * floatcos( -a+180, degrees ));
}

stock GetRankName(frakID, rank)
{
	new string[32];
	switch(rank)
	{
	    case 0: format(string, sizeof(string), fRang[frakID][fRangName0]);
		case 1: format(string, sizeof(string), fRang[frakID][fRangName1]);
		case 2: format(string, sizeof(string), fRang[frakID][fRangName2]);
		case 3: format(string, sizeof(string), fRang[frakID][fRangName3]);
		case 4: format(string, sizeof(string), fRang[frakID][fRangName4]);
		case 5: format(string, sizeof(string), fRang[frakID][fRangName5]);
		case 6: format(string, sizeof(string), fRang[frakID][fRangName6]);
	}
	return string;
}


/*stock CheckPlayerSpice(playerid,menge)
{
    new hausSpice = Spieler[playerid][pHausSafeboxSpice],
    sSpice = Spieler[playerid][pSafeSpice],
    handSpice = Spieler[playerid][pSpice],
    kofferSpice = g_Koffer[playerid][K_iSpice];
    if(hausSpice+sSpice+handSpice+kofferSpice+menge > 3000) return 1;
    else return 0;
}*/


stock IsEnemyInZone(playerid) {
    if (IsGangInFight(Spieler[playerid][pFraktion])) {
        new playerzone = GetPlayerGangZone(playerid);
        new bool:isGebiet = false;

        if (playerzone != -1) {
            if (g_GangZone[playerzone][GZ_iStatus] == 1) {
                if (Spieler[playerid][pFraktion] == g_GangZone[playerzone][GZ_iAttacker]) {
                    foreach(new i : Player) {
                        if (IsPlayerConnected(i) && gPlayerLogged[i]) {
                            if (IsPlayerNPC(i)) continue;  
                            if (Spieler[i][pFraktion] == g_GangZone[playerzone][GZ_iOwner]) {
                                new enemyzone = GetPlayerGangZone(i);
                                if (playerzone == enemyzone) {
                                    isGebiet = true;
                                }
                            }
                        }
                    }
                } else if (Spieler[playerid][pFraktion] == g_GangZone[playerzone][GZ_iOwner]) {
                    foreach(new i : Player) {
                        if (IsPlayerConnected(i) && gPlayerLogged[i]) {
                            if (IsPlayerNPC(i)) continue;  
                            if (Spieler[i][pFraktion] == g_GangZone[playerzone][GZ_iAttacker]) {
                                new enemyzone = GetPlayerGangZone(i);
                                if (playerzone == enemyzone) {
                                    isGebiet = true;
                                }
                            }
                        }
                    }
                }
            }
        }

        if(isGebiet == true) {
            SendClientMessage(playerid, COLOR_DARKRED, "[GANGFIGHT] Es befinden sich noch Gegner im Gebiet!");
            return 1;
        } 
    } else if (HasBizfight(Spieler[playerid][pFraktion])) {
        new bool:isBiz = false;

        if (InBiz[playerid] != 0) {
            foreach(new i : Player) {
                if (IsPlayerConnected(i) && gPlayerLogged[i]) {
                    if (IsPlayerNPC(i)) continue;  
                    if (InBiz[i] == InBiz[playerid] && Spieler[i][pFraktion] != Spieler[playerid][pFraktion]) {
                        isBiz = true;
                    }
                }
            }
        }

        if(isBiz == true) {
            SendClientMessage(playerid, COLOR_DARKRED, "[GANGFIGHT] Es befinden sich noch Gegner im Biz!");
            return 1;
        } 

    }
    return 0;
}
stock ClearChat(playerid)
{
	for(new i = 0; i < 50; i++) SendClientMessage(playerid, COLOR_WHITE,"");
	return 1;
}
